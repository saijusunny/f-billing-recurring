from ast import pattern
from calendar import c
from cgitb import enable, text
from distutils import command
from itertools import count
from pydoc import describe
from secrets import choice
from sqlite3 import enable_callback_tracebacks
import string
from tkinter import *
from tkinter import messagebox
from tkinter import ttk
from tkinter.font import BOLD
from urllib.parse import parse_qs
from xml.dom.minidom import Entity
from PIL import ImageTk, Image, ImageFile
from matplotlib.font_manager import json_dump
from numpy import choose, empty, place
import pandas as pd
from tkinter.messagebox import showinfo
import tkinter.scrolledtext as scrolledtext
from tkinter.filedialog import askopenfilename
import os
import webbrowser
from pip import main
from tkcalendar import Calendar
from tkcalendar import DateEntry
from datetime import date
from tkinter import filedialog
import subprocess
import mysql.connector
import io
from openpyxl.workbook import Workbook
from openpyxl import load_workbook
import shutil
import csv
import json
from tkinter import font,colorchooser
from tkinter import font as tkFont
from _tkinter import TclError
from tkinter.scrolledtext import ScrolledText
##########################saiju##############
import matplotlib.pyplot as plt
from pylab import plot, show, xlabel, ylabel
from matplotlib.widgets import Cursor
from dateutil.relativedelta import relativedelta
import pendulum
import tkinter as tk

from pathlib import Path
import pandas as pd
from tkinter import messagebox
from tkinter import *
from docx import Document
from fpdf import FPDF
import os
import sys
from PyPDF2 import PdfFileWriter, PdfFileReader
import pdfkit
from email.mime.base import MIMEBase
from email.mime.image import MIMEImage
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
import smtplib
from email import encoders

import win32api
import win32print
from tkinter import filedialog
from pyautogui import alert
import os
import tempfile

from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg

from tkinter import font as tkFont
from tkinter import TclError
from textwrap import wrap
import PIL.Image
from PIL import ImageGrab
from PIL import ImageTk, Image, ImageFile
import PIL.Image
from datetime import date,datetime, timedelta
import re


fbilldb = mysql.connector.connect(
    host="localhost", user="root", password="", database="fbilling", port="3306"
)
fbcursor = fbilldb.cursor(buffered=True)

ImageFile.LOAD_TRUNCATED_IMAGES = True

def reset():
  global root
  root.destroy()


# root.title("F-Billing Revolution 2022(FREE version) | Company database:fbillingdb | User:Administrator")
def log():
    global user_name1
    user_name1=username1.get()
    passwd1=password1.get()
    if user_name1=="" or passwd1=="":
        Label(text='Plz enter both username and password',fg='red').place(x=85,y=260)
    else:
        sql='SELECT * FROM users WHERE username=%s AND password=%s'
        val=(user_name1,passwd1,)
        fbcursor.execute(sql,val)
        if fbcursor.fetchone()is not None:
            mainpage()
            if user_name1 != "adminstator":
              tab06.destroy()
            else:
              pass
            root.iconify()
        else:
            messagebox.showinfo('Acess denied','Username Or Password Wrong')

  
sql = "select * from users"
fbcursor.execute(sql)
user_log = fbcursor.fetchall()
if not user_log:
  def lo():
    mainpage()
  root=Tk()
  root.geometry("500x250")
  root.resizable(False, False)
  root.eval('tk::PlaceWindow . center')
  Label(text='Wellocome to F-Billing Revolution 2022',font='arial 13 bold').place(x=100,y=40)
  submitbtn1=Button(text='OPEN NOW', width=20,height=2,command=lo,activeforeground="white",activebackground="black",font='arial 8 bold').place(x=165,y=100)             
else:
    root=Tk()
    root.geometry("500x200")
    root.resizable(False, False)
    root.eval('tk::PlaceWindow . center')
    root.title("F-Billing Revolution 2022")
    p1 = PhotoImage(file = 'images/fbicon.png')
    root.iconphoto(False,p1)
    username1=StringVar()
    password1=StringVar()

    Label(text='Login F-Billing Revolution 2022',font='arial 13 bold').place(x=120,y=15)
    
  
    sql = "select username from users"
    fbcursor.execute(sql)
    user_log_name = fbcursor.fetchall()
    uss1=Label(text='Username').place(x=120,y=65)
    ee1 = ttk.Combobox(textvariable=username1)
    ee1.place(x=220,y=65)
    ee1["values"] = user_log_name

    pss1=Label(text='Password').place(x=120,y=105)
    ee2=Entry(textvariable=password1,show='*',width=23).place(x=220,y=105)
    
    submitbtn1=Button(text='Login', width=15,command=log,activeforeground="white",
                   activebackground="black").place(x=250,y=150)
    
  
invoices= PhotoImage(file="images/invoice.png")
orders = PhotoImage(file="images/order.png")
estimates = PhotoImage(file="images/estimate.png")
recurring = PhotoImage(file="images/recurring.png")
purchase = PhotoImage(file="images/purchase.png")
expenses = PhotoImage(file="images/expense.png")
customer = PhotoImage(file="images/customer.png")
product = PhotoImage(file="images/package.png")
reports = PhotoImage(file="images/report.png")
setting = PhotoImage(file="images/setting.png")
tick = PhotoImage(file="images/check.png")
warnin = PhotoImage(file="images/sign_warning.png")
cancel = PhotoImage(file="images/close.png")
saves = PhotoImage(file="images/save.png")
folder = PhotoImage(file="images/folder-black.png")
photo11 = PhotoImage(file = "images/invoice-pvt.png")
customer = PhotoImage(file="images/customer.png")
smslog = PhotoImage(file = "images/smslog.png")
video = PhotoImage(file = "images/video.png")
mark1 = PhotoImage(file="images/mark.png")
mark2 = PhotoImage(file="images/mark2.png")
photo10 = PhotoImage(file = "images/text-message.png")
addnew = PhotoImage(file="images/plus.png")
delete = PhotoImage(file="images/delete_E.png")

selectall = PhotoImage(file="images/table_select_all.png")
cut = PhotoImage(file="images/cut.png")
copy = PhotoImage(file="images/copy.png")
paste = PhotoImage(file="images/paste.png")

undo = PhotoImage(file="images/undo.png")
redo = PhotoImage(file="images/redo.png")
bold = PhotoImage(file="images/bold.png")

italics = PhotoImage(file="images/italics.png")
underline = PhotoImage(file="images/underline.png")
left = PhotoImage(file="images/left.png")
  
right = PhotoImage(file="images/right.png")
center = PhotoImage(file="images/center.png")
hyperlink = PhotoImage(file="images/hyperlink.png")
color = PhotoImage(file="images/font_color.png")
remove = PhotoImage(file="images/eraser.png")
  
  
photo = PhotoImage(file = "images/plus.png")
photo1 = PhotoImage(file = "images/edit.png")
photo2 = PhotoImage(file = "images/delete_E.png")
photo3 = PhotoImage(file = "images/export-file.png")
photo4 = PhotoImage(file = "images/seo.png")
photo5 = PhotoImage(file = "images/printer.png")
photo6 = PhotoImage(file = "images/gmail.png")
photo7 = PhotoImage(file = "images/priewok.png")
photo8 = PhotoImage(file = "images/refresh_E.png")
photo9 = PhotoImage(file = "images/sum.png")
photo10 = PhotoImage(file = "images/text-message.png")
color = PhotoImage(file="images/font_color.png") 

################ expenses button images ####################

imgr1 =PIL.Image.open("images/refresh.png")
exprefreshIcon=ImageTk.PhotoImage(imgr1)
imgr2 = PIL.Image.open("images/search-icon.png")
expsearchIcon=ImageTk.PhotoImage(imgr2)
imgr3 = PIL.Image.open("images/delete.png")
expdeleteIcon=ImageTk.PhotoImage(imgr3)

imgr4 = PIL.Image.open("images/edit.png")
expeditIcon=ImageTk.PhotoImage(imgr4)

imgr5 = PIL.Image.open("images/plus.png")
expenseIcon=ImageTk.PhotoImage(imgr5)

################ Product service button images ####################
imgr6 = PIL.Image.open("images/refresh.png")
prorefreshIcon=ImageTk.PhotoImage(imgr6)

imgr7 = PIL.Image.open("images/export-file.png")
proexportIcon=ImageTk.PhotoImage(imgr7)

imgr8 = PIL.Image.open("images/import.png")
proimportIcon=ImageTk.PhotoImage(imgr8)

imgr9= PIL.Image.open("images/research.png")
prosearchIcon=ImageTk.PhotoImage(imgr9)

imgr10 = PIL.Image.open("images/delete.png")
prodeleteIcon=ImageTk.PhotoImage(imgr10)

imgr11 = PIL.Image.open("images/plus.png")
productIcon=ImageTk.PhotoImage(imgr11)

imgr12 = PIL.Image.open("images/edit.png")
proeditIcon=ImageTk.PhotoImage(imgr12)
# customer Module Image
ad_usr = PIL.Image.open("images/user_add.png")
cus_addcustomerIcon=ImageTk.PhotoImage(ad_usr)

usr_edit = PIL.Image.open("images/user_edit.png")
cus_editcustomerIcon=ImageTk.PhotoImage(usr_edit)

usr_del = PIL.Image.open("images/user_delete.png")
cus_deletecustomerIcon=ImageTk.PhotoImage(usr_del)

usr_pre = PIL.Image.open("images/priewok.png")
cus_previewinvoiceIcon=ImageTk.PhotoImage(usr_pre)

usr_print = PIL.Image.open("images/printer.png")
cus_printinvoiceIcon=ImageTk.PhotoImage(usr_print)

usr_em = PIL.Image.open("images/gmail.png")
cus_emailinviceIcon=ImageTk.PhotoImage(usr_em)

usr_sms = PIL.Image.open("images/text-message.png")
cus_smsIcon=ImageTk.PhotoImage(usr_sms)

usr_imp = PIL.Image.open("images/import.png")
cus_importcustomerIcon=ImageTk.PhotoImage(usr_imp)

usr_exp = PIL.Image.open("images/export.png")
cus_exportcustomerIcon=ImageTk.PhotoImage(usr_exp)

usr_srh = PIL.Image.open("images/search-icon.png")
cus_customersearchIcon=ImageTk.PhotoImage(usr_srh)

usr_rfs= PIL.Image.open("images/refresh.png")
cus_refreshcustomerIcon=ImageTk.PhotoImage(usr_rfs)




def mainpage():
  root.iconify()
  main = Toplevel()
  main.geometry("1360x730")
  p1 = PhotoImage(file = 'images/fbicon.png')
  main.iconphoto(False, p1)
  main.title("F-Billing Revolution 2022(FREE version) | Company database:fbillingdb | User:Administrator")
  s = ttk.Style()
  s.theme_use('default')
  s.configure('TNotebook.Tab', background="#999999", width=20, padding=10)
  tabControl = ttk.Notebook(main)
  tab1 = ttk.Frame(tabControl)
  tab2 = ttk.Frame(tabControl)
  tab3=  ttk.Frame(tabControl)
  tab4 = ttk.Frame(tabControl)
  tab5 = ttk.Frame(tabControl)
  tab6=  ttk.Frame(tabControl)
  tab7 = ttk.Frame(tabControl)
  tab8 = ttk.Frame(tabControl)
  tab9 =  ttk.Frame(tabControl)
  tab10=  ttk.Frame(tabControl)
  tabControl.add(tab1,image=invoices,compound = LEFT, text ='Invoices',)
  tabControl.add(tab2,image=orders,compound = LEFT, text ='Orders')
  tabControl.add(tab3,image=estimates,compound = LEFT, text ='Estimates')
  tabControl.add(tab4,image=recurring,compound = LEFT, text ='Recurring')
  tabControl.add(tab5,image=purchase,compound = LEFT, text ='Purchase Orders') 
  tabControl.add(tab6,image=expenses,compound = LEFT, text ='Expenses')
  tabControl.add(tab7,image=customer,compound = LEFT, text ='Customers')
  tabControl.add(tab8,image=product,compound = LEFT, text ='Product/Services')
  tabControl.add(tab9,image=reports,compound = LEFT, text ='Report')
  tabControl.add(tab10,image=setting,compound = LEFT, text ='Settings')
  tabControl.pack(expand = 1, fill ="both")
  
  def check_empty() :
       if entry.get():
           pass     #your function where you want to jump
       else:
          messagebox.showinfo("Information", "Required entry")

  ###########################    Expense Module   ##############################
  
  def add_expense():
      def upload_file():
        import shutil
        global filename,img, b2
        f_types =[('Png files','*.png'),('Jpg Files', '*.jpg')]
        filename = filedialog.askopenfilename(filetypes=f_types)
        print(filename, 'name')
        #import pdb; pdb.set_trace()
        shutil.copyfile(filename, os.getcwd()+'/images/'+filename.split('/')[-1])
        image = Image.open(filename)
        resize_image = image.resize((120, 120))
        img = ImageTk.PhotoImage(resize_image)
        b2 = Label(expenselabelframe,image=img, height=120, width=120)
        b2.place(x=450, y=240)
      
      global filename
      filename = ""
      def insert_expenses():# insert expenses data
        expense_amount = expamountval.get()
        date = expdate.get_date()
        vendor = vn.get()
        catagory = cn.get()
        description = expdescriptionentry.get()
        staff_members = expstaffentry.get()
        taxable = checkvarStatus4.get()
        customer = cus.get()
        id_sku = id_sku1.get()
        notes = exptxt.get('1.0', 'end-1c')
        rebill_amount = rebill_amoun.get()
        rebillab = rebill.get()
        recipt = imge.get()
        assign_cus = other.get()
        tax2 = tax2expstr.get()
    
        if filename == "":
          sql='INSERT INTO Expenses (expense_amount,date,vendor,catagory,description,staff_members,taxable,    customer,id_sku,notes,rebill_amount,rebillable,receipt,assign_customer,tax2) VALUES(%s,%s,%s,%s,%s,%s,%s,%s,  %s,  %s,%s,%s,%s,%s,%s)' #adding values into db
          val=(expense_amount,date,vendor,catagory,description,staff_members,taxable,customer,id_sku,notes,    rebill_amount,rebillab,recipt,assign_cus,tax2)
          fbcursor.execute(sql,val)
          fbilldb.commit()
        else:
          shutil.copyfile(filename, os.getcwd()+'/images/'+filename.split('/')[-1])
          sql='INSERT INTO Expenses (expense_amount,date,vendor,catagory,description,staff_members,taxable,customer,id_sku,notes,rebill_amount,image,rebillable,receipt,assign_customer,tax2) VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)' #adding values into db
          val=(expense_amount,date,vendor,catagory,description,staff_members,taxable,customer,id_sku,notes,  rebill_amount,filename.split('/')[-1],rebillab,recipt,assign_cus,tax2)
          fbcursor.execute(sql,val)
          fbilldb.commit()
        for record in exp_tree.get_children():
          exp_tree.delete(record)
        count=0
        fbcursor.execute('SELECT * FROM Expenses;')
        for i in fbcursor:
          if True:
            if i[13] == '1':
              e = 'Yes'
            else:
              e = 'No'
            exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[10], i[4], i[6], i[5], i[8], i[7], e , i[14], i[11],i[16],i[3]))
          count += 1
        window.destroy()


    

     
  
      window = Toplevel()  
      
      window.title("Add new Expense")
      window.resizable(0,0)
      p2 = PhotoImage(file = 'images/fbicon.png')
      window.iconphoto(False, p1)
  
      window.geometry("618x449+380+167")
  
      innerexpFrame = Frame(window, relief=GROOVE)
      innerexpFrame.pack(side="top",fill=BOTH)
  
      expenselabelframe = LabelFrame(innerexpFrame,text="Expense Cost",width=580,height=400)
      expenselabelframe.pack(side="top",fill=BOTH,padx=10)
  
      def number_expacount(S,d):
        sql = "select decimalseperator from company"
        fbcursor.execute(sql)
        deci_sgin = fbcursor.fetchone()
        if deci_sgin[0] == '.':
          if d == '1': #insert
            if not S in ['.','0','1','2','3','4','5','6','7','8','9']:
              return False
            return True
        elif deci_sgin[0] == ',':
          if d == '1': #insert
            if not S in ['0','1','2','3','4','5','6','7','8','9',',']:
              return False
            return True
        if d.isdigit():
          return True
        
        
  
      def expaonclick(event):
        sql = "select currencysign,currsignplace from company"
        fbcursor.execute(sql)
        currsymb = fbcursor.fetchone()
        if not currsymb:
          pass
        else:
          if currsymb[1] == "before amount":
            expamountentry.insert (0, currsymb[0])
            expamountnum = (expenselabelframe.register(number_expacount),'%S','%d')
            expamountentry.config(validate='key',validatecommand=(expamountnum),justify='left')
          elif currsymb[1] == "before amount with space":
            expamountentry.insert (0, currsymb[0] + " ")
            expamountnum = (expenselabelframe.register(number_expacount),'%S','%d')
            expamountentry.config(validate='key',validatecommand=(expamountnum),justify='left')
          elif currsymb[1] == "after amount":
            expamountval.set(currsymb[0])
            expamountnum = (expenselabelframe.register(number_expacount),'%S','%d')
            expamountentry.config(validate='key',validatecommand=(expamountnum),justify='right')
          elif currsymb[1] == "after amount with space":
            expamountval.set(" " + currsymb[0])
            expamountnum = (expenselabelframe.register(number_expacount),'%S','%d')
            expamountentry.config(validate='key',validatecommand=(expamountnum),justify='right')
          else:
            pass
          
  
  
  
      expamountval = StringVar(expenselabelframe,)
      expamount=Label(expenselabelframe,text="Expense amount:",pady=10,padx=10)
      expamount.place(x=12,y=0)
      expamountentry = Entry(expenselabelframe,width=15,textvariable=expamountval)
    
      expamountentry.bind("<ButtonRelease>", expaonclick)
      expamountentry.place(x=130,y=10)
  
      
  
  
  
  
      lbl_date=Label(expenselabelframe,text=" Date :",fg='black')
      lbl_date.place(x=380,y=10)
      
      expdate=DateEntry(expenselabelframe)
      expdate.place(x=450,y=12)

      sql = "select dateformat from company"
      fbcursor.execute(sql)
      date_for = fbcursor.fetchone()
     
      if not date_for:
        pass
      else:
        if date_for[0] == "mm-dd-yyyy":
          expdate._set_text(expdate._date.strftime('%m-%d-%Y'))
        elif date_for[0] == "dd-mm-yyyy":
          expdate._set_text(expdate._date.strftime('%d-%m-%Y'))
        elif date_for[0] == "yyy.mm.dd":
          expdate._set_text(expdate._date.strftime('%Y.%m.%d'))
        elif date_for[0] == "mm/dd/yyyy":
          expdate._set_text(expdate._date.strftime('%m/%d/%Y'))
        elif date_for[0] == "dd/mm/yyy":
          expdate._set_text(expdate._date.strftime('%d/%m/%Y'))
        elif date_for[0] == "dd.mm.yyyy":
          expdate._set_text(expdate._date.strftime('%d.%m.%Y'))
        elif date_for[0] == "yyyy/mm/dd":
          expdate._set_text(expdate._date.strftime('%Y/%m/%d'))
        else:
          pass
  
      sql = "select businessname from Customer where customertype =%s or customertype =%s"
      val = ('vendor','both(client,vendor)')
      fbcursor.execute(sql,val)
      pdata = fbcursor.fetchall()
  
      vendor1=Label(expenselabelframe,text="Vendor:",pady=5,padx=10)
      vendor1.place(x=20,y=40)
      vn = StringVar() 
      vendor = ttk.Combobox(expenselabelframe, width = 27, textvariable = vn ) 
        
      # Adding combobox drop down list 
      vendor['values'] = pdata
        
      vendor.place(x=130,y=45) 
      # vendor.current(0)
  
      categoryexp1=Label(expenselabelframe,text="Category:",pady=5,padx=10)
      categoryexp1.place(x=330,y=40)
      cn = StringVar() 
      categorydrop = ttk.Combobox(expenselabelframe, width = 22, textvariable = cn ) 
        
      # Adding combobox drop down list 
      categorydrop['values'] = ('Default' ) 
        
      categorydrop.place(x=400,y=45) 
      categorydrop.current(0)
  
      
  
      expdescription=Label(expenselabelframe,text="Description:",pady=10,padx=10)
      expdescription.place(x=12,y=70)
      expdescriptionentry = Entry(expenselabelframe,width=70)
      expdescriptionentry.place(x=130,y=81)
  
      expstafftval = StringVar(expenselabelframe, value='Administrator')
      expstaff=Label(expenselabelframe,text="Staff member:",pady=10,padx=10)
      expstaff.place(x=12,y=108)
      expstaffentry = Entry(expenselabelframe,width=30,textvariable=expstafftval)
      expstaffentry.place(x=130,y=118)
  
      sql = "select taxtype from company"
      fbcursor.execute(sql)
      taxchoose = fbcursor.fetchone()
      
      
      
      checkvarStatus4=BooleanVar()
    
      Button4 = Checkbutton(expenselabelframe,variable = checkvarStatus4, 
                        text="Taxable Tax1 rate", 
                        onvalue ='1' ,
                        offvalue = '0',
                       )
      
      tax2expstr = BooleanVar()
      tax2exp = Checkbutton(expenselabelframe,variable = tax2expstr, 
                        text="Taxable Tax2 rate", 
                        onvalue ='1' ,
                        offvalue = '0',
                        )
  
      if not taxchoose:
        pass
      elif taxchoose[0] == '1':
        Button4.place_forget()
        tax2exp.place_forget()
      elif taxchoose[0] == '2':
        Button4.place(x=400,y=125)
        tax2exp.place_forget()
      elif taxchoose[0] == '3':
        tax2exp.place(x=400,y=105)
        Button4.place(x=400,y=125)
  
      sql = "select businessname from Customer"
      fbcursor.execute(sql,)
      cusdata = fbcursor.fetchall()
      print(cusdata)
  
      def toggle():
        if other.get():
          ent.place(x=45,y=180)
          button51.place(x=250, y=160)
        else:
          ent.place_forget()
          button51.place_forget()
          button51.deselect()
          ent.delete(0, END)
          id_skuentry.delete(0,END)
          rebill_entry.delete(0,END)
          id_skulabel.place_forget()
          id_skuentry.place_forget()
          rebill_label.place_forget()
          rebill_entry.place_forget()
      other = BooleanVar()
      button5 = Checkbutton(expenselabelframe, text="Assign to customer (optional)", variable=other, 
      command=toggle)
      button5.place(x=40, y=160)
      cus = StringVar()
      ent=ttk.Combobox(expenselabelframe,width=30,textvariable=cus,values=cusdata)
  
      ent.delete(0,'end')
      def toggle():
        id_skuentry.delete(0, END)
        rebill_entry.delete(0, END)
        if rebill.get():
          id_skulabel.place(x=375,y=160)
          id_skuentry.place(x=420,y=160)
          rebill_label.place(x=335,y=180)
          rebill_entry.place(x=420, y=180)
        else:
          id_skulabel.place_forget()
          id_skuentry.place_forget()
          rebill_label.place_forget()
          rebill_entry.place_forget()
      rebill = BooleanVar()

      sql = "select * from users"
      fbcursor.execute(sql)
      rebill_check_user = fbcursor.fetchall()
      
      if not rebill_check_user:
        button51 = Checkbutton(expenselabelframe, text="Rebillable" ,variable=rebill, command=toggle,onvalue   ='Yes' ,offvalue = 'NO')
      else:
        try:
          user_namech = username1.get()
          sql = "select rebill_exprense from users where username = %s"
          val = (user_namech,)
          fbcursor.execute(sql,val)
          disable_rebillabe_exp = fbcursor.fetchone()
          if disable_rebillabe_exp[0] == 1:
            button51 = Checkbutton(expenselabelframe, text="Rebillable" ,variable=rebill, command=toggle,onvalue   ='Yes' ,offvalue = 'NO')
          else:
            pass
        except:
           button51 = Checkbutton(expenselabelframe, text="Rebillable" ,variable=rebill, command=toggle,onvalue   ='Yes' ,offvalue = 'NO')
      
    
      
      id_sku1 = StringVar()
      id_skulabel=Label(expenselabelframe,text="id_sku:")
      id_skuentry = Entry(expenselabelframe,width=15,textvariable=id_sku1)
    
      def number_rebill_amoun(S,d):
        sql = "select decimalseperator from company"
        fbcursor.execute(sql)
        deci_sgin = fbcursor.fetchone()
        if deci_sgin[0] == '.':
          if d == '1': #insert
            if not S in ['.','0','1','2','3','4','5','6','7','8','9']:
              return False
            return True
        elif deci_sgin[0] == ',':
          if d == '1': #insert
            if not S in ['0','1','2','3','4','5','6','7','8','9',',']:
              return False
            return True
        if d.isdigit():
          return True
        
        
        
  
      def rebillamoonclick(event):
        sql = "select currencysign,currsignplace from company"
        fbcursor.execute(sql)
        currsymb = fbcursor.fetchone()
        if currsymb[1] == "before amount":
          rebill_entry.insert (0, currsymb[0])
          rebi_amo = (expenselabelframe.register(number_rebill_amoun),'%S','%d')
          rebill_entry.config(validate='key',validatecommand=(rebi_amo),justify='left')
        elif currsymb[1] == "before amount with space":
          rebill_entry.insert (0, currsymb[0] + " ")
          rebi_amo = (expenselabelframe.register(number_rebill_amoun),'%S','%d')
          rebill_entry.config(validate='key',validatecommand=(rebi_amo),justify='left')
        elif currsymb[1] == "after amount":
          rebill_amoun.set(currsymb[0])
          rebi_amo = (expenselabelframe.register(number_rebill_amoun),'%S','%d')
          rebill_entry.config(validate='key',validatecommand=(rebi_amo),justify='right')
        elif currsymb[1] == "after amount with space":
          rebill_amoun.set(" " + currsymb[0])
          rebi_amo = (expenselabelframe.register(number_rebill_amoun),'%S','%d')
          rebill_entry.config(validate='key',validatecommand=(rebi_amo),justify='right')
  
      rebill_amoun = StringVar()
      rebill_label=Label(expenselabelframe,text="Rebill amount:")
      rebill_entry = Entry(expenselabelframe,width=15,textvariable=rebill_amoun)
      rebill_entry.bind("<ButtonRelease>", rebillamoonclick)
      
  
  
      
      
      def toggle():
        if imge.get():
          browseimg.place(x=40,y=220)
          browsebutton.place(x=350,y=220,height=30,width=50)
          
        else:
          browseimg.place_forget()
          browsebutton.place_forget()
        
      imge = BooleanVar()
      Button6 = Checkbutton(expenselabelframe, text = "Attach receipt image(optional,image will be stored to   the database)",command=toggle,variable=imge)
      Button6.place(x=40, y=200)
      browseimg=Label(expenselabelframe,text="(recommended image type:JPG,size 480x320 pixels) ",bg='#f5f3f2')
      browsebutton=Button(expenselabelframe,text = 'Browse',command=upload_file)
  
  
      exptext1=Label(expenselabelframe,text="Notes",pady=5,padx=10)
      exptext1.place(x=12,y=246)
      exptxt = scrolledtext.ScrolledText(expenselabelframe, undo=True,width=50,height=5)
      exptxt.place(x=22,y=280)
  
      expokButton = Button(window, text ="Ok",image=tick,width=70,compound = LEFT,command=insert_expenses)
      expokButton.place(x=280,y=415)
  
      window.mainloop()
  

  def add_expense_connection():
    sql = "select * from users"
    fbcursor.execute(sql)
    addexp_check_user = fbcursor.fetchall()
    if not addexp_check_user:
      add_expense()
    else:
      try:
        user_namech = username1.get()
        sql = "select create_expense from users where username = %s"
        val = (user_namech,)
        fbcursor.execute(sql,val)
        disable_create_exp = fbcursor.fetchone()
        if disable_create_exp[0] == 1:
          add_expense()
        else:
          messagebox.showerror("user","user does not have permission to perform this action")
      except:
        add_expense()
        
      
      
  
      
    

  

  

########################VIEW/EDIT EXPENSE#######################################################################



  def edit_expense():

    try:
      itemid = exp_tree.item(exp_tree.focus())["values"][0]
      sql = "select * from Expenses where expensesid = %s"
      val = (itemid, )

      fbcursor.execute(sql, val)
      psdata = fbcursor.fetchone()
      def upload_file1():
        global filename,img, b1
        f_types =[('Png files','*.png'),('Jpg Files', '*.jpg')]
        filename = filedialog.askopenfilename(filetypes=f_types)
        #import pdb; pdb.set_trace()
        shutil.copyfile(filename, os.getcwd()+'/images/'+filename.split('/')[-1])
        image = Image.open(filename)
        resize_image = image.resize((120, 120))
        img = ImageTk.PhotoImage(resize_image)
        b1 = Label(expenselabelframe,image=img, height=120, width=120)
        b1.place(x=450, y=240)

      global filename
      filename = ""
      def update_expenses():# Storing values into db (user)
        itemid = exp_tree.item(exp_tree.focus())["values"][0]
        expense_amount = expamountval.get()
        date = expdate.get_date()
        vendor = vn.get()
        catagory = cn.get()
        description = expdescriptionentry.get()
        staff_members = expstafftval.get()
        taxable = checkvarStatus4.get()
        customer = cus.get()
        id_sku = id_sku1.get()
        notes = exptxt.get('1.0', 'end-1c')
        rebill_amount = rebill_amoun.get()
        rebillabe = rebill.get()
        assign_cus = other.get()
        recepit = imge.get()
        tax2 = tax2expstr.get()

        itemid1 = exp_tree.item(exp_tree.focus())["values"][0]
        sq = 'select image from Expenses where expensesid = %s'
        va =(itemid1,)
        fbcursor.execute(sq,va)
        up = fbcursor.fetchone()
        # file = shutil.copyfile(filename, os.getcwd()+'/images/'+filename.split('/')[-1])
        if filename == "":
          sql='UPDATE Expenses set expense_amount=%s,date=%s,vendor=%s,catagory=%s,description=%s,    staff_members=%s,taxable=%s,customer=%s,id_sku=%s,notes=%s,rebill_amount=%s,rebillable=%s,assign_customer=%s,receipt=%s,tax2=%s where expensesid=%s'
          val=(expense_amount,date,vendor,catagory,description,staff_members,taxable,customer,id_sku,notes,
          rebill_amount,rebillabe,assign_cus,recepit,tax2,itemid)
          fbcursor.execute(sql,val)
          fbilldb.commit()
        else:
          file = shutil.copyfile(filename, os.getcwd()+'/images/'+filename.split('/')[-1])
          sql='UPDATE Expenses set expense_amount=%s,date=%s,vendor=%s,catagory=%s,description=%s,    staff_members=%s,taxable=%s,customer=%s,id_sku=%s,notes=%s,rebill_amount=%s,image=%s,rebillable=%s,assign_customer=%s,receipt=%s,tax2=%s where expensesid=%s'
          val=(expense_amount,date,vendor,catagory,description,staff_members,taxable,customer,id_sku,notes,
          rebill_amount,filename.split('/')[-1],rebillabe,assign_cus,recepit,tax2,itemid)
          fbcursor.execute(sql,val)
          fbilldb.commit()
        for record in exp_tree.get_children():
            exp_tree.delete(record)
        count=0
        fbcursor.execute('SELECT * FROM Expenses;')
        for i in fbcursor:
            if True:
              if i[13] == '1':
                e = 'Yes'
              else:
                e = 'No'
              exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[10], i[4], i[6], i[5], i[8], i[7], e , i[14], i[11],i[16],i[3]))
            else:
                pass
        count += 1
        window1.destroy()
      
      
      window1 = Toplevel()  
      
      window1.title("Edit Expense")
      p2 = PhotoImage(file = 'images/fbicon.png')
      # recimage= PhotoImage(file= 'images/'+psdata[11])
     
      # image = Image.open(recimage)
      # resize_image = image.resize((120, 120))
      # imga = ImageTk.PhotoImage(resize_image)
      window1.iconphoto(False, p1)
   
      window1.geometry("618x449+380+167")
  
      innerexpFrame = Frame(window1, relief=GROOVE)
      innerexpFrame.pack(side="top",fill=BOTH)
  
      expenselabelframe = LabelFrame(innerexpFrame,text="Expense Cost",width=580,height=400)
      expenselabelframe.pack(side="top",fill=BOTH,padx=10)
  
      def number_expacount(S,d):
        sql = "select decimalseperator from company"
        fbcursor.execute(sql)
        deci_sgin = fbcursor.fetchone()
        if deci_sgin[0] == '.':
          if d == '1': #insert
            if not S in ['.','0','1','2','3','4','5','6','7','8','9']:
              return False
            return True
        elif deci_sgin[0] == ',':
          if d == '1': #insert
            if not S in ['0','1','2','3','4','5','6','7','8','9',',']:
              return False
            return True
        if d.isdigit():
          return True
        
        
  
      def expaonclick(event):
        sql = "select currencysign,currsignplace from company"
        fbcursor.execute(sql)
        currsymb = fbcursor.fetchone()
        if not currsymb:
          pass
        else:
          if currsymb[1] == "before amount":
            expamountentry.delete (0, END)
            expamountentry.insert (0, currsymb[0])
            expamountnum = (expenselabelframe.register(number_expacount),'%S','%d')
            expamountentry.config(validate='key',validatecommand=(expamountnum),justify='left')
          elif currsymb[1] == "before amount with space":
            expamountentry.delete (0, END)
            expamountentry.insert (0, currsymb[0] + " ")
            expamountnum = (expenselabelframe.register(number_expacount),'%S','%d')
            expamountentry.config(validate='key',validatecommand=(expamountnum),justify='left')
          elif currsymb[1] == "after amount":
            expamountentry.delete (0, END)
            expamountval.set(currsymb[0])
            expamountnum = (expenselabelframe.register(number_expacount),'%S','%d')
            expamountentry.config(validate='key',validatecommand=(expamountnum),justify='right')
          elif currsymb[1] == "after amount with space":
            expamountentry.delete (0, END)
            expamountval.set(" " + currsymb[0])
            expamountnum = (expenselabelframe.register(number_expacount),'%S','%d')
            expamountentry.config(validate='key',validatecommand=(expamountnum),justify='right')
          else:
            pass
      expamountval = StringVar()
      expamount=Label(expenselabelframe,text="Expense amount:",pady=10,padx=10)
      expamount.place(x=12,y=0)
      expamountentry = Entry(expenselabelframe,width=15,textvariable=expamountval)
      expamountentry.bind("<ButtonRelease>", expaonclick)
      expamountentry.place(x=130,y=10)
      expamountentry.delete(0,'end')
      expamountentry.insert(0, psdata[3])
  
      lbl_date=Label(expenselabelframe,text=" Date :",fg='black')
      lbl_date.place(x=380,y=10)
      
      
      expdate=DateEntry(expenselabelframe)
      expdate.place(x=450,y=12)
      expdate.delete(0,'end')
      expdate.insert(0, psdata[4])

      sql = "select dateformat from company"
      fbcursor.execute(sql)
      date_for = fbcursor.fetchone()
     
      if not date_for:
        pass
      else:
        if date_for[0] == "mm-dd-yyyy":
          expdate._set_text(expdate._date.strftime('%m-%d-%Y'))
        elif date_for[0] == "dd-mm-yyyy":
          expdate._set_text(expdate._date.strftime('%d-%m-%Y'))
        elif date_for[0] == "yyy.mm.dd":
          expdate._set_text(expdate._date.strftime('%Y.%m.%d'))
        elif date_for[0] == "mm/dd/yyyy":
          expdate._set_text(expdate._date.strftime('%m/%d/%Y'))
        elif date_for[0] == "dd/mm/yyy":
          expdate._set_text(expdate._date.strftime('%d/%m/%Y'))
        elif date_for[0] == "dd.mm.yyyy":
          expdate._set_text(expdate._date.strftime('%d.%m.%Y'))
        elif date_for[0] == "yyyy/mm/dd":
          expdate._set_text(expdate._date.strftime('%Y/%m/%d'))
        else:
          pass
      
      

      sql = "select businessname from Customer where customertype =%s or customertype =%s"
      val = ('vendor','both(client,vendor)')
      fbcursor.execute(sql,val)
      pdat = fbcursor.fetchall()
      vendor1=Label(expenselabelframe,text="Vendor:",pady=5,padx=10)
      vendor1.place(x=20,y=40)
      vn = StringVar() 
      vendor = ttk.Combobox(expenselabelframe, width = 27, textvariable = vn ) 
     
        
      # Adding combobox drop down list 
      vendor['values'] = pdat
        
      vendor.place(x=130,y=45) 
      vendor.delete(0,'end')
      vendor.insert(0, psdata[5]) 
  
      categoryexp1=Label(expenselabelframe,text="Category:",pady=5,padx=10)
      categoryexp1.place(x=330,y=40)
      cn = StringVar() 
      categorydrop = ttk.Combobox(expenselabelframe, width = 22, textvariable = cn ) 
      categorydrop.delete(0,'end')
      categorydrop.insert(0, psdata[6])
   
        
      # Adding combobox drop down list 
      categorydrop['values'] = ('Default') 
        
      categorydrop.place(x=400,y=45)
    
  
      
  
      expdescription=Label(expenselabelframe,text="Description:",pady=10,padx=10)
      expdescription.place(x=12,y=70)
      expdescriptionentry = Entry(expenselabelframe,width=70)
      expdescriptionentry.place(x=130,y=81)
      expdescriptionentry.delete(0,'end')
      expdescriptionentry.insert(0, psdata[7])
  
      expstafftval = StringVar(expenselabelframe, value='Administrator')
      expstaff=Label(expenselabelframe,text="Staff member:",pady=10,padx=10)
      expstaff.place(x=12,y=108)
      expstaffentry = Entry(expenselabelframe,width=30,textvariable=expstafftval)
      expstaffentry.place(x=130,y=118)
      expstaffentry.delete(0,'end')
      expstaffentry.insert(0, psdata[8])


      
      sql = "select taxtype from company"
      fbcursor.execute(sql)
      taxchoose = fbcursor.fetchone()

  
      checkvarStatus4=BooleanVar()
     
      Button4 = Checkbutton(expenselabelframe,variable = checkvarStatus4, 
                        text="Taxable Tax1 rate", 
                        onvalue ='1',
                        offvalue = '0',
                        )
              
      tax2expstr = BooleanVar()
      tax2exp = Checkbutton(expenselabelframe,variable = tax2expstr, 
                        text="Taxable Tax2 rate", 
                        onvalue ='1' ,
                        offvalue = '0',
                        )

      if not taxchoose:
        pass
      elif taxchoose[0] == '1':
        Button4.place_forget()
        tax2exp.place_forget()
      elif taxchoose[0] == '2':
        Button4.place(x=400,y=125)
        tax2exp.place_forget()
      elif taxchoose[0] == '3':
        tax2exp.place(x=400,y=105)
        Button4.place(x=400,y=125)
  
      # Button4.bind("<Button-1>", getBool)
      
      ps = psdata[9]
      if ps == "1":
       Button4.select()
      else:
        Button4.deselect()
      
     
      if psdata[19] == "1":
        tax2exp.select()
      else:
        tax2exp.deselect()
          
      
 
  
      sql = "select businessname from Customer"
      fbcursor.execute(sql,)
      cusdta = fbcursor.fetchall()
      
  
      def toggle():
        if other.get():
          ent.place(x=45,y=180)
          try:
            user_namech = username1.get()
            sql = "select rebill_exprense from users where username = %s"
            val = (user_namech,)
            fbcursor.execute(sql,val)
            disable_rebillabe_exp = fbcursor.fetchone()
            if disable_rebillabe_exp[0] == 1:
              button51.place(x=250, y=160)
            else:
              id_skuentry.place_forget()
              rebill_entry.place_forget()
              button51.place_forget()
          except:
            button51.place(x=250, y=160)
        else:
          button51.deselect()
          ent.place_forget()
          button51.place_forget()
           
          ent.delete(0, END)
          id_skuentry.delete(0,END)
          rebill_entry.delete(0,END)
          id_skulabel.place_forget()
          id_skuentry.place_forget()
          rebill_label.place_forget()
          rebill_entry.place_forget()
      other = BooleanVar()
      button5 = Checkbutton(expenselabelframe, text="Assign to customer (optional)", variable=other, 
      command=toggle)
      button5.place(x=40, y=160)
      cus = StringVar()
      ent=ttk.Combobox(expenselabelframe,width=30,textvariable=cus)
      ent['values'] = cusdta
      ent.delete(0,'end')
      ent.insert(0, psdata[10])
      
      

      def toggle():
        if rebill.get():
          id_skuentry.delete(0,END)
          rebill_entry.delete(0,END)
          id_skulabel.place(x=375,y=160)
          id_skuentry.place(x=420,y=160)
          rebill_label.place(x=335,y=180)
          rebill_entry.place(x=420, y=180)
        else:
          id_skuentry.delete(0,END)
          rebill_entry.delete(0,END)
          id_skulabel.place_forget()
          id_skuentry.place_forget()
          rebill_label.place_forget()
          rebill_entry.place_forget()
      rebill = BooleanVar()
      button51 = Checkbutton(expenselabelframe, text="Rebillable" ,variable=rebill, command=toggle,onvalue=1,offvalue=0)

      
      # sql = "select * from users"
      # fbcursor.execute(sql)
      # rebill_check_user = fbcursor.fetchall()
      
      # if not rebill_check_user:
      #   pass
      # else:
      #   # try:
      #     user_namech = username1.get()
      #     sql = "select rebill_exprense from users where username = %s"
      #     val = (user_namech,)
      #     fbcursor.execute(sql,val)
      #     disable_rebillabe_exp = fbcursor.fetchone()
      #     if disable_rebillabe_exp[0] == 1:
      #       button51.place_forget()
      #     else:
      #       pass
      #   # except:
        #    pass
      
      cns = psdata[17]
      if cns == '1':
        button5.select()
        ent.place(x=45,y=180)
        button51.place(x=250, y=160)
      else:
        button5.deselect()
        try:
          user_namech = username1.get()
          sql = "select rebill_exprense from users where username = %s"
          val = (user_namech,)
          fbcursor.execute(sql,val)
          disable_rebillabe_exp = fbcursor.fetchone()
          if disable_rebillabe_exp[0] == 1:
            pass
          else:
            button51.place_forget()
        except:
          pass
        
      
      
      id_sku1 = StringVar()
      id_skulabel=Label(expenselabelframe,text="id_sku:")
      id_skuentry = Entry(expenselabelframe,width=15,textvariable=id_sku1)
      id_skuentry.delete(0,'end')
      id_skuentry.insert(0, psdata[15])
      
      def number_rebill_amoun(S,d):
        sql = "select decimalseperator from company"
        fbcursor.execute(sql)
        deci_sgin = fbcursor.fetchone()
        if deci_sgin[0] == '.':
          if d == '1': #insert
            if not S in ['.','0','1','2','3','4','5','6','7','8','9']:
              return False
            return True
        elif deci_sgin[0] == ',':
          if d == '1': #insert
            if not S in ['0','1','2','3','4','5','6','7','8','9',',']:
              return False
            return True
        if d.isdigit():
          return True
        
        
        
  
      def rebillamoonclick(event):
        sql = "select currencysign,currsignplace from company"
        fbcursor.execute(sql)
        currsymb = fbcursor.fetchone()
        if currsymb[1] == "before amount":
          rebill_entry.insert (0, currsymb[0])
          rebi_amo = (expenselabelframe.register(number_rebill_amoun),'%S','%d')
          rebill_entry.config(validate='key',validatecommand=(rebi_amo),justify='left')
        elif currsymb[1] == "before amount with space":
          rebill_entry.insert (0, currsymb[0] + " ")
          rebi_amo = (expenselabelframe.register(number_rebill_amoun),'%S','%d')
          rebill_entry.config(validate='key',validatecommand=(rebi_amo),justify='left')
        elif currsymb[1] == "after amount":
          rebill_amoun.set(currsymb[0])
          rebi_amo = (expenselabelframe.register(number_rebill_amoun),'%S','%d')
          rebill_entry.config(validate='key',validatecommand=(rebi_amo),justify='right')
        elif currsymb[1] == "after amount with space":
          rebill_amoun.set(" " + currsymb[0])
          rebi_amo = (expenselabelframe.register(number_rebill_amoun),'%S','%d')
          rebill_entry.config(validate='key',validatecommand=(rebi_amo),justify='right')
      rebill_amoun = StringVar()
      rebill_label=Label(expenselabelframe,text="Rebill amount:")
      rebill_entry = Entry(expenselabelframe,width=15,textvariable=rebill_amoun)
      rebill_entry.bind("<ButtonRelease>", rebillamoonclick)
      rebill_entry.delete(0,'end')
      rebill_entry.delete(0,'end')
      rebill_entry.insert(0, psdata[16])

      reb = psdata[13]
      print(ps)
      if reb == '1':
        button51.select()
        id_skulabel.place(x=375,y=160)
        id_skuentry.place(x=420,y=160)
        rebill_label.place(x=335,y=180)
        rebill_entry.place(x=420, y=180)
      else:
        button51.deselect()
  
  
      
      
      def toggle():
        if imge.get():
          browseimg.place(x=40,y=220)
          browsebutton.place(x=350,y=220,height=30,width=50)
          b2.place(x=450, y=240)

        else:
          browseimg.place_forget()
          browsebutton.place_forget()
          b2.place_forget()
        
      imge = BooleanVar()
      Button6 = Checkbutton(expenselabelframe, text = "Attach receipt image(optional,image will be stored   to the database)",command=toggle,variable=imge)
      Button6.place(x=40, y=200)
      browseimg=Label(expenselabelframe,text="(recommended image type:JPG,size 480x320 pixels) ",  bg='#f5f3f2')
      browsebutton=Button(expenselabelframe,text = 'Browse', command=upload_file1)
     
      try:
        image = Image.open("images/"+psdata[11])
        resize_image = image.resize((120, 120))
        recimage = ImageTk.PhotoImage(resize_image)
        b2 = Button(expenselabelframe,image=recimage, height=120, width=120,)
        b2.photo = recimage
        print(image)
      except:
        pass
      
      
      rec = psdata[18]
      print(rec)
      if rec == '1':
        Button6.select()
        browseimg.place(x=40,y=220)
        browsebutton.place(x=350,y=220,height=30,width=50)
        b2.place(x=450, y=240)
      else:
        Button6.deselect()

  
      exptext1=Label(expenselabelframe,text="Notes",pady=5,padx=10)
      exptext1.place(x=12,y=246)
      exptxt = scrolledtext.ScrolledText(expenselabelframe, undo=True,width=50,height=5)
      exptxt.place(x=22,y=280)
      exptxt.delete('1.0','end')
      exptxt.insert('1.0', psdata[12])

      expokButton = Button(window1, text ="Ok",image=tick,width=70,compound = LEFT,command=update_expenses)
      expokButton.place(x=280,y=415)
    except:
        try:
            window1.destroy()
        except: 
            pass
        messagebox.showerror('F-Billing Revolution', 'Select a record to edit.')
    

  
      
  def file_image(event):
    itemid = exp_tree.item(exp_tree.focus())["values"][0]
    sql = "select * from Expenses where expensesid = %s"
    val = (itemid, )
    fbcursor.execute(sql, val)
    psda = fbcursor.fetchone() 
    if psda[11] is None:
      pass
    else:
      edit_window = Toplevel()
      edit_window.title("Edit the value or cancel")
      edit_window.geometry("700x500")
      
        
        
      image = Image.open("images/"+psda[11])
      resize_image = image.resize((700, 500))
      eximage = ImageTk.PhotoImage(resize_image)
      b2 = Button(edit_window,image=eximage)
      b2.photo = eximage
      b2.pack()
  

######################## DELETE EXPENSE #######################################################################


  def delete_expense():
    # sql = "select * from users"
    # fbcursor.execute(sql)
    # addexp_check_user = fbcursor.fetchall()
    delmess = messagebox.askyesno("Delete Expense", "Are you sure to delete this Expense?")
    if delmess == True:
      itemid = exp_tree.item(exp_tree.focus())["values"][0]
      print(itemid)
      sql = 'DELETE FROM Expenses WHERE expensesid=%s'
      val = (itemid,)
      fbcursor.execute(sql, val)
      fbilldb.commit()
      #selrow = exp_tree.selection()[0]
      exp_tree.delete(exp_tree.selection()[0])
    else:
      pass
  
  def delete_expense_check():
    sql = "select * from users"
    fbcursor.execute(sql)
    delexp_check_user = fbcursor.fetchall()
    if not delexp_check_user:
      delete_expense()
    else:
      try:
        user_namech = username1.get()
        sql = "select delete_expense from users where username = %s"
        val = (user_namech,)
        fbcursor.execute(sql,val)
        disable_del_exp = fbcursor.fetchone()
        if disable_del_exp[0] == 1:
          delete_expense()
        else:
          messagebox.showerror("user","user does not have permission to perform this action")
      except:
        delete_expense()
  

######################## SEARCH EXPENSE ######################################################################
  def close_expenses():
    top.destroy()

  def search_exp():
    query = searchvar.get()
    selections = []
    for child in exp_tree.get_children():
        if query in exp_tree.item(child)['values']:
            print(exp_tree.item(child)['values'])
            selections.append(child)
    exp_tree.selection_set(selections)
  
  
  

  def search_expense():
    global top,searchvar
    top = Toplevel()  
    
    top.title("Find Text")
    
    
    top.geometry("520x200+390+250")
    findwhat1=Label(top,text="Find What:",pady=5,padx=10)
    findwhat1.place(x=5,y=20)
    searchvar = StringVar() 
    findwhat = ttk.Combobox(top, width = 50, textvariable = searchvar ) 
      
    # Adding combobox drop down list 
    
    findwhat.place(x=80,y=25) 
    

    findButton = Button(top, text ="Find next",width=10, command=search_exp)
    findButton.place(x=420,y=20)

    findin1=Label(top,text="Find in:",pady=5,padx=10)
    findin1.place(x=5,y=47)
    n = StringVar() 
    findIN = ttk.Combobox(top, width = 37, textvariable = n ) 
      
    # Adding combobox drop down list 
    findIN['values'] = ('Client',  
                              ' Date', 
                              ' Category', 
                              ' Vendor', 
                              ' Staff Member', 
                              ' Description', 
                              ' Rebillable',
                              'Invoiced',
                              'Image',
                              'Rebill Amount',
                              'Amount',
                        
                              ' <<All>>') 
      
    findIN.place(x=80,y=54) 
    findIN.current(0)

    closeButton = Button(top, text ="Close",width=10,command=close_expenses)
    closeButton.place(x=420,y=50)

    match1=Label(top,text="Match:",pady=5,padx=10)
    match1.place(x=5,y=74)
    n = StringVar() 
    match = ttk.Combobox(top, width = 27, textvariable = n ) 
      
    # Adding combobox drop down list 
    match['values'] = ('From Any part of the field',' Whole Field',  
                              ' From the beginning of the field')
      
    match.place(x=80,y=83) 
    match.current(0)

    search1=Label(top,text="Search:",pady=5,padx=10)
    search1.place(x=5,y=102)
    n = StringVar() 
    search = ttk.Combobox(top, width = 27, textvariable = n ) 
      
    # Adding combobox drop down list 
    search['values'] = ('All', 'up', 
                              ' Down')
      
    search.place(x=80,y=112) 
    search.current(0)


    checkvarStatus4=IntVar()
   
    Button4 = Checkbutton(top,variable = checkvarStatus4, 
                      text="Match Case", 
                      onvalue =1,
                      offvalue = 0,
                      height=3,
                      width = 15)

    Button4.place(x=60,y=141)

    checkvarStatus5=IntVar()
   
    Button5 = Checkbutton(top,variable = checkvarStatus5, 
                      text="Match Format", 
                      onvalue =0 ,
                      offvalue = 1,
                      height=3,
                      width = 15)

    Button5.place(x=270,y=141)







  

######################## FRONT PAGE OF EXPENSE MODULE #######################################################################

    
  expframe = Frame(tab6,relief=GROOVE,bg="#f8f8f2")
  expframe.pack(side="top", fill=BOTH)
  
  expmidFrame=Frame(expframe, height=60,bg="#f5f3f2")
  expmidFrame.pack(side="top", fill=X)

  e = Canvas(expmidFrame, width=1, height=65, bg="#f8f8f2", bd=0)
  e.pack(side="left", padx=(5, 2))
  e = Canvas(expmidFrame, width=1, height=65, bg="#f8f8f2", bd=0)
  e.pack(side="left", padx=(0, 5))
  
  
  expenseLabel = Button(expmidFrame,compound="top", text="Create new\nExpense",relief=RAISED,   command=add_expense_connection, image=expenseIcon,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,)
  expenseLabel.pack(side="left", pady=3, ipadx=4)
  
  
  expeditLabel = Button(expmidFrame,compound="top", text="Edit/View\nExpense",relief=RAISED,    image=expeditIcon,command=edit_expense,bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  expeditLabel.pack(side="left")
  
  expdeleteLabel = Button(expmidFrame,compound="top", text="Delete\nSelected", relief=RAISED,    command=delete_expense_check,image=expdeleteIcon,bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  expdeleteLabel.pack(side="left")
  
  e = Canvas(expmidFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  e.pack(side="left", padx=5)
 
  expsearchLabel = Button(expmidFrame,compound="top", text="Search in\nExpenses",relief=RAISED,   command=search_expense, image=expsearchIcon,bg="#f8f8f2", fg="black", height=55, bd=1, width=55, )
  expsearchLabel.pack(side="left")
  
  
  lbframe = LabelFrame(expmidFrame, height=60, width=200)
  lbframe.pack(side="left", padx=10, pady=0)

  lbl_expdt=Label(lbframe,text="Expense date from:",fg='black')
  lbl_expdt.grid(row=0, column=0, pady=5, padx=(5, 0))
  
  lbl_expdtt=Label(lbframe,text="Expense date to:" , fg='black')
  lbl_expdtt.grid(row=1, column=0, pady=5, padx=(5, 0))

  def daterange_expenses(): # Start and stop dates for range
    var1=expdt1.get_date()
    var2=expdtt2.get_date()
    print(var1,var2)
    for record in exp_tree.get_children():
      exp_tree.delete(record)
    
    
    sqldate='SELECT * FROM Expenses WHERE date BETWEEN %s AND %s'
    valuz=(var1,var2,)
    fbcursor.execute(sqldate,valuz)
    filterdate=fbcursor.fetchall()
    print(filterdate)
    count=0
    for i in filterdate:
      if True:
        if i[13] == '1':
          e = 'Yes'
        else:
          e = 'No'
        exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[10], i[4], i[6], i[5], i [8], i[7], e , i[14], i[11],i[16],i[3]))
      else:
          pass
      count += 1

  
  expdt1=DateEntry(lbframe)
  expdt1.grid(row=0, column=1)
     
  expdtt2=DateEntry(lbframe)
  expdtt2.grid(row=1, column=1)

  sql = "select dateformat from company"
  fbcursor.execute(sql)
  date_for = fbcursor.fetchone()
  
  if not date_for:
    pass
  else:
    if date_for[0] == "mm-dd-yyyy":
      expdtt2._set_text(expdtt2._date.strftime('%m-%d-%Y'))
      expdt1._set_text(expdt1._date.strftime('%m-%d-%Y'))
    elif date_for[0] == "dd-mm-yyyy":
      expdt1._set_text(expdt1._date.strftime('%d-%m-%Y'))
      expdtt2._set_text(expdtt2._date.strftime('%d-%m-%Y'))
    elif date_for[0] == "yyy.mm.dd":
      expdt1._set_text(expdt1._date.strftime('%Y.%m.%d'))
      expdtt2._set_text(expdtt2._date.strftime('%Y.%m.%d'))
    elif date_for[0] == "mm/dd/yyyy":
      expdt1._set_text(expdt1._date.strftime('%m/%d/%Y'))
      expdtt2._set_text(expdtt2._date.strftime('%m/%d/%Y'))
    elif date_for[0] == "dd/mm/yyy":
      expdt1._set_text(expdt1._date.strftime('%d/%m/%Y'))
      expdtt2._set_text(expdtt2._date.strftime('%d/%m/%Y'))
    elif date_for[0] == "dd.mm.yyyy":
      expdt1._set_text(expdt1._date.strftime('%d.%m.%Y'))
      expdtt2._set_text(expdtt2._date.strftime('%d.%m.%Y'))
    elif date_for[0] == "yyyy/mm/dd":
      expdt1._set_text(expdt1._date.strftime('%Y/%m/%d'))
      expdtt2._set_text(expdtt2._date.strftime('%Y/%m/%d'))
    else:
      pass
     
  checkvar1 = IntVar()
  chkbtn1 = Checkbutton(lbframe, text = "Apply filter", variable = checkvar1, onvalue = 1, offvalue =0,     height = 2, width = 8,command=daterange_expenses)
  chkbtn1.grid(row=0, column=2, rowspan=2, padx=(5,5))
  
  exp_mainFrame=Frame(tab6, relief=GROOVE, bg="#f8f8f2")
  exp_mainFrame.pack(side="top", fill=BOTH)
  e = Canvas(exp_mainFrame, width=1, height=55, bg="#b3b3b3", bd=0)
  e.pack(side="left", padx=5)

  def refresh_expenses():
    for record in exp_tree.get_children():
      exp_tree.delete(record)
    count=0
    fbcursor.execute('SELECT * FROM Expenses;')
    for i in fbcursor:
      if True:
        if i[13] == '1':
          e = 'Yes'
        else:
          e = 'No'
        exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[10], i[4], i[6], i[5], i[8], i[7], e , i[14], i[11],i[16],i[3]))
      else:
          pass
    count += 1
  

  
  exprefreshLabel = Button(expmidFrame,compound="top", text="Refresh\nExpense List",relief=RAISED,    image=exprefreshIcon,bg="#f8f8f2", fg="black", height=55, bd=1, width=63,command=refresh_expenses)
  exprefreshLabel.pack(side="left")


  
  invoi1label = Label(expframe, text="Expenses (All)", font=("arial", 18), bg="#f8f8f2")
  invoi1label.pack(side="left", padx=(20,0))

  def fil(event):
    filt = drop123.get()
    for record in exp_tree.get_children():
      exp_tree.delete(record)
  
  
  
  
    sql = "select * from Expenses where catagory = %s"
    val = (filt,)
    fbcursor.execute(sql, val)
    records = fbcursor.fetchall()
  
  
    count=0
    for i in records:
        if True:
          if i[13] == '1':
             e = 'Yes'
          else:
            e = 'No'
          exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[10], i[4], i[6], i[5], i[8], i[7], e , i[14], i[11],i[16],i[3]))
        else:
          pass
    count += 1

  sql = "SELECT DISTINCT catagory FROM Expenses"
  fbcursor.execute(sql,)
  rec = fbcursor.fetchall()
  drop123 = ttk.Combobox(expframe,)
  drop123['values'] = rec
  drop123.pack(side="right", padx=(0,10))
  drop123.bind("<<ComboboxSelected>>", fil)


 
  invoi1label = Label(expframe, text="Category filter", font=("arial", 15), bg="#f8f8f2")
  invoi1label.pack(side="right", padx=(0,10))

# sql= 'SELECT rebillable FROM Expenses '
# fbcursor.execute(sql,)
# c = fbcursor.fetchall()
# print (c[2])
# print(c == 1)
# for e in c:
#   m = e == c
#   m = ("Yes")
#   e != c
#   print("no")
#   else:
#     pass



#table 
  s = ttk.Style()
  s.configure('Treeview.Heading', background='white', State='DISABLE')
  
  
  exp_tree=ttk.Treeview(tab6,selectmode='browse')
  exp_tree.place(x=0,y=105,height=580)
  
  expverticalbar=ttk.Scrollbar(tab6,orient="vertical",command=exp_tree.yview,)
  expverticalbar.place(x=1345,y=102,height=570,)
  expverticalbar.place(x=1345,y=102,height=570)
  exp_tree["columns"]=("1","2","3","4","5","6","7","8","9","10","11","12")
  exp_tree["show"]='headings'
  exp_tree.column("1",width=5,anchor='c')
  exp_tree.column("2",width=130,anchor='c')
  exp_tree.column("3",width=110,anchor='c')
  exp_tree.column("4",width=120,anchor='c')
  exp_tree.column("5",width=120,anchor='c')
  exp_tree.column("6",width=120,anchor='c')
  exp_tree.column("7",width=220,anchor='c')
  exp_tree.column("8",width=120,anchor='c')
  exp_tree.column("9",width=100,anchor='c')
  exp_tree.column("10",width=100,anchor='c')
  exp_tree.column("11",width=100,anchor='c')
  exp_tree.column("12",width=100,anchor='c')
  exp_tree.heading("2",text="Client")
  exp_tree.heading("3",text="Date")
  exp_tree.heading("4",text="Category")
  exp_tree.heading("5",text="Vendor")
  exp_tree.heading("6",text="Staff member")
  exp_tree.heading("7",text="Description")
  exp_tree.heading("8",text="Rebillable")
  exp_tree.heading("9",text="Invoiced")
  exp_tree.heading("10",text="Image")
  exp_tree.heading("11",text="Rebill Amount")
  exp_tree.heading("12",text="Amount")
  exp_tree.bind('<Double-Button-1>',file_image)





  fbcursor.execute('SELECT * FROM Expenses;')

  j = 0
  
  for i in fbcursor:
    if i[13] == '1':
      e = 'Yes'
    else:
      e = 'No'
    exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[10], i[4], i[6], i[5], i[8], i[7], e , i[14], i[11],i[16],i[3]))
    j += 1

############################ END OF Expense Module-############################

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ Customer_Module @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  customermain=Frame(tab7, relief=GROOVE, bg="#f8f8f2")
  customermain.pack(side="top", fill=BOTH)

  CusmidFrame=Frame(customermain, bg="#f5f3f2", height=60)
  CusmidFrame.pack(side="top", fill=X)


  cus_pn = Canvas(CusmidFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  cus_pn.pack(side="left", padx=(5, 2))
  cus_pn = Canvas(CusmidFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  cus_pn.pack(side="left", padx=(0, 5))

  # ad_usr = PIL.Image.open("images/user_add.png")
  # cus_addcustomerIcon=ImageTk.PhotoImage(ad_usr)

  cus_addcustomerLabel = Button(CusmidFrame,compound="top", text="Add new\nCustomer",relief=RAISED,  command=lambda:cus_add_customer(),          image=cus_addcustomerIcon, font=("arial", 8),bg="#f5f3f2", fg="black", height=55, bd=1, width=55)
  cus_addcustomerLabel.pack(side="left", pady=3, ipadx=4)

  # usr_edit = PIL.Image.open("images/user_edit.png")
  # cus_editcustomerIcon=ImageTk.PhotoImage(usr_edit)
  cus_editcustomerLabel = Button(CusmidFrame,compound="top", text="Edit/View\nCustomer",relief=RAISED,command=lambda:cus_edit_customer(), image=cus_editcustomerIcon,  font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  cus_editcustomerLabel.pack(side="left")

  # usr_del = PIL.Image.open("images/user_delete.png")
  # cus_deletecustomerIcon=ImageTk.PhotoImage(usr_del)
  cus_deletecustomerLabel = Button(CusmidFrame,compound="top", text="Delete\nSelected",relief=RAISED, command=lambda:cus_delete_customer(),image=cus_deletecustomerIcon, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  cus_deletecustomerLabel.pack(side="left")

  cus_pn = Canvas(CusmidFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  cus_pn.pack(side="left", padx=5)

  # usr_pre = PIL.Image.open("images/priewok.png")
  # cus_previewinvoiceIcon=ImageTk.PhotoImage(usr_pre)
  cus_previewinvoiceLabel = Button(CusmidFrame,compound="top",command=lambda:cus_previewinvoice_customer(), text="Preview\nInvoice List",relief=RAISED,               image=cus_previewinvoiceIcon, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  cus_previewinvoiceLabel.pack(side="left")

  # usr_print = PIL.Image.open("images/printer.png")
  # cus_printinvoiceIcon=ImageTk.PhotoImage(usr_print)
  cus_printinvoiceLabel = Button(CusmidFrame,compound="top", text="Print\n Invoice List",relief=RAISED,  command=lambda:cus_printinvoice_customer(), image=cus_printinvoiceIcon, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  cus_printinvoiceLabel.pack(side="left")

  cus_pn = Canvas(CusmidFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  cus_pn.pack(side="left", padx=5)

  # usr_em = PIL.Image.open("images/gmail.png")
  # cus_emailinviceIcon=ImageTk.PhotoImage(usr_em)
  cus_emailinviceLabel = Button(CusmidFrame,compound="top",command=lambda:cus_addemail_order(), text="E-mail\nInvoice List",relief=RAISED,               image=cus_emailinviceIcon, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  cus_emailinviceLabel.pack(side="left")

  # usr_sms = PIL.Image.open("images/text-message.png")
  # cus_smsIcon=ImageTk.PhotoImage(usr_sms)
  cus_smsLabel = Button(CusmidFrame,compound="top", text="Send SMS\nNotification",command=lambda:cus_customersms(), relief=RAISED, image=cus_smsIcon, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  cus_smsLabel.pack(side="left")

  cus_pn = Canvas(CusmidFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  cus_pn.pack(side="left", padx=5)

  # usr_imp = PIL.Image.open("images/import.png")
  # cus_importcustomerIcon=ImageTk.PhotoImage(usr_imp)
  cus_importcustomerLabel = Button(CusmidFrame,compound="top", text="Import\nCustomers",command=lambda:import_customer_check(),relief=RAISED, image=cus_importcustomerIcon, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  cus_importcustomerLabel.pack(side="left")

  # usr_exp = PIL.Image.open("images/export.png")
  # cus_exportcustomerIcon=ImageTk.PhotoImage(usr_exp)
  cus_exportcustomerLabel = Button(CusmidFrame,compound="top", text="Export\nCustomers",command=lambda:cus_export_customer(),relief=RAISED, image=cus_exportcustomerIcon, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  cus_exportcustomerLabel.pack(side="left")

  cus_pn = Canvas(CusmidFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  cus_pn.pack(side="left", padx=5)

  # usr_srh = PIL.Image.open("images/search-icon.png")
  # cus_customersearchIcon=ImageTk.PhotoImage(usr_srh)
  cus_customersearchLabel = Button(CusmidFrame,compound="top",command=lambda:cus_search_customers(), text="Search in\nCustomers",relief=RAISED,               image=cus_customersearchIcon, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  cus_customersearchLabel.pack(side="left")

  cus_pn = Canvas(CusmidFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  cus_pn.pack(side="left", padx=5)

  # usr_rfs= PIL.Image.open("images/refresh.png")
  # cus_refreshcustomerIcon=ImageTk.PhotoImage(usr_rfs)
  cus_refreshcustomerLabel = Button(CusmidFrame,compound="top", command=lambda:cus_refresh_customers(),text="Refresh\ncustomer list",relief=RAISED,               image=cus_refreshcustomerIcon, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  cus_refreshcustomerLabel.pack(side="left")

  cus_invoi1label = Label(customermain, text="Customers", font=("arial", 18), bg="#f8f8f2")
  cus_invoi1label.place(x=0,y=65)
  cus_invoi1label = Label(customermain, text="Right click on datagrid row for more options.", font=("arial", 10), bg="#f8f8f2")
  cus_invoi1label.pack(side="left", padx=(825,0))

  cus_invoi1label = Label(customermain, text="Category ", font=("arial", 15), bg="#f8f8f2")
  cus_invoi1label.pack(side="right", padx=(0,160))

  def cus_dft(event):
    print(cus_fltr.get())
    if cus_fltr.get() is not None:
      for record in cus_main_tree.get_children():
        cus_main_tree.delete(record)
      table_sql='select * from customer where category=%s'
      vald=(cus_fltr.get(),)
      fbcursor.execute(table_sql, vald)
      tb_val=fbcursor.fetchall()
      count_cus=0

      for i in tb_val:
        cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
        count_cus +=1
    else:
      for record in cus_main_tree.get_children():
        cus_main_tree.delete(record)
      cus_main_table_sql="select * from customer"
      fbcursor.execute(cus_main_table_sql)
      main_tb_val=fbcursor.fetchall()
      count_cus=0

      for i in main_tb_val:
        cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
        count_cus +=1
    

  cus_fltr = StringVar()
  cus_flt=ttk.Combobox(customermain, textvariable=cus_fltr)
  cus_flt.place(x=1210, y=75)
  sql_cust_dt='SELECT DISTINCT category from customer'
  fbcursor.execute(sql_cust_dt)
  catgry=fbcursor.fetchall()  
  cus_flt["values"]=catgry
  cus_flt.bind('<<ComboboxSelected>>', cus_dft)
  cus_flt.current(0)

  #***************************************************************************************Functions
  #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$((Top Button Functions))
  #---------------------------------------------------------------------------------Mail
  def cus_send_mails():
      try:
        cus_sender_email = "saijuinfox@gmail.com"    
        cus_sender_password = "eywcinveepcwchnn" 

        cus_server = smtplib.SMTP('smtp.gmail.com', 587)
      
        cus_server.starttls()

        cus_server.login(cus_sender_email, cus_sender_password)

      
        cus_carbcopy_info = cus_carcopyem_address.get()
        

      
        cus_msg = MIMEMultipart()
        cus_msg['Subject'] = cus_email_subject.get() 
      
        cus_mail_content  = cus_mframe.get('1.0','end-1c') 
        cus_msg['From'] = cus_email_from.get()
        cus_msg['To'] = cus_email_address.get()
      
          
        cus_gettingimg=cus_lstfrm.get()
        cus_lst_data = cus_gettingimg[1:-1].split(',')


        cus_msg.attach(MIMEText(cus_mail_content, 'plain'))

        for i in cus_lst_data:
            if len(i.strip()[1:-1])>1:
              
                with open('customer_Reports/'+ i.strip()[1:-1], "rb") as attachment:
      
                    cus_part = MIMEBase("application", "octet-stream")
                    cus_part.set_payload(attachment.read())

                    encoders.encode_base64(cus_part)
                    cus_part.add_header('Content-Disposition', "attachment; filename= %s" % 'customer_Reports/'+ i.strip()[1:-1]) 

        
                    cus_msg.attach(cus_part)
          

        cus_server.sendmail(cus_email_from.get(),cus_email_address.get(),cus_msg.as_string())
        cus_server.sendmail(cus_email_from.get(), cus_carbcopy_info,cus_msg.as_string()) 
      except:
        pass
  def cus_empsfile_image(event):
              global cus_yawn
              for i in cus_htcodeframe.curselection():
                print("hloo",cus_htcodeframe.get(i))
                cus_yawn=cus_htcodeframe.get(i)        
                edit_window_img = Toplevel()
                edit_window_img.title("View Image")
                edit_window_img.geometry("700x500")
                image = Image.open("images/"+cus_yawn)
                resize_image = image.resize((700, 500))
                image = ImageTk.PhotoImage(resize_image)
                cus_psimage = Label(edit_window_img,image=image)
                cus_psimage.photo = image
                cus_psimage.pack()
  def cus_file(event):
      try:
        all_items = cus_htcodeframe.get(0, tk.END) # tuple with text of all items in Listbox
        sel_idx = cus_htcodeframe.curselection() # tuple with indexes of selected items
        sel_list = [all_items[item] for item in sel_idx]
        
        if sel_list[0]=='CInvoice.pdf':
          win32api.ShellExecute(0,"",cus_filenamezrrr,None,".",0)
        else:
          win32api.ShellExecute(0,"",cus_filenamez,None,".",0)
      except:
        pass
  def cus_UploadAction(event=None):
          global cus_filenamez
          cus_filenamez = askopenfilename(filetypes=(('PDF', '*.pdf',),("png file ",'.png'),("jpg file", ".jpg"),  ("All files", "*.*"),))
          
          shutil.copyfile(cus_filenamez, os.getcwd()+'/customer_Reports/'+cus_filenamez.split('/')[-1])
          cus_htcodeframe.insert(0, cus_filenamez.split('/')[-1]) 
  def cus_addemail_order():
          try:
            cus_mailDetail=Toplevel()
            cus_mailDetail.title("Send E-mail")
            cus_mailDetail.geometry("1080x550")
            cus_mailDetail.resizable(False, False)

            style = ttk.Style()
            style.theme_use('default')
            style.configure('TNotebook.Tab', background="#999999", padding=5)
            cus_email_Notebook = ttk.Notebook(cus_mailDetail)
            cus_email_Frame = Frame(cus_email_Notebook, height=500, width=1080)
            cus_account_Frame = Frame(cus_email_Notebook, height=550, width=1080)
            cus_email_Notebook.add(cus_email_Frame, text="E-mail")
            cus_email_Notebook.add(cus_account_Frame, text="Account")
            cus_email_Notebook.place(x=0, y=0)

            cus_messagelbframe=LabelFrame(cus_email_Frame,text="Message", height=500, width=730)
            cus_messagelbframe.place(x=5, y=5)
            global cus_email_address, cus_email_subject, cus_email_from,cus_email_pswrd,cus_carcopyem_address,cus_mframe,cus_htcodeframe,cus_lstfrm,cus_langs
            cus_email_address = StringVar() 
            cus_email_subject = StringVar()

            cus_email_from = StringVar()
            cus_email_pswrd = StringVar()
            cus_carcopyem_address = StringVar()
            
            
            cus_lbl_emailtoaddr=Label(cus_messagelbframe, text="Email to address").place(x=5, y=5)
            cus_emailtoent=Entry(cus_messagelbframe, width=50,textvariable=cus_email_address)
            cus_emailtoent.place(x=120, y=5)
            cus_id=cus_main_tree.item(cus_main_tree.focus())["values"][1]
            
            if cus_id is None:
              pass
            else:
              sqrty="select cpemail from customer where customerno=%s"
              sqrty_val=(cus_id,)
              fbcursor.execute(sqrty,sqrty_val)
              dtre=fbcursor.fetchone()
              cus_emailtoent.insert(0,dtre[0])
          
            cus_sendemail_btn=Button(cus_messagelbframe, text="Send Email", width=10, height=1, command=cus_send_mails).place(x=600, y=10)

            cus_lbl_carcopyto=Label(cus_messagelbframe, text="Carbon copy to").place(x=5, y=32)
            cus_carcopyent=Entry(cus_messagelbframe, width=50,textvariable=cus_carcopyem_address)
            cus_carcopyent.place(x=120, y=32)

            cus_lbl_subject=Label(cus_messagelbframe, text="Subject").place(x=5, y=59)
            cus_subent=Entry(cus_messagelbframe, width=50, textvariable=cus_email_subject)
            cus_subent.place(x=120, y=59)
            cus_subjectinsrt='Invoice Report'+str("")
            cus_subent.delete(0,'end')
            cus_subent.insert(0, cus_subjectinsrt)

            
            style = ttk.Style()
            style.theme_use('default')
            style.configure('TNotebook.Tab', background="#999999", width=20, padding=5)
            cus_mess_Notebook = ttk.Notebook(cus_messagelbframe)
            cus_emailmessage_Frame =Frame(cus_mess_Notebook, height=350, width=710)
            cus_htmlsourse_Frame = Frame(cus_mess_Notebook, height=350, width=710)
            cus_mess_Notebook.add(cus_emailmessage_Frame, text="E-mail message")

            cus_mess_Notebook.add(cus_htmlsourse_Frame, )
            cus_mess_Notebook.place(x=5, y=90)
            

            

            from tkinter import font,colorchooser
            fontSize=16
            fontStyle='Arial'
            
            def cus_font_style(event):
                global fontStyle
                fontStyle=font_family_variable.get()
                cus_mframe.config(font=(fontStyle,fontSize))

            def cus_font_size(event):
                global fontSize
                
                fontSize=size_variable.get()
                
                
                cus_mframe.config(font=(fontStyle,fontSize))

            def cus_bold_text():
                bold_font = font.Font(cus_mframe, cus_mframe.cget("font"))
                bold_font.configure(weight="bold")

                cus_mframe.tag_configure("bold", font=bold_font)

                current_tags = cus_mframe.tag_names("sel.first")

                if "bold" in current_tags:
                  cus_mframe.tag_remove("bold", "sel.first", "sel.last")
                else:
                  cus_mframe.tag_add("bold", "sel.first", "sel.last")    
            
            def cus_italic_text():
                italic_font = font.Font(cus_mframe, cus_mframe.cget("font"))
                italic_font.configure(slant="italic")

                cus_mframe.tag_configure("italic", font=italic_font)

                current_tags = cus_mframe.tag_names("sel.first")

                if "italic" in current_tags:
                  cus_mframe.tag_remove("italic", "sel.first", "sel.last")
                else:
                  cus_mframe.tag_add("italic", "sel.first", "sel.last")

            def cus_underline_text():
              try:
                  if cus_mframe.tag_nextrange('underline_selection', 'sel.first', 'sel.last') != ():
                      cus_mframe.tag_remove('underline_selection', 'sel.first', 'sel.last')
                  else:
                      cus_mframe.tag_add('underline_selection', 'sel.first', 'sel.last')
                      cus_mframe.tag_configure('underline_selection', underline=True)
              except TclError:
                  pass

            def cus_color_select():
                color=colorchooser.askcolor()[1]
                if color:
              # if color:

                  color_font = font.Font(cus_mframe, cus_mframe.cget("font"))

                  cus_mframe.tag_configure("colored", font=color_font, foreground=color)

                  current_tags = cus_mframe.tag_names("sel.first")

                if "colored" in current_tags:
                  cus_mframe.tag_remove("colored", "sel.first", "sel.last")
                else:
                  cus_mframe.tag_add("colored", "sel.first", "sel.last")

            def cus_align_right():
                data=cus_mframe.get(0.0,END)
                cus_mframe.tag_config('right',justify=RIGHT)
                cus_mframe.delete(0.0,END)
                cus_mframe.insert(INSERT,data,'right')

            def cus_align_left():
                data=cus_mframe.get(0.0,END)
                cus_mframe.tag_config('left',justify=LEFT)
                cus_mframe.delete(0.0,END)
                cus_mframe.insert(INSERT,data,'left')

            def cus_align_center():
                data=cus_mframe.get(0.0,END)
                cus_mframe.tag_config('center',justify=CENTER)
                cus_mframe.delete(0.0,END)
                cus_mframe.insert(INSERT,data,'center')

            def add_link():
                # from tkHyperLinkManager import HyperlinkManager
                # import webbrowser
                # from functools import partial
                
                hghf=cus_mframe.selection_get()
                content=hghf
                
                
              #   content.configure(foreground="red")
                cus_mframe.insert(END, " "+content)
                
                # cus_mframe.delete(1.0,END)
                
                
                
            def callback(url):
                webbrowser.open_new_tab_url(url)

            def addlinkbox():
                global top
                top = Toplevel()
                top.title('Hyperlink')
                top.geometry("400x100")
                hyp_lbl = LabelFrame(top,text="Hyperlink Information", height=80, width=300)
                hyp_lbl.place(x=10, y=5)

                hyp_lbl1 = Label(top,text="Type:")
                hyp_lbl1.place(x=18, y=24)
                
                def comb_select(event):
                    hyper = cb_comb.get()
                    if hyper == "(other)":
                        hyp= Entry(top,width=35)
                        hyp.place(x=90,y=55)
                        hyp.insert(END,  "(other)")
                    elif hyper == "file://":
                        hyp= Entry(top,width=35)
                        hyp.place(x=90,y=55)
                        hyp.insert(END,  "file://")
                    elif hyper == "ftp://":
                        hyp= Entry(top,width=35)
                        hyp.place(x=90,y=55)
                        hyp.insert(END,  "ftp://") 
                    elif hyper == "http://":
                        hyp= Entry(top,width=35)
                        hyp.place(x=90,y=55)
                        hyp.insert(END,  "http://") 
                    elif hyper == "https://":
                        hyp= Entry(top,width=35)
                        hyp.place(x=90,y=55)
                        hyp.insert(END,  "https://") 
                    elif hyper == "mailto:":
                        hyp= Entry(top,width=35)
                        hyp.place(x=90,y=55)
                        hyp.insert(END,  "mailto:") 
                    elif hyper == "telnet:":
                        hyp= Entry(top,width=35)
                        hyp.place(x=90,y=55)
                        hyp.insert(END,  "telnet:")


                cb_comb = StringVar()
                cb1=ttk.Combobox(top,textvariable=cb_comb,width=15)
                cb1.grid(row=1,column=1,padx=90,pady=30)
                cb1['values']=('(other)','file://','ftp://','http://','https://','mailto:','news:','telnet:')
                cb1.current(0)
                cb1.bind('<<ComboboxSelected>>',comb_select)


                hyp_lbl2 = Label(top,text="URL:")
                hyp_lbl2.place(x=18, y=55)
                global cus_hyper
                cus_hyper = StringVar()
                
                hyp= Entry(top,textvariable=cus_hyper,width=35)
                hyp.place(x=90,y=55)

                

                hypbtn1 = Button(top,text="OK",width=10, command=add_link)
                hypbtn1.place(x=315,y=8)

                hypbtn2 = Button(top,text="Cancel",width=10)
                hypbtn2.place(x=315,y=35)

          

            cus_mframe=Text(cus_emailmessage_Frame,undo=True,width=84, bg="white", height=20)
            cus_mframe.pack(padx=0,pady=28,expand=False)


            cus_scrollbar1 = Scrollbar(cus_emailmessage_Frame,orient=VERTICAL,command=cus_mframe.yview)
            cus_scrollbar3= Scrollbar(cus_emailmessage_Frame,orient=HORIZONTAL,command=cus_mframe.xview, width=0)
            cus_scrollbar3.place(x=0, y=340, height=20,width=690)
            cus_scrollbar2= Scrollbar(cus_mframe,orient=HORIZONTAL,command=cus_mframe.xview, width=0)
            cus_scrollbar2.pack(fill=X,expand=True,side=BOTTOM,padx=310,pady=155)
            #   cus_scrollbar2.place(x=0, y=310, height=20,width=670)
            cus_mframe.config(xscrollcommand=cus_scrollbar2.set)
            cus_mframe.config(yscrollcommand=cus_scrollbar1.set)
            cus_scrollbar1.config(command=cus_mframe.yview)
            cus_scrollbar1.place(x =690, y=0, height=360)
            cus_scrollbar2.config(command=cus_mframe.xview)


            cus_btn1=Button(cus_emailmessage_Frame,width=20,height=20,compound = LEFT,image=selectall,command=lambda :cus_mframe.event_generate('<Control a>'))
            cus_btn1.place(x=0, y=1)

                    
            cus_btn2=Button(cus_emailmessage_Frame,width=31,height=23,compound = LEFT,image=cut,command=lambda :cus_mframe.event_generate('<Control x>'))
            cus_btn2.place(x=36, y=1)

            cus_btn3=Button(cus_emailmessage_Frame,width=31,height=23,compound = LEFT,image=copy,command=lambda :cus_mframe.event_generate('<Control c>'))
            cus_btn3.place(x=73, y=1)

            cus_btn4=Button(cus_emailmessage_Frame,width=31,height=23,compound = LEFT,image=paste,command=lambda :cus_mframe.event_generate('<Control v>'))
            cus_btn4.place(x=105, y=1)
            cus_btn5=Button(cus_emailmessage_Frame,width=31,height=23,compound = LEFT,image=undo, command=lambda:cus_mframe.event_generate("<<Undo>>")).place(x=140, y=1)

            cus_btn6=Button(cus_emailmessage_Frame,width=31,height=23,compound = LEFT,image=redo, command=lambda:cus_mframe.event_generate("<<Redo>>")).place(x=175, y=1)

            cus_btn7=Button(cus_emailmessage_Frame,width=31,height=23,compound = LEFT,image=bold,command=cus_bold_text)
            cus_btn7.place(x=210, y=1)

            cus_btn8=Button(cus_emailmessage_Frame,width=31,height=23,compound = LEFT,image=italics,command=cus_italic_text)
            cus_btn8.place(x=245, y=1)

            cus_btn9=Button(cus_emailmessage_Frame,width=31,height=23,compound = LEFT,image=underline,command=cus_underline_text)
            cus_btn9.place(x=280, y=1)

            cus_btn10=Button(cus_emailmessage_Frame,width=31,height=23,compound = LEFT,image=left,command=cus_align_left)
            cus_btn10.place(x=315, y=1)

            cus_btn11=Button(cus_emailmessage_Frame,width=31,height=23,compound = LEFT,image=right,command=cus_align_right)
            cus_btn11.place(x=350, y=1)

            cus_btn12=Button(cus_emailmessage_Frame,width=31,height=23,compound = LEFT,image=center,command=cus_align_center)
            cus_btn12.place(x=385, y=1)

            cus_btn14=Button(cus_emailmessage_Frame,width=31,height=23,compound = LEFT,image=remove,command=lambda :cus_mframe.delete(0.0,END))
            cus_btn14.place(x=455, y=1)
            
            cus_btn15=Button(cus_emailmessage_Frame,width=31,height=23,compound = LEFT,image=color,command=cus_color_select)
            cus_btn15.place(x=420, y=1)
            cus_btn16=Button(cus_emailmessage_Frame,width=31,height=23,compound = LEFT,image=hyperlink, command="addlinkbox")
            cus_btn16.place(x=491, y=1)
            global size_variable
            size_variable=IntVar()

            cus_dropcomp11 = ttk.Combobox(cus_emailmessage_Frame, width=6, textvariable=size_variable, values=tuple(range(8,17)))
            
            cus_dropcomp11.place(x=530, y=5)
          #   cus_dropcomp11.bind('<<ComboboxSelected>>',frmar)
            
            font_family_variable=StringVar()
            font_familyes=font.families()
            # dropcompo147 = ttk.Combobox(cus_emailmessage_Frame, width=10, textvariable=font_family_variable, values=font_familyes)
            # dropcompo147.place(x=600, y=5)
            # dropcompo147.current(font_familyes.index('Arial'))
            # dropcompo147.bind('<<ComboboxSelected>>', cus_font_style)
            cus_dropcomp11.bind('<<ComboboxSelected>>', cus_font_size)
            
            cus_attachlbframe=LabelFrame(cus_email_Frame,text="Attachment(s)", height=350, width=280)
            cus_attachlbframe.place(x=740, y=5)
            ##########################################################print()
            from reportlab.pdfgen import canvas
            # from tkdocviewer import *
            from reportlab.lib import colors
            from reportlab.pdfbase.ttfonts import TTFont
            from reportlab.pdfbase import pdfmetrics
            from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
            from reportlab.lib.pagesizes import letter, inch
            try:
                pdf = canvas.Canvas("customer_Reports/CInvoice.pdf", pagesize=letter)
                cus_id=cus_main_tree.item(cus_main_tree.focus())["values"][3]
                sqlt= 'select * from customer where businessname=%s'
                sqlt_val=(cus_id,)
                fbcursor.execute(sqlt,sqlt_val)
                cus_ft=fbcursor.fetchone()

                sql_company = "SELECT * from company"
                fbcursor.execute(sql_company)
                company= fbcursor.fetchone()
                
                pdf.setFont('Helvetica',12)
                pdf.drawString(27,768, company[1])
                text=company[2]
                wraped_text="\n".join(wrap(text,30))
                htg=wraped_text.split('\n')
                    
                vg=len(htg)
                if vg>0:
                        pdf.drawString(30,752,htg[0])
                        print("1")
                        if vg>1:
                          pdf.drawString(30,738,htg[1])
                          print("2")
                          if vg>2:
                              pdf.drawString(30,725,htg[2])
                              print("3")
                              if vg>3:
                                  pdf.drawString(30,712,htg[3])
                                  print("4")
                              else:
                                  pass
                          else:
                              pass
                        else:
                            pass
                        
                else:
                        pass
                pdf.drawString(35,700, "Sales tax reg No:"+company[4])
                pdf.drawString(490,760, "Invoice Report")

                pdf.drawString(460,700,"Customer ID:"+str(cus_ft[0]))
                pdf.drawString(28,695,"__________________________________________________________________________________")
                pdf.drawString(31,680,"Bill To:")
                pdf.drawString(31,668,cus_ft[4])
                text=cus_ft[5]
                wraped_text="\n".join(wrap(text,30))
                htg=wraped_text.split('\n')
                    
                vg=len(htg)
                if vg>0:
                        pdf.drawString(30,654,htg[0])
                        print("1")
                        if vg>1:
                          pdf.drawString(30,640,htg[1])
                          print("2")
                          if vg>2:
                              pdf.drawString(30,626,htg[2])
                              print("3")
                              if vg>3:
                                  pdf.drawString(30,612,htg[3])
                                  print("4")
                              else:
                                  pass
                          else:
                              pass
                        else:
                            pass
                        
                else:
                        pass

                pdf.drawString(400,680,"Ship To:")
                pdf.drawString(400,668,cus_ft[6])
                text=cus_ft[7]
                wraped_text="\n".join(wrap(text,30))
                htg=wraped_text.split('\n')
                    
                vg=len(htg)
                if vg>0:
                        pdf.drawString(400,654,htg[0])
                        print("1")
                        if vg>1:
                          pdf.drawString(400,640,htg[1])
                          print("2")
                          if vg>2:
                              pdf.drawString(400,626,htg[2])
                              print("3")
                              if vg>3:
                                  pdf.drawString(400,612,htg[3])
                                  print("4")
                              else:
                                  pass
                          else:
                              pass
                        else:
                            pass
                        
                else:
                        pass

                pdf.drawString(28,606,"__________________________________________________________________________________")


                pdf.drawString(28,591,"__________________________________________________________________________________")
                pdf.drawString(28,591,"Invoice No           Date        Due Date     Recurring      Status        Invoice Total    Total Paid   Balance      ")
                
                
                sqlr= 'select currencysign from company'
                fbcursor.execute(sqlr)
                crncy=fbcursor.fetchone()
                  
                crc=crncy[0]
                sqlrt= 'select currsignplace from company'
                fbcursor.execute(sqlrt)
                post_rp=fbcursor.fetchone()
                ps_cr=post_rp[0]
                count=0
                sql_inv_dt='SELECT * FROM invoice where businessname=%s'
                inv_valuz=(cus_id,)
                fbcursor.execute(sql_inv_dt,inv_valuz)
                tre=fbcursor.fetchall()
                x=571

                for i in tre:
                              if x==38 or x==50:
                                  pdf.showPage()
                                  x=750
                              else:
                                  if i[24] is None:
                                      dfh="No"
                                  else:
                                      dfh="Yes"
                                  if ps_cr=="before amount":
                                      pdf.drawString(28,x,str(i[1]))
                                
                                      pdf.drawString(100,x,str(i[2]))
                                      pdf.drawString(168,x,str(i[3]))
                                      pdf.drawString(250,x,dfh)
                                      pdf.drawString(315,x,str(i[5])) 
                                      pdf.drawString(375,x,str(crc)+str(i[8]))
                                      pdf.drawString(455,x,str(crc)+str(i[9]))
                                      pdf.drawString(517,x,str(crc)+str(i[10]))
                                      
                                  elif ps_cr=="after amount":
                                      pdf.drawString(28,x,str(i[1]))
                                      pdf.drawString(100,x,str(i[2]))
                                      pdf.drawString(168,x,str(i[3]))
                                      pdf.drawString(250,x,str(dfh))
                                      pdf.drawString(315,x,str(i[5])) 
                                      pdf.drawString(375,x,str(i[8])+str(crc))
                                      pdf.drawString(455,x,str(i[9])+str(crc))
                                      pdf.drawString(517,x,str(i[10])+str(crc))
                                      
                                  elif ps_cr=="before amount with space":
                                      pdf.drawString(28,x,str(i[1]))
                                
                                      pdf.drawString(100,x,str(i[2]))
                                      pdf.drawString(168,x,str(i[3]))
                                      pdf.drawString(250,x,str(dfh))
                                      pdf.drawString(315,x,str(i[5])) 
                                      pdf.drawString(375,x,str(crc)+" "+str(i[8]))
                                      pdf.drawString(455,x,str(crc)+" "+str(i[9]))
                                      pdf.drawString(517,x,str(crc)+" "+str(i[10]))
                                      
                                      
                                  elif ps_cr=="after amount with space":
                                      pdf.drawString(28,x,str(i[1]))
                                      pdf.drawString(100,x,str(i[2]))
                                      pdf.drawString(168,x,str(i[3]))
                                      pdf.drawString(250,x,str(dfh))
                                      pdf.drawString(315,x,str(i[5])) 
                                      pdf.drawString(375,x,str(i[8])+" "+str(crc))
                                      pdf.drawString(455,x,str(i[9])+" "+str(crc))
                                      pdf.drawString(517,x,str(i[10])+" "+str(crc))
                                  
                                  else:
                                      pass
                                
                              count += 1
                            
                              x-=15
                sql_inv_t="select sum(invoicetot),sum(totpaid), sum(balance) from invoice where businessname=%s"
                sql_inv_t_val=(cus_id,)
                fbcursor.execute(sql_inv_t,sql_inv_t_val)
                inv_ttt=fbcursor.fetchone() 
                if inv_ttt[0] is None:
                    dtr=0
                else:
                    dtr=inv_ttt[0]
                if inv_ttt[1] is None:
                    dtr1=0
                else:
                    dtr1=inv_ttt[1]
                if inv_ttt[2] is None:
                    dtr2=0
                else:
                    dtr2=inv_ttt[2]
                pdf.drawString(28,x,"__________________________________________________________________________________")
                if ps_cr=="before amount":
                                       
                                        pdf.drawString(28,x-13,"")
                                  
                                        pdf.drawString(100,x-13,"")
                                        pdf.drawString(168,x-13,"")
                                        pdf.drawString(250,x-13,"-Summary-")
                                        pdf.drawString(315,x-13,"") 
                                        pdf.drawString(375,x-13,str(crc)+str(dtr))
                                        pdf.drawString(455,x-13,str(crc)+str(dtr1))
                                        pdf.drawString(517,x-13,str(crc)+str(dtr2))
                elif ps_cr=="after amount":
                                      
                                        pdf.drawString(28,x-13,"")
                                        pdf.drawString(100,x-13,"")
                                        pdf.drawString(168,x-13,"-Summary-")
                                        pdf.drawString(250,x-13,"")
                                        pdf.drawString(315,x-13,"") 
                                        pdf.drawString(375,x-13,str(dtr)+str(crc))
                                        pdf.drawString(455,x-13,str(dtr1)+str(crc))
                                        pdf.drawString(517,x-13,str(dtr2)+str(crc))
                elif ps_cr=="before amount with space":
                                        pdf.drawString(28,x-13,"")
                                  
                                        pdf.drawString(100,x-13,"")
                                        pdf.drawString(168,x-13,"-Summary-")
                                        pdf.drawString(250,x-13,"")
                                        pdf.drawString(315,x-13,"") 
                                        pdf.drawString(375,x-13,str(crc)+" "+str(dtr))
                                        pdf.drawString(455,x-13,str(crc)+" "+str(dtr1))
                                        pdf.drawString(517,x-13,str(crc)+" "+str(dtr2))
                elif ps_cr=="after amount with space":
                                        pdf.drawString(28,x-13,"")
                                        pdf.drawString(100,x-13,"")
                                        pdf.drawString(168,x-13,"-Summary-")
                                        pdf.drawString(250,x-13,"")
                                        pdf.drawString(315,x-13,"") 
                                        pdf.drawString(375,x-13,str(dtr)+" "+str(crc))
                                        pdf.drawString(455,x-13,str(dtr1)+" "+str(crc))
                                        pdf.drawString(517,x-13,str(dtr2)+" "+str(crc))
                else:
                                  pass


                pdf.save()
                # win32api.ShellExecute(0,"","customer_Reports\Recurring_Invoice_Report.pdf",None,".",0)
            except:
              pass

            cus_lstfrm=StringVar()  
            cus_htcodeframe=Listbox(cus_attachlbframe, height=13, width=43,listvariable=cus_lstfrm, bg="white")
            global cus_filenamezrrr
            cus_filenamezrrr ="customer_Reports\CInvoice.pdf"
            wraped_text="/".join(wrap(cus_filenamezrrr,17))
            hrt=wraped_text.split('/')
            cus_htcodeframe.insert(0,hrt[1])

            cus_htcodeframe.place(x=5, y=5)
            cus_htcodeframe.bind('<Double-Button-1>' , cus_file)

            def cus_deslist():
                cus_laa=cus_htcodeframe.curselection()
                print("hloo",cus_htcodeframe.get(cus_laa))
                cus_yawn=cus_htcodeframe.get(cus_laa)        
                cus_htcodeframe.delete(ACTIVE)

            cus_lbl_btn_info=Label(cus_attachlbframe, text="Double click on attachment to view").place(x=30, y=230)
            cus_btn17=Button(cus_attachlbframe, width=20, text="Add attachment file...", command=cus_UploadAction).place(x=60, y=260)
            cus_btn18=Button(cus_attachlbframe, width=20, text="Remove attachment",command=cus_deslist).place(x=60, y=295)
            cus_lbl_tt_info=Label(cus_email_Frame, text="You can create predefined invoice, order, estimate\nand payment receipt email templates under Main\nmenu/Settings/E-Mail templates tab")
            cus_lbl_tt_info.place(x=740, y=370)

            cus_ready_frame=Frame(cus_mailDetail, height=20, width=1080, bg="#b3b3b3").place(x=0,y=530)
            
            cus_sendatalbframe=LabelFrame(cus_account_Frame,text="E-Mail(Sender data)",height=140, width=600)
            cus_sendatalbframe.place(x=240, y=165 )
            cus_lbl_sendermail=Label(cus_sendatalbframe, text="Company email address").place(x=5, y=10)
            cus_sentent=Entry(cus_sendatalbframe, width=40, textvariable=cus_email_from)
            cus_sentent.place(x=195, y=10)

            cus_lbl_sendecusswrd=Label(cus_sendatalbframe, text="Email Password").place(x=5, y=40)
            cus_pswrdent=Entry(cus_sendatalbframe, width=40, textvariable=cus_email_pswrd,show="*")
            cus_pswrdent.place(x=195, y=40)
          except:
            pass
  #------------------------------------------------------------------------------------Add Customer
  def cus_add_customer():
    #-------------------------------------------------------------------------------Add to database
    def cancel_add():
     
      add_customer.destroy()
    def cus_add_cst():
      cst_id=b1sd.get()#id
      cus_bs_nm=bnm_cus.get()
      if cst_id=="" or cus_bs_nm=="" :
            
        messagebox.showerror("Empty Field", "Customer ID field and Business Name field is Required!")

      else:
        
        #bs name
        # cmp_id=
        cus_bs_ad_cus=bdfdsfsd2.get("1.0",END)#bs ad name
        
        cus_bs_cnt=bs_cnt.get()#Contact person
        cus_bs_em=bs_em.get()#email bs
        cus_bs_tel=bs_tel.get()#bs tel
        cus_bs_fax=bs_fax.get()#bs fax
        cus_bs_mob=bs_mobi.get()#bs mob
        cus_bs_pymcheck=cus_ds_chk.get()# discount checkboc
        cus_bs_spc_tax=blsr.get()# specific tax
        cus_bs_spc_tax2=bdsfd14.get()# specific tax
        cus_bs_dis=b1f2.get()# discount
        cus_bs_ctr=bs_cus_ct.get()# customer category

        # ship 
        cus_shp_cat=cus_catg.get()# category
        cus_shp_st=cus_st.get()# status Checkbox
        cus_shp_cnt_pr=cus_sh_nam.get()#contact person
        cus_shp_adr=b2sds1.get("1.0",END)#contact address
        cus_shp_cnt=bs_sh_cnt.get()#Contact person
        cus_shp_em=bs_sh_em.get()#email bs
        cus_shp_tel=bs_sh_tel.get()#bs tel
        cus_shp_fax=bs_sh_fax.get()#bs fax
        cus_shp_cntry=cus_sh_coun.get()#contry
        cus_shp_city=cus_sh_cty.get()#city
        cus_shp_nte=scll.get("1.0", END)

        cus_ed_tbles="select customerno from customer where customerno=%s"
        cus_ed_tbles_valuz=(cst_id,)
        fbcursor.execute(cus_ed_tbles,cus_ed_tbles_valuz)
        cus_ins_val=fbcursor.fetchone()

        cus_ed_tbless="select businessname from customer where businessname=%s"
        cus_ed_tbless_valuz=(cus_bs_nm,)
        fbcursor.execute(cus_ed_tbless,cus_ed_tbless_valuz)
        cus_ins_valse=fbcursor.fetchone()
     
        if cus_ins_val is None:
          if cus_ins_valse is None:
            cus_tbl_add="INSERT INTO customer(customerno,category,status,businessname,businessaddress,shipname,shipaddress,contactperson,cpemail,cptelno,cpfax,cpmobileforsms,shipcontactperson,shipcpemail,shipcptelno,shipcpfax,taxexempt,specifictax1,discount,country,city,customertype,notes,specifictax2)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)" #adding values into db
            cus_tbl_add_val=(cst_id,cus_shp_cat,cus_shp_st,cus_bs_nm,cus_bs_ad_cus,cus_shp_cnt_pr,cus_shp_adr,cus_bs_cnt,cus_bs_em,cus_bs_tel,cus_bs_fax,cus_bs_mob,cus_shp_cnt,cus_shp_em,cus_shp_tel,cus_shp_fax,cus_bs_pymcheck,cus_bs_spc_tax,cus_bs_dis,cus_shp_cntry,cus_shp_city,cus_bs_ctr,cus_shp_nte,cus_bs_spc_tax2)
            fbcursor.execute(cus_tbl_add,cus_tbl_add_val)
            fbilldb.commit()
            for record in cus_main_tree.get_children():
              cus_main_tree.delete(record)
            cus_main_table_sql="select * from customer"
            fbcursor.execute(cus_main_table_sql)
            main_tb_val=fbcursor.fetchall()
            count_cus=0

            for i in main_tb_val:
              cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
              count_cus +=1
            
            add_customer.destroy()
          else:
            messagebox.showerror("Already Exists", "Customer ID value already exists. Duplicate value not allowed")
        else:
            messagebox.showerror("Already Exists", "Business name is already exists. Duplicate value not allowed")
    
    def top_btn():
        cus_bs_nm=bnm_cus.get()
        cus_bs_ad_cus=bdfdsfsd2.get("1.0",END)#bs ad name
        b1fr1.delete(0,'end')
        b1fr1.insert(0,cus_bs_nm)
        b2sds1.delete(1.0,'end')
        b2sds1.insert(1.0,cus_bs_ad_cus)

    def btm_btn():
        cus_bs_cnt=bs_cnt.get()#Contact person
        cus_bs_em=bs_em.get()#email bs
        cus_bs_tel=bs_tel.get()#bs tel
        cus_bs_fax=bs_fax.get()#bs fax
        b141sd.insert(0,cus_bs_cnt)
        b21vcvc1.delete(0,'end')
        b21vcvc1.insert(0,cus_bs_em)
        b3zx1.delete(0,'end')
        b3zx1.insert(0,cus_bs_tel)
        b4x141.delete(0,'end')
        b4x141.insert(0,cus_bs_fax)



    add_customer = Toplevel()  
    add_customer.title("Add new Customer ")
    p2 = PhotoImage(file = "images/fbicon.png")
    add_customer.iconphoto(False, p2)
    add_customer.geometry("775x580+300+100")
    Labelframe1=LabelFrame(add_customer,text="Customer")
    Labelframe1.place(x=10,y=10,width=755,height=525)
    a1=Label(Labelframe1,text="Customer ID:",fg="Blue")
    a2=Label(Labelframe1,text="Category:")
    a3=Label(Labelframe1,text="Status :")
    a3.place(x=620,y=7)
    cu_idr=IntVar() 
    b1sd=Entry(Labelframe1)
    cus_catg=StringVar() 
    b2=ttk.Combobox(Labelframe1,textvariable = cus_catg)    
    sql_cust_dt='SELECT DISTINCT category from customer'
    fbcursor.execute(sql_cust_dt)
    catgry=fbcursor.fetchall()
    b2['values'] = catgry 
    b2.place(x=390,y=220) 
    b2.current(0)
    a1.place(x=10,y=7)
    a2.place(x=330,y=7)   
    b1sd.place(x=120,y=7,width=200)
    b2.place(x=390,y=7,width=220)
    cus_st = IntVar()
    chkbtn1 = Checkbutton(Labelframe1, text = "Active", variable = cus_st, onvalue = 1, offvalue = 0)
    chkbtn1.select()
    chkbtn1.place(x=670,y=6)


    Labelframe2=LabelFrame(Labelframe1,text="Invoice to (appears on invoice)")
    Labelframe2.place(x=10,y=35,width=340,height=125)
    a1=Label(Labelframe2,text="Business Name:",fg="Blue").place(x=10,y=10)
    a2=Label(Labelframe2,text="Address:",fg="Blue").place(x=10,y=35)
    bnm_cus=StringVar()
    bs_adr_cus=StringVar()
    
    

    b1=Entry(Labelframe2, textvariable=bnm_cus)
    # b1.config(validate='focusout', validatecommand=vcmd, invalidcommand=ivcmd)
    b1.place(x=110,y=10,width=210)

    bdfdsfsd2=scrolledtext.ScrolledText(Labelframe2)
    bdfdsfsd2.place(x=110,y=35,width=210,height=63)  
    btn110=Button(Labelframe1,width=3,height=2,compound = LEFT,text=">>", command=lambda:top_btn()).place(x=359,y=85,height=20)


    Labelframe3=LabelFrame(Labelframe1,text="Ship to (appears on invoice)")
    Labelframe3.place(x=400,y=35,width=340,height=125)
    a11=Label(Labelframe3,text="Ship to Name:").place(x=10,y=10)
    a21=Label(Labelframe3,text="Address:").place(x=10,y=35)
    cus_sh_nam=StringVar()
    cus_sh_adr=StringVar()
    b1fr1=Entry(Labelframe3, textvariable=cus_sh_nam)
    b1fr1.place(x=110,y=10,width=210)
    b2sds1=scrolledtext.ScrolledText(Labelframe3)
    b2sds1.place(x=110,y=35,width=210,height=63)


    Labelframe4=LabelFrame(Labelframe1,text="Contact")
    Labelframe4.place(x=10,y=170,width=340,height=137)
    a11=Label(Labelframe4,text="Contact Person:").place(x=10,y=10)
    a21=Label(Labelframe4,text="Email Address:",fg="Blue").place(x=10,y=35)
    a31=Label(Labelframe4,text="Tel. No:").place(x=10,y=60)
    a41=Label(Labelframe4,text="Fax:").place(x=200,y=60)
    a51=Label(Labelframe4,text="Mobile number for SMS notification:").place(x=10,y=85)
    bs_cnt=StringVar()
    bs_em=StringVar()
    bs_tel=StringVar()
    bs_fax=StringVar()
    bs_mobi=StringVar()
    b11=Entry(Labelframe4, textvariable=bs_cnt).place(x=110,y=10,width=210)

    #-------------------------------------------------------------------------------------------Email Validation
    b21=Entry(Labelframe4,textvariable=bs_em)
    

    def validate(value):
          
          """
          Validat the email entry
          :param value:
          :return:
          """
          pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
          if re.fullmatch(pattern, value) is None:
              
              return False

          b21.config(fg="black")
          return True

    def on_invalid():
          b21.config(fg="red")
          
    vcmd = (Labelframe2.register(validate), '%P')
    ivcmd = (Labelframe2.register(on_invalid),)

    b21.config(validate='focusout', validatecommand=vcmd, invalidcommand=ivcmd)
    
    b21.place(x=110,y=35,width=210)

    b311=Entry(Labelframe4,textvariable=bs_tel)
    def validate_tel(value):
          
          """
          Validat the email entry
          :param value:
          :return:
          """
          pattern = r'^[0-9]\d{9,10}$'
          if re.fullmatch(pattern, value) is None:
              
              return False
          b311.config(fg="black")
          return True

    def on_invalid_tel():
          b311.config(fg="red")
          
    v_tel_cmd = (Labelframe2.register(validate_tel), '%P')
    iv_tel_cmd = (Labelframe2.register(on_invalid_tel),)
    
    
    b311.config(validate='focusout', validatecommand=v_tel_cmd, invalidcommand=iv_tel_cmd)
    b311.place(x=110,y=60,width=90)

    b4126=Entry(Labelframe4,textvariable=bs_fax)
    def validate_telb4126(value):
          
          """
          Validat the email entry
          :param value:
          :return:
          """
          pattern = r'^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3}[\s.-]\d{4}$'
          if re.fullmatch(pattern, value) is None:
              
              return False
          b4126.config(fg="black")
          return True

    def on_invalid_telb4126():
          b4126.config(fg="red")
          
    v_tel_cmdb4126 = (Labelframe2.register(validate_telb4126), '%P')
    iv_tel_cmdb4126 = (Labelframe2.register(on_invalid_telb4126),)
    b4126.config(validate='focusout', validatecommand=v_tel_cmdb4126, invalidcommand=iv_tel_cmdb4126)
    b4126.place(x=230,y=60,width=90)
    
    b51=Entry(Labelframe4,textvariable=bs_mobi)
    def validate_telb51(value):
          
          """
          Validat the email entry
          :param value:
          :return:
          """
          pattern = r'^[0-9]\d{9}$'
          if re.fullmatch(pattern, value) is None:
              
              return False
          b51.config(fg="black")
          return True

    def on_invalid_telb51():
          b51.config(fg="red")
          
    v_tel_cmdb51 = (Labelframe2.register(validate_telb51), '%P')
    iv_tel_cmdb51 = (Labelframe2.register(on_invalid_telb51),)
    b51.config(validate='focusout', validatecommand=v_tel_cmdb51, invalidcommand=iv_tel_cmdb51)
    b51.place(x=215,y=85,width=105)
    btn111=Button(Labelframe1,width=3,height=2,compound = LEFT,text=">>", command=lambda:btm_btn()).place(x=359,y=220,height=20)

    bs_sh_cnt=StringVar()
    bs_sh_em=StringVar()
    bs_sh_tel=StringVar()
    bs_sh_fax=StringVar()

    Labelframe5=LabelFrame(Labelframe1,text="Ship To Contact")
    Labelframe5.place(x=400,y=170,width=340,height=108)
    a11=Label(Labelframe5,text="Contact Person:").place(x=10,y=10)
    a21=Label(Labelframe5,text="Email Address:").place(x=10,y=35)
    a31=Label(Labelframe5,text="Tel. No:").place(x=10,y=60)
    a41=Label(Labelframe5,text="Fax:").place(x=200,y=60)
  
    b141sd=Entry(Labelframe5, textvariable=bs_sh_cnt)
    b141sd.place(x=110,y=10,width=210)
    
    b21vcvc1=Entry(Labelframe5,textvariable=bs_sh_em)
    def validateb211(value):
          
          """
          Validat the email entry
          :param value:
          :return:
          """
          pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
          if re.fullmatch(pattern, value) is None:
              
              return False

          b21vcvc1.config(fg="black")
          return True

    def on_invalidb211():
          b21vcvc1.config(fg="red")
          
    vcmdb211 = (Labelframe2.register(validateb211), '%P')
    ivcmdb211 = (Labelframe2.register(on_invalidb211),)

    b21vcvc1.config(validate='focusout', validatecommand=vcmdb211, invalidcommand=ivcmdb211)
    b21vcvc1.place(x=110,y=35,width=210)
    
    b3zx1=Entry(Labelframe5,textvariable=bs_sh_tel)
    def validate_telb31(value):
          
          """
          Validat the email entry
          :param value:
          :return:
          """
          pattern = r'^[0-9]\d{9,10}$'
          if re.fullmatch(pattern, value) is None:
              
              return False
          b3zx1.config(fg="black")
          return True

    def on_invalid_telb31():
          b3zx1.config(fg="red")
          
    v_tel_cmdb31 = (Labelframe2.register(validate_telb31), '%P')
    iv_tel_cmdb31 = (Labelframe2.register(on_invalid_telb31),)
    b3zx1.config(validate='focusout', validatecommand=v_tel_cmdb31, invalidcommand=iv_tel_cmdb31)
    b3zx1.place(x=110,y=60,width=90)

    b4x141=Entry(Labelframe5,textvariable=bs_sh_fax)
    def validate_telb4141(value):
          
          """
          Validat the email entry
          :param value:
          :return:
          """
          pattern = r'^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3}[\s.-]\d{4}$'
          if re.fullmatch(pattern, value) is None:
              
              return False
          b4x141.config(fg="black")
          return True

    def on_invalid_telb4141():
          b4x141.config(fg="red")
          
    v_tel_cmdb4141 = (Labelframe2.register(validate_telb4141), '%P')
    iv_tel_cmdb4141 = (Labelframe2.register(on_invalid_telb4141),)
    b4x141.config(validate='focusout', validatecommand=v_tel_cmdb4141, invalidcommand=iv_tel_cmdb4141)
    b4x141.place(x=230,y=60,width=90)


    Labelframe6=LabelFrame(Labelframe1,text="Payment Option")
    Labelframe6.place(x=10,y=317,width=340,height=80)
    cus_ds_chk = StringVar()
    cus_sp_tx=IntVar()
    cus_sp_tx2=IntVar()
    cus_sp_disc=IntVar()
    chkbtn1 = Checkbutton(Labelframe6, text = "Tax Exempt", variable = cus_ds_chk, onvalue = 1, offvalue = 0, font=("arial", 8))
    chkbtn1.place(x=10,y=6)
    chkbtn1.select()

    
    a12=Label(Labelframe6,text="Discount%:").place(x=10,y=30)
    
    cus_sp_disc = IntVar(Labelframe6)
    
    
    #-----------------------------------------------------------------------------------------------tax2
    swt='select taxtype from company'
    fbcursor.execute(swt)
    fdt=fbcursor.fetchone()
    def tax_frt(S,d):
        if d=='1':
          if not S in ['.','0','1','2','3','4','5','6','7','8','9']:
            return False
          return True
          
        if d.isdigit():
          return True


    edt_lty=(Labelframe6.register(tax_frt), '%S','%d')
    blsr=Entry(Labelframe6, textvariable=cus_sp_tx)
    bdsfd14=Entry(Labelframe6)
    if fdt[0]=='3':
      a11=Label(Labelframe6,text="Specific Tax1%:").place(x=150,y=7)
      blsr=Entry(Labelframe6, )
      
      # edt_ltyr=(Labelframe6.register(tax_frtinv),)
      blsr.config(validate='key',validatecommand=(edt_lty))
      blsr.place(x=250,y=7,width=70)
      
      bdsfd14.config(validate='key',validatecommand=(edt_lty))
      bdsfd14.place(x=250,y=30,width=70)
      a16=Label(Labelframe6,text="Specific Tax2%::").place(x=150,y=30)
    elif fdt[0]=='2':
      a11=Label(Labelframe6,text="Specific Tax1%:").place(x=150,y=7)
      
      blsr.config(validate='key',validatecommand=(edt_lty))
      blsr.place(x=250,y=7,width=70)
    elif fdt[0]=='1':
      pass
    b1f2=Entry(Labelframe6)
    b1f2.config(validate='key',validatecommand=(edt_lty))
    b1f2.place(x=80,y=30,width=70)

    Labelframe7=LabelFrame(Labelframe1,text="Customer type")
    Labelframe7.place(x=10,y=405,width=340,height=90)
    bs_cus_ct=StringVar()
    r1=Radiobutton(Labelframe7, text = "Client", variable = bs_cus_ct, value ="Client")
    r1.select()
    r1.place(x=5,y=15)
    
    r2=Radiobutton(Labelframe7, text = "Vender", variable = bs_cus_ct, value = "Vender")
    r2.deselect()
    r2.place(x=90,y=15)
    r3=Radiobutton(Labelframe7, text = "Both(Client/Vender)", variable = bs_cus_ct, value = "Both(Client/Vender)")
    r3.deselect()
    r3.place(x=180,y=15)


    Labelframe8=LabelFrame(Labelframe1,text="Additional Info")
    Labelframe8.place(x=400,y=288,width=340,height=80)
    a11=Label(Labelframe8,text="Country:").place(x=10,y=5)
    a12=Label(Labelframe8,text="City:").place(x=10,y=30)
    cus_sh_coun=StringVar() 
    cus_sh_cty=StringVar() 

    b11=ttk.Combobox(Labelframe8,textvariable=cus_sh_coun)
    b11.place(x=110,y=5,width=210)
    b11['values'] = ('India','America')    
    
    b11.place(x=110,y=5) 
    b12=Entry(Labelframe8,textvariable=cus_sh_cty).place(x=110,y=30,width=210)
    Labelframe9=LabelFrame(Labelframe1,text="Notes")
    Labelframe9.place(x=400,y=380,width=340,height=115)
    '''scrollbar = Scrollbar(Labelframe9)
          scrollbar.place(x=300,y=10)
          b12=Entry(Labelframe9,yscrollcommand=scrollbar.set).place(x=10,y=10,width=290,height=70)
          yscrollcommand.config(command=b12.yview)'''
    cus_nt=StringVar()
    global scll
    scll=scrolledtext.ScrolledText(Labelframe9)
    scll.place(x=20,y=10,width=295,height=70)
    # scrollbar_cus_nt = Scrollbar(Labelframe9)
    # scrollbar_cus_nt.place(x=295,y=10)

    btn1=Button(add_customer,width=50,compound = LEFT,image=tick ,command=lambda:cus_add_cst(),text="  OK").place(x=20, y=545)
    btn2=Button(add_customer,width=80,compound = LEFT,image=cancel,text="  Cancel",command=cancel_add).place(x=665, y=545)
    add_customer.mainloop()
  #-----------------------------------------------------------------------------------Edit Customer
  def cus_edit_customer():
    try:
      cus_id=cus_main_tree.item(cus_main_tree.focus())["values"][1]
      
      cus_ed_tbles="select * from customer where customerno=%s"
      cus_ed_tbles_valuz=(cus_id,)
      fbcursor.execute(cus_ed_tbles,cus_ed_tbles_valuz)
      cus_ins_val=fbcursor.fetchone()

      def cancel_edt():
        edit_customer.destroy()

      def cus_edit_cst():
        
              cst_id=b1s.get()#id
            
              cus_bs_nm=bnm_cus.get()#bs name

              cus_bs_ad_cus=bnjh2.get('1.0',END)#bs ad name
              cus_bs_cnt=bs_cnt.get()#Contact person
              cus_bs_em=bs_em.get()#email bs
              cus_bs_tel=bs_tel.get()#bs tel
              cus_bs_fax=bs_fax.get()#bs fax
              cus_bs_mob=bs_mobi.get()#bs mob
              cus_bs_pymcheck=cus_ds_chk.get()# discount checkboc
              cus_bs_spc_tax=cus_sp_tx.get()# specific tax
              cus_bs_spc_tax2=cus_sp_tx2.get()
              cus_bs_dis=cus_sp_disc.get()# discount
              cus_bs_ctr=bs_cus_ct.get()# customer category

              # ship 
              cus_shp_cat=cus_catg.get()# category
              cus_shp_st=cus_st.get()# status Checkbox
              cus_shp_cnt_pr=cus_sh_nam.get()#contact person
              cus_shp_adr=b2vxcvcxbc1.get("1.0",END)#contact address
              cus_shp_cnt=bs_sh_cnt.get()#Contact person
              cus_shp_em=bs_sh_em.get()#email bs
              cus_shp_tel=bs_sh_tel.get()#bs tel
              cus_shp_fax=bs_sh_fax.get()#bs fax
              cus_shp_cntry=cus_sh_coun.get()#contry
              cus_shp_city=cus_sh_cty.get()#city
              cus_shp_ntre=cfgd.get("1.0", END) 
              
              cus_ed_tbless="select businessname from customer where businessname=%s"
              cus_ed_tbless_valuz=(cus_bs_nm,)
              fbcursor.execute(cus_ed_tbless,cus_ed_tbless_valuz)
              cus_ins_valse=fbcursor.fetchone()
            
              cus_tbl_edit="update customer set customerno=%s,category=%s,status=%s,businessname=%s,businessaddress=%s,shipname=%s,shipaddress=%s,contactperson=%s,cpemail=%s,cptelno=%s,cpfax=%s,cpmobileforsms=%s,shipcontactperson=%s,shipcpemail=%s,shipcptelno=%s,shipcpfax=%s,taxexempt=%s,specifictax1=%s,discount=%s,country=%s,city=%s,customertype=%s,notes=%s, specifictax2=%s where customerno = %s" #adding values into db
              cus_tbl_edit_val=(cst_id,cus_shp_cat,cus_shp_st,cus_bs_nm,cus_bs_ad_cus,cus_shp_cnt_pr,cus_shp_adr,cus_bs_cnt,cus_bs_em,cus_bs_tel,cus_bs_fax,cus_bs_mob,cus_shp_cnt,cus_shp_em,cus_shp_tel,cus_shp_fax,cus_bs_pymcheck,cus_bs_spc_tax,cus_bs_dis,cus_shp_cntry,cus_shp_city,cus_bs_ctr,cus_shp_ntre,cus_bs_spc_tax2,cus_id,)
              fbcursor.execute(cus_tbl_edit,cus_tbl_edit_val)
              fbilldb.commit()
              cus_main_s=ttk.Style()
              for record in cus_main_tree.get_children():
                cus_main_tree.delete(record)
              cus_main_table_sql="select * from customer"
              fbcursor.execute(cus_main_table_sql)
              main_tb_val=fbcursor.fetchall()
              count_cus=0

              for i in main_tb_val:
                cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
                count_cus +=1
              edit_customer.destroy()
                 

      def top_SHP_btn():
        cus_bs_nm=bnm_cus.get()#bs name
        # cmp_id=
        cus_bs_ad_cus=bnjh2.get("1.0",END)#bs ad name
        b1fdgfg1.delete(0,'end')
        b1fdgfg1.insert(0,cus_bs_nm)
        b2vxcvcxbc1.delete(1.0,'end')
        b2vxcvcxbc1.insert(1.0,cus_bs_ad_cus)

      def btm_shp_btn():
          
          cus_bs_cnt=bs_cnt.get()#Contact person
          cus_bs_em=bs_em.get()#email bs
          cus_bs_tel=bs_tel.get()#bs tel
          cus_bs_fax=bs_fax.get()#bs fax
          b1dsf1.delete(0,'end')
          b1dsf1.insert(0,cus_bs_cnt)
          b21cd1.delete(0,'end')
          b21cd1.insert(0,cus_bs_em)
          b311.delete(0,'end')
          b311.insert(0,cus_bs_tel)
          b414.delete(0,'end')
          b414.insert(0,cus_bs_fax)
      edit_customer = Toplevel()  
      edit_customer.title("Add new Customer ")
      p2 = PhotoImage(file = "images/fbicon.png")
      edit_customer.iconphoto(False, p2)
      edit_customer.geometry("775x580+300+100")
      Labelframe1=LabelFrame(edit_customer,text="Customer")
      Labelframe1.place(x=10,y=10,width=755,height=525)
      a1=Label(Labelframe1,text="Customer ID:",fg="Blue")
      a2=Label(Labelframe1,text="Category:")
      a3=Label(Labelframe1,text="Status :")
      a3.place(x=620,y=7)
    
      b1s=Entry(Labelframe1)
      
      b1s.insert(0,cus_ins_val[24])
      b1s.config(state=DISABLED,disabledbackground="white",disabledforeground="black")
      cus_catg=StringVar() 
      b2=ttk.Combobox(Labelframe1,textvariable = cus_catg) 
      sql_cust_dt='SELECT DISTINCT category from customer'
      fbcursor.execute(sql_cust_dt)
      catgry=fbcursor.fetchall()    
      b2['values'] = catgry  
      b2.place(x=390,y=220) 
      b2.current(cus_ins_val[3])
      a1.place(x=10,y=7)
      a2.place(x=330,y=7)   
      b1s.place(x=120,y=7,width=200)
      b2.place(x=390,y=7,width=220)
      cus_st = IntVar()
      chkbtn1 = Checkbutton(Labelframe1, text = "Active", variable = cus_st, onvalue = 1, offvalue = 0)
      if cus_ins_val[3]=="0":
        chkbtn1.deselect()
      else:
        chkbtn1.select()
      chkbtn1.place(x=670,y=6)

      Labelframe2=LabelFrame(Labelframe1,text="Invoice to (appears on invoice)")
      Labelframe2.place(x=10,y=35,width=340,height=125)
      a1=Label(Labelframe2,text="Business Name:",fg="Blue").place(x=10,y=10)
      a2=Label(Labelframe2,text="Address:",fg="Blue").place(x=10,y=35)
      bnm_cus=StringVar()
      bs_adr_cus=StringVar()
      b1=Entry(Labelframe2, textvariable=bnm_cus)
      b1.insert(0,cus_ins_val[4])
      b1.place(x=110,y=10,width=210)
      bnjh2=scrolledtext.ScrolledText(Labelframe2) 
      
      bnjh2.insert(1.0,cus_ins_val[5])
      bnjh2.place(x=110,y=35,width=210,height=63) 
      # b1.place(x=359,y=85,height=20)
      btn110=Button(Labelframe1,width=3,height=2,compound = LEFT,text=">>", command=lambda:top_SHP_btn()).place(x=359,y=85,height=20)


      Labelframe3=LabelFrame(Labelframe1,text="Ship to (appears on invoice)")
      Labelframe3.place(x=400,y=35,width=340,height=125)
      a11=Label(Labelframe3,text="Ship to Name:").place(x=10,y=10)
      a21=Label(Labelframe3,text="Address:").place(x=10,y=35)
      cus_sh_nam=StringVar()
      cus_sh_adr=StringVar()
      b1fdgfg1=Entry(Labelframe3, textvariable=cus_sh_nam)
      b1fdgfg1.insert(0,str(cus_ins_val[6]))
      b1fdgfg1.place(x=110,y=10,width=210)
      b2vxcvcxbc1=scrolledtext.ScrolledText(Labelframe3)
      b2vxcvcxbc1.delete(1.0,'end')
      b2vxcvcxbc1.insert(1.0,str(cus_ins_val[7]))
      b2vxcvcxbc1.place(x=110,y=35,width=210,height=63)
      


      Labelframe4=LabelFrame(Labelframe1,text="Contact")
      Labelframe4.place(x=10,y=170,width=340,height=137)
      a11=Label(Labelframe4,text="Contact Person:").place(x=10,y=10)
      
      a21=Label(Labelframe4,text="Email Address:",fg="Blue").place(x=10,y=35)
      a31=Label(Labelframe4,text="Tel. No:").place(x=10,y=60)
      a41=Label(Labelframe4,text="Fax:").place(x=200,y=60)
      a51=Label(Labelframe4,text="Mobile number for SMS notification:").place(x=10,y=85)
      
      bs_cnt=StringVar()
      bs_em=StringVar()
      bs_tel=StringVar()
      bs_fax=StringVar()
      
      b11=Entry(Labelframe4, textvariable=bs_cnt)
      b11.insert(0,str(cus_ins_val[8]))
      b11.place(x=110,y=10,width=210)
      
      b21=Entry(Labelframe4,textvariable=bs_em)
      def validate(value):
            
            """
            Validat the email entry
            :param value:
            :return:
            """
            pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
            if re.fullmatch(pattern, value) is None:
                
                return False
            b21.config(fg="black")
            return True

      def on_invalid():
            b21.config(fg="red")
            
      vcmd = (Labelframe4.register(validate), '%P')
      ivcmd = (Labelframe4.register(on_invalid),)

      
      
      b21.insert(0,str(cus_ins_val[9]))
      b21.config(validate='focusout', validatecommand=vcmd, invalidcommand=ivcmd)
      b21.place(x=110,y=35,width=210)
      
      def validate_tel(value):
            
            """
            Validat the email entry
            :param value:
            :return:
            """
            pattern = r'^[0-9]\d{9,10}$'
            if re.fullmatch(pattern, value) is None:
                return False
                
            b31.config(fg="black")
            return True

      def on_invalid_tel():
          b31.config(fg="red")
      
          
      v_tel_cmd = (Labelframe4.register(validate_tel), '%P')
      iv_tel_cmd = (Labelframe4.register(on_invalid_tel),)

      b31=Entry(Labelframe4,textvariable=bs_tel)
      b31.config(validate='focusout', validatecommand=v_tel_cmd, invalidcommand=iv_tel_cmd)
      b31.insert(0,str(cus_ins_val[10]))

      b31.place(x=110,y=60,width=90)
      b4126=Entry(Labelframe4,textvariable=bs_fax)
      def validate_telb4126(value):
            
            """
            Validat the email entry
            :param value:
            :return:
            """
            pattern = r'^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3}[\s.-]\d{4}$'
            if re.fullmatch(pattern, value) is None:
                
                return False
            b4126.config(fg="black")
            return True

      def on_invalid_telb4126():
            b4126.config(fg="red")
            
      v_tel_cmdb4126 = (Labelframe4.register(validate_telb4126), '%P')
      iv_tel_cmdb4126 = (Labelframe4.register(on_invalid_telb4126),)
      b4126.config(validate='focusout', validatecommand=v_tel_cmdb4126, invalidcommand=iv_tel_cmdb4126)
      b4126.insert(0,str(cus_ins_val[11]))
      b4126.place(x=230,y=60,width=90)
      bs_mobi=StringVar()
      b5fd1=Entry(Labelframe4,textvariable=bs_mobi)
      def validate_tel3(value):
            
            """
            Validat the email entry
            :param value:
            :return:
            """
            pattern = r'^[0-9]\d{9}$'
            if re.fullmatch(pattern, value) is None:
                return False
                
            b5fd1.config(fg="black")
            return True

      def on_invalid_tel3():
          b5fd1.config(fg="red")
      
      v_tel_cmd3 = (Labelframe4.register(validate_tel3), '%P')
      iv_tel_cmd3 = (Labelframe4.register(on_invalid_tel3),)
      b5fd1.insert(0,str(cus_ins_val[12]))
      b5fd1.config(validate='focusout', validatecommand=v_tel_cmd3, invalidcommand=iv_tel_cmd3)
     
      b5fd1.place(x=215,y=85,width=105)
      btn111=Button(Labelframe1,width=3,height=2,compound = LEFT,text=">>",command=lambda:btm_shp_btn())
      btn111.place(x=359,y=220,height=20)
    
      bs_sh_cnt=StringVar()
      bs_sh_em=StringVar()
      bs_sh_tel=StringVar()
      bs_sh_fax=StringVar()
  
      Labelframe5=LabelFrame(Labelframe1,text="Ship To Contact")
      Labelframe5.place(x=400,y=170,width=340,height=108)
      a11=Label(Labelframe5,text="Contact Person:").place(x=10,y=10)
      a21=Label(Labelframe5,text="Email Address:").place(x=10,y=35)
      a31=Label(Labelframe5,text="Tel. No:").place(x=10,y=60)
      a41=Label(Labelframe5,text="Fax:").place(x=200,y=60)
      
      b1dsf1=Entry(Labelframe5, textvariable=bs_sh_cnt)
      b1dsf1.insert(0,str(cus_ins_val[13]))
      b1dsf1.place(x=110,y=10,width=210)
      b21cd1=Entry(Labelframe5,textvariable=bs_sh_em)
      

      def validateb21(value):
            
            """
            Validat the email entry
            :param value:
            :return:
            """
            pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
            if re.fullmatch(pattern, value) is None:
                
                return False

          
            b21cd1.config(fg="black")
            return True

      def on_invalidb21():
            b21cd1.config(fg="red")
            
      vcmdb21 = (Labelframe5.register(validateb21), '%P')
      ivcmdb21 = (Labelframe5.register(on_invalidb21),)
      
      b21cd1.config(validate='focusout', validatecommand=vcmdb21, invalidcommand=ivcmdb21)
      b21cd1.insert(0,str(cus_ins_val[14]))
      b21cd1.place(x=110,y=35,width=210)
      b311=Entry(Labelframe5,textvariable=bs_sh_tel)
      def validate_telb311(value):
            
            """
            Validat the email entry
            :param value:
            :return:
            """
            pattern = r'^[0-9]\d{9,10}$'
            if re.fullmatch(pattern, value) is None:
                return False
                
            b311.config(fg="black")
            return True

      def on_invalid_telb311():
          b311.config(fg="red")
      v_tel_cmdb311 = (Labelframe5.register(validate_telb311), '%P')
      iv_tel_cmdb311 = (Labelframe5.register(on_invalid_telb311),)

      b311.insert(0,str(cus_ins_val[15]))
      b311.config(validate='focusout', validatecommand=v_tel_cmdb311, invalidcommand=iv_tel_cmdb311)
      b311.place(x=110,y=60,width=90)

      b414=Entry(Labelframe5,textvariable=bs_sh_fax)
      def validate_telb414(value):
            
            """
            Validat the email entry
            :param value:
            :return:
            """
            pattern = r'^(\+\d{1,2}\s)?\(?\d{3}\)?[\s.-]\d{3}[\s.-]\d{4}$'
            if re.fullmatch(pattern, value) is None:
                
                return False
            b414.config(fg="black")
            return True

      def on_invalid_telb414():
            b414.config(fg="red")
            
      v_tel_cmdb414 = (Labelframe5.register(validate_telb414), '%P')
      iv_tel_cmdb414 = (Labelframe5.register(on_invalid_telb414),)
      b414.config(validate='focusout', validatecommand=v_tel_cmdb414, invalidcommand=iv_tel_cmdb414)

      b414.insert(0,str(cus_ins_val[16]))
      b414.place(x=230,y=60,width=90)


      Labelframe6=LabelFrame(Labelframe1,text="Payment Option")
      Labelframe6.place(x=10,y=317,width=340,height=80)
      cus_ds_chk = StringVar()
      cus_sp_tx=IntVar()
      cus_sp_tx2=IntVar()
      cus_sp_disc=IntVar()
      chkbtn1 = Checkbutton(Labelframe6, text = "Tax Exempt", variable = cus_ds_chk, onvalue = 1, offvalue = 0, font=("arial", 8))
      if cus_ins_val[17]=="0":
        chkbtn1.deselect()
      else:
        chkbtn1.select()
      chkbtn1.place(x=10,y=6)

      
      a12=Label(Labelframe6,text="Discount%:").place(x=10,y=30)
      cus_sp_disc = IntVar(Labelframe6)

      cus_sp_disc=Entry(Labelframe6)
      
        # edt_ltyr=(Labelframe6.register(tax_frtinv),)
      def tax_frt(S,d):
          if d=='1':
            if not S in ['.','0','1','2','3','4','5','6','7','8','9']:
              return False
            return True
            
          if d.isdigit():
            return True


      edt_lty=(Labelframe6.register(tax_frt), '%S','%d')

      cus_sp_disc.insert(0,str(cus_ins_val[19]))
      cus_sp_disc.config(validate='key',validatecommand=(edt_lty))
      cus_sp_disc.place(x=80,y=30,width=70)

      swt='select taxtype from company'
      fbcursor.execute(swt)
      fdt=fbcursor.fetchone()
      print(fdt[0])
      cus_sp_tx=Entry(Labelframe6)
      cus_sp_tx2=Entry(Labelframe6)
      cus_sp_tx=Entry(Labelframe6)
      if fdt[0]=='3':

        a11=Label(Labelframe6,text="Specific Tax1%:").place(x=150,y=7)
        
        cus_sp_tx.insert(0,str(cus_ins_val[18]))
        cus_sp_tx.config(validate='key',validatecommand=(edt_lty))
        cus_sp_tx.place(x=250,y=7,width=70)
        
        cus_sp_tx2.insert(0,str(cus_ins_val[25]))
        cus_sp_tx2.config(validate='key',validatecommand=(edt_lty))
        cus_sp_tx2.place(x=250,y=30,width=70)
        
        a16=Label(Labelframe6,text="Specific Tax2%::").place(x=150,y=30)
      elif fdt[0]=='2':
        a11=Label(Labelframe6,text="Specific Tax1%:").place(x=150,y=7)
        
        cus_sp_tx.insert(0,str(cus_ins_val[18]))
        cus_sp_tx.config(validate='key',validatecommand=(edt_lty))
        cus_sp_tx.place(x=250,y=7,width=70)
      elif fdt[0]=='1':
        pass

      Labelframe7=LabelFrame(Labelframe1,text="Customer type")
      Labelframe7.place(x=10,y=405,width=340,height=90)
      bs_cus_ct=StringVar()
      r1=Radiobutton(Labelframe7, text = "Client", variable = bs_cus_ct, value ="Client")
      r2=Radiobutton(Labelframe7, text = "Vender", variable = bs_cus_ct, value = "Vender")
      r3=Radiobutton(Labelframe7, text = "Both(Client/Vender)", variable = bs_cus_ct, value = "Both(Client/Vender)")
      if cus_ins_val[22]=="Client":
        r1.select()
        r2.deselect()
        r3.deselect()
      elif cus_ins_val[22]=="Vender":
        r1.deselect()
        r2.select()
        r3.deselect()
      else:
        r1.deselect()
        r2.deselect()
        r3.select()
      r1.place(x=5,y=15)
      r2.place(x=90,y=15)
      r3.place(x=180,y=15)

      Labelframe8=LabelFrame(Labelframe1,text="Additional Info")
      Labelframe8.place(x=400,y=288,width=340,height=80)
      a11=Label(Labelframe8,text="Country:").place(x=10,y=5)
      a12=Label(Labelframe8,text="City:").place(x=10,y=30)
      cus_sh_coun=StringVar() 
      cus_sh_cty=StringVar() 

      b11=ttk.Combobox(Labelframe8,textvariable=cus_sh_coun)
      b11.place(x=110,y=5,width=210)
      b11['values'] = ('India','America')  
      b11.insert(0,str(cus_ins_val[20]))  
      b11.place(x=110,y=5) 
      b12=Entry(Labelframe8,textvariable=cus_sh_cty)
      b12.insert(0,str(cus_ins_val[21]))  
      b12.place(x=110,y=30,width=210)
      Labelframe9=LabelFrame(Labelframe1,text="Notes")
      Labelframe9.place(x=400,y=380,width=340,height=115)
      '''scrollbar = Scrollbar(Labelframe9)
            scrollbar.place(x=300,y=10)
            b12=Entry(Labelframe9,yscrollcommand=scrollbar.set).place(x=10,y=10,width=290,height=70)
            yscrollcommand.config(command=b12.yview)'''
      cus_nt=StringVar()
      global cfgd
      cfgd=scrolledtext.ScrolledText(Labelframe9)
      cfgd.insert(1.0,str(str(cus_ins_val[23])))
      cfgd.place(x=20,y=10,width=295,height=70)
      # scrollbar_cus_nt = Scrollbar(Labelframe9)
      # scrollbar_cus_nt.place(x=295,y=10)

      btn1=Button(edit_customer,width=50,compound = LEFT,image=tick ,command=lambda:cus_edit_cst(),text="  OK").place(x=20, y=545)
      btn2=Button(edit_customer,width=80,compound = LEFT,image=cancel,text="  Cancel", command=cancel_edt).place(x=665, y=545)
      edit_customer.mainloop()
    except:
      pass
  #-----------------------------------------------------------------------------------Delete Customer
  def cus_delete_customer(): 
    try:
      cus_id=cus_main_tree.item(cus_main_tree.focus())["values"][1]
      
      
      messagebox.askyesno("Delete Customers", "Are you sure want to delete 1 Customer(s) ?")
      sql_qr="DELETE FROM customer WHERE customerno=%s"
      sql_qr_val=(cus_id,)
      fbcursor.execute(sql_qr,sql_qr_val)
      fbilldb.commit()
      cus_main_tree.selection_set(1)

      for record in cus_main_tree.get_children():
        cus_main_tree.delete(record)
      cus_main_table_sql="select * from customer"
      fbcursor.execute(cus_main_table_sql)
      main_tb_val=fbcursor.fetchall()
      count_cus=0

      for i in main_tb_val:
        cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
        count_cus +=1
    except:
      pass

  #-----------------------------------------------------------------------------------Preview Invoice Customer
  def cus_previewinvoice_customer():
    try:
      cus_in_preview = Toplevel()
      cus_in_preview.title("F-Billing Revolution Invoice Report ")
      cus_in_p2= PhotoImage(file = "images/fbicon.png")
      cus_in_preview.iconphoto(False, cus_in_p2)
      cus_in_preview.geometry("1800x1800+0+0")
      cus_in_frame = Frame(cus_in_preview,width=1500,height=1800,bg="white")
      cus_in_frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      cus_in_frame.place(x=0,y=30)
      cus_in_canvas=Canvas(cus_in_frame,bg='grey',width=1400,height=1200,scrollregion=(0,0,1500, 1200))


      cus_in_vertibar=Scrollbar(cus_in_frame,orient=VERTICAL)
      cus_in_vertibar.pack(side=RIGHT,fill=Y)
      cus_in_vertibar.config(command=cus_in_canvas.yview)
      cus_in_canvas.config(width=1338,height=710)

      cus_in_canvas.config(yscrollcommand=cus_in_vertibar.set)
      cus_in_canvas.pack(expand=True,side=LEFT,fill=BOTH)
      # canvas.create_rectangle(235,10,1025,1430,  outline='yellow',fill='White')
      # canvas = Canvas(preview)
      # canvas.place(relwidth=1, relheight=1,x=250,y=10) 
      cus_in_paperheigth = cus_in_preview.winfo_fpixels('1m') * 297
      cus_in_paperwidth = cus_in_preview.winfo_fpixels('1m') * 210
      cus_in_canvas.create_rectangle(265, 20, 265+cus_in_paperwidth, 20+cus_in_paperheigth, outline='orange', fill='white')
      cus_company = "SELECT * from company"
      fbcursor.execute(cus_company)
      cus_company= fbcursor.fetchone()

      
      cus_id=cus_main_tree.item(cus_main_tree.focus())["values"][3]

      cus_main_table_sql="select * from orders where businessname=%s"
      cus_main_table_sql_val=(cus_id,)
      fbcursor.execute(cus_main_table_sql,cus_main_table_sql_val)
      main_tb_val=fbcursor.fetchone()

      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]
      
      #-------------------------------------------------------------------------------------------------Heder data--------
      labelcmp=Label(cus_in_canvas,text=cus_company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
      window = cus_in_canvas.create_window(300,80, anchor="nw", window=labelcmp)

      labelcmpl=Label(cus_in_canvas,text=cus_company[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
      windowl = cus_in_canvas.create_window(300,120, anchor="nw", window=labelcmpl)
      cus_in_canvas.create_text(950,100, text="Invoices List",font=("Helvetica", 16), justify='right')
      cus_in_canvas.create_text(350,228,text=cus_company[4],fill='black',font=("Helvetica", 8), justify='left')
      

      cus_sql5="select * from customer where businessname=%s"
      cus_sql5_vals=(cus_id,)
      fbcursor.execute(cus_sql5,cus_sql5_vals)
      cus_det=fbcursor.fetchone()
      cus_in_canvas.create_line(1038,235,280,235,fill="black", width=2)
      cus_in_canvas.create_text(953,220,text="Customer ID:"+cus_det[24],fill='black',font=("Helvetica", 12), justify='right')
      
      cus_in_canvas.create_text(330,260,text="Bill To:",fill='black',font=("Helvetica", 12), justify='right')
      labelcmp=Label(cus_in_canvas,text=cus_det[4] , bg="white",anchor="nw",font=("Helvetica", 10), width=40, height=1)
      window = cus_in_canvas.create_window(305,275, anchor="nw", window=labelcmp)
      text=cus_det[5]
      wraped_text="\n".join(wrap(text,30))
      labelcmp=Label(cus_in_canvas,text=wraped_text , bg="white",anchor="nw",font=("Helvetica", 10), width=40, height=4)
      window = cus_in_canvas.create_window(305,295, anchor="nw", window=labelcmp)

      cus_in_canvas.create_text(720,260,text="Ship To:",fill='black',font=("Helvetica", 12), justify='right')
      labelcmp=Label(cus_in_canvas,text=cus_det[6] , bg="white",anchor="nw",font=("Helvetica", 10), width=40, height=1)
      window = cus_in_canvas.create_window(690,275, anchor="nw", window=labelcmp)
      text=cus_det[7]
      wraped_text="\n".join(wrap(text,30))
      labelcmp=Label(cus_in_canvas,text=wraped_text , bg="white",anchor="nw",font=("Helvetica", 10), width=40, height=4)
      window = cus_in_canvas.create_window(690,295, anchor="nw", window=labelcmp)
      #---------------------------------------------------------------------------------------------------Table Data

      style=ttk.Style()
      style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
      style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
      style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

      # Add a Treeview widge
                          
      cus_prv_tree=ttk.Treeview(cus_in_canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7","c8"), show='headings', height=40, style='mystyle.Treeview')
      cus_prv_tree.column("# 1", anchor=E, stretch=NO, width=100)
      cus_prv_tree.heading("# 1", text="Invoice No")
      cus_prv_tree.column("# 2", anchor=E, stretch=NO, width=80)
      cus_prv_tree.heading("# 2", text="Date")
      cus_prv_tree.column("# 3", anchor=E, stretch=NO, width=80)
      cus_prv_tree.heading("# 3", text="Due Date")
      cus_prv_tree.column("# 4", anchor=E, stretch=NO, width=100)
      cus_prv_tree.heading("# 4", text="Recurring")
      cus_prv_tree.column("# 5", anchor=E, stretch=NO, width=100)
      cus_prv_tree.heading("# 5", text="Status")
      cus_prv_tree.column("# 6", anchor=E, stretch=NO, width=100)
      cus_prv_tree.heading("# 6", text="Invoice Total")
      cus_prv_tree.column("# 7", anchor=E, stretch=NO, width=100)
      cus_prv_tree.heading("# 7", text="Total Paid")
      cus_prv_tree.column("# 8", anchor=E, stretch=NO, width=100)
      cus_prv_tree.heading("# 8", text="Balance")

      sql_qry="select * from invoice where businessname=%s"
      sql_qryvlz=(cus_id,)
      fbcursor.execute(sql_qry,sql_qryvlz)
      tre=fbcursor.fetchall() 
      for record in cus_prv_tree.get_children():
        cus_prv_tree.delete(record)
          

      count=0
      for i in tre:
        if i[24] is None:
          dfh="No"
        else:
          dfh="Yes"
        if ps_cr=="before amount":
          cus_prv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],dfh,i[5], crc+str(i[8]), crc+str(i[9]), crc+str(i[10])))
                        
        elif ps_cr=="after amount":
          cus_prv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],dfh,i[5], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                          
        elif ps_cr=="before amount with space":
          cus_prv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],dfh,i[5], crc+" "+str(i[8]), crc+" "+str(i[9]), crc+" "+str(i[10])))
                          
        elif ps_cr=="after amount with space":
          cus_prv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],dfh,i[5],  str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                          
                      
        else:
          pass
        count += 1
      cus_prv_tree.insert('', 'end',text="1",values=('','','','','','','',''))
      cus_prv_tree.insert('', 'end',text="1",values=('','','-End List-','','','Invoice Total','Total Paid','Balance'))
      sql_inv_t="select sum(invoicetot),sum(totpaid), sum(balance) from invoice where businessname=%s"
      sql_inv_t_val=(cus_id,)
      fbcursor.execute(sql_inv_t,sql_inv_t_val)
      inv_ttt=fbcursor.fetchone() 
      if inv_ttt[0] is None:
          dtr=0
      else:
          dtr=inv_ttt[0]
      if inv_ttt[1] is None:
          dtr1=0
      else:
          dtr1=inv_ttt[1]
      if inv_ttt[2] is None:
          dtr2=0
      else:
        dtr2=inv_ttt[2]
      if ps_cr=="before amount":
        cus_prv_tree.insert('', 'end',text="1",values=('-Summary-','','','','',crc+str(dtr),crc+str(dtr1),crc+str(dtr2)))
      elif ps_cr=="after amount":
        cus_prv_tree.insert('', 'end',text="1",values=('-Summary-','','','','',str(dtr)+crc,str(dtr1)+crc,str(dtr2)+crc))
      elif ps_cr=="before amount with space":
        cus_prv_tree.insert('', 'end',text="1",values=('-Summary-','','','','',crc+" "+str(dtr),crc+" "+str(dtr1),crc+" "+str(dtr2)))
      elif ps_cr=="after amount with space":
        cus_prv_tree.insert('', 'end',text="1",values=('-Summary-','','','','',str(dtr)+" "+crc,str(dtr1)+" "+crc,str(dtr2)+" "+crc))
      else:
        pass
      


      window = cus_in_canvas.create_window(280, 320, anchor="nw", window=cus_prv_tree)
    except:
      pass

                
  #-----------------------------------------------------------------------------------print Invoice Customer
  def cus_printinvoice_customer():
    try:
          from reportlab.pdfgen import canvas
              # from tkdocviewer import *
          from reportlab.lib import colors
          from reportlab.pdfbase.ttfonts import TTFont
          from reportlab.pdfbase import pdfmetrics
          from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
          from reportlab.lib.pagesizes import letter, inch
          
          cus_id_fnm=cus_main_tree.item(cus_main_tree.focus())["values"][1]
          pdf = canvas.Canvas("customer_Reports/"+str(cus_id_fnm)+".pdf", pagesize=letter)
          cus_id=cus_main_tree.item(cus_main_tree.focus())["values"][3]
          sqlt= 'select * from customer where businessname=%s'
          sqlt_val=(cus_id,)
          fbcursor.execute(sqlt,sqlt_val)
          cus_ft=fbcursor.fetchone()

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(27,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
              
          vg=len(htg)
          if vg>0:
                  pdf.drawString(30,752,htg[0])
                  print("1")
                  if vg>1:
                    pdf.drawString(30,738,htg[1])
                    print("2")
                    if vg>2:
                        pdf.drawString(30,725,htg[2])
                        print("3")
                        if vg>3:
                            pdf.drawString(30,712,htg[3])
                            print("4")
                        else:
                            pass
                    else:
                        pass
                  else:
                      pass
                  
          else:
                  pass
          pdf.drawString(35,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")

          pdf.drawString(460,700,"Customer ID:"+str(cus_ft[0]))
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(31,680,"Bill To:")
          pdf.drawString(31,668,cus_ft[4])
          text=cus_ft[5]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
              
          vg=len(htg)
          if vg>0:
                  pdf.drawString(30,654,htg[0])
                  print("1")
                  if vg>1:
                    pdf.drawString(30,640,htg[1])
                    print("2")
                    if vg>2:
                        pdf.drawString(30,626,htg[2])
                        print("3")
                        if vg>3:
                            pdf.drawString(30,612,htg[3])
                            print("4")
                        else:
                            pass
                    else:
                        pass
                  else:
                      pass
                  
          else:
                  pass

          pdf.drawString(400,680,"Ship To:")
          pdf.drawString(400,668,cus_ft[6])
          text=cus_ft[7]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
              
          vg=len(htg)
          if vg>0:
                  pdf.drawString(400,654,htg[0])
                  print("1")
                  if vg>1:
                    pdf.drawString(400,640,htg[1])
                    print("2")
                    if vg>2:
                        pdf.drawString(400,626,htg[2])
                        print("3")
                        if vg>3:
                            pdf.drawString(400,612,htg[3])
                            print("4")
                        else:
                            pass
                    else:
                        pass
                  else:
                      pass
                  
          else:
                  pass

          pdf.drawString(28,606,"__________________________________________________________________________________")


          pdf.drawString(28,591,"__________________________________________________________________________________")
          pdf.drawString(28,591,"Invoice No           Date        Due Date     Recurring      Status        Invoice Total    Total Paid   Balance      ")
          
          
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
            
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]
          count=0
          sql_inv_dt='SELECT * FROM invoice where businessname=%s'
          inv_valuz=(cus_id,)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=571

          for i in tre:
                        if x==38 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if i[24] is None:
                                dfh="No"
                            else:
                                dfh="Yes"
                            if ps_cr=="before amount":
                                pdf.drawString(28,x,str(i[1]))
                          
                                pdf.drawString(100,x,str(i[2]))
                                pdf.drawString(168,x,str(i[3]))
                                pdf.drawString(250,x,dfh)
                                pdf.drawString(315,x,str(i[5])) 
                                pdf.drawString(375,x,str(crc)+str(i[8]))
                                pdf.drawString(455,x,str(crc)+str(i[9]))
                                pdf.drawString(517,x,str(crc)+str(i[10]))
                                
                            elif ps_cr=="after amount":
                                pdf.drawString(28,x,str(i[1]))
                                pdf.drawString(100,x,str(i[2]))
                                pdf.drawString(168,x,str(i[3]))
                                pdf.drawString(250,x,str(dfh))
                                pdf.drawString(315,x,str(i[5])) 
                                pdf.drawString(375,x,str(i[8])+str(crc))
                                pdf.drawString(455,x,str(i[9])+str(crc))
                                pdf.drawString(517,x,str(i[10])+str(crc))
                                
                            elif ps_cr=="before amount with space":
                                pdf.drawString(28,x,str(i[1]))
                          
                                pdf.drawString(100,x,str(i[2]))
                                pdf.drawString(168,x,str(i[3]))
                                pdf.drawString(250,x,str(dfh))
                                pdf.drawString(315,x,str(i[5])) 
                                pdf.drawString(375,x,str(crc)+" "+str(i[8]))
                                pdf.drawString(455,x,str(crc)+" "+str(i[9]))
                                pdf.drawString(517,x,str(crc)+" "+str(i[10]))
                                
                                
                            elif ps_cr=="after amount with space":
                                pdf.drawString(28,x,str(i[1]))
                                pdf.drawString(100,x,str(i[2]))
                                pdf.drawString(168,x,str(i[3]))
                                pdf.drawString(250,x,str(dfh))
                                pdf.drawString(315,x,str(i[5])) 
                                pdf.drawString(375,x,str(i[8])+" "+str(crc))
                                pdf.drawString(455,x,str(i[9])+" "+str(crc))
                                pdf.drawString(517,x,str(i[10])+" "+str(crc))
                            
                            else:
                                pass
                          
                        count += 1
                      
                        x-=15
          sql_inv_t="select sum(invoicetot),sum(totpaid), sum(balance) from invoice where businessname=%s"
          sql_inv_t_val=(cus_id,)
          fbcursor.execute(sql_inv_t,sql_inv_t_val)
          inv_ttt=fbcursor.fetchone() 
          if inv_ttt[0] is None:
            dtr=0
          else:
            dtr=inv_ttt[0]
          if inv_ttt[1] is None:
            dtr1=0
          else:
            dtr1=inv_ttt[1]
          if inv_ttt[2] is None:
            dtr2=0
          else:
            dtr2=inv_ttt[2]
          pdf.drawString(28,x,"__________________________________________________________________________________")
          if ps_cr=="before amount":
                                
                                
                                pdf.drawString(28,x-13,"")
                          
                                pdf.drawString(100,x-13,"")
                                pdf.drawString(168,x-13,"")
                                pdf.drawString(250,x-13,"-Summary-")
                                pdf.drawString(315,x-13,"") 
                                pdf.drawString(375,x-13,str(crc)+str(dtr))
                                pdf.drawString(455,x-13,str(crc)+str(dtr1))
                                pdf.drawString(517,x-13,str(crc)+str(dtr2))
          elif ps_cr=="after amount":
                      
                                pdf.drawString(28,x-13,"")
                                pdf.drawString(100,x-13,"")
                                pdf.drawString(168,x-13,"-Summary-")
                                pdf.drawString(250,x-13,"")
                                pdf.drawString(315,x-13,"") 
                                pdf.drawString(375,x-13,str(dtr)+str(crc))
                                pdf.drawString(455,x-13,str(dtr1)+str(crc))
                                pdf.drawString(517,x-13,str(dtr2)+str(crc))
          elif ps_cr=="before amount with space":
                                pdf.drawString(28,x-13,"")
                          
                                pdf.drawString(100,x-13,"")
                                pdf.drawString(168,x-13,"-Summary-")
                                pdf.drawString(250,x-13,"")
                                pdf.drawString(315,x-13,"") 
                                pdf.drawString(375,x-13,str(crc)+" "+str(dtr))
                                pdf.drawString(455,x-13,str(crc)+" "+str(dtr1))
                                pdf.drawString(517,x-13,str(crc)+" "+str(dtr2))
          elif ps_cr=="after amount with space":
                                pdf.drawString(28,x-13,"")
                                pdf.drawString(100,x-13,"")
                                pdf.drawString(168,x-13,"-Summary-")
                                pdf.drawString(250,x-13,"")
                                pdf.drawString(315,x-13,"") 
                                pdf.drawString(375,x-13,str(dtr)+" "+str(crc))
                                pdf.drawString(455,x-13,str(dtr1)+" "+str(crc))
                                pdf.drawString(517,x-13,str(dtr2)+" "+str(crc))
          else:
                          pass


          pdf.save()
          win32api.ShellExecute(0,"",os.getcwd()+"/customer_Reports/"+str(cus_id_fnm)+".pdf",None,".",0)
      # except:
    
      #   pass
    except:
      pass
  #-----------------------------------------------------------------------------------Customer Sms
  def cus_customersms():
    send_SMS=Toplevel()
    send_SMS.title("Send SMS notification")
    p2 = PhotoImage(file = "images/fbicon.png")
    send_SMS.iconphoto(False, p2)
    send_SMS.geometry("580x500+380+150")
    style = ttk.Style()
    style.theme_use('default')
    style.configure('TNotebook.Tab', background="#999999", padding=5)
    sms_Notebook = ttk.Notebook(send_SMS)
    SMS_Notification = Frame(sms_Notebook, height=485, width=585)
    SMS_Service_Account = Frame(sms_Notebook, height=485, width=585)
    sms_Notebook.add(SMS_Notification, text="SMS Notification")
    sms_Notebook.add(SMS_Service_Account, text="SMS Service Account")
    sms_Notebook.place(x=0, y=0)
    numlbel=Label(SMS_Notification, text="SMS number or comma seperated SMS number list(Please start each SMS number with the country code)")
    numlbel.place(x=10, y=10)
    numentry=Entry(SMS_Notification,width=92).place(x=10, y=35,height=25)
    stexbel=Label(SMS_Notification, text="SMS Text").place(x=10, y=65)
    stex=Entry(SMS_Notification, width=60).place(x=10, y=90,height=120)
    no=Label(SMS_Notification, text="0/160 characters")
    no.place(x=285, y=210)
    dclbel=Label(SMS_Notification, text="Double click to insert into text")
    dclbel.place(x=395, y=65)
    dcl=Entry(SMS_Notification, width=27)
    dcl.place(x=395, y=90,height=200)
    smstype=LabelFrame(SMS_Notification, text="SMS message type", width=365, height=60)
    smstype.place(x=10, y=230)
    snuvar=IntVar()
    normal_rbtn=Radiobutton(smstype, text="Normal SMS(160 chars)", variable=snuvar, value=1)
    normal_rbtn.place(x=15, y=5)
    unicode_rbtn=Radiobutton(smstype, text="Unicode SMS(70 chars)", variable=snuvar, value=2)
    unicode_rbtn.place(x=195, y=5)
    tiplbf=LabelFrame(SMS_Notification, text="Tips", width=552, height=120)
    tiplbf.place(x=10, y=292)
    tiplabl=Label(tiplbf,justify=LEFT,fg="red",  text="Always start the SMS number with the country code. Do not use the + sign at the beginning(example\nUS number: 8455807546). Do not use any special characters in your normal SMS text. Please use the\nstndard SMS characters or the English alphabet and numbers only. Otherwise the SMS will be\nunreadable or undeliverable. If you need to enter international characters, accents,email address, or\nspecial characters to the SMS text field then choose the Unicode SMS format.")
    tiplabl.place(x=5, y=5)
    btn1=Button(SMS_Notification,width=150,compound = LEFT,image=tick ,text="  Send SMS notification").place(x=10, y=425,height=31)
    btn2=Button(SMS_Notification,width=215,compound = LEFT,image=warnin,text="  Confirm SMS cost before sending").place(x=190, y=425,height=31)
    btn3=Button(SMS_Notification,width=80,compound = LEFT,image=cancel,text="  Cancel").place(x=472, y=425,height=31)
    smstype=LabelFrame(SMS_Service_Account, text="Select the notification service provider", width=555, height=65)
    smstype.place(x=10, y=5)
    snumvar=IntVar()
    normal_rbtn=Radiobutton(smstype,text="BULKSMS(www.bulksms.com)",variable=snumvar,value=1,)
    normal_rbtn.place(x=5, y=5)
    unicode_rbtn=Radiobutton(smstype, text="EXPERTTEXTING(www.experttexting.com-Recommended", variable=snumvar, value=2)
    unicode_rbtn.place(x=210, y=5)
    sms1type=LabelFrame(SMS_Service_Account, text="Your BULKSMS.COM Account", width=555, height=100)
    sms1type.place(x=10, y=80)
    name=Label(sms1type, text="Username").place(x=10, y=5)
    na=Entry(sms1type,width=29).place(x=100, y=5,height=23)
    password=Label(sms1type, text="Password").place(x=10, y=45)
    pas=Entry(sms1type, width=29).place(x=100, y=45,height=23)
    combo=Label(sms1type,text="Route").place(x=320, y=5)
    n = StringVar()
    combo1 = ttk.Combobox(sms1type,textvariable = n )
    combo1['values'] = ('1-Economy (test first)','2-Standard (default)','3-Premium') 
    combo1.place(x=375,y=5,height=23,width=165)  
    combo1.current(0)
    btn1=Button(sms1type,width=110,compound = LEFT,image=saves,text="  Save settings").place(x=420, y=35,height=31)  
    tiplbf=LabelFrame(SMS_Service_Account, text="Terms of service", width=555, height=250)
    tiplbf.place(x=10, y=190)
    tiplabl=Label(tiplbf,justify=LEFT,fg="red",  text="The SMS notification service is not free.This service costs you creadit.You must have your own account\nat BULKSMS.COM and you need to have sufficient creadit and an active internet connection to use\nthis feature.Please review all fields in this form for accuracy")
    tiplabl.place(x=2, y=5)
    tiplabl1=Label(tiplbf,justify=LEFT,fg="black",  text="visit www.bulksms.com website to create your own account.please make sure the BULKSMS .COM\n service works well in your country before you busy creadit")
    tiplabl1.place(x=2, y=60)
    tiplabl2=Label(tiplbf,justify=LEFT,fg="black",  text="Our SMS notification tool comes without any warranty.our software only forwards your SMS message\nthe BULKSMS API server .The BULKSMS API server will try to sent SMS message your recipient")
    tiplabl2.place(x=2, y=100)
    tiplabl3=Label(tiplbf,justify=LEFT,fg="red",  text="Please note that you access and use the SMS notification tool your own risk.F-Billing software is not\nresponsible for any type of loss or damage or undelivered SMS massage which you may as a result\nof accessing and using the SMS notification service.")
    tiplabl3.place(x=2, y=140)
    checkvar1=IntVar()
    chkbtn1=Checkbutton(tiplbf,text="I have read and agree to the terms of service above",variable=checkvar1,onvalue=1,offvalue=0).place(x=130, y=200)  
  #-----------------------------------------------------------------------------------Import Customer
  def import_customer_check():
      sql = "select * from users"
      fbcursor.execute(sql)
      delexp_check_user = fbcursor.fetchall()
      if not delexp_check_user:
        fileimport_customer()
      else:
        try:
          user_namech = username1.get()
          sql = "select import_customer from users where username = %s"
          val = (user_namech,)
          fbcursor.execute(sql,val)
          disable_del_exp = fbcursor.fetchone()
          if disable_del_exp[0] == 1:
            fileimport_customer()
          else:
            messagebox.showerror("user","user does not have permission to perform this action")
        except:
          fileimport_customer()

  def fileimport_customer():

      top=Toplevel()
      top.title("Import items list from Excel(XLS)File")
      top.geometry("785x520+280+100")
      importframe=Frame(top)
      importframe.place(x=0,y=0,height=700,width=785)
      impolbl=Label(importframe,text="Import source Excel(xlsx) File:").place(x=8,y=30)
      impoentry=Entry(importframe,bg="white")
      impoentry.place(x=8,y=50,width=280, height=25)
      previewlbl=Label(importframe,text="Source File preview").place(x=8,y=77)
    
      ###### LISTBOX #####################
      scrollbarx = Scrollbar(importframe, orient=HORIZONTAL)
      scrollbary = Scrollbar(importframe, orient=VERTICAL)
      imptree = ttk.Treeview(importframe, columns=("customerid","ccategory","cname","caddress","ctel","cfax","cemail","ccontact","cshipname","cshipaddress","cshiptel","cshipfax","cshipcontact","specialtax1","specialtax2","discountrate","cshipemail","vatregnumber","country","city", "taxexempt","cactive"), height=400,     selectmode="extended", yscrollcommand=scrollbary.set, xscrollcommand=scrollbarx.set)
      scrollbary.config(command=imptree.yview)
      scrollbary.place(x=754,y=100,height=325)
      scrollbarx.config(command=imptree.xview)
      scrollbarx.place(x=0,y=410, width=356)
      imptree.heading('customerid', text="customerid", anchor=W)
      imptree.heading('ccategory', text="ccategory", anchor=W)
      imptree.heading('cname', text="cname", anchor=W)
      imptree.heading('caddress', text="caddress", anchor=W)
      imptree.heading('ctel', text="ctel", anchor=W)
      imptree.heading('cfax', text="cfax", anchor=W)
      imptree.heading('cemail', text="cemail", anchor=W)
      imptree.heading('ccontact', text="ccontact", anchor=W)
      imptree.heading('cshipname', text="cshipname", anchor=W)
      imptree.heading('cshipaddress', text="cshipaddress", anchor=W)
      imptree.heading('cshiptel', text="cshiptel", anchor=W)
      imptree.heading('cshipfax', text="cshipfax", anchor=W)
      imptree.heading('cshipcontact', text="cshipcontact", anchor=W)
      imptree.heading('specialtax1', text="specialtax1", anchor=W)
      imptree.heading('specialtax2', text="specialtax2", anchor=W)
      imptree.heading('discountrate', text="discountrate", anchor=W)
      imptree.heading('cshipemail', text="cshipemail", anchor=W)
      imptree.heading('vatregnumber', text="vatregnumber", anchor=W)
      imptree.heading('country', text="country", anchor=W)
      imptree.heading('city', text="city", anchor=W)
      imptree.heading('taxexempt', text="taxexempt", anchor=W)
      imptree.heading('cactive', text="cactive", anchor=W)
      

      imptree.column('#0', stretch=NO, minwidth=0, width=0)
      imptree.column('#1', stretch=NO, minwidth=0, width=120)
      imptree.column('#2', stretch=NO, minwidth=0, width=100)
      imptree.column('#3', stretch=NO, minwidth=0, width=100)
      imptree.column('#4', stretch=NO, minwidth=0, width=100)
      imptree.column('#5', stretch=NO, minwidth=0, width=100)
      imptree.column('#6', stretch=NO, minwidth=0, width=100)
      imptree.column('#7', stretch=NO, minwidth=0, width=100)
      imptree.column('#8', stretch=NO, minwidth=0, width=100)
      imptree.column('#9', stretch=NO, minwidth=0, width=100)
      imptree.column('#10', stretch=NO, minwidth=0, width=100)
      imptree.column('#11', stretch=NO, minwidth=0, width=100)
      imptree.column('#12', stretch=NO, minwidth=0, width=100)
      imptree.column('#13', stretch=NO, minwidth=0, width=100)
      imptree.column('#14', stretch=NO, minwidth=0, width=100)
      imptree.column('#15', stretch=NO, minwidth=0, width=100)
      imptree.column('#16', stretch=NO, minwidth=0, width=100)
      imptree.column('#17', stretch=NO, minwidth=0, width=100)
      imptree.column('#18', stretch=NO, minwidth=0, width=100)
      imptree.column('#19', stretch=NO, minwidth=0, width=100)
      imptree.column('#20', stretch=NO, minwidth=0, width=100)


  

      imptree.place(x=5,y=100,height=315,width=750)
      
      
      lb1=Label(importframe,text="Select import source XLs file first after build column associations").place(x=8,y=480)

      def cus_export_product_1():
        global Productserviceid,name12,category12,description,peices,cost12,priceminuscost,taxable,stock12,stocklimit,warehouse,status,serviceornot,name
        name = askopenfilename(filetypes=[('CSV', '*.csv',), ('Excel', ('*.xls', '*.xslm', '*.xlsx'))])
        # df = pd.read_csv(name)
        # for i in df:
        #   listbox.insert(END, df)
        with open(name) as f:
          reader = csv.DictReader(f, delimiter=',')
          print(reader)
          for row in reader:
            #"customerid","ccategory","cname","caddress","ctel","cfax","cemail","ccontact","cshipname","cshipaddress","cshiptel","cshipfax","cshipcontact","specialtax1","specialtax2","discountrate","cshipemail","vatregnumber","country","city", "taxexempt","cactive"
            customerid = row['customerid']
            ccategory = row['ccategory']          
            cname = row['cname']
            caddress = row['caddress']
            
            ctel = row['ctel']
            cfax = row['cfax']
            cemail = row['cemail']
            ccontact = row['ccontact']
            cshipname = row['cshipname']
            cshipaddress = row['cshipaddress']
            cshiptel = row['cshiptel']
            cshipfax = row['cshipfax']
            cshipcontact = row['cshipcontact']
            specialtax1 = row['specialtax1']
            specialtax2 = row['specialtax2']
            discountrate = row['discountrate']
            cshipemail = row['cshipemail']
            vatregnumber = row['vatregnumber']
            country = row['country']
            city = row['city']
            taxexempt = row['taxexempt']
            cactive = row['cactive']
            
          # "customerid","ccategory","cname","caddress","ctel","cfax","cemail","ccontact","cshipname","cshipaddress","cshiptel","cshipfax","cshipcontact","specialtax1","specialtax2","discountrate","cshipemail","vatregnumber","country","city", "taxexempt","cactive"
          
            imptree.insert("", 0, values=(customerid,ccategory,cname,caddress,ctel,cfax,cemail,ccontact,cshipname,cshipaddress,cshiptel,cshipfax,cshipcontact,specialtax1,specialtax2,discountrate,cshipemail,vatregnumber,country,city, taxexempt,cactive))

        impoentry.delete(0, 'end')
        impoentry.insert(0, name)
        
      def cus_nxtscreen():
        def cus_save_pro_import():
          with open(name) as f:
            reader = csv.DictReader(f, delimiter=',')
            for row in reader:
              customerid = row['customerid']
              ccategory = row['ccategory']          
              cname = row['cname']
              caddress = row['caddress']
              
              ctel = row['ctel']
              cfax = row['cfax']
              cemail = row['cemail']
              ccontact = row['ccontact']
              cshipname = row['cshipname']
              cshipaddress = row['cshipaddress']
              cshiptel = row['cshiptel']
              cshipfax = row['cshipfax']
              cshipcontact = row['cshipcontact']
              specialtax1 = row['specialtax1']
              specialtax2 = row['specialtax2']
              discountrate = row['discountrate']
              cshipemail = row['cshipemail']
              vatregnumber = row['vatregnumber']
              country = row['country']
              city = row['city']
              taxexempt = row['taxexempt']
              cactive = row['cactive']


              # Productserviceid = int(row['PRODUCT SERVICE ID'])
              # sku = int(row['CODE OR SKU'])  
              # name12 = row['NAME']
              # category12 = row['CATEGORY']
              # description = row['DESCRIPTION']
              # peices = int(row['QTY UNIT'])
              # cost12 = int(row['COST'])
              # unitprice = int(row['PRICE'])
              # taxable = int(row['TAX1'])
              # tax2 = row['TAX2']
              # stock12 = int(row['STOCK'])
              # stocklimit = int(row['LOW STOCK'])
              # warehouse = row['LOCATION']
              # status = int(row['ACTIVE'])
              # serviceornot = int(row['SERVICE'])
              # min = int(unitprice) - int(cost12)

              sql = 'select * from customer where customerno = %s or 	businessname = %s'
              val  = (customerid, cname,)
              fbcursor.execute(sql, val)
              fbcursor.fetchall()
              row_count = fbcursor.rowcount
              if row_count == 0:

                sql = 'insert into customer(customerno,	category,businessname,businessaddress,cptelno,cpfax,cpemail,contactperson,shipname,shipaddress,shipcptelno,shipcpfax,shipcontactperson,specifictax1,specifictax2,discount,shipcpemail,vatregnumber,country,city, taxexempt,status) values(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s,%s,%s,%s,%s,%s,%s,%s,%s)'
                val = (customerid,ccategory,cname,caddress,ctel,cfax,cemail,ccontact,cshipname,cshipaddress,cshiptel,cshipfax,cshipcontact,specialtax1,specialtax2,discountrate,cshipemail,vatregnumber,country,city, taxexempt,cactive)
                fbcursor.execute(sql, val)
                fbilldb.commit()
                topp.destroy()
                for record in cus_main_tree.get_children():
                  cus_main_tree.delete(record)
                fbcursor.execute("select *  from customer")
                pandsdata = fbcursor.fetchall()
                countp = 0
                for i in pandsdata:
                  cus_main_tree.insert(parent='', index='end', iid=countp, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
                  countp +=1
                  
                topp.destroy()
                messagebox.showinfo("Alert", "Customer Import Completed")
              else:
                
                messagebox.showinfo("Alert", "Entry with same name or ID already exists.\nTry again.")
              
      
        topp=Toplevel()
        topp.title("Import items list from Excel(XLS)File")
        topp.geometry("785x520+280+100")
        scrollbarx = Scrollbar(topp, orient=HORIZONTAL)
        scrollbary = Scrollbar(topp, orient=VERTICAL)
        cus_nxttree = ttk.Treeview(topp, columns=("customerid","ccategory","cname","caddress","ctel","cfax","cemail","ccontact","cshipname","cshipaddress","cshiptel","cshipfax","cshipcontact","specialtax1","specialtax2","discountrate","cshipemail","vatregnumber","country","city", "taxexempt","cactive"),height=400,     selectmode="extended", yscrollcommand=scrollbary.set, xscrollcommand=scrollbarx.set)
        scrollbary.config(command=cus_nxttree.yview)
        scrollbary.place(x=768,y=0,height=490)
        scrollbarx.config(command=cus_nxttree.xview)
        scrollbarx.place(x=0,y=470,width=763)
        cus_nxttree.heading('customerid', text="customerid", anchor=W)
        cus_nxttree.heading('ccategory', text="ccategory", anchor=W)
        cus_nxttree.heading('cname', text="cname", anchor=W)
        cus_nxttree.heading('caddress', text="caddress", anchor=W)
        cus_nxttree.heading('ctel', text="ctel", anchor=W)
        cus_nxttree.heading('cfax', text="cfax", anchor=W)
        cus_nxttree.heading('cemail', text="cemail", anchor=W)
        cus_nxttree.heading('ccontact', text="ccontact", anchor=W)
        cus_nxttree.heading('cshipname', text="cshipname", anchor=W)
        cus_nxttree.heading('cshipaddress', text="cshipaddress", anchor=W)
        cus_nxttree.heading('cshiptel', text="cshiptel", anchor=W)
        cus_nxttree.heading('cshipfax', text="cshipfax", anchor=W)
        cus_nxttree.heading('cshipcontact', text="cshipcontact", anchor=W)
        cus_nxttree.heading('specialtax1', text="specialtax1", anchor=W)
        cus_nxttree.heading('specialtax2', text="specialtax2", anchor=W)
        cus_nxttree.heading('discountrate', text="discountrate", anchor=W)
        cus_nxttree.heading('cshipemail', text="cshipemail", anchor=W)
        cus_nxttree.heading('vatregnumber', text="vatregnumber", anchor=W)
        cus_nxttree.heading('country', text="country", anchor=W)
        cus_nxttree.heading('city', text="city", anchor=W)
        cus_nxttree.heading('taxexempt', text="taxexempt", anchor=W)
        cus_nxttree.heading('cactive', text="cactive", anchor=W)
    
        cus_nxttree.column('#0', stretch=NO, minwidth=0, width=0)
        cus_nxttree.column('#1', stretch=NO, minwidth=0, width=120)
        cus_nxttree.column('#2', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#3', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#4', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#5', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#6', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#7', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#8', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#9', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#10', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#11', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#12', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#13', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#14', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#15', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#16', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#17', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#18', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#19', stretch=NO, minwidth=0, width=100)
        cus_nxttree.column('#20', stretch=NO, minwidth=0, width=100)
      
        with open(name) as f:
          reader = csv.DictReader(f, delimiter=',')
          for row in reader:
            # "PRODUCT SERVICE ID","NAME","CATEGORY","DESCRIPTION","QTY UNIT","COST","PRICE","TAX1","STOCK","LOW STOCK","LOCATION","ACTIVE","SERVICE"
            customerid = row['customerid']
            ccategory = row['ccategory']          
            cname = row['cname']
            caddress = row['caddress']
            
            ctel = row['ctel']
            cfax = row['cfax']
            cemail = row['cemail']
            ccontact = row['ccontact']
            cshipname = row['cshipname']
            cshipaddress = row['cshipaddress']
            cshiptel = row['cshiptel']
            cshipfax = row['cshipfax']
            cshipcontact = row['cshipcontact']
            specialtax1 = row['specialtax1']
            specialtax2 = row['specialtax2']
            discountrate = row['discountrate']
            cshipemail = row['cshipemail']
            vatregnumber = row['vatregnumber']
            country = row['country']
            city = row['city']
            taxexempt = row['taxexempt']
            cactive = row['cactive']
        

        
            cus_nxttree.insert("", 0, values=(customerid,ccategory,cname,caddress,ctel,cfax,cemail,ccontact,cshipname,cshipaddress,cshiptel,cshipfax,cshipcontact,specialtax1,specialtax2,discountrate,cshipemail,vatregnumber,country,city, taxexempt,cactive))
        
      
        cus_nxttree.place(x=0,y=0,height=470,width=770)
        back = Button(topp,text="back",command=lambda:topp.destroy())
        back.place(x=5,y=492)
        Finish = Button(topp,text="Finish",command=cus_save_pro_import)
        Finish.place(x=740,y=492)
      
      
      importbutton=Button(top,command=cus_export_product_1,text = 'Browse',compound=LEFT)
      importbutton.place(x=290,y=48,height=25,width=80)

      
      n = Button(importframe, text ="Next",command=cus_nxtscreen).place(x=710,y=470)
    
      
      top.mainloop()
  def cus_import_customer():
      top=Toplevel()
      top.title("Import Customers list from Excel(XLS)File")
      p2 = PhotoImage(file = "images/fbicon.png")
      top.iconphoto(False, p2)
      top.geometry("785x540+280+100")
      importframe=Frame(top)
      importframe.place(x=0,y=0,height=700,width=785)
      impolbl=Label(importframe,text="Import source Excel(XLS) File:").place(x=10,y=10)
      impoentry=Entry(importframe,bg="white")
      impoentry.place(x=10,y=40,width=400,height=25)
      previewlbl=Label(importframe,text="Source XLS File preview").place(x=10,y=75)
      langs = ()
      langs_var = StringVar(value=langs)
      listbox = Listbox(
          importframe,
          listvariable=langs_var,
          width=71,
          height=8,
          selectmode='extended')
      listbox.place(x=10,y=102,height=390) 
      scrollbar = Scrollbar(
          importframe,
          orient='vertical',
          command=listbox.yview
      )
      
      listbox['yscrollcommand'] = scrollbar.set
      scrollbar.place(x=422,y=104,height=370)

      scrollbar = Scrollbar(
          importframe,
          orient='horizontal',
          
          command=listbox.xview
      ) 
      listbox['xscrollcommand'] = scrollbar.set
      scrollbar.place(x=12,y=474,width=427)
      lb1=Label(importframe,text="Select import source XLs file first after build column associations").place(x=10,y=500)
      
      def callback(url):
          webbrowser.open_new(url) 

      link1 = Label(importframe, text="More info", fg="blue", cursor="hand2")
      link1.place(x=360,y=500)
      link1.bind("<Button-1>", lambda e: callback("https://f-billing.com/faq.php"))
      importbutton=Button(top,command=lambda:cus_export_customer(),image=folder,compound=LEFT)
      importbutton.place(x=410,y=40,height=25,width=30)
      lb1=Label(importframe,text="     Please associate datafields with data columns").place(x=500,y=10)
      id1=Label(importframe,text="CUSTOMER ID = ",fg="blue")
      id1.place(x=460,y=40)
      no = StringVar() 
      idd = ttk.Combobox(importframe, width = 27, textvariable = no ) 
      idd['values'] = ('    -NotAssociated-')
      idd.place(x=580,y=40,height=23) 
      idd.current(0)
      name1=Label(importframe,text="CUSTOMER NAME = ",fg="blue")
      name1.place(x=460,y=65)
      namevar = StringVar() 
      name = ttk.Combobox(importframe, width = 27, textvariable = namevar ) 
      name['values'] = ('    -NotAssociated-' 
                                )  
      name.place(x=580,y=65,height=23) 
      name.current(0)
      category1=Label(importframe,text="CATEGORY = ",fg="blue")
      category1.place(x=460,y=90)
      categoryvar = StringVar() 
      category = ttk.Combobox(importframe, width = 27, textvariable = categoryvar ) 
      category['values'] = ('    -NotAssociated-' 
                                ) 
      category.place(x=580,y=90,height=23) 
      category.current(0)
      add=Label(importframe,text="ADDRESS = ",fg="blue")
      add.place(x=460,y=115)
      addvar = StringVar() 
      addc = ttk.Combobox(importframe, width = 27, textvariable = addvar ) 
      addc['values'] = ('    -NotAssociated-' 
                                )
      addc.place(x=580,y=115,height=23) 
      addc.current(0)
      tel1=Label(importframe,text="TEL.= ")
      tel1.place(x=460,y=140)
      telvar = StringVar() 
      telc = ttk.Combobox(importframe, width = 27, textvariable = telvar ) 
      telc['values'] = ('    -NotAssociated-' 
                                )  
      telc.place(x=580,y=140,height=23) 
      telc.current(0)
      fax1=Label(importframe,text="FAX = ")
      fax1.place(x=460,y=165)
      faxvar = StringVar() 
      faxc = ttk.Combobox(importframe, width = 27, textvariable = faxvar )
      faxc['values'] = ('    -NotAssociated-' 
                                )
      faxc.place(x=580,y=165,height=23) 
      faxc.current(0)
      email1=Label(importframe,text="EMAIL = ")
      email1.place(x=460,y=190)
      emailvar = StringVar() 
      emailc = ttk.Combobox(importframe, width = 27, textvariable = emailvar ) 
      emailc['values'] = ('    -NotAssociated-'
                                )    
      emailc.place(x=580,y=190,height=23) 
      emailc.current(0)
      cp1=Label(importframe,text="CONTACT PERSION = ")
      cp1.place(x=460,y=215)
      cpvar = StringVar() 
      cp = ttk.Combobox(importframe, width = 27, textvariable = cpvar )  
      cp['values'] = ('    -NotAssociated-' 
                                )     
      cp.place(x=580,y=215,height=23) 
      cp.current(0)
      sn2=Label(importframe,text="SHIP TO NAME = ")
      sn2.place(x=460,y=240)
      snvar = StringVar() 
      sn = ttk.Combobox(importframe, width = 27, textvariable = snvar )
      sn['values'] = ('    -NotAssociated-' 
                                )
      sn.place(x=580,y=240,height=23) 
      sn.current(0)
      saa2=Label(importframe,text="SHIP TO ADDESS = ")
      saa2.place(x=460,y=265)
      saa2var = StringVar() 
      saa = ttk.Combobox(importframe, width = 27, textvariable = saa2var ) 
      saa['values'] = ('    -NotAssociated-')
      saa.place(x=580,y=265,height=23) 
      saa.current(0)
      stt2=Label(importframe,text="SHIP TO TEL. = ")
      stt2.place(x=460,y=290)
      stt2var = StringVar() 
      stt = ttk.Combobox(importframe, width = 27, textvariable = stt2var )
      stt['values'] = ('    -NotAssociated-' 
                                ) 
      stt.place(x=580,y=290,height=23) 
      stt.current(0)
      stf2=Label(importframe,text="SHIP TO FAX = ")
      stf2.place(x=460,y=315)
      stf2var = StringVar() 
      stf = ttk.Combobox(importframe, width = 27, textvariable = stf2var )
      stf['values'] = ('    -NotAssociated-' 
                                )   
      stf.place(x=580,y=315,height=23) 
      stf.current(0)
      dd2=Label(importframe,text="DISCOUNT = ")
      dd2.place(x=460,y=340)
      dd2var = StringVar() 
      dd = ttk.Combobox(importframe, width = 27, textvariable = dd2var) 
      dd['values'] = ('    -NotAssociated-'
                                )
      dd.place(x=580,y=340,height=23) 
      dd.current(0)
      st112=Label(importframe,text="SPECIAL TAX 1 = ")
      st112.place(x=460,y=365)
      st112var = StringVar() 
      st11 = ttk.Combobox(importframe, width = 27, textvariable = st112var )  
      st11['values'] = ('    -NotAssociated-' 
                                )   
      st11.place(x=580,y=365,height=23) 
      st11.current(0)
      st222=Label(importframe,text="SPECIAL TAX 2 = ")
      st222.place(x=460,y=390)
      st222var = StringVar() 
      st22 = ttk.Combobox(importframe, width = 27, textvariable = st222var )
      st22['values'] = ('    -NotAssociated-'
                                )     
      st22.place(x=580,y=390,height=23) 
      st22.current(0)
      vrn2=Label(importframe,text="VAT REG.NUMBER = ")
      vrn2.place(x=460,y=415)
      vrn2var = StringVar() 
      vrn = ttk.Combobox(importframe, width = 27, textvariable = vrn2var ) 
      vrn['values'] = ('    -NotAssociated-' 
                                )     
      vrn.place(x=580,y=415,height=23) 
      vrn.current(0)
      avt2=Label(importframe,text="ACTIVE = ")
      avt2.place(x=460,y=440)
      avt2var = StringVar() 
      avt = ttk.Combobox(importframe, width = 27, textvariable = avt2var )
      avt['values'] = ('    -NotAssociated-'
                                )
      avt.place(x=580,y=440,height=23) 
      avt.current(0)
      tee2=Label(importframe,text="TAX EXEMPTED= ")
      tee2.place(x=460,y=465)
      teevar = StringVar() 
      tee= ttk.Combobox(importframe, width = 27, textvariable = teevar )
      tee['values'] = ('    -NotAssociated-' 
                                ) 
      tee.place(x=580,y=465,height=23) 
      tee.current(0)
      btn=Button(importframe,text="Clear associations", width=15,).place(x=560, y=500)
      btn=Button(importframe, text="Next", width=10,).place(x=685, y=500)     
      top.mainloop()
  #-----------------------------------------------------------------------------------Export Customer
  def cus_export_customer():
    try:
      cols = ["customerid","ccategory","cname","caddress","ctel","cfax","cemail","ccontact","cshipname","cshipaddress","cshiptel","cshipfax","cshipcontact","specialtax1","specialtax2","discountrate","cshipemail","vatregnumber","country","city", "taxexempt","cactive"] # Your column headings here
      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
        
      lst = []
      with open(path, "w", newline='') as myfile:
        csvwriter = csv.writer(myfile, delimiter=',')
        sql = 'select 	customerno ,category,businessname,businessaddress,cptelno,cpfax,cpemail,	contactperson,shipname,shipaddress,shipcptelno,shipcpfax,shipcontactperson,specifictax1,specifictax2,discount,shipcpemail,vatregnumber,country,city, taxexempt,status from customer'
          
        fbcursor.execute(sql)
        pandsdata = fbcursor.fetchall()
        for row_id in pandsdata:
                row = row_id
                lst.append(row)
        lst = list(map(list,lst))
        lst.insert(0,cols)
        for row in lst:
            csvwriter.writerow(row)
    except:
      pass
  #-----------------------------------------------------------------------------------Search Customer
  def cus_search_customers():
      def find_cus_row():
       
        if find_txt_var.get()=="Customer name":
          fnd_sql="select * from customer where businessname=%s"
          fnd_sql_val=(fnd_srh_txt.get(),)
          fbcursor.execute(fnd_sql,fnd_sql_val)
          htj=fbcursor.fetchall()
          for record in cus_main_tree.get_children():
            cus_main_tree.delete(record)
          count_cus=0

          for i in htj:
            
            cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
            count_cus +=1
          top.destroy()
        elif find_txt_var.get()=="Customer ID":
          fnd_sql="select * from customer where customerno=%s"
          fnd_sql_val=(fnd_srh_txt.get(),)
          fbcursor.execute(fnd_sql,fnd_sql_val)
          htj=fbcursor.fetchall()
          for record in cus_main_tree.get_children():
            cus_main_tree.delete(record)
          count_cus=0

          for i in htj:
          
            cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
            count_cus +=1
          top.destroy()
        elif find_txt_var.get()=="Category":
          fnd_sql="select * from customer where category=%s"
          fnd_sql_val=(fnd_srh_txt.get(),)
          fbcursor.execute(fnd_sql,fnd_sql_val)
          htj=fbcursor.fetchall()
          for record in cus_main_tree.get_children():
            cus_main_tree.delete(record)
          count_cus=0

          for i in htj:
          
            cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
            count_cus +=1
          top.destroy()
        elif find_txt_var.get()=="Contact Person":
          fnd_sql="select * from customer where contactperson=%s"
          fnd_sql_val=(fnd_srh_txt.get(),)
          fbcursor.execute(fnd_sql,fnd_sql_val)
          htj=fbcursor.fetchall()
          for record in cus_main_tree.get_children():
            cus_main_tree.delete(record)
          count_cus=0

          for i in htj:
            
            cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
            count_cus +=1
          top.destroy()
        elif find_txt_var.get()=="Customer Tel.":
          fnd_sql="select * from customer where cptelno=%s"
          fnd_sql_val=(fnd_srh_txt.get(),)
          fbcursor.execute(fnd_sql,fnd_sql_val)
          htj=fbcursor.fetchall()
          for record in cus_main_tree.get_children():
            cus_main_tree.delete(record)
          count_cus=0

          for i in htj:
            
            cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
            count_cus +=1
          top.destroy()
        elif find_txt_var.get()=="SMS number":
          fnd_sql="select * from customer where cpmobileforsms=%s"
          fnd_sql_val=(fnd_srh_txt.get(),)
          fbcursor.execute(fnd_sql,fnd_sql_val)
          htj=fbcursor.fetchall()
          for record in cus_main_tree.get_children():
            cus_main_tree.delete(record)
          count_cus=0

          for i in htj:
            
            cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
            count_cus +=1
          top.destroy()
        elif find_txt_var.get()=="Type":
          fnd_sql="select * from customer where customertype=%s"
          fnd_sql_val=(fnd_srh_txt.get(),)
          fbcursor.execute(fnd_sql,fnd_sql_val)
          htj=fbcursor.fetchall()
          for record in cus_main_tree.get_children():
            cus_main_tree.delete(record)
          count_cus=0

          for i in htj:
            
            cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
            count_cus +=1
          top.destroy()
        elif find_txt_var.get()=="<<All>>":
          fnd_sql="select * from customer"
          fnd_sql_val=(fnd_srh_txt.get(),)
          fbcursor.execute(fnd_sql,fnd_sql_val)
          htj=fbcursor.fetchall()
          for record in cus_main_tree.get_children():
            cus_main_tree.delete(record)
          count_cus=0

          for i in htj:
            
            cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
            count_cus +=1
          top.destroy()
      def fnd_dist():
        top.destroy()

      top = Toplevel()  
      top.title("Find Text")
      p2 = PhotoImage(file = "images/fbicon.png")
      top.iconphoto(False, p2)
      top.geometry("520x150+390+250")
      findwhat1=Label(top,text="Find What:")
      findwhat1.place(x=5,y=15)
      fnd_srh_txt = StringVar() 
      findwhat = ttk.Combobox(top, width = 50, textvariable = fnd_srh_txt )
      findwhat.place(x=85,y=15,height=23) 
      findButton = Button(top, text ="Find next",width=10, command=lambda:find_cus_row())
      findButton.place(x=420,y=15)
      findin1=Label(top,text="Find in:")
      findin1.place(x=5,y=40)
      find_txt_var = StringVar() 
      findIN = ttk.Combobox(top, width = 37, textvariable =find_txt_var )
      findIN['values'] = ('Customer name',  
                                'Customer ID', 
                                'Category', 
                            
                                'Contact Person', 
                                'Customer Tel.', 
                                'SMS number',
                                'Type',
                                '<<All>>')    
      findIN.place(x=85,y=40,height=23) 
      findIN.current(0)
      closeButton = Button(top, text ="Close",width=10, command=lambda:fnd_dist())
      closeButton.place(x=420,y=45)
    
      up_var = StringVar() 
      checkvarStatus4=IntVar()
      Button4 = Checkbutton(top,variable = checkvarStatus4, 
                        text="Match Case", 
                        onvalue =0 ,
                        offvalue = 1,
                        height=3,
                        width = 15)
      Button4.select()
      Button4.place(x=60,y=80)
      checkvarStatus5=IntVar()  
      Button5 = Checkbutton(top,variable = checkvarStatus5, 
                        text="Match Format", 
                        onvalue =0 ,
                        offvalue = 1,
                        height=3,
                        width = 15)
      Button5.select()
      Button5.place(x=270,y=80)
      top.mainloop()
  #-----------------------------------------------------------------------------------Refresh Customer
  def cus_refresh_customers(): 
        for record in cus_main_tree.get_children():
          cus_main_tree.delete(record)
        cus_main_table_sql="select * from customer"
        fbcursor.execute(cus_main_table_sql)
        main_tb_val=fbcursor.fetchall()
        count_cus=0

        for i in main_tb_val:
          cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
          count_cus +=1
      
  #$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$(((End)))

  ################################################################################((function For Invoice bottom table))
  # #-------------------------------------------------------------------------------bottom tree invoice
  def cus_inv_btm1():
      cus_inv2_s=ttk.Style()
      cus_inv2_s.configure('Treeview.Heading',background='white')
      cus_inv2_tree=ttk.Treeview(tab7,selectmode='browse')
      
      cus_inv2_tree.place(x=0,y=415,height=280)
      cus_inv2_vertical_bar=ttk.Scrollbar(tab7,orient="vertical")
      cus_inv2_vertical_bar.config(command=cus_inv2_tree.yview)
      cus_inv2_vertical_bar.place(x=1083,y=415,height=280)
      cus_inv2_tree["columns"]=("1","2","3","4","5","6","7","8","9")
      cus_inv2_tree["show"]='headings'


      cus_inv2_tree.column("1",width=20,anchor='c')
      cus_inv2_tree.column("2",width=140,anchor='c')
      cus_inv2_tree.column("3",width=110,anchor='c')
      cus_inv2_tree.column("4",width=110,anchor='c')
      cus_inv2_tree.column("5",width=120,anchor='c')
      cus_inv2_tree.column("6",width=120,anchor='c')
      cus_inv2_tree.column("7",width=160,anchor='c')
      cus_inv2_tree.column("8",width=160,anchor='c')
      cus_inv2_tree.column("9",width=140,anchor='c')
      cus_inv2_tree.heading("1",text="")
      cus_inv2_tree.heading("2",text="#ID")
      cus_inv2_tree.heading("3",text="Issue Date")
      cus_inv2_tree.heading("4",text="Due Date")
      cus_inv2_tree.heading("5",text="Recurring")
      cus_inv2_tree.heading("6",text="Status")
      cus_inv2_tree.heading("7",text="Invoice Total")
      cus_inv2_tree.heading("8",text="Total Paid")
      cus_inv2_tree.heading("9",text="Balance")
      cus_id=cus_main_tree.item(cus_main_tree.focus())["values"][3]

      cus_main_table_sql="select * from invoice where businessname=%s"
      cus_main_table_sql_val=(cus_id,)
      fbcursor.execute(cus_main_table_sql,cus_main_table_sql_val)
      main_tb_val=fbcursor.fetchall()
      count_cus=0
      
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      crcy=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      cency_pos=post_rp[0]
    
      for i in main_tb_val:
        if i[24] is None:
          dfh="No"
        else:
          dfh="Yes"
        if cency_pos=="before amount":   
          cus_inv2_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],dfh,i[4],crcy+str(i[8]),crcy+str(i[9]),crcy+str(i[10])))
          count_cus +=1
        elif cency_pos=="after amount": 
          cus_inv2_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],dfh,i[4],str(i[8])+crcy,str(i[9])+crcy,str(i[10])+crcy))
          count_cus +=1
        elif cency_pos=="before amount with space": 
          cus_inv2_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],dfh,i[4],crcy+" "+str(i[8]),crcy+" "+str(i[9]),crcy+" "+str(i[10])))
          count_cus +=1 
        elif cency_pos=="after amount with space":
          cus_inv2_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],dfh,i[4],str(i[8])+" "+crcy,str(i[9])+" "+crcy,str(i[10])+" "+crcy))
          count_cus +=1
        else:
          pass
        
  def cus_inv_btm(event): 
      cus_inv2_s=ttk.Style()
      cus_inv2_s.configure('Treeview.Heading',background='white')
      cus_inv2_tree=ttk.Treeview(tab7,selectmode='browse')
      
      cus_inv2_tree.place(x=0,y=415,height=280)
      cus_inv2_vertical_bar=ttk.Scrollbar(tab7,orient="vertical")
      cus_inv2_vertical_bar.config(command=cus_inv2_tree.yview)
      cus_inv2_vertical_bar.place(x=1083,y=415,height=280)
      cus_inv2_tree["columns"]=("1","2","3","4","5","6","7","8","9")
      cus_inv2_tree["show"]='headings'


      cus_inv2_tree.column("1",width=20,anchor='c')
      cus_inv2_tree.column("2",width=140,anchor='c')
      cus_inv2_tree.column("3",width=110,anchor='c')
      cus_inv2_tree.column("4",width=110,anchor='c')
      cus_inv2_tree.column("5",width=120,anchor='c')
      cus_inv2_tree.column("6",width=120,anchor='c')
      cus_inv2_tree.column("7",width=160,anchor='c')
      cus_inv2_tree.column("8",width=160,anchor='c')
      cus_inv2_tree.column("9",width=140,anchor='c')
      cus_inv2_tree.heading("1",text="")
      cus_inv2_tree.heading("2",text="#ID")
      cus_inv2_tree.heading("3",text="Issue Date")
      cus_inv2_tree.heading("4",text="Due Date")
      cus_inv2_tree.heading("5",text="Recurring")
      cus_inv2_tree.heading("6",text="Status")
      cus_inv2_tree.heading("7",text="Invoice Total")
      cus_inv2_tree.heading("8",text="Total Paid")
      cus_inv2_tree.heading("9",text="Balance")
      try:
        cus_id=cus_main_tree.item(cus_main_tree.focus())["values"][3]
      
  
        cus_main_table_sql="select * from invoice where businessname=%s"
        cus_main_table_sql_val=(cus_id,)
        fbcursor.execute(cus_main_table_sql,cus_main_table_sql_val)
        main_tb_val=fbcursor.fetchall()
        count_cus=0
        sqlr= 'select currencysign from company'
        fbcursor.execute(sqlr)
        crncy=fbcursor.fetchone()
        crcy=crncy[0]
        sqlrt= 'select currsignplace from company'
        fbcursor.execute(sqlrt)
        post_rp=fbcursor.fetchone()
        cency_pos=post_rp[0]
        

        for i in main_tb_val:
          if i[24] is None:
            dfh="No"
          else:
            dfh="Yes"
          
          if cency_pos=="before amount":   
            cus_inv2_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],dfh,i[4],crcy+str(i[8]),crcy+str(i[9]),crcy+str(i[10])))
            count_cus +=1
          elif cency_pos=="after amount": 
            cus_inv2_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],dfh,i[4],str(i[8])+crcy,str(i[9])+crcy,str(i[10])+crcy))
            count_cus +=1
          elif cency_pos=="before amount with space": 
            cus_inv2_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],dfh,i[4],crcy+" "+str(i[8]),crcy+" "+str(i[9]),crcy+" "+str(i[10])))
            count_cus +=1 
          elif cency_pos=="after amount with space":
            cus_inv2_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],dfh,i[4],str(i[8])+" "+crcy,str(i[9])+" "+crcy,str(i[10])+" "+crcy))
            count_cus +=1
          else:
            pass
      except:
        pass
    # #-------------------------------------------------------------------------------bottom tree order
  def cus_ord_btm():
      cus_ord_s=ttk.Style()
      cus_ord_s.configure('Treeview.Heading',background='white')
      cus_ord_tree=ttk.Treeview(tab7,selectmode='browse')
      cus_ord_tree.place(x=0,y=415,height=280)
      cus_ord_vertical_bar=ttk.Scrollbar(tab7,orient="vertical")
      cus_ord_vertical_bar.config(command=cus_ord_tree.yview)
      cus_ord_vertical_bar.place(x=1083,y=415,height=280)
      cus_ord_tree["columns"]=("1","2","3","4","5","6","7","8","9")
      cus_ord_tree["show"]='headings'


      cus_ord_tree.column("1",width=20,anchor='c')
      cus_ord_tree.column("2",width=140,anchor='c')
      cus_ord_tree.column("3",width=110,anchor='c')
      cus_ord_tree.column("4",width=110,anchor='c')
      cus_ord_tree.column("5",width=120,anchor='c')
      cus_ord_tree.column("6",width=120,anchor='c')
      cus_ord_tree.column("7",width=160,anchor='c')
      cus_ord_tree.column("8",width=160,anchor='c')
      cus_ord_tree.column("9",width=140,anchor='c')
      cus_ord_tree.heading("1",text="")
      cus_ord_tree.heading("2",text="#ID")
      cus_ord_tree.heading("3",text="Issue Date")
      cus_ord_tree.heading("4",text="Due Date")
      cus_ord_tree.heading("5",text="Emailed on")
      cus_ord_tree.heading("6",text="Print on")
      cus_ord_tree.heading("7",text="Subtotal")
      cus_ord_tree.heading("8",text="Extra Cost")
      cus_ord_tree.heading("9",text="Order Total")
      cus_id=cus_main_tree.item(cus_main_tree.focus())["values"][3]

      cus_main_table_sql="select * from orders where businessname=%s"
      cus_main_table_sql_val=(cus_id,)
      fbcursor.execute(cus_main_table_sql,cus_main_table_sql_val)
      main_tb_val=fbcursor.fetchall()
      count_cus=0
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      crcy=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      cency_pos=post_rp[0]
      for i in main_tb_val:
        if cency_pos=="before amount": 
          cus_ord_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[0],i[1],i[2],i[5],i[6],crcy+str(i[26]),crcy+str(i[10]),crcy+str(i[8])))
          count_cus +=1 
        elif cency_pos=="after amount":
          cus_ord_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[0],i[1],i[2],i[5],i[6],str(i[26])+crcy,str(i[10])+crcy,str(i[8])+crcy))
          count_cus +=1
        elif cency_pos=="before amount with space":
          cus_ord_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[0],i[1],i[2],i[5],i[6],crcy+" "+str(i[26]),crcy+" "+str(i[10]),crcy+" "+str(i[8])))
          count_cus +=1
        elif cency_pos=="after amount with space":
          cus_ord_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[0],i[1],i[2],i[5],i[6],str(i[26])+" "+crcy,str(i[10])+" "+crcy,str(i[8])+" "+crcy))
          count_cus +=1
        else:
          pass
        
    # #-------------------------------------------------------------------------------bottom tree Estimates
  def cus_est_btm():
      cus_est_s=ttk.Style()
      cus_est_s.configure('Treeview.Heading',background='white')
      cus_est_tree=ttk.Treeview(tab7,selectmode='browse')
      cus_est_tree.place(x=0,y=415,height=280)
      cus_est_vertical_bar=ttk.Scrollbar(tab7,orient="vertical")
      cus_est_vertical_bar.config(command=cus_est_tree.yview)
      cus_est_vertical_bar.place(x=1083,y=415,height=280)
      cus_est_tree["columns"]=("1","2","3","4","5","6","7","8","9")
      cus_est_tree["show"]='headings'


      cus_est_tree.column("1",width=20,anchor='c')
      cus_est_tree.column("2",width=140,anchor='c')
      cus_est_tree.column("3",width=110,anchor='c')
      cus_est_tree.column("4",width=110,anchor='c')
      cus_est_tree.column("5",width=120,anchor='c')
      cus_est_tree.column("6",width=120,anchor='c')
      cus_est_tree.column("7",width=160,anchor='c')
      cus_est_tree.column("8",width=160,anchor='c')
      cus_est_tree.column("9",width=140,anchor='c')
      cus_est_tree.heading("1",text="")
      cus_est_tree.heading("2",text="#ID")
      cus_est_tree.heading("3",text="Issue Date")
      cus_est_tree.heading("4",text="Due Date")
      cus_est_tree.heading("5",text="Emailed on")
      cus_est_tree.heading("6",text="Print on")
      cus_est_tree.heading("7",text="Subtotal")
      cus_est_tree.heading("8",text="Extra Cost")
      cus_est_tree.heading("9",text="Estimate Total")
      cus_id=cus_main_tree.item(cus_main_tree.focus())["values"][3]

      cus_main_table_sql="select * from estimate where businessname=%s"
      cus_main_table_sql_val=(cus_id,)
      fbcursor.execute(cus_main_table_sql,cus_main_table_sql_val)
      main_tb_val=fbcursor.fetchall()
      count_cus=0
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      crcy=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      cency_pos=post_rp[0]
      for i in main_tb_val:
        if cency_pos=="before amount": 
          cus_est_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],i[5],i[6],crcy+str(i[36]),crcy+str(i[12]),crcy+str(i[8])))
          count_cus +=1 
        elif cency_pos=="after amount":
          cus_est_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],i[5],i[6],str(i[36])+crcy,str(i[12])+crcy,str(i[8])+crcy))
          count_cus +=1
        elif cency_pos=="before amount with space":
          cus_est_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],i[5],i[6],crcy+" "+str(i[36]),crcy+" "+str(i[12]),crcy+" "+str(i[8])))
          count_cus +=1
        elif cency_pos=="after amount with space":
          cus_est_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],i[5],i[6],str(i[36])+" "+crcy,str(i[12])+" "+crcy,str(i[8])+" "+crcy))
          count_cus +=1
        else:
          pass
        
        
    # #-------------------------------------------------------------------------------bottom tree statement
  def cus_stm_btm():
      cus_stm_s=ttk.Style()
      cus_stm_s.configure('Treeview.Heading',background='white')
      cus_stm_tree=ttk.Treeview(tab7,selectmode='browse')
      cus_stm_tree.place(x=0,y=415,height=280)
      cus_stm_vertical_bar=ttk.Scrollbar(tab7,orient="vertical")
      
      cus_stm_vertical_bar.config(command=cus_stm_tree.yview)
      cus_stm_vertical_bar.place(x=1083,y=415,height=280)
      cus_stm_tree["columns"]=("1","2","3","4","5","6","7","8","9")
      cus_stm_tree["show"]='headings'


      cus_stm_tree.column("1",width=20,anchor='c')
      cus_stm_tree.column("2",width=140,anchor='c')
      cus_stm_tree.column("3",width=110,anchor='c')
      cus_stm_tree.column("4",width=110,anchor='c')
      cus_stm_tree.column("5",width=120,anchor='c')
      cus_stm_tree.column("6",width=120,anchor='c')
      cus_stm_tree.column("7",width=160,anchor='c')
      cus_stm_tree.column("8",width=160,anchor='c')
      cus_stm_tree.column("9",width=140,anchor='c')
      cus_stm_tree.heading("1",text="")
      cus_stm_tree.heading("2",text="Invoice ID#")
      cus_stm_tree.heading("3",text="Issue Date")
      cus_stm_tree.heading("4",text="Due Date")
      cus_stm_tree.heading("5",text="Recurring")
      cus_stm_tree.heading("6",text="Status")
      cus_stm_tree.heading("7",text="Invoice Total")
      cus_stm_tree.heading("8",text="Total Paid")
      cus_stm_tree.heading("9",text="Balance")
      cus_id=cus_main_tree.item(cus_main_tree.focus())["values"][3]

      cus_main_table_sql="select * from invoice where businessname=%s"
      cus_main_table_sql_val=(cus_id,)
      fbcursor.execute(cus_main_table_sql,cus_main_table_sql_val)
      main_tb_val=fbcursor.fetchall()
      count_cus=0
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      crcy=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      cency_pos=post_rp[0]
      for i in main_tb_val:
        if i[24] is None:
          dfh="No"
        else:
          dfh="Yes"
        if cency_pos=="before amount": 
          cus_stm_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],dfh,i[4],crcy+str(i[8]),crcy+str(i[9]),crcy+str(i[10])))
          count_cus +=1 
        elif cency_pos=="after amount":
          cus_stm_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],dfh,i[4],str(i[8])+crcy,str(i[9])+crcy,str(i[10])+crcy))
          count_cus +=1
        elif cency_pos=="before amount with space":
          cus_stm_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],dfh,i[4],crcy+" "+str(i[8]),crcy+" "+str(i[9]),crcy+" "+str(i[10])))
          count_cus +=1
        elif cency_pos=="after amount with space":
          cus_stm_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[1],i[2],i[3],dfh,i[4],str(i[8])+" "+crcy,str(i[9])+" "+crcy,str(i[10])+" "+crcy))
          count_cus +=1
        else:
          pass
        
      
    # #-------------------------------------------------------------------------------bottom tree payment
  def cus_pym_btm():
      cus_pym_s=ttk.Style()
      cus_pym_s.configure('Treeview.Heading',background='white')
      cus_pym_tree=ttk.Treeview(tab7,selectmode='browse')
      cus_pym_tree.place(x=0,y=415,height=280)
      cus_pym_vertical_bar=ttk.Scrollbar(tab7,orient="vertical")
      cus_pym_vertical_bar.config(command=cus_pym_tree.yview)
      cus_pym_vertical_bar.place(x=1083,y=415,height=280)
      cus_pym_tree["columns"]=("1","2","3","4","5","6","7")
      cus_pym_tree["show"]='headings'


      cus_pym_tree.column("1",width=20,anchor='c')
      cus_pym_tree.column("2",width=170,anchor='c')
      cus_pym_tree.column("3",width=160,anchor='c')
      cus_pym_tree.column("4",width=110,anchor='c')
      cus_pym_tree.column("5",width=160,anchor='c')
      cus_pym_tree.column("6",width=300,anchor='c')
      cus_pym_tree.column("7",width=160,anchor='c')
      cus_pym_tree.heading("1",text="")
      cus_pym_tree.heading("2",text="Invoice ID")
      cus_pym_tree.heading("3",text="Payment Id")
      cus_pym_tree.heading("4",text="Payment Date")
      cus_pym_tree.heading("5",text="Paid By")
      cus_pym_tree.heading("6",text="Description")
      cus_pym_tree.heading("7",text="Amount")
      cus_id=cus_main_tree.item(cus_main_tree.focus())["values"][3]

      cus_main_table_sql="select * from invoice where businessname=%s"
      cus_main_table_sql_val=(cus_id,)
      fbcursor.execute(cus_main_table_sql,cus_main_table_sql_val)
      main_tb_val=fbcursor.fetchall()
      
      count_cus=0
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      crcy=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      cency_pos=post_rp[0]
      for j in main_tb_val:
          cus_sql="select * from payments where invoiceid =%s"
          cus_sql_val=(j[0],)
          fbcursor.execute(cus_sql,cus_sql_val)
          pym_tb=fbcursor.fetchall()
          for i in pym_tb:
            if cency_pos=="before amount": 
              cus_pym_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[0],j[34],i[12],j[18],i[9],crcy+str(i[14])))
              count_cus +=1 
            elif cency_pos=="after amount":
              cus_pym_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[0],j[34],i[12],j[18],i[9],str(i[14])+crcy))
              count_cus +=1
            elif cency_pos=="before amount with space":
              cus_pym_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[0],j[34],i[12],j[18],i[9],crcy+" "+str(i[14])))
              count_cus +=1
            elif cency_pos=="after amount with space":
              cus_pym_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[0],j[34],i[12],j[18],i[9],str(i[14])+" "+crcy))
              count_cus +=1
            else:
              pass
                
                
          
          
      
    # #-------------------------------------------------------------------------------bottom tree purchase order
  def cus_pod_btm():
      cus_por_s=ttk.Style()
      cus_por_s.configure('Treeview.Heading',background='white')
      cus_por_tree=ttk.Treeview(tab7,selectmode='browse')
      cus_por_tree.place(x=0,y=415,height=280)
      cus_por_vertical_bar=ttk.Scrollbar(tab7,orient="vertical")
      cus_por_vertical_bar.config(command=cus_por_tree.yview)
      cus_por_vertical_bar.place(x=1083,y=415,height=280)
      cus_por_tree["columns"]=("1","2","3","4","5","6","7")
      cus_por_tree["show"]='headings'


      cus_por_tree.column("1",width=20,anchor='c')
      cus_por_tree.column("2",width=170,anchor='c')
      cus_por_tree.column("3",width=130,anchor='c')
      cus_por_tree.column("4",width=130,anchor='c')
      cus_por_tree.column("5",width=300,anchor='c')
      cus_por_tree.column("6",width=150,anchor='c')
      cus_por_tree.column("7",width=180,anchor='c')
      cus_por_tree.heading("1",text="")
      cus_por_tree.heading("2",text="ID#")
      cus_por_tree.heading("3",text="Issue Date")
      cus_por_tree.heading("4",text="Due Date")
      cus_por_tree.heading("5",text="Vendor")
      cus_por_tree.heading("6",text="Status")

      cus_por_tree.heading("7",text="P.Order Total")
      cus_id=cus_main_tree.item(cus_main_tree.focus())["values"][3]

      cus_main_table_sql="select * from porder where businessname=%s"
      cus_main_table_sql_val=(cus_id,)
      fbcursor.execute(cus_main_table_sql,cus_main_table_sql_val)
      main_tb_val=fbcursor.fetchall()
      count_cus=0
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      crcy=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      cency_pos=post_rp[0]
      for i in main_tb_val:
        if cency_pos=="before amount": 
          cus_por_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[0],i[2],i[3],i[4],i[5],crcy+str(i[9])))
          count_cus +=1 
        elif cency_pos=="after amount":
          cus_por_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[0],i[2],i[3],i[4],i[5],str(i[9])+crcy))
          count_cus +=1
        elif cency_pos=="before amount with space":
          cus_por_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[0],i[2],i[3],i[4],i[5],crcy+" "+str(i[9])))
          count_cus +=1
        elif cency_pos=="after amount with space":
          cus_por_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[0],i[2],i[3],i[4],i[5],str(i[9])+" "+crcy))
          count_cus +=1
        else:
          pass
        
        
    #----------------------------------------------------------------------------------Filter Section
  def ct_filter(event):
    selected_indices = cus_listbox.curselection()
    if str(selected_indices)=="(0,)":
      for record in cus_main_tree.get_children():
        cus_main_tree.delete(record)
      cus_main_table_sql="select * from customer"
      fbcursor.execute(cus_main_table_sql)
      main_tb_val=fbcursor.fetchall()
      
      count_cus=0

      for i in main_tb_val:
        cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
        
        count_cus +=1
    elif str(selected_indices)=="(1,)":
      for record in cus_main_tree.get_children():
        cus_main_tree.delete(record)
      cus_main_table_sql="select * from customer where customertype='Both(Client/Vender)'"
      fbcursor.execute(cus_main_table_sql)
      main_tb_val=fbcursor.fetchall()
      
      count_cus=0

      for i in main_tb_val:
        cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
        
        count_cus +=1
    elif str(selected_indices)=="(2,)":
      for record in cus_main_tree.get_children():
        cus_main_tree.delete(record)
      cus_main_table_sql="select * from customer where customertype='Client'"
      fbcursor.execute(cus_main_table_sql)
      main_tb_val=fbcursor.fetchall()
      
      count_cus=0

      for i in main_tb_val:
        cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
        
        count_cus +=1
    elif str(selected_indices)=="(3,)":
      for record in cus_main_tree.get_children():
        cus_main_tree.delete(record)
      cus_main_table_sql="select * from customer where customertype='Vender'"
      fbcursor.execute(cus_main_table_sql)
      main_tb_val=fbcursor.fetchall()
      
      count_cus=0

      for i in main_tb_val:
        cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
        
        count_cus +=1
    else:
      pass

  ####################################################################################################################


  global cus_main_tree
  cus_main_s=ttk.Style()
  cus_main_s.configure('Treeview.Heading',background='white')
  cus_main_tree=ttk.Treeview(tab7,selectmode='browse')

  cus_main_vertical_bar=ttk.Scrollbar(tab7,orient="vertical")
  cus_main_vertical_bar.config(command=cus_main_tree.yview)
  cus_main_vertical_bar.place(x=1083,y=95,height=280)
  cus_main_tree.place(x=0,y=95,height=280)
  cus_main_tree["columns"]=("1","2","3","4","5","6","7","8")
  cus_main_tree["show"]='headings'
  cus_main_tree.column("1",width=30,anchor='c')
  cus_main_tree.column("2",width=140,anchor='c')
  cus_main_tree.column("3",width=190,anchor='c')
  cus_main_tree.column("4",width=176,anchor='c')
  cus_main_tree.column("5",width=176,anchor='c')
  cus_main_tree.column("6",width=120,anchor='c')
  cus_main_tree.column("7",width=130,anchor='c')
  cus_main_tree.column("8",width=120,anchor='c')
  cus_main_tree.heading("1",text="")
  cus_main_tree.heading("2",text="Customer ID")
  cus_main_tree.heading("3",text="Category")
  cus_main_tree.heading("4",text="Customer Name")
  cus_main_tree.heading("5",text="Contact Persion")
  cus_main_tree.heading("6",text="Customer Tel.")
  cus_main_tree.heading("7",text="SMS Number")
  cus_main_tree.heading("8",text="Type")

  cus_main_table_sql="select * from customer"
  fbcursor.execute(cus_main_table_sql)
  main_tb_val=fbcursor.fetchall()
  count_cus=0

  for i in main_tb_val:
      cus_main_tree.insert(parent='', index='end', iid=count_cus, text='hello', values=("",i[24],i[2],i[4],i[8],i[10],i[12],i[22]))
      count_cus +=1
  cus_main_tree.bind('<<TreeviewSelect>>',cus_inv_btm)
  # cus_main_tree.selection_set(9)

  #----------------------------------------------------------------------------Button bottam table-----

  cus_btn=Button(tab7, text="Invoices",image=invoices,compound = LEFT, width=108, command=lambda:cus_inv_btm1())
  cus_btn.place(x=7, y=390)
  cus_btn=Button(tab7, text="Orders", image=orders,compound = LEFT, width=108, command=lambda:cus_ord_btm())
  cus_btn.place(x=125, y=390)
  cus_btn=Button(tab7, text="Estimates", image=estimates,compound = LEFT, width=108, command=lambda:cus_est_btm())
  cus_btn.place(x=243, y=390)
  cus_btn=Button(tab7, text="Statement", image=invoices,compound = LEFT, width=108, command=lambda:cus_stm_btm())
  cus_btn.place(x=361, y=390)
  cus_btn=Button(tab7, text="Payments",image=expenses,compound = LEFT, width=108, command=lambda:cus_pym_btm())
  cus_btn.place(x=479,y=390)
  cus_btn=Button(tab7, text="Purchase O.", image=purchase,compound = LEFT, width=108, command=lambda:cus_pod_btm())
  cus_btn.place(x=597, y=390)

  #-------------------------------------------------------------------------Bottom Table one-------------
  cus_inv_s=ttk.Style()
  cus_inv_s.configure('Treeview.Heading',background='white')
  cus_inv_tree=ttk.Treeview(tab7,selectmode='browse')
  cus_inv_tree.place(x=0,y=415,height=280)
  cus_inv_vertical_bar=ttk.Scrollbar(tab7,orient="vertical")
  cus_inv_vertical_bar.config(command=cus_inv_tree.yview)
  cus_inv_vertical_bar.place(x=1083,y=415,height=280)
  cus_inv_tree["columns"]=("1","2","3","4","5","6","7","8","9")
  cus_inv_tree["show"]='headings'


  cus_inv_tree.column("1",width=20,anchor='c')
  cus_inv_tree.column("2",width=140,anchor='c')
  cus_inv_tree.column("3",width=110,anchor='c')
  cus_inv_tree.column("4",width=110,anchor='c')
  cus_inv_tree.column("5",width=120,anchor='c')
  cus_inv_tree.column("6",width=120,anchor='c')
  cus_inv_tree.column("7",width=160,anchor='c')
  cus_inv_tree.column("8",width=160,anchor='c')
  cus_inv_tree.column("9",width=140,anchor='c')
  cus_inv_tree.heading("1",text="")
  cus_inv_tree.heading("2",text="#ID")
  cus_inv_tree.heading("3",text="Issue Date")
  cus_inv_tree.heading("4",text="Due Date")
  cus_inv_tree.heading("5",text="Recurring")
  cus_inv_tree.heading("6",text="Status")
  cus_inv_tree.heading("7",text="Invoice Total")
  cus_inv_tree.heading("8",text="Total Paid")
  cus_inv_tree.heading("9",text="Balance")

  #---------------------------------------------------------------------------------Bottom 

  #------------------------------------------------------------Right side table list box in main----------------
  cus_tree1=ttk.Treeview(tab7,selectmode='browse')
  cus_tree1.place(height=600,width=254,
                        x=1099,y=95
                        )
  cus_tree1["columns"]=("1")
  cus_tree1["show"]='headings'
  cus_tree1.column("1",width=254,anchor='c')
  cus_tree1.heading("1",text="View filter by category")

  cus_listbox = Listbox(tab7,height =8,  
                        width = 29,  
                        bg = "white",
                        activestyle = 'dotbox',  
                        fg = "black",
                        highlightbackground="white")  
  cus_listbox.insert(0, "  View all records")
  cus_listbox.insert(1, "  View only Client/Vendor Type")
  cus_listbox.insert(2, "  View only Client Type")
  cus_listbox.insert(3, "  View only Vendor Type")

  cus_listbox.place(x=1099,y=120,height=545,width=254)
  cus_listbox.bind('<<ListboxSelect>>', ct_filter)
#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@ End of Customer @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
############################ ADD PRODUCT SERVICES  ############################
  def add_product_s_connection():
    sql = "select * from users"
    fbcursor.execute(sql)
    addexp_check_user = fbcursor.fetchall()
    if not addexp_check_user:
      adda_product()
    else:
      try:
        user_namech = username1.get()
        sql = "select create_product_service from users where username = %s"
        val = (user_namech,)
        fbcursor.execute(sql,val)
        disable_create_exp = fbcursor.fetchone()
        if disable_create_exp[0] == 1:
          adda_product()
        else:
          messagebox.showerror("user","user does not have permission to perform this action")
      except:
        adda_product()

  def adda_product():
    top = Toplevel()  
    
    top.title("Add a new Product/Service")
    p2 = PhotoImage(file = 'images/fbicon.png')
    top.iconphoto(False, p1)
    top.geometry("600x550+390+125")
    
    
    tabControl = ttk.Notebook(top)
    s = ttk.Style()
    s.theme_use('default')
    s.configure('TNotebook.Tab', background="#999999", width=50, padding=10,bd=0)


    tab1 = ttk.Frame(tabControl)
    tab2 = ttk.Frame(tabControl)
    
    tabControl.add(tab1,compound = LEFT, text ='Product/Service')
    tabControl.add(tab2,compound = LEFT, text ='Product Image')
    
    tabControl.pack(expand = 1, fill ="both")
    
    innerFrame = Frame(tab1,bg="#f5f3f2", relief=GROOVE, height=490)
    innerFrame.pack(side="top",fill=BOTH)

    Customerlabelframe = LabelFrame(innerFrame,text="Product/Service",width=580,height=475)
    Customerlabelframe.pack(side="top",fill=BOTH,padx=10)
    
    global filename
    filename = ""
    
    def upload_file():
      global filename,img, b2
      f_types =[('Png files','*.png'),('Jpg Files', '*.jpg')]
      filename = filedialog.askopenfilename(filetypes=f_types)
      shutil.copyfile(filename, os.getcwd()+'/images/'+filename.split('/')[-1])
      image = Image.open(filename)
      resize_image = image.resize((350, 350))
      img = ImageTk.PhotoImage(resize_image)
      b2 = Button(imageFrame,image=img)
      b2.place(x=130, y=80)
    
    def addproducts():
      global img , filename 
      sku = codeentry.get()
      status = checkvarStatus.get()
      catgory = n.get()
      name = nameentry.get()
      description = desentry.get()
      unitprice = uval.get()
      peices = pcsentry.get()
      cost = costval.get()
      price_cost = priceval.get()
      taxable = checkvarStatus2.get()
      tax2 = checkvarStatustax2.get()
      nostockcontrol = checkvarStatus3.get()
      stock = stockentry.get()
      lowstock = lowentry.get()
      warehouse = wareentry.get()
      pnotes = sctxt.get("1.0",'end-1c')
      entries = [sku,name, unitprice, cost]
      entri = []
      for i in entries:
        if i == '':
          entri.append(i)
      if len(entri) == 0:
        sql = 'select * from Productservice where sku = %s or name = %s'
        val  = (sku, name)
        fbcursor.execute(sql, val)
        fbcursor.fetchall()
        row_count = fbcursor.rowcount
        if row_count == 0:
          if filename == "":
            sql = 'insert into Productservice(sku, category, name, description, status, unitprice, peices, cost, taxable, priceminuscost, serviceornot, stock, stocklimit, warehouse, privatenote,tax2) values(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s)'
            val = (sku, catgory, name, description, status, unitprice, peices, cost, taxable, price_cost, nostockcontrol, stock, lowstock, warehouse, pnotes,tax2)
            fbcursor.execute(sql, val)
            fbilldb.commit()
          else:
            file = shutil.copyfile(filename, os.getcwd()+'/images/'+filename.split('/')[-1])
            sql = 'insert into Productservice(sku, category, name, description, status, unitprice, peices, cost, taxable, priceminuscost, serviceornot, stock, stocklimit, warehouse, image, privatenote,tax2) values(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s)'
            val = (sku, catgory, name, description, status, unitprice, peices, cost, taxable, price_cost, nostockcontrol, stock, lowstock, warehouse, filename.split('/')[-1], pnotes,tax2)
            fbcursor.execute(sql, val)
            fbilldb.commit()
        else:
          messagebox.showinfo("Alert", "Entry with same name or SKU already exists.\nTry again.")
          top.destroy()
        for record in treeproducts.get_children():
          treeproducts.delete(record)
        fbcursor.execute("select *  from Productservice")
        pandsdata = fbcursor.fetchall()
        countp = 0
        for i in pandsdata:
          if i[6] == '1':
            acti = 'Active'
          else:
            acti = 'Inactive' 
          sql = "select currencysign,currsignplace from company"
          fbcursor.execute(sql)
          currsymb = fbcursor.fetchone()
          if not currsymb: 
            if i[13] > i[14]:
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('green',))
              countp += 1              
            elif i[12] == '1':
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('blue',))
              countp += 1
            else:
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('red',))
              countp += 1
              
          elif currsymb[1] == "before amount":
            if (i[13]) > (i[14]):
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('green',))
              countp += 1
            elif i[12] == '1':
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('blue',))
              countp += 1
            else:
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('red',))
              countp += 1
          elif currsymb[1] == "before amount with space":
            if i[13] > i[14]:
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('green',))
              countp += 1
            elif i[12] == '1':
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('blue',))
              countp += 1
            else:
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('red',))
              countp += 1
          elif currsymb[1] == "after amount":
            if i[13] > i[14]:
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('green',))
              countp += 1
            elif i[12] == '1':
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
              countp += 1
            else:
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('red',))
              countp += 1
          elif currsymb[1] == "after amount with space":
            if i[13] > i[14]:
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('green',))
              countp += 1
            elif i[12] == '1':
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
              countp += 1
            else:
              treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('red',))
              countp += 1
        top.destroy()
      else:
        messagebox.showinfo("Alert", "Fields name and SKU should not be empty.\nFill out required fields and try again")
        
 
    fbcursor.execute("SELECT * FROM Productservice ORDER BY sku DESC LIMIT 1")
    skuin = fbcursor.fetchone()
    
    
    code1=Label(Customerlabelframe,text="Code or SKU* :",fg="blue",pady=10,padx=10)
    code1.place(x=20,y=0)
    codeentry = Entry(Customerlabelframe,width=35)
    codeentry.place(x=110,y=8)
    # if not skuin == None:
    #   fk=skuin[2]+1
    # else:
    #   fk=1
    # codeentry.insert(0, fk)

    checkvarStatus=IntVar()
    status1=Label(Customerlabelframe,text="Status:")
    status1.place(x=380,y=8)
    Button1 = Checkbutton(Customerlabelframe, 
                      variable = checkvarStatus,text="Active",compound="right",
                      onvalue =1,
                      offvalue = 0,
                      width = 10)

    Button1.place(x=420,y=5)

    category1=Label(Customerlabelframe,text="Category:",pady=5,padx=10)
    category1.place(x=20,y=40)
    n = StringVar() 
    catgory = ttk.Combobox(Customerlabelframe, width = 40, textvariable = n ) 
    catgory.place(x=110,y=45)
    catgory.insert(0, 'Default')


    name1=Label(Customerlabelframe,text="Name* :",fg="blue",pady=5,padx=10)
    name1.place(x=20,y=70)
    nameentry = Entry(Customerlabelframe,width=70)
    nameentry.place(x=110,y=75)

    des1=Label(Customerlabelframe,text="Description :",pady=5,padx=10)
    des1.place(x=20,y=100)
    desentry = Entry(Customerlabelframe,width=70)
    desentry.place(x=110,y=105)

    def prdoucts_cal(S,d):
        if d == '1': #insert
          if not S in ['.','0','1','2','3','4','5','6','7','8','9']:
            return False
          return True
        if d.isdigit():
          return True

    uval = StringVar()
    unit1=Label(Customerlabelframe,text="Unit Price:",fg="blue",pady=5,padx=10)
    unit1.place(x=20,y=130)
    unitentry = Entry(Customerlabelframe,width=20,textvariable=uval)
    unitentry.place(x=110,y=135)
    cal_unit = (Customerlabelframe.register(prdoucts_cal),'%S','%d')
    unitentry.config(validate='key',validatecommand=(cal_unit),justify='right')
    

    # pcsval = IntVar()
    pcs1=Label(Customerlabelframe,text="Pcs/Weight:",fg="blue",pady=5,padx=10)
    pcs1.place(x=320,y=130)
    pcsentry = Entry(Customerlabelframe,width=20)
    pcsentry.place(x=410,y=135)

    costval = StringVar(value="0")
    cost1=Label(Customerlabelframe,text="Cost:",pady=5,padx=10)
    cost1.place(x=20,y=160)
    
    costentry = Entry(Customerlabelframe,width=20,textvariable=costval)
    costentry.place(x=110,y=165)
    cal_cost = (Customerlabelframe.register(prdoucts_cal),'%S','%d')
    costentry.config(validate='key',validatecommand=(cal_cost),justify='right')
    
    def set_label(name, index, mode):
      copr = float(uval.get()) - float(costval.get())
      priceval.set(str(copr))
      
    priceval = StringVar()
    price1=Label(Customerlabelframe,text="(Price-Cost):",pady=5,padx=10)
    price1.place(x=20,y=190)
    priceentry = Entry(Customerlabelframe,width=20,textvariable=priceval,state=DISABLED,disabledbackground="white",disabledforeground="black")
    priceentry.config(justify="right")
    priceentry.place(x=110,y=195)
    
    uval.trace('w', set_label)
    costval.trace('w', set_label)

    sql = "select taxtype from company"
    fbcursor.execute(sql)
    taxchoose = fbcursor.fetchone()

    checkvarStatus2=IntVar()
   
    Button2 = Checkbutton(Customerlabelframe,variable = checkvarStatus2, 
                      text="Taxable Tax1rate",compound="right",
                      onvalue =1 ,
                      offvalue = 0,
                      height=2,
                      width = 12)
    
    checkvarStatustax2=IntVar()
    Buttontax2 = Checkbutton(Customerlabelframe,variable = checkvarStatustax2, 
                      text="Taxable Tax2rate",compound="right",
                      onvalue =1 ,
                      offvalue = 0,
                      height=2,
                      width = 12)
    
    
    if not taxchoose:
      pass
    elif taxchoose[0] == '1':
      Button2.place_forget()
      Buttontax2.place_forget()
    elif taxchoose[0] == '2':
      Button2.place(x=415,y=153)
      Buttontax2.place_forget()
    elif taxchoose[0] == '3':
      Button2.place(x=415,y=153)
      Buttontax2.place(x=415,y=203)

    

    def switch():
      if checkvarStatus3.get():
        stockentry["state"] = DISABLED
        lowentry["state"] = DISABLED
        wareentry["state"] = DISABLED
      else:
        stockentry["state"] = NORMAL
        lowentry["state"] = NORMAL
        wareentry["state"] = NORMAL
    checkvarStatus3=BooleanVar()
    Button3 = Checkbutton(Customerlabelframe,variable = checkvarStatus3,command=switch, 
                      text="This is a service(no stock control)", 
                      onvalue =1 ,
                      offvalue = 0,
                      height=3)

    Button3.place(x=40,y=220)
 
    def stocknum(input):
      if input.isdigit():
        return True
      elif input is "":
        return True
      else:
        return False
    stock1=Label(Customerlabelframe,text="Stock:",pady=5,padx=10)
    stock1.place(x=90,y=260)
    stockentry = Entry(Customerlabelframe,width=15)
    stockentry.place(x=140,y=265)
    sto = Customerlabelframe.register(stocknum)
    stockentry.config(validate="key",validatecommand=(sto, '%S'))


    low1=Label(Customerlabelframe,text="Low Stock Warning Limit:",pady=5,padx=10)
    low1.place(x=280,y=260)
    lowentry = Entry(Customerlabelframe,width=15)
    lowentry.place(x=435,y=265)
    lowsto = Customerlabelframe.register(stocknum)
    lowentry.config(validate="key",validatecommand=(lowsto, '%S'))

   
    ware1=Label(Customerlabelframe,text="Warehouse:",pady=5,padx=10)
    ware1.place(x=60,y=290)
    wareentry = Entry(Customerlabelframe,width=64)
    wareentry.place(x=140,y=295)

    # pnoteval = StringVar()
    text1=Label(Customerlabelframe,text="Private notes(not appears on invoice):",pady=5,padx=10)
    text1.place(x=20,y=320)
    sctxt = scrolledtext.ScrolledText(Customerlabelframe, undo=True,width=62,height=4)
    sctxt.place(x=32,y=358)
    
    okButton = Button(innerFrame, text ="Ok",image=tick,width=70,compound = LEFT, command=addproducts)
    okButton.pack(side=LEFT, padx=(10, 0), pady=(5, 10))
    
    def closetab():
      top.destroy()

    cancelButton = Button(innerFrame,image=cancel,text="Cancel",width=70,compound = LEFT, command=closetab)
    cancelButton.pack(side=RIGHT, padx=(0, 10), pady=(5, 10))

    imageFrame = Frame(tab2, relief=GROOVE,height=580)
    imageFrame.pack(side="top",fill=BOTH)

    
      
    browseimg=Label(imageFrame,text=" Browse for product image file(recommended image type:JPG,size 480x320 pixels) ",bg='#f5f3f2')
    browseimg.place(x=30,y=35)
      
    browsebutton=Button(imageFrame,text = 'Browse',command=upload_file)
    browsebutton.place(x=485,y=30,height=30,width=50)

    removeButton = Button(imageFrame,image=cancel,text="Remove Product Image",width=150,compound = LEFT, command=lambda: b2.destroy())
    removeButton.place(x=410,y=460)

    top.mainloop()
  ##################### import product service ####################
  def import_productservice_check():
    sql = "select * from users"
    fbcursor.execute(sql)
    delexp_check_user = fbcursor.fetchall()
    if not delexp_check_user:
      fileimport_product()
    else:
      try:
        user_namech = username1.get()
        sql = "select 	import_product_service from users where username = %s"
        val = (user_namech,)
        fbcursor.execute(sql,val)
        disable_del_exp = fbcursor.fetchone()
        if disable_del_exp[0] == 1:
          fileimport_product()
        else:
          messagebox.showerror("user","user does not have permission to perform this action")
      except:
        fileimport_product()

  def fileimport_product():

    top=Toplevel()
    top.title("Import items list from Excel(XLS)File")
    top.geometry("785x520+280+100")
    importframe=Frame(top)
    importframe.place(x=0,y=0,height=700,width=785)
    impolbl=Label(importframe,text="Import source Excel(xlsx) File:").place(x=8,y=30)
    impoentry=Entry(importframe,bg="white")
    impoentry.place(x=8,y=50,width=280, height=25)
    previewlbl=Label(importframe,text="Source File preview").place(x=8,y=77)
   
    ###### LISTBOX #####################
    scrollbarx = Scrollbar(importframe, orient=HORIZONTAL)
    scrollbary = Scrollbar(importframe, orient=VERTICAL)
    imptree = ttk.Treeview(importframe, columns=("PRODUCT SERVICE ID","CODE OR SKU","NAME","CATEGORY","DESCRIPTION","QTY UNIT","COST","PRICE","TAX1","TAX2","STOCK","LOW STOCK","LOCATION","ACTIVE","SERVICE"), height=400,     selectmode="extended", yscrollcommand=scrollbary.set, xscrollcommand=scrollbarx.set)
    scrollbary.config(command=imptree.yview)
    scrollbary.place(x=754,y=100,height=325)
    scrollbarx.config(command=imptree.xview)
    scrollbarx.place(x=0,y=410, width=356)
    imptree.heading('PRODUCT SERVICE ID', text="PRODUCT SERVICE ID", anchor=W)
    imptree.heading('CODE OR SKU', text="CODE OR SKU", anchor=W)
    imptree.heading('NAME', text="NAME", anchor=W)
    imptree.heading('CATEGORY', text="CATEGORY", anchor=W)
    imptree.heading('NAME', text="NAME", anchor=W)
    imptree.heading('DESCRIPTION', text="DESCRIPTION", anchor=W)
    imptree.heading('QTY UNIT', text="QTY UNIT", anchor=W)
    imptree.heading('COST', text="COST", anchor=W)
    imptree.heading('PRICE', text="PRICE", anchor=W)
    imptree.heading('TAX1', text="TAX1", anchor=W)
    imptree.heading('TAX2', text="TAX2", anchor=W)
    imptree.heading('STOCK', text="STOCK", anchor=W)
    imptree.heading('LOW STOCK', text="LOW STOCK", anchor=W)
    imptree.heading('LOCATION', text="LOCATION", anchor=W)
    imptree.heading('ACTIVE', text="ACTIVE", anchor=W)
    imptree.heading('SERVICE', text="SERVICE", anchor=W)
    

    imptree.column('#0', stretch=NO, minwidth=0, width=0)
    imptree.column('#1', stretch=NO, minwidth=0, width=120)
    imptree.column('#2', stretch=NO, minwidth=0, width=100)
    imptree.column('#3', stretch=NO, minwidth=0, width=100)
    imptree.column('#4', stretch=NO, minwidth=0, width=100)
    imptree.column('#5', stretch=NO, minwidth=0, width=100)
    imptree.column('#6', stretch=NO, minwidth=0, width=100)
    imptree.column('#7', stretch=NO, minwidth=0, width=100)
    imptree.column('#8', stretch=NO, minwidth=0, width=100)
    imptree.column('#9', stretch=NO, minwidth=0, width=100)
    imptree.column('#10', stretch=NO, minwidth=0, width=100)
    imptree.column('#11', stretch=NO, minwidth=0, width=100)
    imptree.column('#12', stretch=NO, minwidth=0, width=100)
    imptree.column('#13', stretch=NO, minwidth=0, width=100)
    imptree.column('#14', stretch=NO, minwidth=0, width=100)

 

    imptree.place(x=5,y=100,height=315,width=750)
    
    
    lb1=Label(importframe,text="Select import source XLs file first after build column associations").place(x=8,y=480)

    def export_product_1():
      global Productserviceid,name12,category12,description,peices,cost12,priceminuscost,taxable,stock12,stocklimit,warehouse,status,serviceornot,name
      name = askopenfilename(filetypes=[('CSV', '*.csv',), ('Excel', ('*.xls', '*.xslm', '*.xlsx'))])
      # df = pd.read_csv(name)
      # for i in df:
      #   listbox.insert(END, df)
      with open(name) as f:
        reader = csv.DictReader(f, delimiter=',')
        print(reader)
        for row in reader:
          # "PRODUCT SERVICE ID","NAME","CATEGORY","DESCRIPTION","QTY UNIT","COST","PRICE","TAX1","STOCK","LOW STOCK","LOCATION","ACTIVE","SERVICE"
          Productserviceid = row['PRODUCT SERVICE ID']
          sku = row['CODE OR SKU']          
          name12 = row['NAME']
          category12 = row['CATEGORY']
          
          description = row['DESCRIPTION']
          peices = row['QTY UNIT']
          cost12 = row['COST']
          priceminuscost = row['PRICE']
          taxable = row['TAX1']
          tax2 = row['TAX2']
          stock12 = row['STOCK']
          stocklimit = row['LOW STOCK']
          warehouse = row['LOCATION']
          status = row['ACTIVE']
          serviceornot = row['SERVICE']
        
          imptree.insert("", 0, values=(Productserviceid,sku,name12,category12,description,peices,cost12,priceminuscost,taxable,tax2,stock12,stocklimit,warehouse,status,serviceornot))

      impoentry.delete(0, 'end')
      impoentry.insert(0, name)
      
    def nxtscreen():
      def save_pro_import():
        with open(name) as f:
          reader = csv.DictReader(f, delimiter=',')
          for row in reader:
            Productserviceid = int(row['PRODUCT SERVICE ID'])
            sku = int(row['CODE OR SKU'])  
            name12 = row['NAME']
            category12 = row['CATEGORY']
            description = row['DESCRIPTION']
            peices = int(row['QTY UNIT'])
            cost12 = int(row['COST'])
            unitprice = int(row['PRICE'])
            taxable = int(row['TAX1'])
            tax2 = row['TAX2']
            stock12 = int(row['STOCK'])
            stocklimit = int(row['LOW STOCK'])
            warehouse = row['LOCATION']
            status = int(row['ACTIVE'])
            serviceornot = int(row['SERVICE'])
            min = int(unitprice) - int(cost12)

            sql = 'select * from Productservice where Productserviceid = %s or name = %s or sku=%s'
            val  = (Productserviceid, name12,sku)
            fbcursor.execute(sql, val)
            fbcursor.fetchall()
            row_count = fbcursor.rowcount
            if row_count == 0:
              sql = 'insert into Productservice(Productserviceid,sku,name,category,description,peices,cost,unitprice,taxable,tax2,stock,stocklimit,warehouse,status,serviceornot,priceminuscost) values(%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s,%s,%s)'
              val = (Productserviceid,sku,name12,category12,description,peices,cost12,unitprice,taxable,tax2,stock12,stocklimit,warehouse,status,serviceornot,min)
              fbcursor.execute(sql, val)
              fbilldb.commit()
              topp.destroy()
              for record in treeproducts.get_children():
                treeproducts.delete(record)
              fbcursor.execute("select *  from Productservice")
              pandsdata = fbcursor.fetchall()
              countp = 0
              for i in pandsdata:
                if i[6] == '1':
                  acti = 'Active'
                else:
                  acti = 'Inactive' 
                sql = "select currencysign,currsignplace from company"
                fbcursor.execute(sql)
                currsymb = fbcursor.fetchone()
                if not currsymb: 
                  if i[13] > i[14]:
                    treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('green',))
                    countp += 1              
                  elif i[12] == '1':
                    treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('blue',))
                    countp += 1
                  else:
                    treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('red',))
                    countp += 1
                        
                elif currsymb[1] == "before amount":
                  if (i[13]) > (i[14]):
                    treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('green',))
                    countp += 1
                  elif i[12] == '1':
                    treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('blue',))
                    countp += 1
                  else:
                    treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('red',))
                    countp += 1
                elif currsymb[1] == "before amount with space":
                  if i[13] > i[14]:
                    treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('green',))
                    countp += 1
                  elif i[12] == '1':
                    treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('blue',))
                    countp += 1
                  else:
                    treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('red',))
                    countp += 1
                elif currsymb[1] == "after amount":
                  if i[13] > i[14]:
                    treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('green',))
                    countp += 1
                  elif i[12] == '1':
                    treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
                    countp += 1
                  else:
                    treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('red',))
                    countp += 1
                elif currsymb[1] == "after amount with space":
                    if i[13] > i[14]:
                      treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('green',))
                      countp += 1
                    elif i[12] == '1':
                      treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
                      countp += 1
                    else:
                      treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('red',))
                      countp += 1
              topp.destroy()
            else:
              messagebox.showinfo("Alert", "Entry with same name or SKU already exists.\nTry again.")
            
     
      topp=Toplevel()
      topp.title("Import items list from Excel(XLS)File")
      topp.geometry("785x520+280+100")
      scrollbarx = Scrollbar(topp, orient=HORIZONTAL)
      scrollbary = Scrollbar(topp, orient=VERTICAL)
      nxttree = ttk.Treeview(topp, columns=("PRODUCT SERVICE ID","CODE OR SKU","NAME","CATEGORY","DESCRIPTION","QTY UNIT","COST","PRICE","TAX1","TAX2","STOCK","LOW STOCK","LOCATION","ACTIVE","SERVICE"),height=400,     selectmode="extended", yscrollcommand=scrollbary.set, xscrollcommand=scrollbarx.set)
      scrollbary.config(command=nxttree.yview)
      scrollbary.place(x=768,y=0,height=490)
      scrollbarx.config(command=nxttree.xview)
      scrollbarx.place(x=0,y=470,width=763)
      nxttree.heading('CODE OR SKU', text="CODE OR SKU", anchor=W)
      nxttree.heading('PRODUCT SERVICE ID', text="PRODUCT SERVICE ID", anchor=W)
      nxttree.heading('NAME', text="NAME", anchor=W)
      nxttree.heading('CATEGORY', text="CATEGORY", anchor=W)
      nxttree.heading('NAME', text="NAME", anchor=W)
      nxttree.heading('DESCRIPTION', text="DESCRIPTION", anchor=W)
      nxttree.heading('QTY UNIT', text="QTY UNIT", anchor=W)
      nxttree.heading('COST', text="COST", anchor=W)
      nxttree.heading('PRICE', text="PRICE", anchor=W)
      nxttree.heading('TAX1', text="TAX1", anchor=W)
      nxttree.heading('TAX2', text="TAX2", anchor=W)
      nxttree.heading('STOCK', text="STOCK", anchor=W)
      nxttree.heading('LOW STOCK', text="LOW STOCK", anchor=W)
      nxttree.heading('LOCATION', text="LOCATION", anchor=W)
      nxttree.heading('ACTIVE', text="ACTIVE", anchor=W)
      nxttree.heading('SERVICE', text="SERVICE", anchor=W)
  
      nxttree.column('#0', stretch=NO, minwidth=0, width=0)
      nxttree.column('#1', stretch=NO, minwidth=0, width=120)
      nxttree.column('#2', stretch=NO, minwidth=0, width=100)
      nxttree.column('#3', stretch=NO, minwidth=0, width=100)
      nxttree.column('#4', stretch=NO, minwidth=0, width=100)
      nxttree.column('#5', stretch=NO, minwidth=0, width=100)
      nxttree.column('#6', stretch=NO, minwidth=0, width=100)
      nxttree.column('#7', stretch=NO, minwidth=0, width=100)
      nxttree.column('#8', stretch=NO, minwidth=0, width=100)
      nxttree.column('#9', stretch=NO, minwidth=0, width=100)
      nxttree.column('#10', stretch=NO, minwidth=0, width=100)
      nxttree.column('#11', stretch=NO, minwidth=0, width=100)
      nxttree.column('#12', stretch=NO, minwidth=0, width=100)
      nxttree.column('#13', stretch=NO, minwidth=0, width=100)
      nxttree.column('#14', stretch=NO, minwidth=0, width=100)
    
      with open(name) as f:
        reader = csv.DictReader(f, delimiter=',')
        for row in reader:
          # "PRODUCT SERVICE ID","NAME","CATEGORY","DESCRIPTION","QTY UNIT","COST","PRICE","TAX1","STOCK","LOW STOCK","LOCATION","ACTIVE","SERVICE"
          Productserviceid = row['PRODUCT SERVICE ID']
          sku = row['CODE OR SKU']
          name12 = row['NAME']
          category12 = row['CATEGORY']
          
          description = row['DESCRIPTION']
          peices = row['QTY UNIT']
          cost12 = row['COST']
          priceminuscost = row['PRICE']
          taxable = row['TAX1']
          tax2 = row['TAX2']
          stock12 = row['STOCK']
          stocklimit = row['LOW STOCK']
          warehouse = row['LOCATION']
          status = row['ACTIVE']
          serviceornot = row['SERVICE']
      

      
          nxttree.insert("", 0, values=(Productserviceid,sku,name12,category12,description,peices,cost12,  priceminuscost,taxable,tax2,stock12,stocklimit,warehouse,status,serviceornot))
       
    
      nxttree.place(x=0,y=0,height=470,width=770)
      back = Button(topp,text="back",command=lambda:topp.destroy())
      back.place(x=5,y=492)
      Finish = Button(topp,text="Finish",command=save_pro_import)
      Finish.place(x=740,y=492)
     
    
    importbutton=Button(top,command=export_product_1,text = 'Browse',compound=LEFT)
    importbutton.place(x=290,y=48,height=25,width=80)

    
    n = Button(importframe, text ="Next",command=nxtscreen).place(x=710,y=470)
  
    
    top.mainloop()
    
#########EXPORT PRODUCT#######################################################################################

  def export_product():
    cols = ["PRODUCT SERVICE ID","CODE OR SKU","NAME","CATEGORY","DESCRIPTION","QTY UNIT","COST","PRICE","TAX1","TAX2","STOCK","LOW STOCK","LOCATION","ACTIVE","SERVICE"] # Your column headings here
    path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
    
    lst = []
    with open(path, "w", newline='') as myfile:
        csvwriter = csv.writer(myfile, delimiter=',')
        sql = 'select Productserviceid,sku,name,category,description,peices,cost,unitprice,taxable,tax2,stock,stocklimit,warehouse,status,serviceornot from Productservice'
        fbcursor.execute(sql)
        pandsdata = fbcursor.fetchall()
        for row_id in pandsdata:
            row = row_id
            lst.append(row)
        lst = list(map(list,lst))
        lst.insert(0,cols)
        for row in lst:
            csvwriter.writerow(row)

    


######################## VIEW/EDIT PRODUCT #######################################################################

  
  def edit_product():  
    try:
      itemid = treeproducts.item(treeproducts.focus())["values"][1]
      
      global filename
      filename = ""
      
      def upload_file():
        global filename,img, b2
        f_types =[('Png files','*.png'),('Jpg Files', '*.jpg')]
        filename = filedialog.askopenfilename(filetypes=f_types)
        shutil.copyfile(filename, os.getcwd()+'/images/'+filename.split('/')[-1])
        image = Image.open(filename)
        resize_image = image.resize((350, 350))
        img = ImageTk.PhotoImage(resize_image)
        b2 = Button(imageFrame,image=img)
        b2.place(x=130, y=80)
      
      def updateproducts():
        global img , filename 
        sku = codeentry.get()
        status = checkvarStatus.get()
        catgory = n.get()
        name = nameentry.get()
        description = desentry.get()
        unitprice = uval.get()
        peices = pcsentry.get()
        cost = costval.get()
        price_cost = priceval.get()
        taxable = checkvarStatus2.get()
        tax2 = checkvarStatustax2.get()
        nostockcontrol = checkvarStatus3.get()
        stock = stockval.get()
        lowstock = lowval.get()
        warehouse = wareentry.get()
        pnotes = sctxt.get("1.0", 'end-1c')
        entries = [sku, name, unitprice, cost]
        entri = []
        for i in entries:
          if i == '':
            entri.append(i)
        if len(entri) == 0:
          if filename == "":
            sql = "update Productservice set sku=%s, category=%s, name=%s, description=%s, status=%s, unitprice=%s, peices=%s, cost=%s, taxable=%s, priceminuscost=%s, serviceornot=%s, stock=%s, stocklimit=%s, warehouse=%s, privatenote=%s,tax2=%s where Productserviceid = %s"
            val = (sku, catgory, name, description, status, unitprice, peices, cost, taxable, price_cost, nostockcontrol, stock, lowstock, warehouse, pnotes,tax2, itemid)
            fbcursor.execute(sql, val)
            fbilldb.commit()
          else:
            file = shutil.copyfile(filename, os.getcwd()+'/images/'+filename.split('/')[-1])
            sql = "update Productservice set category=%s, name=%s, description=%s, status=%s, unitprice=%s, peices=%s, cost=%s, taxable=%s, priceminuscost=%s, serviceornot=%s, stock=%s, stocklimit=%s, warehouse=%s, image=%s, privatenote=%s,tax2=%s where Productserviceid = %s"
            val = (catgory, name, description, status, unitprice, peices, cost, taxable, price_cost, nostockcontrol, stock, lowstock, warehouse,filename.split('/')[-1], pnotes,tax2, itemid)
            fbcursor.execute(sql, val)
            fbilldb.commit()
            
          for record in treeproducts.get_children():
            treeproducts.delete(record)
          fbcursor.execute("select *  from Productservice")
          pandsdata = fbcursor.fetchall()
          countp = 0
          for i in pandsdata:
            if i[6] == '1':
              acti = 'Active'
            else:
              acti = 'Inactive' 
            sql = "select currencysign,currsignplace from company"
            fbcursor.execute(sql)
            currsymb = fbcursor.fetchone()
            if not currsymb: 
              if i[13] > i[14]:
                treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('green',))
                countp += 1              
              elif i[12] == '1':
                treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('blue',))
                countp += 1
              else:
                treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('red',))
                countp += 1
                      
            elif currsymb[1] == "before amount":
              if (i[13]) > (i[14]):
                treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('green',))
                countp += 1
              elif i[12] == '1':
                treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('blue',))
                countp += 1
              else:
                treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('red',))
                countp += 1
            elif currsymb[1] == "before amount with space":
              if i[13] > i[14]:
                treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('green',))
                countp += 1
              elif i[12] == '1':
                treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('blue',))
                countp += 1
              else:
                treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('red',))
                countp += 1
            elif currsymb[1] == "after amount":
              if i[13] > i[14]:
                treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('green',))
                countp += 1
              elif i[12] == '1':
                treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
                countp += 1
              else:
                treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('red',))
                countp += 1
            elif currsymb[1] == "after amount with space":
                if i[13] > i[14]:
                  treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('green',))
                  countp += 1
                elif i[12] == '1':
                  treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
                  countp += 1
                else:
                  treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('red',))
                  countp += 1
          top.destroy()
        else:
          messagebox.showinfo("F-Billing Revolution", "Fields name or SKU entered is already in database.")
          top.destroy()
        
         
      sql = "select * from Productservice where Productserviceid = %s"
      val = (itemid, )
      fbcursor.execute(sql, val)
      psdata = fbcursor.fetchone()
      
      
      top = Toplevel()  
      top.title("Edit Product/Service details")
      p3 = PhotoImage(file = 'images/fbicon.png')
      top.iconphoto(False, p1)
      top.geometry("600x550+390+125")
      tabControl = ttk.Notebook(top)
      s = ttk.Style()
      s.theme_use('default')
      s.configure('TNotebook.Tab', background="#999999", width=50, padding=10,bd=0)

      taba = ttk.Frame(tabControl)
      tabb = ttk.Frame(tabControl)
      
      tabControl.add(taba,compound = LEFT, text ='Product/Service')
      tabControl.add(tabb,compound = LEFT, text ='Product Image')
      
      tabControl.pack(expand = 1, fill ="both")
      
      innerFrame = Frame(taba,bg="#f5f3f2", relief=GROOVE)
      innerFrame.pack(side="top",fill=BOTH)

      updateframe = LabelFrame(innerFrame,text="Product/Service",width=580,height=485)
      updateframe.pack(side="top",fill=BOTH,padx=10)

      code1=Label(updateframe,text="Code or SKU:",fg="blue",pady=10,padx=10)
      code1.place(x=20,y=0)
      codeentry = Entry(updateframe,width=35)
      codeentry.place(x=110,y=8)
      codeentry.insert(0, psdata[2])

      checkvarStatus=IntVar()
      status1=Label(updateframe,text="Status:")
      status1.place(x=380,y=8)
      Button1 = Checkbutton(updateframe, 
                        variable = checkvarStatus,text="Active",compound="right",
                        onvalue =1,
                        offvalue =0,
                        width = 10)
      Button1.place(x=420,y=5)
      sta = psdata[6]
      if sta == '1':
        Button1.select()
      else:
        Button1.deselect()



      category1=Label(updateframe,text="Category:",pady=5,padx=10)
      category1.place(x=20,y=40)
      n = StringVar() 
      category = Entry(updateframe,width=70,textvariable=n) 
      category.place(x=110,y=45)
      category.insert(0, psdata[3])


      name1=Label(updateframe,text="Name :",fg="blue",pady=5,padx=10)
      name1.place(x=20,y=70)
      nameentry = Entry(updateframe,width=70)
      nameentry.place(x=110,y=75)
      nameentry.insert(0, psdata[4])

      des1=Label(updateframe,text="Description :",pady=5,padx=10)
      des1.place(x=20,y=100)
      desentry = Entry(updateframe,width=70)
      desentry.place(x=110,y=105)
      desentry.insert(0, psdata[5])

      def set_label(name, index, mode):
        priceval.set(float(uval.get()) - float(costval.get()))

      def prdoucts_cal(S,d):
        if d == '1': #insert
          if not S in ['.','0','1','2','3','4','5','6','7','8','9']:
            return False
          return True
        if d.isdigit():
          return True
      
      unit1=Label(updateframe,text="Unit Price:",fg="blue",pady=5,padx=10)
      unit1.place(x=20,y=130)
      
      uval = StringVar()
      unitentry = Entry(updateframe,width=20,textvariable=uval)
      unitentry.place(x=110,y=135)
      unitentry.delete(0,'end')
      unitentry.insert(0, psdata[7])
      cal_unit = (updateframe.register(prdoucts_cal),'%S','%d')
      unitentry.config(validate='key',validatecommand=(cal_unit),justify='right')
      

      pcsval = IntVar()
      pcs1=Label(updateframe,text="Pcs/Weight:",fg="blue",pady=5,padx=10)
      pcs1.place(x=320,y=130)
      pcsentry = Entry(updateframe,width=20,textvariable=pcsval)
      pcsentry.place(x=410,y=135)
      pcsentry.delete(0,'end')
      pcsentry.insert(0, psdata[8])
      

      costval = StringVar()
      cost1=Label(updateframe,text="Cost:",pady=5,padx=10)
      cost1.place(x=20,y=160)
      costentry = Entry(updateframe,width=20,textvariable=costval)
      costentry.place(x=110,y=165)
      costentry.delete(0, END)
      costentry.insert(0, psdata[9])
      cal_cost = (updateframe.register(prdoucts_cal),'%S','%d')
      costentry.config(validate='key',validatecommand=(cal_cost),justify='right')
      

      priceval = StringVar()
      price1=Label(updateframe,text="(Price-Cost):",pady=5,padx=10)
      price1.place(x=20,y=190)
      priceentry = Entry(updateframe,width=20,textvariable=priceval)
      priceentry.place(x=110,y=195)
      priceentry.delete(0,'end')
      priceentry.insert(0, psdata[11])

      uval.trace('w', set_label)
      costval.trace('w', set_label)
      

      checkvarStatus2=IntVar()
    
      Button2 = Checkbutton(updateframe,variable = checkvarStatus2, 
                        text="Taxable Tax1rate",compound="right",
                        onvalue =1 ,
                        offvalue =0,
                        height=2,
                        width = 12)
      
      checkvarStatustax2=IntVar()
      Buttontax2 = Checkbutton(updateframe,variable = checkvarStatustax2, 
                      text="Taxable Tax2rate",compound="right",
                      onvalue =1 ,
                      offvalue = 0,
                      height=2,
                      width = 12)
      
      sql = "select taxtype from company"
      fbcursor.execute(sql)
      taxchoose = fbcursor.fetchone()
      if not taxchoose:
        pass
      elif taxchoose[0] == '1':
        Button2.place_forget()
        Buttontax2.place_forget()
      elif taxchoose[0] == '2':
        Button2.place(x=415,y=153)
        Buttontax2.place_forget()
      elif taxchoose[0] == '3':
        Button2.place(x=415,y=153)
        Buttontax2.place(x=415,y=203)

   
      tax = psdata[10]
      if tax == '1':
        Button2.select()
      else:
        Button2.deselect()

      if psdata[19] == '1':
        Buttontax2.select()
      else:
        Buttontax2.deselect()

      def switch():
        if checkvarStatus3.get():
          stockentry["state"] = DISABLED
          lowentry["state"] = DISABLED
          wareentry["state"] = DISABLED
        else:
          stockentry["state"] = NORMAL
          lowentry["state"] = NORMAL
          wareentry["state"] = NORMAL
      checkvarStatus3=BooleanVar()
    
      Button3 = Checkbutton(updateframe,variable = checkvarStatus3,command=switch, 
                        text="No stock Control", 
                        onvalue =1 ,
                        offvalue = 0,
                        height=3,
                        width = 15)

      Button3.place(x=40,y=220)

      

      def stocknum(input):
        if input.isdigit():
          return True
        elif input is "":
          return True
        else:
          return False
      stockval = IntVar(updateframe)
      stock1=Label(updateframe,text="Stock:",pady=5,padx=10)
      stock1.place(x=90,y=260)
      stockentry = Entry(updateframe,width=15,textvariable=stockval)
      stockentry.place(x=140,y=265)
      stockentry.delete(0,'end')
      stockentry.insert(0, psdata[13])
      sto = updateframe.register(stocknum)
      stockentry.config(validate="key",validatecommand=(sto, '%S'))
      

      lowval = IntVar(updateframe)
      low1=Label(updateframe,text="Low Stock Warning Limit:",pady=5,padx=10)
      low1.place(x=280,y=260)
      lowentry = Entry(updateframe,width=15,textvariable=lowval)
      lowentry.place(x=435,y=265)
      lowentry.delete(0,'end')
      lowentry.insert(0, psdata[14])
      lowsto = updateframe.register(stocknum)
      lowentry.config(validate="key",validatecommand=(lowsto, '%S'))
      

    
      ware1=Label(updateframe,text="Warehouse:",pady=5,padx=10)
      ware1.place(x=60,y=290)
      wareentry = Entry(updateframe,width=64)
      wareentry.place(x=140,y=295)
      wareentry.insert(0, psdata[15])

      scr = psdata[12]
      if scr == '1':
        Button3.select()
        stockentry["state"] = DISABLED
        lowentry["state"] = DISABLED
        wareentry["state"] = DISABLED
      else:
        Button3.deselect()
        stockentry["state"] = NORMAL
        lowentry["state"] = NORMAL
        wareentry["state"] = NORMAL
      
      

      

      text1=Label(updateframe,text="Private notes(not appears on invoice):",pady=5,padx=10)
      text1.place(x=20,y=320)
      sctxt = scrolledtext.ScrolledText(updateframe, undo=True,width=62,height=4)
      sctxt.place(x=32,y=358)
      try:
        sctxt.insert("1.0", psdata[16])
      except:
        pass

      okButton = Button(innerFrame, text ="Ok",image=tick,width=70,compound = LEFT, command=updateproducts)
      okButton.pack(side=LEFT, padx=(10, 0))

      cancelButton = Button(innerFrame,image=cancel,text="Cancel",width=70,compound = LEFT, command=lambda : top.destroy())
      cancelButton.pack(side=RIGHT, padx=(0, 10))
      
      
      imageFrame = Frame(tabb, relief=GROOVE,height=580)
      imageFrame.pack(side="top",fill=BOTH)

      browseimg=Label(imageFrame,text=" Browse for product image file(recommended image type:JPG,size 480x320 pixels) ",bg='#f5f3f2')
      browseimg.place(x=15,y=35)

      browsebutton=Button(imageFrame,text = 'Browse', command=upload_file)
      browsebutton.place(x=470,y=30,height=30,width=50)

      try:
        image = Image.open("images/"+psdata[17])
        resize_image = image.resize((350, 350))
        image = ImageTk.PhotoImage(resize_image)
        b2 = Label(imageFrame,image=image,width=350,height=350)
        b2.photo = image
        b2.place(x=130, y=80)
        print(image)
      except:
        pass

      removeButton = Button(imageFrame,image=cancel,text="Remove Product Image",width=150,compound = LEFT)
      removeButton.place(x=410,y=460)
    except:
      try:
        top.destroy()
      except:
        pass
      messagebox.showerror('F-Billing Revolution', 'Select a record to edit.')
  


######################## DELETE PRODUCT #######################################################################
  def delete_product_check():
    sql = "select * from users"
    fbcursor.execute(sql)
    delexp_check_user = fbcursor.fetchall()
    if not delexp_check_user:
      delete_product()
    else:
      try:
        user_namech = username1.get()
        sql = "select 	delete_product_service from users where username = %s"
        val = (user_namech,)
        fbcursor.execute(sql,val)
        disable_del_exp = fbcursor.fetchone()
        if disable_del_exp[0] == 1:
          delete_product()
        else:
          messagebox.showerror("user","user does not have permission to perform this action")
      except:
        delete_product()

  def delete_product():
    delmess = messagebox.askyesno("Delete product/service", "Are you sure to delete this product/service?")
    if delmess == True:
      itemid = treeproducts.item(treeproducts.focus())["values"][1]
      sql = "delete from Productservice where Productserviceid = %s"
      val = (itemid, )
      fbcursor.execute(sql, val)
      fbilldb.commit()
      treeproducts.delete(treeproducts.selection()[0])
      # messagebox.showinfo("F-Billing Revolution", "Record deleted successfully.")
    else:
      pass


######################## SEARCH PRODUCT  #######################################################################

  def search_pro():
    query = searchvar.get()
    selections = []
    for child in treeproducts.get_children():
        if query in treeproducts.item(child)['values']:
            print(treeproducts.item(child)['values'])
            selections.append(child)
    treeproducts.selection_set(selections)
  

  def search_product():
    global searchvar, searchtop
    searchtop = Toplevel()  
    searchtop.title("Find Text")
    searchtop.geometry("520x200+390+250")
    
    findwhat1=Label(searchtop,text="Find What:",pady=5,padx=10)
    findwhat1.place(x=5,y=20)
    searchvar = StringVar() 
    findwhat = ttk.Combobox(searchtop, width = 50, textvariable = searchvar)
    findwhat.place(x=80,y=25) 
    

    findButton = Button(searchtop, text ="Find next",width=10, command=search_pro)
    findButton.place(x=420,y=20)
    
    findin1=Label(searchtop,text="Find in:",pady=5,padx=10)
    findin1.place(x=5,y=47)
    n = StringVar() 
    findIN = ttk.Combobox(searchtop, width = 37, textvariable = n ) 
    # Adding combobox drop down list 
    findIN['values'] = ('Product/Service id',  
                              'Category', 
                              'Active', 
                              'name', 
                              'stock', 
                              'location', 
                              'image', 
                              '<<All>>') 
      
    findIN.place(x=80,y=54) 
    findIN.current(0)

    closeButton = Button(searchtop, text ="Close",width=10, command=lambda : searchtop.destroy())
    closeButton.place(x=420,y=50)

    match1=Label(searchtop,text="Match:",pady=5,padx=10)
    match1.place(x=5,y=74)
    n = StringVar() 
    match = ttk.Combobox(searchtop, width = 27, textvariable = n ) 
      
    # Adding combobox drop down list 
    match['values'] = ('From Any part',' Whole Field',  
                              ' From the beginning of the field')
      
    match.place(x=80,y=83) 
    match.current(0)

    search1=Label(searchtop,text="Search:",pady=5,padx=10)
    search1.place(x=5,y=102)
    n = StringVar() 
    search = ttk.Combobox(searchtop, width = 27, textvariable = n ) 
      
    # Adding combobox drop down list 
    search['values'] = ('All', 'up', 
                              'Down')
      
    search.place(x=80,y=112) 
    search.current(0)


    checkvarStatus4=IntVar()
   
    Button4 = Checkbutton(searchtop,variable = checkvarStatus4, 
                      text="Match Case", 
                      onvalue =0 ,
                      offvalue = 1,
                      height=3,
                      width = 15)

    Button4.place(x=60,y=141)

    checkvarStatus5=IntVar()
   
    Button5 = Checkbutton(searchtop,variable = checkvarStatus5, 
                      text="Match Format", 
                      onvalue =0 ,
                      offvalue = 1,
                      height=3,
                      width = 15)

    Button5.place(x=270,y=141)

    searchtop.mainloop()


######################## REFRESH PRODUCT  #######################################################################

  def refresh_pro_s():
    for record in treeproducts.get_children():
      treeproducts.delete(record)
    fbcursor.execute("select *  from Productservice")
    pandsdata = fbcursor.fetchall()
    countp = 0
    for i in pandsdata:
      if i[6] == '1':
        acti = 'Active'
      else:
        acti = 'Inactive'
      sql = "select currencysign,currsignplace from company"
      fbcursor.execute(sql)
      currsymb = fbcursor.fetchone()
      if not currsymb: 
        if i[13] > i[14]:
          treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('green',))
          countp += 1              
        elif i[12] == '1':
          treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('blue',))
          countp += 1
        else:
          treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('red',))
          countp += 1
              
      elif currsymb[1] == "before amount":
        if (i[13]) > (i[14]):
          treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('green',))
          countp += 1
        elif i[12] == '1':
          treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('blue',))
          countp += 1
        else:
          treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('red',))
          countp += 1
      elif currsymb[1] == "before amount with space":
        if i[13] > i[14]:
          treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('green',))
          countp += 1
        elif i[12] == '1':
          treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('blue',))
          countp += 1
        else:
          treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('red',))
          countp += 1
      elif currsymb[1] == "after amount":
        if i[13] > i[14]:
          treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('green',))
          countp += 1
        elif i[12] == '1':
          treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
          countp += 1
        else:
          treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('red',))
          countp += 1
      elif currsymb[1] == "after amount with space":
          if i[13] > i[14]:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('green',))
            countp += 1
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('red',))
            countp += 1

######################## View Image
# #######################################################################
  def psfile_image(event):
      itemid = treeproducts.item(treeproducts.focus())["values"][1]
      sql = "select * from Productservice where Productserviceid = %s"
      val = (itemid,)

      fbcursor.execute(sql, val)
      psdata = fbcursor.fetchone() 
      if psdata[17] is None:
        pass
      else:
        edit_window_img = Toplevel()
        edit_window_img.title("View Image")
        edit_window_img.geometry("700x500")
        image = Image.open("images/"+psdata[17])
        resize_image = image.resize((700, 500))
        image = ImageTk.PhotoImage(resize_image)
        psimage = Label(edit_window_img,image=image)
        psimage.photo = image
        psimage.pack()
  
######################## FRONT PAGE OF PRODUCT SERVICE SECTION #######################################################################

    
  mainFrame=Frame(tab8, relief=GROOVE, bg="#f8f8f2")
  mainFrame.pack(side="top", fill=BOTH)

  midFrame=Frame(mainFrame, bg="#f5f3f2", height=60)
  midFrame.pack(side="top", fill=X)

  lFrame=Frame(tab8, bg="#f8f8f2", height=600)
  lFrame.pack(side="top", fill=X)



  pn = Canvas(midFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  pn.pack(side="left", padx=(5, 2))
  pn = Canvas(midFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  pn.pack(side="left", padx=(0, 5))

  productLabel = Button(midFrame,compound="top", text="Add new\nProduct",relief=RAISED,command=add_product_s_connection, image=productIcon, font=("arial", 8),bg="#f5f3f2", fg="black", height=55, bd=1, width=55)
  productLabel.pack(side="left", pady=3, ipadx=4)
  
  
  proeditLabel = Button(midFrame,compound="top", text="Edit/View\nProduct",relief=RAISED, image=proeditIcon,command=edit_product, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  proeditLabel.pack(side="left")

  
  prodeleteLabel = Button(midFrame,compound="top", text="Delete\nSelected",relief=RAISED, command=delete_product_check,image=prodeleteIcon, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  prodeleteLabel.pack(side="left")

  pn = Canvas(midFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  pn.pack(side="left", padx=5)

  
  prosearchLabel = Button(midFrame,compound="top", text="Search in\nproducts",relief=RAISED,command=search_product, image=prosearchIcon, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55, activebackground="red")
  prosearchLabel.pack(side="left")

  
  proimportLabel = Button(midFrame,compound="top", text="Import\nProducts",relief=RAISED,command=import_productservice_check, image=proimportIcon, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  proimportLabel.pack(side="left")

  pn = Canvas(midFrame, width=1, height=55, bg="#b3b3b3", bd=0)
  pn.pack(side="left", padx=5)

  
  proexportLabel = Button(midFrame,compound="top",command=export_product, text="Export\nProducts",relief=RAISED, image=proexportIcon, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55)
  proexportLabel.pack(side="left")


  pn = Canvas(midFrame, width=1, height=55, bg="#b3b3b3", bd=0)
  pn.pack(side="left")

  
  productrefreshLabel = Button(midFrame,compound="top", text="Refresh\nProduct List",relief=RAISED, image=prorefreshIcon, font=("arial", 8),bg="#f8f8f2", fg="black", height=55, bd=1, width=55, command=refresh_pro_s)
  productrefreshLabel.pack(side="left")

  prolabel = Label(mainFrame, text="Products/Services", font=("arial", 18), bg="#f8f8f2")
  prolabel.pack(side="left", padx=(20,0))

  pr_label = Label(mainFrame, text="Category", font=("arial", 16), bg="#f8f8f2")
  pr_label.place(x=1099,y=70)

  def pro_fil(event):
    pro_f = dro.get()
    for record in treeproducts.get_children():
      treeproducts.delete(record)

    sql = "select * from Productservice where category = %s"
    val = (pro_f,)
    fbcursor.execute(sql, val)
    product_fil = fbcursor.fetchall()
    
    countp = 0
    for i in product_fil:
      if i[6] == '1':
        acti = 'Active'
      else:
        acti = 'Inactive' 
      if i[13] > i[14]:
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4] , i[7], i[13], i[15],i[17]),tags=('green',))
        countp += 1
      elif (i[12] =="0") == (i[13] <= i[14]):
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4] , i[7], i[13], i[15],i[17]),tags=('red',))
        countp += 1
      elif i[12] == '1':
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4] , i[7], i[13], i[15],i[17]),tags=('blue',))
        countp += 1
      else:
        pass

  sql = "SELECT DISTINCT category FROM Productservice"
  fbcursor.execute(sql,)
  lic = fbcursor.fetchall()
  dro = ttk.Combobox(mainFrame,)
  dro.pack(side="right", padx=(0,10))
  dro['values'] = lic
  dro.bind("<<ComboboxSelected>>", pro_fil)

  pro_label = Label(mainFrame, text="Right click on datagrid row for more options.",  bg="#f8f8f2")
  pro_label.pack(side="right", padx=(0,260))


  sql = 'select * from Productservice'
  fbcursor.execute(sql)
  pandsdata = fbcursor.fetchall()

  treeproducts=ttk.Treeview(tab8,selectmode='browse')
  treeproducts.place(x=8,y=100,height=580)
  vertical_bar=ttk.Scrollbar(tab8,orient="vertical")
  vertical_bar.place(x=1083,y=101,height=580)

  treeproducts["columns"]=("1","2","3","4","5","6","7","8","9")
  treeproducts["show"]='headings'
  treeproducts.column("1",width=0,anchor='c', stretch=False)
  treeproducts.column("2",width=160,anchor='c')
  treeproducts.column("3",width=190,anchor='c')
  treeproducts.column("4",width=120,anchor='c')
  treeproducts.column("5",width=120,anchor='c')
  treeproducts.column("6",width=120,anchor='c')
  treeproducts.column("7",width=130,anchor='c')
  treeproducts.column("8",width=120,anchor='c')
  treeproducts.column("9",width=112,anchor='c')
  treeproducts.heading("1",text="")
  treeproducts.heading("2",text="Product/Service ID")
  treeproducts.heading("3",text="Category")
  treeproducts.heading("4",text="Status")
  treeproducts.heading("5",text="Name")
  treeproducts.heading("6",text="Price")
  treeproducts.heading("7",text="Stock")
  treeproducts.heading("8",text="Location/warehouse")
  treeproducts.heading("9",text="Image")
  treeproducts.bind('<Double-Button-1>' , psfile_image)
  treeproducts.tag_configure('green', foreground='green')
  treeproducts.tag_configure('red', foreground='red')
  treeproducts.tag_configure('blue', foreground='blue')
  countp = 0
  for i in pandsdata:
    if i[6] == '1':
      acti = 'Active'
    else:
      acti = 'Inactive'
    sql = "select currencysign,currsignplace from company"
    fbcursor.execute(sql)
    currsymb = fbcursor.fetchone()
    if not currsymb: 
      if i[13] > i[14]:
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('green',))
        countp += 1              
      elif i[12] == '1':
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('blue',))
        countp += 1
      else:
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('red',))
        countp += 1
              
    elif currsymb[1] == "before amount":
      if (i[13]) > (i[14]):
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('green',))
        countp += 1
      elif i[12] == '1':
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('blue',))
        countp += 1
      else:
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('red',))
        countp += 1

    elif currsymb[1] == "before amount with space":
      if i[13] > i[14]:
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('green',))
        countp += 1
      elif i[12] == '1':
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('blue',))
        countp += 1
      else:
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('red',))
        countp += 1

    elif currsymb[1] == "after amount":
      if i[13] > i[14]:
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('green',))
        countp += 1
      elif i[12] == '1':
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
        countp += 1
      else:
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('red',))
        countp += 1

    elif currsymb[1] == "after amount with space":
      if i[13] > i[14]:
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('green',))
        countp += 1
      elif i[12] == '1':
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
        countp += 1
      else:
        treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('red',))
        countp += 1


  treeproducts.place(height=580, width=1070, x=10, y=101)

  ######side_Listbox##############

  treeps=ttk.Treeview(tab8,selectmode='browse')
  treeps.place(height=580,width=254,
                        x=1099,y=101
                        )
  treeps["columns"]=("1")
  treeps["show"]='headings'
  treeps.column("1",width=254,anchor='c')
  treeps.heading("1",text="View filter by category")

  def items_selected(event):
    selected_indices = listbox.curselection()
    selected_filter = ",".join([listbox.get(i) for i in selected_indices])

    sql = 'select * from Productservice'
    fbcursor.execute(sql)
    pandsdata = fbcursor.fetchall()
    psql = "select * from Productservice where serviceornot=%s"
    val = ('0', )
    fbcursor.execute(psql, val)
    pdata = fbcursor.fetchall()

    ssql = "select * from Productservice where serviceornot=%s"
    val = ('1', )
    fbcursor.execute(ssql, val)
    sdata = fbcursor.fetchall()

    # pssql = "select * from Productservice where category=%s"
    # psval = (selected_filter, )
    # fbcursor.execute(pssql, psval)
    # pssdata = fbcursor.fetchall()
    if selected_filter == "View all records":
      for record in treeproducts.get_children():
        treeproducts.delete(record)
      countp = 0
      for i in pandsdata:
        if i[6] == '1':
          acti = 'Active'
        else:
          acti = 'Inactive' 
        sql = "select currencysign,currsignplace from company"
        fbcursor.execute(sql)
        currsymb = fbcursor.fetchone()
        if not currsymb: 
          if i[13] > i[14]:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('green',))
            countp += 1              
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('red',))
            countp += 1
              
        elif currsymb[1] == "before amount":
          if (i[13]) > (i[14]):
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('green',))
            countp += 1
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('red',))
            countp += 1

        elif currsymb[1] == "before amount with space":
          if i[13] > i[14]:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('green',))
            countp += 1
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('red',))
            countp += 1

        elif currsymb[1] == "after amount":
          if i[13] > i[14]:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('green',))
            countp += 1
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('red',))
            countp += 1

        elif currsymb[1] == "after amount with space":
          if i[13] > i[14]:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('green',))
            countp += 1
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('red',))
            countp += 1

    elif selected_filter == "View all products":
      for record in treeproducts.get_children():
        treeproducts.delete(record)
      countp = 0
      for i in pdata:
        if i[6] == '1':
          acti = 'Active'
        else:
          acti = 'Inactive' 
        sql = "select currencysign,currsignplace from company"
        fbcursor.execute(sql)
        currsymb = fbcursor.fetchone()
        if not currsymb: 
          if i[13] > i[14]:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('green',))
            countp += 1              
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('red',))
            countp += 1
              
        elif currsymb[1] == "before amount":
          if (i[13]) > (i[14]):
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('green',))
            countp += 1
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('red',))
            countp += 1

        elif currsymb[1] == "before amount with space":
          if i[13] > i[14]:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('green',))
            countp += 1
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('red',))
            countp += 1

        elif currsymb[1] == "after amount":
          if i[13] > i[14]:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('green',))
            countp += 1
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('red',))
            countp += 1

        elif currsymb[1] == "after amount with space":
          if i[13] > i[14]:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('green',))
            countp += 1
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('red',))
            countp += 1
    elif selected_filter == "View all services":
      for record in treeproducts.get_children():
        treeproducts.delete(record)
      countp = 0
      for i in sdata:
        if i[6] == '1':
          acti = 'Active'
        else:
          acti = 'Inactive' 
        sql = "select currencysign,currsignplace from company"
        fbcursor.execute(sql)
        currsymb = fbcursor.fetchone()
        if not currsymb: 
          if i[13] > i[14]:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('green',))
            countp += 1              
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7], i[13], i[15],i[17]),tags=('red',))
            countp += 1
              
        elif currsymb[1] == "before amount":
          if (i[13]) > (i[14]):
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('green',))
            countp += 1
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0]+i[7], i[13], i[15],i[17]),tags=('red',))
            countp += 1

        elif currsymb[1] == "before amount with space":
          if i[13] > i[14]:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('green',))
            countp += 1
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], currsymb[0] +" "+i[7], i[13], i[15],i[17]),tags=('red',))
            countp += 1

        elif currsymb[1] == "after amount":
          if i[13] > i[14]:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('green',))
            countp += 1
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+currsymb[0], i[13], i[15],i[17]),tags=('red',))
            countp += 1

        elif currsymb[1] == "after amount with space":
          if i[13] > i[14]:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('green',))
            countp += 1
          elif i[12] == '1':
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('blue',))
            countp += 1
          else:
            treeproducts.insert(parent='', index='end', iid=countp, text='hello', values=('', i[0], i[3], acti, i[4], i[7]+" "+currsymb[0], i[13], i[15],i[17]),tags=('red',))
            countp += 1
  
  listbox = Listbox(tab8,height = 8,  
                        width = 29,  
                        bg = "white",
                        activestyle = 'dotbox',  
                        fg = "black",
                        highlightbackground="white")  
  listbox.insert(0, "View all records")
  listbox.insert(1, "View all products")
  listbox.insert(2, "View all services")
 

  listbox.place(x=1099,y=118,height=564,width=255)

  listbox.bind('<<ListboxSelect>>', items_selected)
  
  stockok = Label(tab8,text="Green: Stock is Ok",foreground="green",background="white").place(x =1110,y =580)
  stocko = Label(tab8,text="Red: Limit <= Low Stock Limit",foreground="red",background="white").place(x =1110,y =600)
  stock = Label(tab8,text="Blue: Service,no Stock Control",foreground="blue",background="white").place(x =1110,y =620)
  
############################  END PRODUCT SERVICES  ############################



#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@  REPORTS  @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
  reportframe=Frame(tab9, relief=GROOVE, bg="#f5f3f2")
  reportframe.pack(side="top", fill=BOTH)

  midFrame=Frame(reportframe, bg="#f5f3f2", height=60)
  midFrame.pack(side="top", fill=X)

  # midFrame2=Frame(reportframe, bg="red", height=60)
  # midFrame2.pack(side="top", fill=X)

  w = Canvas(midFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  w.pack(side="left", padx=(5, 2))
  w = Canvas(midFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  w.pack(side="left", padx=(0, 5))

  refreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55, command=lambda:screen_flt())
  refreshlebel.pack(side="left")
  w = Canvas(midFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  w.pack(side="left", padx=(5, 2))

  printlabel = Button(midFrame,compound="top", text="Print Chart",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:image_print())
  printlabel.pack(side="left")
  w = Canvas(midFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  w.pack(side="left", padx=(5, 2))


  saveLabel = Button(midFrame,compound="top", text="Save Chart\nimage",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:image())
  saveLabel.pack(side="left",)
  w = Canvas(midFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  w.pack(side="left", padx=(0, 5))

  copyLabel = Button(midFrame,compound="top", text="Copy Chart\n to Clipboard",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:image())
  copyLabel.pack(side="left")
  w = Canvas(midFrame, width=1, height=65, bg="#b3b3b3", bd=0)
  w.pack(side="left", padx=(0, 5))
  #***********************************************************************************************
  #right side of menu bar

  lbframe = LabelFrame(midFrame, height=60, width=1500, bg="#f8f8f2")
  lbframe.pack(side="left", padx=10, pady=0)

  ############################################(print function)####################################################



  

  
  def exportcanvas():

      var_1=rp_exir.get_date()
      var_2=rp_exir1.get_date()
      if rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==0:
          cols = ["No","Date","Due Date","Terms","Status","Invoice Total","Invoice Paid","Balance"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,terms,status,invoicetot,totpaid,balance from invoice where invodate between %s and %s'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==0:
          cols = ["No","Date","Due Date","Terms","Status","Invoice Total","Invoice Paid","Balance"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,terms,status,invoicetot,totpaid,balance from invoice where invodate between %s and %s and 	invoicetot="0"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          cols = ["No","Date","Due Date","Terms","Status","Invoice Total","Invoice Paid","Balance"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,terms,status,invoicetot,totpaid,balance from invoice where invodate between %s and %s and totpaid="0" or balance="0"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          cols = ["No","Date","Due Date","Terms","Status","Invoice Total","Invoice Paid","Balance"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,terms,status,invoicetot,totpaid,balance from invoice where invodate between %s and %s and totpaid="0"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==0:
          cols = ["No","Date","Due Date","Terms","Status","Invoice Total","Invoice Paid","Balance"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,terms,status,invoicetot,totpaid,balance from invoice where invodate between %s and %s and totpaid != "0"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==1:
          cols = ["No","Date","Due Date","Terms","Status","Invoice Total","Invoice Paid","Balance"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,terms,status,invoicetot,totpaid,balance from invoice where invodate between %s and %s'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==1:
          cols = ["No","Date","Due Date","Terms","Status","Invoice Total","Invoice Paid","Balance"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,terms,status,invoicetot,totpaid,balance from invoice where invodate between %s and %s and totpaid="0" or invoicetot="0"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==0:
          cols = ["No","Date","Due Date","Terms","Status","Invoice Total","Invoice Paid","Balance"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,terms,status,invoicetot,totpaid,balance from invoice where invodate between %s and %s and totpaid is not null or invoicetot="0"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          cols = ["No","Date","Due Date","Terms","Status","Invoice Total","Invoice Paid","Balance"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,terms,status,invoicetot,totpaid,balance from invoice where invodate between %s and %s and totpaid="0" or balance!="0"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)

          cols = ["No","Date","Due Date","Terms","Status","Invoice Total","Invoice Paid","Balance"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,terms,status,invoicetot,totpaid,balance from invoice where invodate between %s and %s'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      else:
          pass
 
  def exportcanvas2():
      var_1=irwcfrm1.get_date()
      var_2=irwcto1.get_date()
      if rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==0:
          cols = ["No","Date","Due Date","Customer","Status","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,businessname,status,invoicetot from invoice where invodate between %s and %s'
              
              irv=(var_1,var_2)
              print(var_1)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==0:
          cols = ["No","Date","Due Date","Customer","Status","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,businessname,status,invoicetot from invoice where invodate between %s and %s and 	invoicetot="0"'
              
              irv=(var_1,var_2)
              print(var_1)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==1:
          cols = ["No","Date","Due Date","Customer","Status","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,businessname,status,invoicetot from invoice where invodate between %s and %s and totpaid="0" or balance="0"'
              
              irv=(var_1,var_2)
              print(var_1)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==1:
          cols = ["No","Date","Due Date","Customer","Status","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,businessname,status,invoicetot from invoice where invodate between %s and %s and totpaid="0"'
              
              irv=(var_1,var_2)
              print(var_1)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==0:
          cols = ["No","Date","Due Date","Customer","Status","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,businessname,status,invoicetot from invoice where invodate between %s and %s and totpaid != "0"'
              
              irv=(var_1,var_2)
              print(var_1)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==1:
          cols = ["No","Date","Due Date","Customer","Status","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,businessname,status,invoicetot from invoice where invodate between %s and %s'
              
              irv=(var_1,var_2)
              print(var_1)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==1:
          cols = ["No","Date","Due Date","Customer","Status","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,businessname,status,invoicetot from invoice where invodate between %s and %s and totpaid="0" or invoicetot="0"'
              
              irv=(var_1,var_2)
              print(var_1)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==0:
      
          cols = ["No","Date","Due Date","Customer","Status","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,businessname,status,invoicetot from invoice where invodate between %s and %s and totpaid is not null or invoicetot="0"'
              
              irv=(var_1,var_2)
              print(var_1)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          cols = ["No","Date","Due Date","Customer","Status","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,businessname,status,invoicetot from invoice where invodate between %s and %s and totpaid="0" or balance!="0"'
              
              irv=(var_1,var_2)
              print(var_1)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      else:
          pass

  def exportcanvas3():
      var_1=orfrm1.get_date()
      var_2=orto1.get_date()

      cols = ["No","Date","Due Date","Customer","Status","Invoice Total"] # Your column headings here
      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
      
      lst = []
      with open(path, "w", newline='') as myfile:
          
          csvwriter = csv.writer(myfile, delimiter=',')
          sql = 'select orderid,	order_date,due_date,businessname,status,Order_total from orders where order_date between %s and %s'
          
          irv=(var_1,var_2)
          fbcursor.execute(sql,irv)
          pandsdata = fbcursor.fetchall()
          for row_id in pandsdata:
              row = row_id
              lst.append(row)
          lst = list(map(list,lst))
          lst.insert(0,cols)
          for row in lst:
              csvwriter.writerow(row)
  #rir
  def exportcanvas4():
      

      cols = ["Invoice No","Customer","Next Invoice","Recurring Interval","Stop After","Invoice Total"] # Your column headings here
      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
      
      lst = []
      with open(path, "w", newline='') as myfile:
          csvwriter = csv.writer(myfile, delimiter=',')
          sql = 'select invoice_number,	businessname,next_invoice,recurring_period,stop_recurring,invoicetot from invoice'
          
          fbcursor.execute(sql)
          pandsdata = fbcursor.fetchall()
          for row_id in pandsdata:
              row = row_id
              lst.append(row)
          lst = list(map(list,lst))
          lst.insert(0,cols)
          for row in lst:
              csvwriter.writerow(row)
  #pdi
  def exportcanvas5():

      cols = ["No","Date","Due Date","Terms","Status","Invoice Total","Invoice Paid","Balance"] # Your column headings here
      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
      
      lst = []
      with open(path, "w", newline='') as myfile:
          csvwriter = csv.writer(myfile, delimiter=',')
          sql = 'select invoice_number,	invodate,duedate,terms,status,invoicetot,totpaid,balance from invoice where invodate<duedate'
          
          fbcursor.execute(sql)
          pandsdata = fbcursor.fetchall()
          for row_id in pandsdata:
              row = row_id
              lst.append(row)
          lst = list(map(list,lst))
          lst.insert(0,cols)
          for row in lst:
              csvwriter.writerow(row)

  #cl
  def exportcanvas6():
      
      rth=clfilter.get()
      if rpcheckvar1_cl.get()==1 and rpcheckvar2_cl.get()==0:
          if rth=="All Customers ":
          
              cols = ["Customer Id","Category","Customer Businnes Name","Customer Person","Tel","Fax"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1'
              
                  fbcursor.execute(sql_inv_dt)
                  the=fbcursor.fetchall()
                  for i in the:
                      sql = 'select customerid ,		category,businessname,contactperson,cptelno,cpfax from customer where businessname=%s'
                      
                      vs=(str(i[18]),)
                      fbcursor.execute(sql,vs)
                      pandsdata = fbcursor.fetchall()
                      for row_id in pandsdata:
                          row = row_id
                          lst.append(row)
                      lst = list(map(list,lst))
                      lst.insert(0,cols)
                      for row in lst:
                          csvwriter.writerow(row)
          elif rth=="Default":
          
              cols = ["Customer Id","Category","Customer Businnes Name","Customer Person","Tel","Fax"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1'
              
                  fbcursor.execute(sql_inv_dt)
                  the=fbcursor.fetchall()
                  for i in the:
                      sql = 'select customerid ,		category,businessname,contactperson,cptelno,cpfax from customer where category="Default" and businessname=%s'
                      
                      vs=(str(i[18]),)
                      fbcursor.execute(sql,vs)
                      pandsdata = fbcursor.fetchall()
                      for row_id in pandsdata:
                          row = row_id
                          lst.append(row)
                      lst = list(map(list,lst))
                      lst.insert(0,cols)
                      for row in lst:
                          csvwriter.writerow(row)
          else:
              pass
      elif rpcheckvar1_cl.get()==1 and rpcheckvar2_cl.get()==1:
          if rth=="All Customers ":
          
              cols = ["Customer Id","Category","Customer Businnes Name","Customer Person","Tel","Fax"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select customerid ,		category,businessname,contactperson,cptelno,cpfax from customer'
                  
                  
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          elif rth=="Default":
          
              cols = ["Customer Id","Category","Customer Businnes Name","Customer Person","Tel","Fax"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select customerid ,		category,businessname,contactperson,cptelno,cpfax from customer where category="Default"'
                  
                  
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          else:
              pass
      elif rpcheckvar1_cl.get()==0 and rpcheckvar2_cl.get()==1:
          if rth=="All Customers ":
          
                  cols = ["Customer Id","Category","Customer Businnes Name","Customer Person","Tel","Fax"] # Your column headings here
                  path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
                  
                  lst = []
                  with open(path, "w", newline='') as myfile:
                      csvwriter = csv.writer(myfile, delimiter=',')
                      sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1'
                  
                      fbcursor.execute(sql_inv_dt)
                      tre=fbcursor.fetchall()
                      for i in tre:
                          sql = 'select customerid ,		category,businessname,contactperson,cptelno,cpfax from customer where businessname=%s'
                          vs=(str(i[18]),)
                          
                          
                          fbcursor.execute(sql,vs)
                          pandsdata = fbcursor.fetchall()
                          for row_id in pandsdata:
                              row = row_id
                              lst.append(row)
                          lst = list(map(list,lst))
                          lst.insert(0,cols)
                          for row in lst:
                              csvwriter.writerow(row)
          elif rth=="Default":
          
              cols = ["Customer Id","Category","Customer Businnes Name","Customer Person","Tel","Fax"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1'
              
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  if i in tre:

                      sql = 'select customerid ,		category,businessname,contactperson,cptelno,cpfax from customer where category="Default" and  businessname=%s'
                      vs=(str(i[18]),)
                      
                      fbcursor.execute(sql,vs)
                      pandsdata = fbcursor.fetchall()
                      for row_id in pandsdata:
                          row = row_id
                          lst.append(row)
                      lst = list(map(list,lst))
                      lst.insert(0,cols)
                      for row in lst:
                          csvwriter.writerow(row)
          else:
              pass
      elif rpcheckvar1_cl.get()==0 and rpcheckvar2_cl.get()==0:
          pass
      else:
          pass
      
  #cld
  def exportcanvas7():
      
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      if rpcheckvar1_cld.get()==1 and rpcheckvar2_cld.get()==0:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle) 

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              
              pdf.drawString(30,760, company[1])
              pdf.drawString(495,760, "Customer List")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")

              
              
              pdf.drawString(28,733,"Billing Information:                                                    Shipping Information:                      ")
              rth=cldfilter.get()
              story=[]

              if rth=="All Customers ":
                  
                  count=0
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1'
              
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  for i in tre:
                      trf='select * from customer where businessname=%s'
                      vs=(str(i[18]),)
                              
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()
                      
                      
                      for i in thg:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1
                  pdf.save()
                      
              elif rth=="Default":
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1'
                  count=0
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  for i in tre:
                      trf='select * from customer where businessname=%s and category="Default"'
                      vs=(str(i[18]),)
                              
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()
                      for i in thg:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                  pdf.save()
              else:
                  pass
      elif rpcheckvar1_cld.get()==0 and rpcheckvar2_cld.get()==1:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(495,760, "Customer List")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")

              
              
              pdf.drawString(28,733,"Billing Information:                                                    Shipping Information:                      ")
              rth=cldfilter.get()
              
              if rth=="All Customers ":
              
                  count=0
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1'
              
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  for i in tre:
                      trf='select * from customer where businessname=%s'
                      vs=(str(i[18]),)
                              
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()
                      for i in thg:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                      pdf.save()
              elif rth=="Default":
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1'
              
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  for i in tre:
                      trf='select * from customer where businessname=%s and category="Default"'
                      vs=(str(i[18]),)
                              
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()
                      for i in thg:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                      pdf.save()
              else:
                  pass
      elif rpcheckvar1_cld.get()==0 and rpcheckvar2_cld.get()==0:
          pass
      elif rpcheckvar1_cld.get()==1 and rpcheckvar2_cld.get()==1:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(495,760, "Customer List")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")

              
              
              pdf.drawString(28,733,"Billing Information:                                                    Shipping Information:                      ")
              rth=cldfilter.get()
              
              if rth=="All Customers ":
              
                  count=0
                  sql_inv_dt='SELECT * FROM customer'
                  
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  
                  for i in tre:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                  pdf.save()
              elif rth=="Default":
                  count=0
                  sql_inv_dt='SELECT * FROM customer where category="Default"'
                  
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  for i in tre:

                  
                          for i in tre:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                  pdf.save()
              else:
                  pass
  #psl
  def exportcanvas8():
      rth=pslfilter.get()
      if rpcheckvar1_psl.get()==1 and rpcheckvar2_psl.get()==0:
          if rth=="All product and Services ":
              cols = ["Product ID","Category","Product/ Service Name","Description","Warehouse","Stock", "Cost","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid  ,	category,name,description,warehouse,stock,cost,unitprice from productservice where stock>stocklimit'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)

          elif rth=="All products":
              cols = ["Product ID","Category","Product/ Service Name","Description","Warehouse","Stock", "Cost","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid  ,	category,name,description,warehouse,stock,cost,unitprice from productservice where category="Products" and stock>stocklimit'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          elif rth=="All Service":
              cols = ["Product ID","Category","Product/ Service Name","Description","Warehouse","Stock", "Cost","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid  ,	category,name,description,warehouse,stock,cost,unitprice from productservice where category="Service" and stock>stocklimit'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)

          elif rth=="Default":
              cols = ["Product ID","Category","Product/ Service Name","Description","Warehouse","Stock", "Cost","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid  ,	category,name,description,warehouse,stock,cost,unitprice from productservice where category="Default" and stock>stocklimit'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          else:
              pass
      elif rpcheckvar1_psl.get()==0 and rpcheckvar2_psl.get()==1:
          if rth=="All product and Services ":
              cols = ["Product ID","Category","Product/ Service Name","Description","Warehouse","Stock", "Cost","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid  ,	category,name,description,warehouse,stock,cost,unitprice from productservice where stock<stocklimit'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)

          elif rth=="All products":
              cols = ["Product ID","Category","Product/ Service Name","Description","Warehouse","Stock", "Cost","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid  ,	category,name,description,warehouse,stock,cost,unitprice from productservice where category="Products and stock<stocklimit"'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          elif rth=="All Service":
              cols = ["Product ID","Category","Product/ Service Name","Description","Warehouse","Stock", "Cost","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid  ,	category,name,description,warehouse,stock,cost,unitprice from productservice where category="Service"and stock<stocklimi '
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)

          elif rth=="Default":
              cols = ["Product ID","Category","Product/ Service Name","Description","Warehouse","Stock", "Cost","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid  ,	category,name,description,warehouse,stock,cost,unitprice from productservice where category="Default" and stock<stocklimi'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          else:
              pass
      elif rpcheckvar1_psl.get()==1 and rpcheckvar2_psl.get()==1:
          if rth=="All product and Services ":
              cols = ["Product ID","Category","Product/ Service Name","Description","Warehouse","Stock", "Cost","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid  ,	category,name,description,warehouse,stock,cost,unitprice from productservice'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)

          elif rth=="All products":
              cols = ["Product ID","Category","Product/ Service Name","Description","Warehouse","Stock", "Cost","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid  ,	category,name,description,warehouse,stock,cost,unitprice from productservice where category="Products"'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          elif rth=="All Service":
              cols = ["Product ID","Category","Product/ Service Name","Description","Warehouse","Stock", "Cost","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid  ,	category,name,description,warehouse,stock,cost,unitprice from productservice where category="Service"'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)

          elif rth=="Default":
              cols = ["Product ID","Category","Product/ Service Name","Description","Warehouse","Stock", "Cost","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid  ,	category,name,description,warehouse,stock,cost,unitprice from productservice where category="Default" '
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          else:
              pass
      else:
          pass
      
  #--------------------------------Price list--------------------------

  def exportcanvas9():
      rth=prlfilter.get()
      if rpcheckvar1_pl.get()==1 and rpcheckvar2_pl.get()==1:
          if rth=="All product and Services ":
              cols = ["Product ID","Product/ Service Name","Description","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid,name,description,unitprice from productservice '
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)

          elif rth=="All products":
              cols = ["Product ID","Product/ Service Name","Description","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid,name,description,unitprice from productservice where category="Products"'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          elif rth=="All Service":
              cols = ["Product ID","Product/ Service Name","Description","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid,name,description,unitprice from productservice where category="Service"'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)

          elif rth=="Default":
              cols = ["Product ID","Product/ Service Name","Description","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid,name,description,unitprice from productservice where category="Default"'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          else:
              pass

      elif rpcheckvar1_pl.get()==1 and rpcheckvar2_pl.get()==0:
          if rth=="All product and Services ":
              cols = ["Product ID","Product/ Service Name","Description","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid,name,description,unitprice from productservice where stock>stocklimit'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)

          elif rth=="All products":
              cols = ["Product ID","Product/ Service Name","Description","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid,name,description,unitprice from productservice where category="Products" and stock>stocklimit'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          elif rth=="All Service":
              cols = ["Product ID","Product/ Service Name","Description","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid,name,description,unitprice from productservice where category="Service" and stock>stocklimit'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)

          elif rth=="Default":
              cols = ["Product ID","Product/ Service Name","Description","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid,name,description,unitprice from productservice where category="Default" and stock>stocklimit'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          else:
              pass

      elif rpcheckvar1_pl.get()==0 and rpcheckvar2_pl.get()==1:
          if rth=="All product and Services ":
              cols = ["Product ID","Product/ Service Name","Description","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid,name,description,unitprice from productservice where stock<stocklimit'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)

          elif rth=="All products":
              cols = ["Product ID","Product/ Service Name","Description","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid,name,description,unitprice from productservice where category="Products" and stock<stocklimit'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          elif rth=="All Service":
              cols = ["Product ID","Product/ Service Name","Description","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid,name,description,unitprice from productservice where category="Service" and stock<stocklimit'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)

          elif rth=="Default":
              cols = ["Product ID","Product/ Service Name","Description","Price"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select Productserviceid,name,description,unitprice from productservice where category="Default" and stock<stocklimit'
                  
              
                  fbcursor.execute(sql)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          else:
              pass
      else:
          pass


          

  #-----------------product low stock
  def exportcanvas10():
      if rpcheckvar1_plr.get()==1 and rpcheckvar2_plr.get()==1:
          cols = ["Product ID","Category","Product Name","Warehouse","Low Stock Limit","Stock"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select Productserviceid,category,name,warehouse,stocklimit,stock from productservice where stock < stocklimit'
              
          
              fbcursor.execute(sql)
              pandsdata = fbcursor.fetchall()
              
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)

      elif rpcheckvar1_plr.get()==1 and rpcheckvar2_plr.get()==0:
          cols = ["Product ID","Category","Product Name","Warehouse","Low Stock Limit","Stock"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select Productserviceid,category,name,warehouse,stocklimit,stock from productservice WHERE stock > stocklimit'
              
          
              fbcursor.execute(sql)
              pandsdata = fbcursor.fetchall()
              
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)

      elif rpcheckvar1_plr.get()==0 and rpcheckvar2_plr.get()==1:
          cols = ["Product ID","Category","Product Name","Warehouse","Low Stock Limit","Stock"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select Productserviceid,category,name,warehouse,stocklimit,stock from productservice WHERE stock < stocklimit'
              
          
              fbcursor.execute(sql)
              pandsdata = fbcursor.fetchall()
              
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)

      else:
          pass

  #=====tax Invoice========
  def exportcanvas11():
      var_1=trifrm1.get_date()
      var_2=trito1.get_date()

      if rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==0:
          pass
      elif rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==0:
          cols = ["Invoice No","Issue Date","Due Date","Total Before TAX","TAX1","TAX2","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,totalbeforetax,tax1,tax2,invoicetot from invoice where invodate between %s and %s and 	invoicetot="0"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==1:
          cols = ["Invoice No","Issue Date","Due Date","Total Before TAX","TAX1","TAX2","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,totalbeforetax,tax1,tax2,invoicetot from invoice where invodate between %s and %s and totpaid="0" or balance="0"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==1:
          cols = ["Invoice No","Issue Date","Due Date","Total Before TAX","TAX1","TAX2","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,totalbeforetax,tax1,tax2,invoicetot from invoice where invodate between %s and %s and totpaid="0"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==0:
          cols = ["Invoice No","Issue Date","Due Date","Total Before TAX","TAX1","TAX2","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,totalbeforetax,tax1,tax2,invoicetot from invoice where invodate between %s and %s and totpaid != "0"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==1:
          cols = ["Invoice No","Issue Date","Due Date","Total Before TAX","TAX1","TAX2","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,totalbeforetax,tax1,tax2,invoicetot from invoice where invodate between %s and %s'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)

      elif rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==1:
          cols = ["Invoice No","Issue Date","Due Date","Total Before TAX","TAX1","TAX2","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,totalbeforetax,tax1,tax2,invoicetot from invoice where invodate between %s and %s and totpaid="0" or invoicetot="0"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==0:
          cols = ["Invoice No","Issue Date","Due Date","Total Before TAX","TAX1","TAX2","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,totalbeforetax,tax1,tax2,invoicetot from invoice where invodate between %s and %s and totpaid is not null or invoicetot="0"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==1:
          cols = ["Invoice No","Issue Date","Due Date","Total Before TAX","TAX1","TAX2","Invoice Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select invoice_number,	invodate,duedate,totalbeforetax,tax1,tax2,invoicetot from invoice where invodate between %s and %s and totpaid="0" or balance!="0"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)

      else:
          pass
      
  #tax order
  def exportcanvas12():
      var_1=trofrm1.get_date()
      var_2=troto1.get_date()
      
      cols = ["Order No","Issue Date","Due Date","Total Before TAX","TAX1","TAX2","Order Total"] # Your column headings here
      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
      
      lst = []
      with open(path, "w", newline='') as myfile:
          
          csvwriter = csv.writer(myfile, delimiter=',')
          sql = 'select orderid,	order_date,due_date,totalbeforetax,tax1,	tax2,Order_total from orders where order_date between %s and %s'
          
          irv=(var_1,var_2)
          fbcursor.execute(sql,irv)
          pandsdata = fbcursor.fetchall()
          for row_id in pandsdata:
              row = row_id
              lst.append(row)
          lst = list(map(list,lst))
          lst.insert(0,cols)
          for row in lst:
              csvwriter.writerow(row)
  # srgd
  def exportcanvas13():
      var_1=srgd_frm.get_date()
      var_2=srgd_to.get_date()
      rth=srgdfilter.get()
    
      if rth==rth:

          cols = ["Date","Quantity","Cost","Income","Profit"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sqr= 'select * from productservice where name=%s'
              ty=(rth,)
              fbcursor.execute(sqr,ty)
              pd=fbcursor.fetchone()
              

              sql = 'select x.invodate, x.quantity, y.cost,(x.quantity*y.cost),x.invoicetot,(x.invoicetot-(x.quantity*y.cost)) total from invoice x, productservice y where invodate BETWEEN %s and %s and x.Productserviceid=y.Productserviceid and x.Productserviceid=%s '
              
              irv=(var_1,var_2, pd[0],)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)

  # ird
  def exportcanvas14():
      var_1=irdfrm1.get_date()
      var_2=irdfrm2.get_date()

      cols = ["Invoice No","Date","Customer","Invoice Total","Paid","Balance"] # Your column headings here
      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
      
      lst = []
      with open(path, "w", newline='') as myfile:
          csvwriter = csv.writer(myfile, delimiter=',')
          sql = 'select invoice_number,	invodate,businessname,invoicetot,totpaid,balance from invoice where invodate between %s and %s'
          
          irv=(var_1,var_2)
          fbcursor.execute(sql,irv)
          pandsdata = fbcursor.fetchall()
          for row_id in pandsdata:
              row = row_id
              lst.append(row)
          lst = list(map(list,lst))
          lst.insert(0,cols)
          for row in lst:
              csvwriter.writerow(row)

  # dir
  def exportcanvas15():
      var_1=dir_frm.get_date()
      

      cols = ["Invoice No","Date","Customer","Invoice Total","Paid","Balance"] # Your column headings here
      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
      
      lst = []
      with open(path, "w", newline='') as myfile:
          csvwriter = csv.writer(myfile, delimiter=',')
          sql = 'select invoice_number,	invodate,businessname,invoicetot,totpaid,balance from invoice where invodate= %s'
          
          irv=(var_1,)
          fbcursor.execute(sql,irv)
          pandsdata = fbcursor.fetchall()
          for row_id in pandsdata:
              row = row_id
              lst.append(row)
          lst = list(map(list,lst))
          lst.insert(0,cols)
          for row in lst:
              csvwriter.writerow(row)
  #por
  def exportcanvas16():
      var_1=porfrm1.get_date()
      var_2=porto1.get_date()
      

      if rpcheckvar1_por.get()==1 and rpcheckvar2_por.get()==0:
          cols = ["No","Date","Due Date","Vendor","Status","P.Order Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select porderid,	porderdate,duedate,vendor,status,ordertot from  porder where porderdate between %s and %s and status="Complete"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_por.get()==0 and rpcheckvar2_por.get()==1:
          cols = ["No","Date","Due Date","Vendor","Status","P.Order Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select porderid,	porderdate,duedate,vendor,status,ordertot from  porder where porderdate between %s and %s and status="Draft"'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)

      elif rpcheckvar1_por.get()==1 and rpcheckvar2_por.get()==1:
          cols = ["No","Date","Due Date","Vendor","Status","P.Order Total"] # Your column headings here
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
          
          lst = []
          with open(path, "w", newline='') as myfile:
              csvwriter = csv.writer(myfile, delimiter=',')
              sql = 'select porderid,	porderdate,duedate,vendor,status,ordertot from  porder where porderdate between %s and %s'
              
              irv=(var_1,var_2)
              fbcursor.execute(sql,irv)
              pandsdata = fbcursor.fetchall()
              for row_id in pandsdata:
                  row = row_id
                  lst.append(row)
              lst = list(map(list,lst))
              lst.insert(0,cols)
              for row in lst:
                  csvwriter.writerow(row)
      elif rpcheckvar1_por.get()==0 and rpcheckvar2_por.get()==0:
              pass
      else:
                      pass


  #exp
  def exportcanvas17():
      var_1=exp_frm.get_date()
      var_2=exp_to.get_date()

      rth=expfilter.get()
      if rpcheckvar1_exp.get()==1 and rpcheckvar2_exp.get()==1:
          if rth=="All":
              cols = ["Date","Customer","Vendor","Invoice","Rebill.Amount","Amount"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select date,	customer,vendor,invoiced,	rebill_amount,expense_amount from expenses where date between %s and %s'
                  
                  irv=(var_1,var_2)
                  fbcursor.execute(sql,irv)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          elif rth=="Internal":
              cols = ["Date","Customer","Vendor","Invoice","Rebill.Amount","Amount"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select date,	customer,vendor,invoiced,	rebill_amount,expense_amount from expenses where date between %s and %s and customer="Internal"'
                  
                  irv=(var_1,var_2)
                  fbcursor.execute(sql,irv)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          else:
              pass
      elif rpcheckvar1_exp.get()==1 and rpcheckvar2_exp.get()==0:
          if rth=="All":
              cols = ["Date","Customer","Vendor","Invoice","Rebill.Amount","Amount"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select date,	customer,vendor,invoiced,	rebill_amount,expense_amount from expenses where date between %s and %s and invoiced="Yes"'
                  
                  irv=(var_1,var_2)
                  fbcursor.execute(sql,irv)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          elif rth=="Internal":
              cols = ["Date","Customer","Vendor","Invoice","Rebill.Amount","Amount"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select date,	customer,vendor,invoiced,	rebill_amount,expense_amount from expenses where date between %s and %s and customer="Internal" and invoiced="Yes"'
                  
                  irv=(var_1,var_2)
                  fbcursor.execute(sql,irv)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          else:
              pass
      elif rpcheckvar1_exp.get()==0 and rpcheckvar2_exp.get()==1:
          if rth=="All":
              cols = ["Date","Customer","Vendor","Invoice","Rebill.Amount","Amount"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select date,	customer,vendor,invoiced,	rebill_amount,expense_amount from expenses where date between %s and %s and rebillable="Yes"'
                  
                  irv=(var_1,var_2)
                  fbcursor.execute(sql,irv)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          elif rth=="Internal":
              cols = ["Date","Customer","Vendor","Invoice","Rebill.Amount","Amount"] # Your column headings here
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
              
              lst = []
              with open(path, "w", newline='') as myfile:
                  csvwriter = csv.writer(myfile, delimiter=',')
                  sql = 'select date,	customer,vendor,invoiced,	rebill_amount,expense_amount from expenses where date between %s and %s and customer="Internal" and rebillable="Yes"'
                  
                  irv=(var_1,var_2)
                  fbcursor.execute(sql,irv)
                  pandsdata = fbcursor.fetchall()
                  for row_id in pandsdata:
                      row = row_id
                      lst.append(row)
                  lst = list(map(list,lst))
                  lst.insert(0,cols)
                  for row in lst:
                      csvwriter.writerow(row)
          else:
              pass
      elif rpcheckvar1_exp.get()==0 and rpcheckvar2_exp.get()==0:
          pass

      else:
          pass


  #pyr
  def exportcanvas18():


      var_1=pyrfrm1.get_date()
      var_2=pyrto1.get_date()

      cols = ["Invoice No","Invoice Issue Date","Customer","Payment ID","Payment Date","Paid By","Amount Paid"] # Your column headings here
      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('CSV File', '*.csv',)],defaultextension=".csv")
      
      lst = []
      with open(path, "w", newline='') as myfile:
          csvwriter = csv.writer(myfile, delimiter=',')
          sql = 'select invoice_number,	invodate,businessname,paymentid,invodate,businessname,totpaid from invoice where invodate between %s and %s'
          
          irv=(var_1,var_2)
          fbcursor.execute(sql,irv)
          pandsdata = fbcursor.fetchall()
          for row_id in pandsdata:
              row = row_id
              lst.append(row)
          lst = list(map(list,lst))
          lst.insert(0,cols)
          for row in lst:
              csvwriter.writerow(row)


  #++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++PDF++++++++++++++++++++++++

  def pdf_exp():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      if rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==0:
          pass
      elif rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==0:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and 	invoicetot="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15

          pdf.save()
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or balance="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15


          pdf.save()
      elif rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15


          pdf.save()
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==0:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid != "0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15


          pdf.save()
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==1:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15

          pdf.save()
      elif rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==1:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or invoicetot="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15


          pdf.save()
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==0:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid is not null or invoicetot="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15


          pdf.save()
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or balance!="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15


          pdf.save()
      else:
          pass
      
      

  #==========irwc
  def pdf_exp_irwc():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      if rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==0:
          pass
      elif rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==0:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and 	invoicetot="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15

          pdf.save()
      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==1:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or balance="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15


          pdf.save()

      elif rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==1:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15


          pdf.save()
      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==0:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid != "0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15


          pdf.save()
      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==1:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15


          pdf.save()
      elif rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==1:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or invoicetot="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15

          pdf.save()
      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==0:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid is not null or invoicetot="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15


          pdf.save()
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
            
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or balance!="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15


          pdf.save()
      else:
          pass
      
      
  def pdf_exp_or():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
      defaultextension=".pdf")

      fileName = path
      documentTitle = 'Document title!'
      title = 'Invoices List'
      pdf = canvas.Canvas(fileName, pagesize=letter)
      pdf.setTitle(documentTitle)

      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      pdf.setFont('Helvetica',12)
      pdf.drawString(30,768, company[1])
      text=company[2]
      wraped_text="\n".join(wrap(text,30))
      htg=wraped_text.split('\n')
            
      vg=len(htg)
      if vg>0:
              pdf.drawString(30,752,htg[0])
              
              if vg>1:
                pdf.drawString(30,738,htg[1])
                
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                   
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
      else:
              pass
      pdf.drawString(30,700, "Sales tax reg No:"+company[4])
      pdf.drawString(495,760, "Order Report")
      
    

      pdf.drawString(335,740, "Date From:"+orfrm.get()+"  Date To:"+orto.get())
      pdf.drawString(460,720,"Invoice Category: All")
      pdf.drawString(28,695,"__________________________________________________________________________________")
      pdf.drawString(28,675,"__________________________________________________________________________________")
      
      pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
      
      in_dat=orfrm1.get_date()
      cr=orto1.get_date()
      var_1=in_dat
      var_2=cr
    
    
      count=0
      sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
      inv_valuz=(var_1,var_2)
      fbcursor.execute(sql_inv_dt,inv_valuz)
      tre=fbcursor.fetchall()
      x=660
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
        
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]

      for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[0]))
                      
                            pdf.drawString(88,x,str(i[1]))
                            pdf.drawString(158,x,str(i[2]))
                            pdf.drawString(235,x,str(i[3]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[26]))
                
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[0]))
                      
                            pdf.drawString(88,x,str(i[1]))
                            pdf.drawString(158,x,str(i[2]))
                            pdf.drawString(235,x,str(i[3]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[26])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[0]))
                      
                            pdf.drawString(88,x,str(i[1]))
                            pdf.drawString(158,x,str(i[2]))
                            pdf.drawString(235,x,str(i[3]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[26]))
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[0]))
                      
                            pdf.drawString(88,x,str(i[1]))
                            pdf.drawString(158,x,str(i[2]))
                            pdf.drawString(235,x,str(i[3]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[26])+" "+str(crc))
                        
                        else:
                            pass
                       
                    count += 1
                    x-=15


      pdf.save()

  def pdf_exp_rir():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
      defaultextension=".pdf")

      fileName = path
      documentTitle = 'Document title!'
      title = 'Invoices List'
      pdf = canvas.Canvas(fileName, pagesize=letter)
      pdf.setTitle(documentTitle)

      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      pdf.setFont('Helvetica',12)
      pdf.drawString(30,768, company[1])
      text=company[2]
      wraped_text="\n".join(wrap(text,30))
      htg=wraped_text.split('\n')
            
      vg=len(htg)
      if vg>0:
              pdf.drawString(30,752,htg[0])
              
              if vg>1:
                pdf.drawString(30,738,htg[1])
                
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                   
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
      else:
              pass
      pdf.drawString(30,700, "Sales tax reg No:"+company[4])
      pdf.drawString(445,760, "Recurring Invoice Report")
      "Invoice No","Customer","Next Invoice","Recurring Interval","Stop After","Invoice Total"
      pdf.drawString(460,720,"Invoice Category: All")
      pdf.drawString(28,695,"__________________________________________________________________________________")
      pdf.drawString(28,675,"__________________________________________________________________________________")
      
      pdf.drawString(28,678,"Invoice No          Customer                   Next Invoice    Recurring Interval     Stop After       Invoice Total    ")
      
      count=0
      sql_inv_dt='SELECT * FROM invoice'
  
      fbcursor.execute(sql_inv_dt)
      tre=fbcursor.fetchall()
      x=660
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
        
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]
      for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                  
                            pdf.drawString(115,x,str(i[18]))
                            pdf.drawString(250,x,str(i[26]))
                            pdf.drawString(335,x,str(i[24]))
                            pdf.drawString(430,x,str(i[27])) 
                            pdf.drawString(505,x,str(crc)+str(i[8]))
                
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                  
                            pdf.drawString(115,x,str(i[18]))
                            pdf.drawString(250,x,str(i[26]))
                            pdf.drawString(335,x,str(i[24]))
                            pdf.drawString(430,x,str(i[27])) 
                            pdf.drawString(505,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                  
                            pdf.drawString(115,x,str(i[18]))
                            pdf.drawString(250,x,str(i[26]))
                            pdf.drawString(335,x,str(i[24]))
                            pdf.drawString(430,x,str(i[27])) 
                            pdf.drawString(505,x,str(crc)+" "+str(i[8]))
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                  
                            pdf.drawString(115,x,str(i[18]))
                            pdf.drawString(250,x,str(i[26]))
                            pdf.drawString(335,x,str(i[24]))
                            pdf.drawString(430,x,str(i[27])) 
                            pdf.drawString(505,x,str(i[8])+" "+str(crc))
                                    
                        else:
                            pass
                       
                    count += 1
                    x-=15
                      
            #   else:
            #       pdf.drawString(28,x,str(i[1]))
                  
            #       pdf.drawString(115,x,str(i[18]))
            #       pdf.drawString(250,x,str(i[26]))
            #       pdf.drawString(335,x,str(i[24]))
            #       pdf.drawString(430,x,str(i[27])) 
            #       pdf.drawString(505,x,str(i[8]))
                
            #   count += 1
            #   x-=15


      pdf.save()

  def pdf_exp_pdi():   
      
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
      defaultextension=".pdf")

      fileName = path
      documentTitle = 'Document title!'
      title = 'Invoices List'
      pdf = canvas.Canvas(fileName, pagesize=letter)
      pdf.setTitle(documentTitle)

      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      pdf.setFont('Helvetica',12)
      pdf.drawString(30,768, company[1])
      text=company[2]
      wraped_text="\n".join(wrap(text,30))
      htg=wraped_text.split('\n')
            
      vg=len(htg)
      if vg>0:
              pdf.drawString(30,752,htg[0])
              
              if vg>1:
                pdf.drawString(30,738,htg[1])
                
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                   
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
      else:
              pass
      pdf.drawString(30,700, "Sales tax reg No:"+company[4])
      pdf.drawString(450,760, "Past Due Invoice Report")

      pdf.drawString(460,720,"Invoice Category: All")
      
      pdf.drawString(28,695,"__________________________________________________________________________________")
      pdf.drawString(28,675,"__________________________________________________________________________________")
      pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
      
      

      count=0
      sql_inv_dt='SELECT * FROM invoice where invodate<duedate'
      
      fbcursor.execute(sql_inv_dt)
      tre=fbcursor.fetchall()
      x=660
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
        
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]
      for i in tre:
                    if x==44 or x==50 :
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(88,x,str(i[2]))
                                pdf.drawString(158,x,str(i[3]))
                                pdf.drawString(234,x,str(i[35]))
                                pdf.drawString(300,x,str(i[4])) 
                                pdf.drawString(365,x,str(crc)+str(i[8]))
                                pdf.drawString(455,x,str(crc)+str(i[9]))
                                pdf.drawString(530,x,str(crc)+str(i[10]))
                
                            
                        elif ps_cr=="after amount":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(88,x,str(i[2]))
                                pdf.drawString(158,x,str(i[3]))
                                pdf.drawString(234,x,str(i[35]))
                                pdf.drawString(300,x,str(i[4])) 
                                pdf.drawString(365,x,str(i[8])+str(crc))
                                pdf.drawString(455,x,str(i[9])+str(crc))
                                pdf.drawString(530,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(88,x,str(i[2]))
                                pdf.drawString(158,x,str(i[3]))
                                pdf.drawString(234,x,str(i[35]))
                                pdf.drawString(300,x,str(i[4])) 
                                pdf.drawString(365,x,str(crc)+" "+str(i[8]))
                                pdf.drawString(455,x,str(crc)+" "+str(i[9]))
                                pdf.drawString(530,x,str(crc)+" "+str(i[10]))
                            
                        elif ps_cr=="after amount with space":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(88,x,str(i[2]))
                                pdf.drawString(158,x,str(i[3]))
                                pdf.drawString(234,x,str(i[35]))
                                pdf.drawString(300,x,str(i[4])) 
                                pdf.drawString(365,x,str(i[8]))
                                pdf.drawString(455,x,str(i[9])+" "+str(crc))
                                pdf.drawString(530,x,str(i[10])+" "+str(crc))
                                    
                        else:
                            pass
                    count += 1
                    x-=15
            #   else:count += 1
                   
                #   pdf.drawString(28,x,str(i[1]))
                  
                #   pdf.drawString(88,x,str(i[2]))
                #   pdf.drawString(158,x,str(i[3]))
                #   pdf.drawString(234,x,str(i[35]))
                #   pdf.drawString(300,x,str(i[4])) 
                #   pdf.drawString(365,x,str(i[8]))
                #   pdf.drawString(455,x,str(i[9]))
                #   pdf.drawString(530,x,str(i[10]))
              


      pdf.save()


  def pdf_exp_pym():   
      
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
      defaultextension=".pdf")

      fileName = path
      documentTitle = 'Document title!'
      title = 'Invoices List'
      pdf = canvas.Canvas(fileName, pagesize=letter)
      pdf.setTitle(documentTitle)

      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      pdf.setFont('Helvetica',10)
      pdf.drawString(30,768, company[1])
      text=company[2]
      wraped_text="\n".join(wrap(text,30))
      htg=wraped_text.split('\n')
            
      vg=len(htg)
      if vg>0:
              pdf.drawString(30,752,htg[0])
              
              if vg>1:
                pdf.drawString(30,738,htg[1])
                
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                   
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
      else:
              pass
      pdf.drawString(30,700, "Sales tax reg No:"+company[4])
      pdf.drawString(500,760, "Pyment Report")
      pdf.drawString(370,740, "Date From:"+pyrfrm.get()+"  Date To:"+pyrto.get())
      pdf.drawString(470,720,"Invoice Category: All")
      pdf.drawString(28,695,"_________________________________________________________________________________________________")
      pdf.drawString(28,675,"_________________________________________________________________________________________________")
      pdf.drawString(28,678,"Invoice No          Invoice Issue Date  Customer                      Payment ID   Payment Date     Paid By               Amount Paid       ")
      
      in_dat=pyrfrm1.get_date()
      cr=pyrto1.get_date()
      var_1=in_dat
      var_2=cr
    
      count=0
      sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
      inv_valuz=(var_1,var_2)
      fbcursor.execute(sql_inv_dt,inv_valuz)
      tre=fbcursor.fetchall()
      x=660
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
        
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]
      for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(110,x,str(i[2]))
                                pdf.drawString(190,x,str(i[18]))
                                pdf.drawString(298,x,str(i[34]))
                                pdf.drawString(358,x,str(i[2])) 
                                pdf.drawString(425,x,str(i[18]))
                                pdf.drawString(515,x,str(crc)+str(i[9]))
                
                            
                        elif ps_cr=="after amount":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(110,x,str(i[2]))
                                pdf.drawString(190,x,str(i[18]))
                                pdf.drawString(298,x,str(i[34]))
                                pdf.drawString(358,x,str(i[2])) 
                                pdf.drawString(425,x,str(i[18]))
                                pdf.drawString(515,x,str(i[9])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(110,x,str(i[2]))
                                pdf.drawString(190,x,str(i[18]))
                                pdf.drawString(298,x,str(i[34]))
                                pdf.drawString(358,x,str(i[2])) 
                                pdf.drawString(425,x,str(i[18]))
                                pdf.drawString(515,x,str(crc)+" "+str(i[9]))
                            
                        elif ps_cr=="after amount with space":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(110,x,str(i[2]))
                                pdf.drawString(190,x,str(i[18]))
                                pdf.drawString(298,x,str(i[34]))
                                pdf.drawString(358,x,str(i[2])) 
                                pdf.drawString(425,x,str(i[18]))
                                pdf.drawString(515,x,str(i[9])+" "+str(crc))
                                    
                        else:
                            pass
                    count += 1
                    x-=15


      pdf.save()


  def pdf_exp_cl():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      if rpcheckvar1_cl.get()==1 and rpcheckvar2_cl.get()==0:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,760, company[1])
          pdf.drawString(495,760, "Customer List")
          

          pdf.drawString(28,750,"__________________________________________________________________________________")
          pdf.drawString(28,730,"__________________________________________________________________________________")

          
          
          pdf.drawString(28,733,"Customer Id  Category     Customer Businnes Name        Customer Person         Tel              Fax    ")
          rth=clfilter.get()
          
          if rth=="All Customers ":
          
              count=0
              sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1'
              
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              for i in tre:
                  trf='select * from customer where businessname=%s'
                  vs=(str(i[18]),)
                      
                  fbcursor.execute(trf, vs)
                  thg=fbcursor.fetchall()
                  for i in thg:
                              if x==47 or i==57:
                                  pdf.showPage()
                                  x=855
                                  pdf.drawString(28,x-100,"__________________________________________________________________________________")
                              else:
                                  pdf.drawString(28,x,str(i[0]))
                                  
                                  pdf.drawString(110,x,str(i[2]))
                                  pdf.drawString(168,x,str(i[4]))
                                  pdf.drawString(335,x,str(i[8]))
                                  pdf.drawString(440,x,str(i[10])) 
                                  pdf.drawString(512,x,str(i[11]))
                          
                              count += 1
                              x-=15


              pdf.save()
          elif rth=="Default":
              count=0
              sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1 '
              
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              for i in tre:
                  trf='select * from customer where businessname=%s and category="Default"'
                  vs=(str(i[18]),)
                      
                  fbcursor.execute(trf, vs)
                  thg=fbcursor.fetchall()
                  for i in thg:
                              if x==47 or i==57:
                                  pdf.showPage()
                                  x=855
                                  pdf.drawString(28,x-100,"__________________________________________________________________________________")
                              else:
                                  pdf.drawString(28,x,str(i[0]))
                                  
                                  pdf.drawString(110,x,str(i[2]))
                                  pdf.drawString(168,x,str(i[4]))
                                  pdf.drawString(335,x,str(i[8]))
                                  pdf.drawString(440,x,str(i[10])) 
                                  pdf.drawString(512,x,str(i[11]))
                          
                              count += 1
                              x-=15
              pdf.save()
      elif rpcheckvar1_cl.get()==0 and rpcheckvar2_cl.get()==1:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,760, company[1])
          pdf.drawString(495,760, "Customer List")
          

          pdf.drawString(28,750,"__________________________________________________________________________________")
          pdf.drawString(28,730,"__________________________________________________________________________________")

          
          
          pdf.drawString(28,733,"Customer Id  Category     Customer Businnes Name        Customer Person         Tel              Fax    ")
          rth=clfilter.get()
          
          if rth=="All Customers ":
          
              count=0
              sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1'
              
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              for i in tre:
                  trf='select * from customer where businessname=%s'
                  vs=(str(i[18]),)
                      
                  fbcursor.execute(trf, vs)
                  thg=fbcursor.fetchall()
                  for i in thg:
                              if x==47 or i==57:
                                  pdf.showPage()
                                  x=855
                                  pdf.drawString(28,x-100,"__________________________________________________________________________________")
                              else:
                                  pdf.drawString(28,x,str(i[0]))
                                  
                                  pdf.drawString(110,x,str(i[2]))
                                  pdf.drawString(168,x,str(i[4]))
                                  pdf.drawString(335,x,str(i[8]))
                                  pdf.drawString(440,x,str(i[10])) 
                                  pdf.drawString(512,x,str(i[11]))
                          
                              count += 1
                              x-=15


                  pdf.save()
          elif rth=="Default":
              count=0
              sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1 '
              
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              for i in tre:
                  trf='select * from customer where businessname=%s and category="Default"'
                  vs=(str(i[18]),)
                      
                  fbcursor.execute(trf, vs)
                  thg=fbcursor.fetchall()
                  for i in thg:
                              if x==47 or i==57:
                                  pdf.showPage()
                                  x=855
                                  pdf.drawString(28,x-100,"__________________________________________________________________________________")
                              else:
                                  pdf.drawString(28,x,str(i[0]))
                                  
                                  pdf.drawString(110,x,str(i[2]))
                                  pdf.drawString(168,x,str(i[4]))
                                  pdf.drawString(335,x,str(i[8]))
                                  pdf.drawString(440,x,str(i[10])) 
                                  pdf.drawString(512,x,str(i[11]))
                          
                              count += 1
                              x-=15
                  pdf.save()
      elif rpcheckvar1_cl.get()==1 and rpcheckvar2_cl.get()==1:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,760, company[1])
          pdf.drawString(495,760, "Customer List")
          

          pdf.drawString(28,750,"__________________________________________________________________________________")
          pdf.drawString(28,730,"__________________________________________________________________________________")

          
          
          pdf.drawString(28,733,"Customer Id  Category     Customer Businnes Name        Customer Person         Tel              Fax    ")
          rth=clfilter.get()
          
          if rth=="All Customers ":
          
              count=0
              
              x=705
            
              trf='select * from customer '
                  
                      
              fbcursor.execute(trf)
              thg=fbcursor.fetchall()
              for i in thg:
                              if x==47 or i==57:
                                  pdf.showPage()
                                  x=855
                                  pdf.drawString(28,x-100,"__________________________________________________________________________________")
                              else:
                                  pdf.drawString(28,x,str(i[0]))
                                  
                                  pdf.drawString(110,x,str(i[2]))
                                  pdf.drawString(168,x,str(i[4]))
                                  pdf.drawString(335,x,str(i[8]))
                                  pdf.drawString(440,x,str(i[10])) 
                                  pdf.drawString(512,x,str(i[11]))
                          
                              count += 1
                              x-=15
              pdf.save()
          elif rth=="Default":
              count=0
              trf='select * from customer where category="Default" '
                  
              fbcursor.execute(trf)
              thg=fbcursor.fetchall()
              for i in thg:
                              if x==47 or i==57:
                                  pdf.showPage()
                                  x=855
                                  pdf.drawString(28,x-100,"__________________________________________________________________________________")
                              else:
                                  pdf.drawString(28,x,str(i[0]))
                                  
                                  pdf.drawString(110,x,str(i[2]))
                                  pdf.drawString(168,x,str(i[4]))
                                  pdf.drawString(335,x,str(i[8]))
                                  pdf.drawString(440,x,str(i[10])) 
                                  pdf.drawString(512,x,str(i[11]))
                          
                              count += 1
                              x-=15
              pdf.save()
      elif rpcheckvar1_cl.get()==0 and rpcheckvar2_cl.get()==0:
          pass
      else:
          pass
      
  #pakkaaaaa
  def pdf_exp_cld():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      if rpcheckvar1_cld.get()==1 and rpcheckvar2_cld.get()==0:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle) 

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              
              pdf.drawString(30,760, company[1])
              pdf.drawString(495,760, "Customer List")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")

              
              
              pdf.drawString(28,733,"Billing Information:                                                    Shipping Information:                      ")
              rth=cldfilter.get()
              story=[]

              if rth=="All Customers ":
                  
                  count=0
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1'
              
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  for i in tre:
                      trf='select * from customer where businessname=%s'
                      vs=(str(i[18]),)
                              
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()
                      
                      
                      for i in thg:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1
                  pdf.save()
                      
              elif rth=="Default":
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1'
                  count=0
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  for i in tre:
                      trf='select * from customer where businessname=%s and category="Default"'
                      vs=(str(i[18]),)
                              
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()
                      for i in thg:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                  pdf.save()
              else:
                  pass
      elif rpcheckvar1_cld.get()==0 and rpcheckvar2_cld.get()==1:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(495,760, "Customer List")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")

              
              
              pdf.drawString(28,733,"Billing Information:                                                    Shipping Information:                      ")
              rth=cldfilter.get()
              
              if rth=="All Customers ":
              
                  count=0
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1'
              
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  for i in tre:
                      trf='select * from customer where businessname=%s'
                      vs=(str(i[18]),)
                              
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()
                      for i in thg:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                      pdf.save()
              elif rth=="Default":
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1'
              
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  for i in tre:
                      trf='select * from customer where businessname=%s and category="Default"'
                      vs=(str(i[18]),)
                              
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()
                      for i in thg:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                      pdf.save()
              else:
                  pass
      elif rpcheckvar1_cld.get()==0 and rpcheckvar2_cld.get()==0:
          pass
      elif rpcheckvar1_cld.get()==1 and rpcheckvar2_cld.get()==1:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(495,760, "Customer List")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")

              
              
              pdf.drawString(28,733,"Billing Information:                                                    Shipping Information:                      ")
              rth=cldfilter.get()
              
              if rth=="All Customers ":
              
                  count=0
                  sql_inv_dt='SELECT * FROM customer'
                  
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  
                  for i in tre:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                  pdf.save()
              elif rth=="Default":
                  count=0
                  sql_inv_dt='SELECT * FROM customer where category="Default"'
                  
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  for i in tre:

                  
                          for i in tre:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                  pdf.save()
              else:
                  pass
      

  def pdf_exp_psl():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      rth=pslfilter.get()
      if rpcheckvar1_psl.get()==1 and rpcheckvar2_psl.get()==0:
          if rth=="All product and Services ":
                  path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
                  defaultextension=".pdf")

                  fileName = path
                  documentTitle = 'Document title!'
                  title = 'Invoices List'
                  pdf = canvas.Canvas(fileName, pagesize=letter)
                  pdf.setTitle(documentTitle)

                  sql_company = "SELECT * from company"
                  fbcursor.execute(sql_company)
                  company= fbcursor.fetchone()
                  
                  pdf.setFont('Helvetica',12)
                  pdf.drawString(30,760, company[1])
                  pdf.drawString(415,760, "Product And Services Report")
                  

                  pdf.drawString(28,750,"__________________________________________________________________________________")
                  pdf.drawString(28,730,"__________________________________________________________________________________")


                  pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

                  count=0
                  sql_inv_dt='SELECT * FROM productservice where stock>stocklimit'
              
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  sqlr= 'select currencysign from company'
                  fbcursor.execute(sqlr)
                  crncy=fbcursor.fetchone()
                        
                  crc=crncy[0]
                  sqlrt= 'select currsignplace from company'
                  fbcursor.execute(sqlrt)
                  post_rp=fbcursor.fetchone()
                  ps_cr=post_rp[0]
                  for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                            else:
                                pass
                        #   else:
                        #       pdf.drawString(28,x,str(i[0]))
                              
                        #       pdf.drawString(95,x,str(i[3]))
                        #       pdf.drawString(165,x,str(i[4]))
                        #       pdf.drawString(295,x,str(i[5]))
                        #       pdf.drawString(380,x,str(i[15])) 
                        #       pdf.drawString(475,x,str(i[13]))
                        #       pdf.drawString(510,x,str(i[9]))
                        #       pdf.drawString(545,x,str(i[11]))
                          count += 1
                          x-=15


                  pdf.save()
          elif rth=="All products":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Products" and stock>stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
          elif rth=="All Service":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Service" and stock>stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
          elif rth=="Default":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Default" and stock>stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
          else:
              pass
      elif rpcheckvar1_psl.get()==0 and rpcheckvar2_psl.get()==1:
          if rth=="All product and Services ":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
          elif rth=="All products":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Products" and stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15

              pdf.save()
          elif rth=="All Service":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Service" and stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15
              pdf.save()
          elif rth=="Default":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Default" and stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
          else:
              pass
      elif rpcheckvar1_psl.get()==1 and rpcheckvar2_psl.get()==1:
          if rth=="All product and Services ":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
          elif rth=="All products":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Products"'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
          elif rth=="All Service":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Service"'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15

              pdf.save()
          elif rth=="Default":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Default"'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
          else:
              pass
      elif rpcheckvar1_psl.get()==0 and rpcheckvar2_psl.get()==0:
          pass
      

  def pdf_exp_prl():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      rth=prlfilter.get()
      if rpcheckvar1_pl.get()==1 and rpcheckvar2_pl.get()==1:
          if rth=="All product and Services ":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(492,760, "Price List")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
          elif rth=="All products":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Products"'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
          elif rth=="All Service":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Service"'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
          elif rth=="Default":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Default"'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
          else:
              pass
      elif rpcheckvar1_pl.get()==1 and rpcheckvar2_pl.get()==0:
          if rth=="All product and Services ":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where stock>stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15

              pdf.save()
          elif rth=="All products":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Products" and stock>stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15
              pdf.save()
          elif rth=="All Service":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Service" and stock>stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15

              pdf.save()
          elif rth=="Default":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Default" and stock>stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15

              pdf.save()
          else:
              pass
      elif rpcheckvar1_pl.get()==0 and rpcheckvar2_pl.get()==1:
          if rth=="All product and Services ":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
          elif rth=="All products":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Products" and stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15

              pdf.save()
          elif rth=="All Service":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Service" and stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15

              pdf.save()
          elif rth=="Default":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Default" and stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
          else:
              pass
      elif rpcheckvar1_pl.get()==0 and rpcheckvar2_pl.get()==0:
          pass
      else:
          pass
      
      


  def pdf_exp_plsr():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch


      if rpcheckvar1_plr.get()==1 and rpcheckvar2_plr.get()==1:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product Low Stock Report")
                  

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")
              
              pdf.drawString(28,733,"Product ID            Category           Product Name       Warehouse        Low Stock Limit        Stock    ")
              
          
          
              count=0
              sql_inv_dt='SELECT * FROM productservice where stock < stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
             
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              pdf.drawString(28,x,str(i[0]))
                              
                              pdf.drawString(128,x,str(i[3]))
                              pdf.drawString(215,x,str(i[4]))
                              pdf.drawString(315,x,str(i[15]))
                              pdf.drawString(405,x,str(i[14])) 
                              pdf.drawString(515,x,str(i[13]))
                          
                          count += 1
                          x-=15


              pdf.save()
      elif rpcheckvar1_plr.get()==1 and rpcheckvar2_plr.get()==0:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product Low Stock Report")
                  

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")
              
              pdf.drawString(28,733,"Product ID            Category           Product Name       Warehouse        Low Stock Limit        Stock    ")
              
          
          
              count=0
              sql_inv_dt='SELECT * FROM productservice WHERE stock > stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              for i in tre:
                          pdf.drawString(28,x,str(i[0]))
                          
                          pdf.drawString(128,x,str(i[3]))
                          pdf.drawString(215,x,str(i[4]))
                          pdf.drawString(315,x,str(i[15]))
                          pdf.drawString(405,x,str(i[14])) 
                          pdf.drawString(515,x,str(i[13]))
                      
                          count += 1
                          x-=15


              pdf.save()
      elif rpcheckvar1_plr.get()==0 and rpcheckvar2_plr.get()==1:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product Low Stock Report")
                  

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")
              
              pdf.drawString(28,733,"Product ID            Category           Product Name       Warehouse        Low Stock Limit        Stock    ")
              
          
          
              count=0
              sql_inv_dt='SELECT * FROM productservice WHERE stock < stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              for i in tre:
                          pdf.drawString(28,x,str(i[0]))
                          
                          pdf.drawString(128,x,str(i[3]))
                          pdf.drawString(215,x,str(i[4]))
                          pdf.drawString(315,x,str(i[15]))
                          pdf.drawString(405,x,str(i[14])) 
                          pdf.drawString(515,x,str(i[13]))
                      
                          count += 1
                          x-=15


              pdf.save()
      else:
              pass

  ######## 

  def pdf_exp_tri():   
      
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      if rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==0:
          pass
      elif rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==0:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
                    
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and 	invoicetot="0"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15
                    #   else:
                    #       pdf.drawString(28,x,str(i[1]))
                          
                    #       pdf.drawString(95,x,str(i[2]))
                    #       pdf.drawString(150,x,str(i[3]))
                    #       pdf.drawString(268,x,str(i[37]))
                    #       pdf.drawString(348,x,str(i[16])) 
                    #       pdf.drawString(400,x,str(i[36]))
                    #       pdf.drawString(465,x,str(i[8]))
                          
                    #   count += 1
                    #   x-=15


              pdf.save()
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==1:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
                    
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or balance="0"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15


              pdf.save()
      elif rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==1:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
                    
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15


              pdf.save()
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==0:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
                    
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid != "0"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15


              pdf.save()
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==1:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
                    
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15


              pdf.save()
      elif rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==1:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
                    
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or invoicetot="0"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15


              pdf.save()
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==0:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
                    
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid is not null or invoicetot="0"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15


              pdf.save()
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==1:
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
                    
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or balance!="0"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15


              pdf.save()
      else:
          pass
      

  def pdf_exp_tro():   
      
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
      defaultextension=".pdf")

      fileName = path
      documentTitle = 'Document title!'
      title = 'Invoices List'
      pdf = canvas.Canvas(fileName, pagesize=letter)
      pdf.setTitle(documentTitle)

      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      pdf.setFont('Helvetica',10)
      pdf.drawString(30,768, company[1])
      text=company[2]
      wraped_text="\n".join(wrap(text,30))
      htg=wraped_text.split('\n')
                    
      vg=len(htg)
      if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
      else:
              pass
      pdf.drawString(30,700, "Sales tax reg No:"+company[4])
      pdf.drawString(488,760, "Tax report(Orders)")
      pdf.drawString(370,740, "Date From:"+trofrm.get()+"  Date To:"+troto.get())
      pdf.drawString(470,720,"Invoice Category: All")
      pdf.drawString(28,695,"_________________________________________________________________________________________________")
      pdf.drawString(28,675,"_________________________________________________________________________________________________")
      pdf.drawString(28,678,"Order No         Issue Date     Due Date                      Total Before TAX   TAX1         TAX2                Order Total       ")
      

      in_dat=trofrm1.get_date()
      cr=troto1.get_date()
      var_1=in_dat
      var_2=cr
    
      count=0
      sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
      inv_valuz=(var_1,var_2)
      fbcursor.execute(sql_inv_dt,inv_valuz)
      tre=fbcursor.fetchall()
      x=660
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
                        
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]
      for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                  
                                    pdf.drawString(95,x,str(i[1]))
                                    pdf.drawString(150,x,str(i[2]))
                                    pdf.drawString(268,x,str(crc)+str(i[28]))
                                    pdf.drawString(348,x,str(crc)+str(i[14])) 
                                    pdf.drawString(400,x,str(crc)+str(i[29]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                  
                                    pdf.drawString(95,x,str(i[1]))
                                    pdf.drawString(150,x,str(i[2]))
                                    pdf.drawString(268,x,str(i[28])+str(crc))
                                    pdf.drawString(348,x,str(i[14])+str(crc)) 
                                    pdf.drawString(400,x,str(i[29])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                  
                                    pdf.drawString(95,x,str(i[1]))
                                    pdf.drawString(150,x,str(i[2]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[28]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[14])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[29]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                  
                                    pdf.drawString(95,x,str(i[1]))
                                    pdf.drawString(150,x,str(i[2]))
                                    pdf.drawString(268,x,str(i[28])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[14])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[29])+ " "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                  
                            else:
                                pass
                        count += 1
                        x-=15


      pdf.save()


  def pdf_exp_srgd():   
      
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      rth=srgdfilter.get()
    
      if rth==rth:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',10)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
                        
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(442,760, "Sales Report(Group By Date)")
          pdf.drawString(365,740, "Date From:"+srgdfrm.get()+"  Date To:"+srgdto.get())
          pdf.drawString(470,720,"Invoice Category: All")
          pdf.drawString(28,695,"_________________________________________________________________________________________________")
          pdf.drawString(28,675,"_________________________________________________________________________________________________")
          pdf.drawString(28,678,"Date                              Quantity                          Cost                                            Income                         profit                ")
      
          lkts=srgdfilter.get()
      
          in_dat=srgd_frm.get_date()
          cr=srgd_to.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv='SELECT * FROM productservice Where name=%s'
                  # inv_valuz=(var1,var2)
                  
          inv=(lkts,)
          fbcursor.execute(sql_inv, inv)
          tre=fbcursor.fetchall()
          
          lkt=srgdfilter.get()
          sel_inv_dt1='SELECT * FROM invoice Where invodate between %s and %s and Productserviceid=(SELECT Productserviceid from productservice Where name=%s)'
          inv_valuz=(var_1, var_2,lkt,)
          fbcursor.execute(sel_inv_dt1, inv_valuz)
          tre1=fbcursor.fetchall()

          
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
                            
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]
          for i in tre1:
              for j in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    k=int(int(j[9])*int(i[38]))
                                    rt=int(i[8])
                                    l=rt-k
                                    pdf.drawString(28,x,str(i[2]))
                                    
                                    pdf.drawString(138,x,str(i[38]))
                                    pdf.drawString(245,x,str(crc)+str(k))
                                    pdf.drawString(385,x,str(crc)+str(i[8]))
                                    pdf.drawString(485,x,str(crc)+str(l)) 
                    
                                
                            elif ps_cr=="after amount":
                                    k=int(int(j[9])*int(i[38]))
                                    rt=int(i[8])
                                    l=rt-k
                                    pdf.drawString(28,x,str(i[2]))
                                    
                                    pdf.drawString(138,x,str(i[38]))
                                    pdf.drawString(245,x,str(k)+str(crc))
                                    pdf.drawString(385,x,str(i[8])+str(crc))
                                    pdf.drawString(485,x,str(l)+str(crc)) 
                    
                            elif ps_cr=="before amount with space":
                                    k=int(int(j[9])*int(i[38]))
                                    rt=int(i[8])
                                    l=rt-k
                                    pdf.drawString(28,x,str(i[2]))
                                    
                                    pdf.drawString(138,x,str(i[38]))
                                    pdf.drawString(245,x,str(crc)+" "+str(k))
                                    pdf.drawString(385,x,str(crc)+" "+str(i[8]))
                                    pdf.drawString(485,x,str(crc)+" "+str(l)) 
                                
                            elif ps_cr=="after amount with space":
                                    k=int(int(j[9])*int(i[38]))
                                    rt=int(i[8])
                                    l=rt-k
                                    pdf.drawString(28,x,str(i[2]))
                                    
                                    pdf.drawString(138,x,str(i[38]))
                                    pdf.drawString(245,x,str(k)+" "+str(crc))
                                    pdf.drawString(385,x,str(i[8])+" "+str(crc))
                                    pdf.drawString(485,x,str(l)+" "+str(crc)) 
                            else:
                                pass
                        count += 1
                        x-=15

                #   else:
                          
                #       k=int(j[9]*int(i[38]))
                #       rt=int(i[8])
                #       l=rt-k
                #       pdf.drawString(28,x,str(i[2]))
                      
                #       pdf.drawString(138,x,str(i[38]))
                #       pdf.drawString(245,x,str(k))
                #       pdf.drawString(385,x,str(i[8]))
                #       pdf.drawString(485,x,str(l)) 
                  
                  
        
          pdf.save()
      else:
          pass

  def pdf_exp_ird():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
      defaultextension=".pdf")

      fileName = path
      documentTitle = 'Document title!'
      title = 'Invoices List'
      pdf = canvas.Canvas(fileName, pagesize=letter)
      pdf.setTitle(documentTitle)

      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      pdf.setFont('Helvetica',12)
      pdf.drawString(30,768, company[1])
      text=company[2]
      wraped_text="\n".join(wrap(text,30))
      htg=wraped_text.split('\n')
                    
      vg=len(htg)
      if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
      else:
              pass
      pdf.drawString(30,700, "Sales tax reg No:"+company[4])
      pdf.drawString(450,760, "Invoice Report(Detailed)")
      
      pdf.drawString(335,740, "Date From:"+irdfrm.get()+"  Date To:"+irdto.get())
      pdf.drawString(460,720,"Invoice Category: All")
      pdf.drawString(28,695,"__________________________________________________________________________________")
      pdf.drawString(28,675,"__________________________________________________________________________________")
      
      pdf.drawString(28,678,"Invoice No          Date           Customer                  Invoice Total                       Paid                 Balance      ")
      
      
      in_dat=irdfrm1.get_date()
      cr=irdfrm2.get_date()
      var_1=in_dat
      var_2=cr
    
    
      count=0
      sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
      inv_valuz=(var_1,var_2)
      fbcursor.execute(sql_inv_dt,inv_valuz)
      tre=fbcursor.fetchall()
      x=660
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
                            
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]
      for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(108,x,str(i[2]))
                                    pdf.drawString(180,x,str(i[29]))
                                    pdf.drawString(300,x,str(crc)+str(i[8]))
                                    pdf.drawString(435,x,str(crc)+str(i[9])) 
                                    pdf.drawString(520,x,str(crc)+str(i[10]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(108,x,str(i[2]))
                                    pdf.drawString(180,x,str(i[29]))
                                    pdf.drawString(300,x,str(i[8])+str(crc))
                                    pdf.drawString(435,x,str(i[9])+str(crc)) 
                                    pdf.drawString(520,x,str(i[10])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(108,x,str(i[2]))
                                    pdf.drawString(180,x,str(i[29]))
                                    pdf.drawString(300,x,str(crc)+" "+str(i[8]))
                                    pdf.drawString(435,x,str(crc)+" "+str(i[9])) 
                                    pdf.drawString(520,x,str(crc)+" "+str(i[10]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(108,x,str(i[2]))
                                    pdf.drawString(180,x,str(i[29]))
                                    pdf.drawString(300,x,str(i[8])+" "+str(crc))
                                    pdf.drawString(435,x,str(i[9])+" "+str(crc)) 
                                    pdf.drawString(520,x,str(i[10])+" "+str(crc))
                  
                            else:
                                pass 
                        count += 1
                        x-=15 


      pdf.save()


  def pdf_exp_dir():


      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
      defaultextension=".pdf")

      fileName = path
      documentTitle = 'Document title!'
      title = 'Invoices List'
      pdf = canvas.Canvas(fileName, pagesize=letter)
      pdf.setTitle(documentTitle)

      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      pdf.setFont('Helvetica',12)
      pdf.drawString(30,768, company[1])
      text=company[2]
      wraped_text="\n".join(wrap(text,30))
      htg=wraped_text.split('\n')
                    
      vg=len(htg)
      if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
      else:
              pass
      pdf.drawString(30,700, "Sales tax reg No:"+company[4])
      pdf.drawString(460,760, "Daily Invoice Report")
      
      pdf.drawString(445,740, "Date From:"+dirdate.get())
      pdf.drawString(460,720,"Invoice Category: All")
      pdf.drawString(28,695,"__________________________________________________________________________________")
      pdf.drawString(28,675,"__________________________________________________________________________________")
      
      pdf.drawString(28,678,"Invoice No          Date           Customer                  Invoice Total                       Paid                 Balance      ")
      
      
      in_dat=dir_frm.get_date()
    
      var_1=in_dat
    
    
    
      count=0
      sql_inv_dt='SELECT * FROM invoice WHERE invodate=%s'
      inv_valuz=(str(var_1),)
      fbcursor.execute(sql_inv_dt,inv_valuz)
      tre=fbcursor.fetchall()
      x=655
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
                            
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]
      for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(100,x,str(i[2]))
                                    pdf.drawString(178,x,str(i[29]))
                                    pdf.drawString(295,x,str(crc)+str(i[8]))
                                    pdf.drawString(428,x,str(crc)+str(i[9])) 
                                    pdf.drawString(515,x,str(crc)+str(i[10]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(100,x,str(i[2]))
                                    pdf.drawString(178,x,str(i[29]))
                                    pdf.drawString(295,x,str(i[8])+str(crc))
                                    pdf.drawString(428,x,str(i[9])+str(crc)) 
                                    pdf.drawString(515,x,str(i[10])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(100,x,str(i[2]))
                                    pdf.drawString(178,x,str(i[29]))
                                    pdf.drawString(295,x,str(crc)+" "+str(i[8]))
                                    pdf.drawString(428,x,str(crc)+" "+str(i[9])) 
                                    pdf.drawString(515,x,str(crc)+" "+str(i[10]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(100,x,str(i[2]))
                                    pdf.drawString(178,x,str(i[29]))
                                    pdf.drawString(295,x,str(i[8])+" "+str(crc))
                                    pdf.drawString(428,x,str(i[9])+" "+str(crc)) 
                                    pdf.drawString(515,x,str(i[10])+" "+str(crc))
                  
                            else:
                                pass  
                        count += 1
                        x-=15   
      


      pdf.save()


  def pdf_exp_por():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      if rpcheckvar1_por.get()==1 and rpcheckvar2_por.get()==0:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
                        
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(450,760, "Parchase Order Report")
          
          pdf.drawString(345,740, "Date From:"+porfrm.get()+"  Date To:"+porto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                  Date           Due Date                  Vendor                       Status                    P.Order Total        ")
          

          
          in_dat=porfrm1.get_date()
          cr=porto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM porder where porderdate between %s and %s and status="Complete"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
                                
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]
          for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(crc)+str(i[10]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(i[10])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(crc)+" "+str(i[10]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(i[10])+" "+str(crc))
                  
                            else:
                                pass
                        count += 1
                        x-=15  
                #   else:
                          
                #       pdf.drawString(28,x,str(i[0]))
                      
                #       pdf.drawString(88,x,str(i[2]))
                #       pdf.drawString(160,x,str(i[3]))
                #       pdf.drawString(280,x,str(i[26]))
                #       pdf.drawString(395,x,str(i[5])) 
                #       pdf.drawString(495,x,str(i[10]))
                  
                  


          pdf.save()
      elif rpcheckvar1_por.get()==0 and rpcheckvar2_por.get()==1:
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
                        
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(450,760, "Parchase Order Report")
          
          pdf.drawString(345,740, "Date From:"+porfrm.get()+"  Date To:"+porto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                  Date           Due Date                  Vendor                       Status                    P.Order Total        ")
          

          
          in_dat=porfrm1.get_date()
          cr=porto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM porder where porderdate between %s and %s and status="Draft"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=655
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
                                
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]
          for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(crc)+str(i[10]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(i[10])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(crc)+" "+str(i[10]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(i[10])+" "+str(crc))
                  
                            else:
                                pass
                        count += 1
                        x-=15  


          pdf.save()
      elif rpcheckvar1_por.get()==1 and rpcheckvar2_por.get()==1:
      
          path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
          defaultextension=".pdf")

          fileName = path
          documentTitle = 'Document title!'
          title = 'Invoices List'
          pdf = canvas.Canvas(fileName, pagesize=letter)
          pdf.setTitle(documentTitle)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
                        
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(450,760, "Parchase Order Report")
          
          pdf.drawString(345,740, "Date From:"+porfrm.get()+"  Date To:"+porto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                  Date           Due Date                  Vendor                       Status                    P.Order Total        ")
          

          
          in_dat=porfrm1.get_date()
          cr=porto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM porder where porderdate between %s and %s'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=655
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
                                
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]
          for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(crc)+str(i[10]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(i[10])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(crc)+" "+str(i[10]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(i[10])+" "+str(crc))
                  
                            else:
                                pass
                        count += 1
                        x-=15  


          pdf.save()

  def pdf_exp_exp():
      rth=expfilter.get()
      
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      if rpcheckvar1_exp.get()==0 and rpcheckvar2_exp.get()==1:
          if rth=="All":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(475,760, "Expenses Report")
              
              pdf.drawString(335,740, "Date From:"+expfrm.get()+"  Date To:"+expto.get())
              pdf.drawString(460,720,"Invoice Category: All")
              pdf.drawString(28,695,"__________________________________________________________________________________")
              pdf.drawString(28,675,"__________________________________________________________________________________")
              
              pdf.drawString(28,678,"Date            Customer                        Vendor                  Invoice           Rebill.Amount              Amount        ")
              

              
              in_dat=exp_frm.get_date()
              cr=exp_to.get_date()
              var_1=in_dat
              var_2=cr
          
          
              count=0
              sql_inv_dt='SELECT * FROM expenses where date between %s and %s and rebillable="Yes"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                    
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                            if x==44 or x==50:
                                pdf.showPage()
                                x=750
                            else:
                                if ps_cr=="before amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+str(i[3]))
                        
                                    
                                elif ps_cr=="after amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+str(crc))
                        
                                elif ps_cr=="before amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+" "+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+" "+str(i[3]))
                                    
                                elif ps_cr=="after amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+" "+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+" "+str(crc))
                    
                                else:
                                    pass
                            count += 1
                            x-=15


              pdf.save()

          elif rth=="Internal":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(475,760, "Expenses Report")
              
              pdf.drawString(335,740, "Date From:"+expfrm.get()+"  Date To:"+expto.get())
              pdf.drawString(460,720,"Invoice Category: All")
              pdf.drawString(28,695,"__________________________________________________________________________________")
              pdf.drawString(28,675,"__________________________________________________________________________________")
              
              pdf.drawString(28,678,"Date            Customer                        Vendor                  Invoice           Rebill.Amount              Amount        ")
              

              
              in_dat=exp_frm.get_date()
              cr=exp_to.get_date()
              var_1=in_dat
              var_2=cr
          
          
              count=0
              sql_inv_dt='SELECT * FROM expenses where date between %s and %s and customer="Internal" and rebillable="Yes"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                    
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                            if x==44 or x==50:
                                pdf.showPage()
                                x=750
                            else:
                                if ps_cr=="before amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+str(i[3]))
                        
                                    
                                elif ps_cr=="after amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+str(crc))
                        
                                elif ps_cr=="before amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+" "+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+" "+str(i[3]))
                                    
                                elif ps_cr=="after amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+" "+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+" "+str(crc))
                    
                                else:
                                    pass
                            count += 1
                            x-=15
          else:
              pass
      elif rpcheckvar1_exp.get()==1 and rpcheckvar2_exp.get()==0:
          if rth=="All":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(475,760, "Expenses Report")
              
              pdf.drawString(335,740, "Date From:"+expfrm.get()+"  Date To:"+expto.get())
              pdf.drawString(460,720,"Invoice Category: All")
              pdf.drawString(28,695,"__________________________________________________________________________________")
              pdf.drawString(28,675,"__________________________________________________________________________________")
              
              pdf.drawString(28,678,"Date            Customer                        Vendor                  Invoice           Rebill.Amount              Amount        ")
              

              
              in_dat=exp_frm.get_date()
              cr=exp_to.get_date()
              var_1=in_dat
              var_2=cr
          
          
              count=0
              sql_inv_dt='SELECT * FROM expenses where date between %s and %s and invoiced="Yes"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                    
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                            if x==44 or x==50:
                                pdf.showPage()
                                x=750
                            else:
                                if ps_cr=="before amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+str(i[3]))
                        
                                    
                                elif ps_cr=="after amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+str(crc))
                        
                                elif ps_cr=="before amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+" "+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+" "+str(i[3]))
                                    
                                elif ps_cr=="after amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+" "+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+" "+str(crc))
                    
                                else:
                                    pass
                            count += 1
                            x-=15


              pdf.save()

          elif rth=="Internal":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(475,760, "Expenses Report")
              
              pdf.drawString(335,740, "Date From:"+expfrm.get()+"  Date To:"+expto.get())
              pdf.drawString(460,720,"Invoice Category: All")
              pdf.drawString(28,695,"__________________________________________________________________________________")
              pdf.drawString(28,675,"__________________________________________________________________________________")
              
              pdf.drawString(28,678,"Date            Customer                        Vendor                  Invoice           Rebill.Amount              Amount        ")
              

              
              in_dat=exp_frm.get_date()
              cr=exp_to.get_date()
              var_1=in_dat
              var_2=cr
          
          
              count=0
              sql_inv_dt='SELECT * FROM expenses where date between %s and %s and customer="Internal" and invoiced="Yes"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                    
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                            if x==44 or x==50:
                                pdf.showPage()
                                x=750
                            else:
                                if ps_cr=="before amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+str(i[3]))
                        
                                    
                                elif ps_cr=="after amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+str(crc))
                        
                                elif ps_cr=="before amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+" "+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+" "+str(i[3]))
                                    
                                elif ps_cr=="after amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+" "+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+" "+str(crc))
                    
                                else:
                                    pass
                            count += 1
                            x-=15

              pdf.save()
          else:
              pass
      elif rpcheckvar1_exp.get()==0 and rpcheckvar2_exp.get()==0:
          pass
      elif rpcheckvar1_exp.get()==1 and rpcheckvar2_exp.get()==1:
      

          if rth=="All":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(475,760, "Expenses Report")
              
              pdf.drawString(335,740, "Date From:"+expfrm.get()+"  Date To:"+expto.get())
              pdf.drawString(460,720,"Invoice Category: All")
              pdf.drawString(28,695,"__________________________________________________________________________________")
              pdf.drawString(28,675,"__________________________________________________________________________________")
              
              pdf.drawString(28,678,"Date            Customer                        Vendor                  Invoice           Rebill.Amount              Amount        ")
              

              
              in_dat=exp_frm.get_date()
              cr=exp_to.get_date()
              var_1=in_dat
              var_2=cr
          
          
              count=0
              sql_inv_dt='SELECT * FROM expenses where date between %s and %s'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                    
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                            if x==44 or x==50:
                                pdf.showPage()
                                x=750
                            else:
                                if ps_cr=="before amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+str(i[3]))
                        
                                    
                                elif ps_cr=="after amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+str(crc))
                        
                                elif ps_cr=="before amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+" "+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+" "+str(i[3]))
                                    
                                elif ps_cr=="after amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+" "+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+" "+str(crc))
                    
                                else:
                                    pass
                            count += 1
                            x-=15

              pdf.save()

          elif rth=="Internal":
              path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('Pdf File', '*.pdf',)],
              defaultextension=".pdf")

              fileName = path
              documentTitle = 'Document title!'
              title = 'Invoices List'
              pdf = canvas.Canvas(fileName, pagesize=letter)
              pdf.setTitle(documentTitle)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(475,760, "Expenses Report")
              
              pdf.drawString(335,740, "Date From:"+expfrm.get()+"  Date To:"+expto.get())
              pdf.drawString(460,720,"Invoice Category: All")
              pdf.drawString(28,695,"__________________________________________________________________________________")
              pdf.drawString(28,675,"__________________________________________________________________________________")
              
              pdf.drawString(28,678,"Date            Customer                        Vendor                  Invoice           Rebill.Amount              Amount        ")
              

              
              in_dat=exp_frm.get_date()
              cr=exp_to.get_date()
              var_1=in_dat
              var_2=cr
          
          
              count=0
              sql_inv_dt='SELECT * FROM expenses where date between %s and %s and customer="Internal"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                    
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                            if x==44 or x==50:
                                pdf.showPage()
                                x=750
                            else:
                                if ps_cr=="before amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+str(i[3]))
                        
                                    
                                elif ps_cr=="after amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+str(crc))
                        
                                elif ps_cr=="before amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+" "+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+" "+str(i[3]))
                                    
                                elif ps_cr=="after amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+" "+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+" "+str(crc))
                    
                                else:
                                    pass
                            count += 1
                            x-=15


              pdf.save()
          else:
              pass


  #print********************************************


  def pr_exp():
    #   from reportlab.pdfgen.canvas import Canvas

      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      from textwrap import wrap
      import split
      if rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==0:
          pass
      elif rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==0:
          
          pdf = canvas.Canvas("reports/Invoice_Report.pdf", pagesize=letter)
          

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr

          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and 	invoicetot="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15


          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report.pdf",None,".",0) 
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          pdf = canvas.Canvas("reports/Invoice_Report.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or balance="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15


          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report.pdf",None,".",0) 
      elif rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          pdf = canvas.Canvas("reports/Invoice_Report.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15


          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report.pdf",None,".",0) 
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==0:
          pdf = canvas.Canvas("reports/Invoice_Report.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid != "0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          for i in tre:
                  if x==44 or x==50:
                      pdf.showPage()
                      x=750
                  else:
                      pdf.drawString(28,x,str(i[1]))
                      
                      pdf.drawString(88,x,str(i[2]))
                      pdf.drawString(158,x,str(i[3]))
                      pdf.drawString(231,x,str(i[35]))
                      pdf.drawString(300,x,str(i[4])) 
                      pdf.drawString(360,x,str(i[8]))
                      pdf.drawString(450,x,str(i[9]))
                      pdf.drawString(525,x,str(i[10]))
                  count += 1
                  x-=15


          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report.pdf",None,".",0) 
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==1:
          pdf = canvas.Canvas("reports/Invoice_Report.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
        
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          
              
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
          
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15


          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report.pdf",None,".",0) 
      elif rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==1:
          pdf = canvas.Canvas("reports/Invoice_Report.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or invoicetot="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15


          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report.pdf",None,".",0) 
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==0:
          pdf = canvas.Canvas("reports/Invoice_Report.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid is not null or invoicetot="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15


          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report.pdf",None,".",0) 
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          pdf = canvas.Canvas("reports/Invoice_Report.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          pdf.drawString(335,740, "Date From:"+invfrm.get()+"  Date To:"+invto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
          
          
          in_dat=rp_exir.get_date()
          cr=rp_exir1.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or balance!="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+str(i[8]))
                            pdf.drawString(450,x,str(crc)+str(i[9]))
                            pdf.drawString(525,x,str(crc)+str(i[10]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+str(crc))
                            pdf.drawString(450,x,str(i[9])+str(crc))
                            pdf.drawString(525,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(crc)+" "+str(i[8]))
                            pdf.drawString(450,x,str(crc)+" "+str(i[9]))
                            pdf.drawString(525,x,str(crc)+" "+str(i[10]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(231,x,str(i[35]))
                            pdf.drawString(300,x,str(i[4])) 
                            pdf.drawString(360,x,str(i[8])+" "+str(crc))
                            pdf.drawString(450,x,str(i[9])+" "+str(crc))
                            pdf.drawString(525,x,str(i[10])+" "+str(crc))
                        
                        else:
                            pass
                        # pdf.drawString(28,x,str(i[1]))
                      
                        # pdf.drawString(88,x,str(i[2]))
                        # pdf.drawString(158,x,str(i[3]))
                        # pdf.drawString(231,x,str(i[35]))
                        # pdf.drawString(300,x,str(i[4])) 
                        # pdf.drawString(360,x,str(i[8]))
                        # pdf.drawString(450,x,str(i[9]))
                        # pdf.drawString(525,x,str(i[10]))
                    count += 1
                    x-=15


          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report.pdf",None,".",0) 
      else:
          pass
      
      

  #==========irwc
  def pr_exp_irwc():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      if rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==0:
          pass
      elif rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==0:
          pdf = canvas.Canvas("reports/Invoice_Report_With Customer.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and 	invoicetot="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15
                        
        #   for i in tre:
        #           if x==44 or x==50:
        #               pdf.showPage()
        #               x=750
                      
        #           else:
              
                    #   pdf.drawString(28,x,str(i[1]))
                      
                    #   pdf.drawString(88,x,str(i[2]))
                    #   pdf.drawString(158,x,str(i[3]))
                    #   pdf.drawString(235,x,str(i[18]))
                    #   pdf.drawString(405,x,str(i[4])) 
                    #   pdf.drawString(490,x,str(i[8]))
                  
        #           count += 1
        #           x-=15

          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report_With Customer.pdf",None,".",0)
      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==1:
          pdf = canvas.Canvas("reports/Invoice_Report_With Customer.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get()
          cr=irwcto1.get()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or balance="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15


          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report_With Customer.pdf",None,".",0)

      elif rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==1:
          pdf = canvas.Canvas("reports/Invoice_Report_With Customer.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15


          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report_With Customer.pdf",None,".",0)
      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==0:
          pdf = canvas.Canvas("reports/Invoice_Report_With Customer.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid != "0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15


          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report_With Customer.pdf",None,".",0)
      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==1:
          pdf = canvas.Canvas("reports/Invoice_Report_With Customer.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15

          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report_With Customer.pdf",None,".",0)
      elif rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==1:
          pdf = canvas.Canvas("reports/Invoice_Report_With Customer.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or invoicetot="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15


          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report_With Customer.pdf",None,".",0)
      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==0:
          pdf = canvas.Canvas("reports/Invoice_Report_With Customer.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid is not null or invoicetot="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15


          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report_With Customer.pdf",None,".",0)
      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          pdf = canvas.Canvas("reports/Invoice_Report_With Customer.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(490,760, "Invoice Report")
          
          pdf.drawString(335,740, "Date From:"+irwcfrm.get()+"  Date To:"+irwcto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
          
          in_dat=irwcfrm1.get_date()
          cr=irwcto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or balance!="0"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
        
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]

          
          for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[8]))
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[8]))
                            
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                      
                            pdf.drawString(88,x,str(i[2]))
                            pdf.drawString(158,x,str(i[3]))
                            pdf.drawString(235,x,str(i[18]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[8])+" "+str(crc))
                        
                        else:
                            pass
                    count += 1
                    x-=15

          pdf.save()
          win32api.ShellExecute(0,"","reports\Invoice_Report_With Customer.pdf",None,".",0)  
      else:
          pass
      
      
  def pr_exp_or():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      pdf = canvas.Canvas("reports/Order_Report.pdf", pagesize=letter)

      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      pdf.setFont('Helvetica',12)
      pdf.drawString(30,768, company[1])
      text=company[2]
      wraped_text="\n".join(wrap(text,30))
      htg=wraped_text.split('\n')
          
      vg=len(htg)
      if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
      else:
              pass
      pdf.drawString(30,700, "Sales tax reg No:"+company[4])
      pdf.drawString(495,760, "Order Report")
      
    

      pdf.drawString(335,740, "Date From:"+orfrm.get()+"  Date To:"+orto.get())
      pdf.drawString(460,720,"Invoice Category: All")
      pdf.drawString(28,695,"__________________________________________________________________________________")
      pdf.drawString(28,675,"__________________________________________________________________________________")
      
      pdf.drawString(28,678,"No                 Date           Due Date        Customer                                 Status                 Invoice Total    ")
      
      in_dat=orfrm1.get_date()
      cr=orto1.get_date()
      var_1=in_dat
      var_2=cr
    
    
      count=0
      sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
      inv_valuz=(var_1,var_2)
      fbcursor.execute(sql_inv_dt,inv_valuz)
      tre=fbcursor.fetchall()
      x=660
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
        
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]

      for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[0]))
                      
                            pdf.drawString(88,x,str(i[1]))
                            pdf.drawString(158,x,str(i[2]))
                            pdf.drawString(235,x,str(i[3]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+str(i[26]))
                
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[0]))
                      
                            pdf.drawString(88,x,str(i[1]))
                            pdf.drawString(158,x,str(i[2]))
                            pdf.drawString(235,x,str(i[3]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[26])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[0]))
                      
                            pdf.drawString(88,x,str(i[1]))
                            pdf.drawString(158,x,str(i[2]))
                            pdf.drawString(235,x,str(i[3]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(crc)+" "+str(i[26]))
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[0]))
                      
                            pdf.drawString(88,x,str(i[1]))
                            pdf.drawString(158,x,str(i[2]))
                            pdf.drawString(235,x,str(i[3]))
                            pdf.drawString(405,x,str(i[4])) 
                            pdf.drawString(490,x,str(i[26])+" "+str(crc))
                        
                        else:
                            pass
                       
                    count += 1
                    x-=15

    #   for i in tre:
    #               if x==44 or x==50 :
    #                   pdf.showPage()
    #                   x=750
                      
    #               else:
    #                   pdf.drawString(28,x,str(i[0]))
                      
    #                   pdf.drawString(88,x,str(i[1]))
    #                   pdf.drawString(158,x,str(i[2]))
    #                   pdf.drawString(235,x,str(i[3]))
    #                   pdf.drawString(405,x,str(i[4])) 
    #                   pdf.drawString(490,x,str(i[26]))
                
    #               count += 1
    #               x-=15


      pdf.save()
      win32api.ShellExecute(0,"","reports\Order_Report.pdf",None,".",0)

  def pr_exp_rir():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      pdf = canvas.Canvas("reports/Recurring_Invoice_Report.pdf", pagesize=letter)

      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      pdf.setFont('Helvetica',12)
      pdf.drawString(30,768, company[1])
      text=company[2]
      wraped_text="\n".join(wrap(text,30))
      htg=wraped_text.split('\n')
          
      vg=len(htg)
      if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
      else:
              pass
      pdf.drawString(30,700, "Sales tax reg No:"+company[4])
      pdf.drawString(445,760, "Recurring Invoice Report")
      "Invoice No","Customer","Next Invoice","Recurring Interval","Stop After","Invoice Total"
      pdf.drawString(460,720,"Invoice Category: All")
      pdf.drawString(28,695,"__________________________________________________________________________________")
      pdf.drawString(28,675,"__________________________________________________________________________________")
      
      pdf.drawString(28,678,"Invoice No          Customer                   Next Invoice    Recurring Interval     Stop After       Invoice Total    ")
      
      count=0
      sql_inv_dt='SELECT * FROM invoice'
  
      fbcursor.execute(sql_inv_dt)
      tre=fbcursor.fetchall()
      x=660
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
        
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]
      for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                            pdf.drawString(28,x,str(i[1]))
                  
                            pdf.drawString(115,x,str(i[18]))
                            pdf.drawString(250,x,str(i[26]))
                            pdf.drawString(335,x,str(i[24]))
                            pdf.drawString(430,x,str(i[27])) 
                            pdf.drawString(505,x,str(crc)+str(i[8]))
                
                            
                        elif ps_cr=="after amount":
                            pdf.drawString(28,x,str(i[1]))
                  
                            pdf.drawString(115,x,str(i[18]))
                            pdf.drawString(250,x,str(i[26]))
                            pdf.drawString(335,x,str(i[24]))
                            pdf.drawString(430,x,str(i[27])) 
                            pdf.drawString(505,x,str(i[8])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                            pdf.drawString(28,x,str(i[1]))
                  
                            pdf.drawString(115,x,str(i[18]))
                            pdf.drawString(250,x,str(i[26]))
                            pdf.drawString(335,x,str(i[24]))
                            pdf.drawString(430,x,str(i[27])) 
                            pdf.drawString(505,x,str(crc)+" "+str(i[8]))
                            
                        elif ps_cr=="after amount with space":
                            pdf.drawString(28,x,str(i[1]))
                  
                            pdf.drawString(115,x,str(i[18]))
                            pdf.drawString(250,x,str(i[26]))
                            pdf.drawString(335,x,str(i[24]))
                            pdf.drawString(430,x,str(i[27])) 
                            pdf.drawString(505,x,str(i[8])+" "+str(crc))
                                    
                        else:
                            pass
                       
                    count += 1
                    x-=15


      pdf.save()
      win32api.ShellExecute(0,"","reports\Recurring_Invoice_Report.pdf",None,".",0)

  def pr_exp_pdi():   
      
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      pdf = canvas.Canvas("reports/Past_Due_Invoice_Report.pdf", pagesize=letter)

      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      pdf.setFont('Helvetica',12)
      pdf.drawString(30,768, company[1])
      text=company[2]
      wraped_text="\n".join(wrap(text,30))
      htg=wraped_text.split('\n')
          
      vg=len(htg)
      if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
      else:
              pass
      pdf.drawString(30,700, "Sales tax reg No:"+company[4])
      pdf.drawString(450,760, "Past Due Invoice Report")

      pdf.drawString(460,720,"Invoice Category: All")
      
      pdf.drawString(28,695,"__________________________________________________________________________________")
      pdf.drawString(28,675,"__________________________________________________________________________________")
      pdf.drawString(28,678,"No                 Date           Due Date        Terms        Status        Invoice Total      Invoice Paid     Balance      ")
      
      

      count=0
      sql_inv_dt='SELECT * FROM invoice where invodate<duedate'
      
      fbcursor.execute(sql_inv_dt)
      tre=fbcursor.fetchall()
      x=660
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
        
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]
      for i in tre:
                    if x==44 or x==50 :
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(88,x,str(i[2]))
                                pdf.drawString(158,x,str(i[3]))
                                pdf.drawString(234,x,str(i[35]))
                                pdf.drawString(300,x,str(i[4])) 
                                pdf.drawString(365,x,str(crc)+str(i[8]))
                                pdf.drawString(455,x,str(crc)+str(i[9]))
                                pdf.drawString(530,x,str(crc)+str(i[10]))
                
                            
                        elif ps_cr=="after amount":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(88,x,str(i[2]))
                                pdf.drawString(158,x,str(i[3]))
                                pdf.drawString(234,x,str(i[35]))
                                pdf.drawString(300,x,str(i[4])) 
                                pdf.drawString(365,x,str(i[8])+str(crc))
                                pdf.drawString(455,x,str(i[9])+str(crc))
                                pdf.drawString(530,x,str(i[10])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(88,x,str(i[2]))
                                pdf.drawString(158,x,str(i[3]))
                                pdf.drawString(234,x,str(i[35]))
                                pdf.drawString(300,x,str(i[4])) 
                                pdf.drawString(365,x,str(crc)+" "+str(i[8]))
                                pdf.drawString(455,x,str(crc)+" "+str(i[9]))
                                pdf.drawString(530,x,str(crc)+" "+str(i[10]))
                            
                        elif ps_cr=="after amount with space":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(88,x,str(i[2]))
                                pdf.drawString(158,x,str(i[3]))
                                pdf.drawString(234,x,str(i[35]))
                                pdf.drawString(300,x,str(i[4])) 
                                pdf.drawString(365,x,str(i[8]))
                                pdf.drawString(455,x,str(i[9])+" "+str(crc))
                                pdf.drawString(530,x,str(i[10])+" "+str(crc))
                                    
                        else:
                            pass
                    count += 1
                    x-=15


      pdf.save()
      win32api.ShellExecute(0,"","reports\Past_Due_Invoice_Report.pdf",None,".",0)


  def pr_exp_pym():   
      
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      pdf = canvas.Canvas("reports/Pyment_Report.pdf", pagesize=letter)

      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      pdf.setFont('Helvetica',10)
      pdf.drawString(30,768, company[1])
      text=company[2]
      wraped_text="\n".join(wrap(text,30))
      htg=wraped_text.split('\n')
          
      vg=len(htg)
      if vg>0:
              pdf.drawString(30,752,htg[0])
              
              if vg>1:
                pdf.drawString(30,738,htg[1])
                
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                   
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
      else:
              pass
      pdf.drawString(30,700, "Sales tax reg No:"+company[4])
      pdf.drawString(500,760, "Pyment Report")
      pdf.drawString(370,740, "Date From:"+pyrfrm.get()+"  Date To:"+pyrto.get())
      pdf.drawString(470,720,"Invoice Category: All")
      pdf.drawString(28,695,"_________________________________________________________________________________________________")
      pdf.drawString(28,675,"_________________________________________________________________________________________________")
      pdf.drawString(28,678,"Invoice No          Invoice Issue Date  Customer                      Payment ID   Payment Date     Paid By               Amount Paid       ")
      
      in_dat=pyrfrm1.get_date()
      cr=pyrto1.get_date()
      var_1=in_dat
      var_2=cr
    
      count=0
      sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
      inv_valuz=(var_1,var_2)
      fbcursor.execute(sql_inv_dt,inv_valuz)
      tre=fbcursor.fetchall()
      x=660
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
        
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]
      for i in tre:
                    if x==44 or x==50:
                        pdf.showPage()
                        x=750
                    else:
                        if ps_cr=="before amount":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(110,x,str(i[2]))
                                pdf.drawString(190,x,str(i[18]))
                                pdf.drawString(298,x,str(i[34]))
                                pdf.drawString(358,x,str(i[2])) 
                                pdf.drawString(425,x,str(i[18]))
                                pdf.drawString(515,x,str(crc)+str(i[9]))
                
                            
                        elif ps_cr=="after amount":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(110,x,str(i[2]))
                                pdf.drawString(190,x,str(i[18]))
                                pdf.drawString(298,x,str(i[34]))
                                pdf.drawString(358,x,str(i[2])) 
                                pdf.drawString(425,x,str(i[18]))
                                pdf.drawString(515,x,str(i[9])+str(crc))
                            
                        elif ps_cr=="before amount with space":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(110,x,str(i[2]))
                                pdf.drawString(190,x,str(i[18]))
                                pdf.drawString(298,x,str(i[34]))
                                pdf.drawString(358,x,str(i[2])) 
                                pdf.drawString(425,x,str(i[18]))
                                pdf.drawString(515,x,str(crc)+" "+str(i[9]))
                            
                        elif ps_cr=="after amount with space":
                                pdf.drawString(28,x,str(i[1]))
                  
                                pdf.drawString(110,x,str(i[2]))
                                pdf.drawString(190,x,str(i[18]))
                                pdf.drawString(298,x,str(i[34]))
                                pdf.drawString(358,x,str(i[2])) 
                                pdf.drawString(425,x,str(i[18]))
                                pdf.drawString(515,x,str(i[9])+" "+str(crc))
                                    
                        else:
                            pass
                    count += 1
                    x-=15
            #   else:
            #       pdf.drawString(28,x,str(i[1]))
                  
            #       pdf.drawString(110,x,str(i[2]))
            #       pdf.drawString(190,x,str(i[18]))
            #       pdf.drawString(298,x,str(i[34]))
            #       pdf.drawString(358,x,str(i[2])) 
            #       pdf.drawString(425,x,str(i[18]))
            #       pdf.drawString(515,x,str(i[9]))
                  
            #   count += 1
            #   x-=15


      pdf.save()
      win32api.ShellExecute(0,"","reports\Pyment_Report.pdf",None,".",0)


  def pr_exp_cl():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      if rpcheckvar1_cl.get()==1 and rpcheckvar2_cl.get()==0:
          
          rth=clfilter.get()
          pdf = canvas.Canvas("reports/Customer_List.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
              
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,760, company[1])
          pdf.drawString(495,760, "Customer List")
              

          pdf.drawString(28,750,"__________________________________________________________________________________")
          pdf.drawString(28,730,"__________________________________________________________________________________")

              
              
          pdf.drawString(28,733,"Customer Id  Category     Customer Businnes Name        Customer Person         Tel              Fax    ")
          
          if rth=="All Customers ":
              count=0
              sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1'
              
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              for i in tre:
                  trf='select * from customer where businessname=%s'
                  vs=(str(i[18]),)
                      
                  fbcursor.execute(trf, vs)
                  thg=fbcursor.fetchall()
                  for i in thg:
                              if x==47 or i==57:
                                  pdf.showPage()
                                  x=855
                                  pdf.drawString(28,x-100,"__________________________________________________________________________________")
                              else:
                                  pdf.drawString(28,x,str(i[0]))
                                  
                                  pdf.drawString(110,x,str(i[2]))
                                  pdf.drawString(168,x,str(i[4]))
                                  pdf.drawString(335,x,str(i[8]))
                                  pdf.drawString(440,x,str(i[10])) 
                                  pdf.drawString(512,x,str(i[11]))
                          
                              count += 1
                              x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Customer_List.pdf",None,".",0)
          elif rth=="Default":
              count=0
              sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1 '
              
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              for i in tre:
                  trf='select * from customer where businessname=%s and category="Default"'
                  vs=(str(i[18]),)
                  
                  fbcursor.execute(trf, vs)
                  thg=fbcursor.fetchall()
                  for i in thg:
                              if x==47 or i==57:
                                  pdf.showPage()
                                  x=855
                                  pdf.drawString(28,x-100,"__________________________________________________________________________________")
                              else:
                                  pdf.drawString(28,x,str(i[0]))
                                  
                                  pdf.drawString(110,x,str(i[2]))
                                  pdf.drawString(168,x,str(i[4]))
                                  pdf.drawString(335,x,str(i[8]))
                                  pdf.drawString(440,x,str(i[10])) 
                                  pdf.drawString(512,x,str(i[11]))
                          
                              count += 1
                              x-=15
              pdf.save()
              win32api.ShellExecute(0,"","reports\Customer_List.pdf",None,".",0)
      elif rpcheckvar1_cl.get()==0 and rpcheckvar2_cl.get()==1:
          pdf = canvas.Canvas("reports/Customer_List.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,760, company[1])
          pdf.drawString(495,760, "Customer List")
          

          pdf.drawString(28,750,"__________________________________________________________________________________")
          pdf.drawString(28,730,"__________________________________________________________________________________")

          
          
          pdf.drawString(28,733,"Customer Id  Category     Customer Businnes Name        Customer Person         Tel              Fax    ")
          rth=clfilter.get()
          
          if rth=="All Customers ":
          
              count=0
              sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1'
              
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              for i in tre:
                  trf='select * from customer where businessname=%s'
                  vs=(str(i[18]),)
                      
                  fbcursor.execute(trf, vs)
                  thg=fbcursor.fetchall()
                  for i in thg:
                              if x==47 or i==57:
                                  pdf.showPage()
                                  x=855
                                  pdf.drawString(28,x-100,"__________________________________________________________________________________")
                              else:
                                  pdf.drawString(28,x,str(i[0]))
                                  
                                  pdf.drawString(110,x,str(i[2]))
                                  pdf.drawString(168,x,str(i[4]))
                                  pdf.drawString(335,x,str(i[8]))
                                  pdf.drawString(440,x,str(i[10])) 
                                  pdf.drawString(512,x,str(i[11]))
                          
                              count += 1
                              x-=15


                  pdf.save()
                  win32api.ShellExecute(0,"","reports\Customer_List.pdf",None,".",0)
          elif rth=="Default":
              count=0
              sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1 '
              
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              for i in tre:
                  trf='select * from customer where businessname=%s and category="Default"'
                  vs=(str(i[18]),)
                  x=705
                  fbcursor.execute(trf, vs)
                  thg=fbcursor.fetchall()
                  for i in thg:
                              if x==47 or i==57:
                                  pdf.showPage()
                                  x=855
                                  pdf.drawString(28,x-100,"__________________________________________________________________________________")
                              else:
                                  pdf.drawString(28,x,str(i[0]))
                                  
                                  pdf.drawString(110,x,str(i[2]))
                                  pdf.drawString(168,x,str(i[4]))
                                  pdf.drawString(335,x,str(i[8]))
                                  pdf.drawString(440,x,str(i[10])) 
                                  pdf.drawString(512,x,str(i[11]))
                          
                              count += 1
                              x-=15
                  pdf.save()
                  win32api.ShellExecute(0,"","reports\Customer_List.pdf",None,".",0)
      elif rpcheckvar1_cl.get()==1 and rpcheckvar2_cl.get()==1:
          pdf = canvas.Canvas("reports/Customer_List.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,760, company[1])
          pdf.drawString(495,760, "Customer List")
          

          pdf.drawString(28,750,"__________________________________________________________________________________")
          pdf.drawString(28,730,"__________________________________________________________________________________")

          
          
          pdf.drawString(28,733,"Customer Id  Category     Customer Businnes Name        Customer Person         Tel              Fax    ")
          rth=clfilter.get()
          
          if rth=="All Customers ":
          
              count=0
              
              x=705
            
              trf='select * from customer '
                  
                      
              fbcursor.execute(trf)
              thg=fbcursor.fetchall()
              for i in thg:
                              if x==47 or i==57:
                                  pdf.showPage()
                                  x=855
                                  pdf.drawString(28,x-100,"__________________________________________________________________________________")
                              else:
                                  pdf.drawString(28,x,str(i[0]))
                                  
                                  pdf.drawString(110,x,str(i[2]))
                                  pdf.drawString(168,x,str(i[4]))
                                  pdf.drawString(335,x,str(i[8]))
                                  pdf.drawString(440,x,str(i[10])) 
                                  pdf.drawString(512,x,str(i[11]))
                          
                              count += 1
                              x-=15
              pdf.save()
              win32api.ShellExecute(0,"","reports\Customer_List.pdf",None,".",0)
          elif rth=="Default":
              count=0
              trf='select * from customer where category="Default" '
                  
              fbcursor.execute(trf)
              thg=fbcursor.fetchall()
              x=705
              for i in thg:
                              if x==47 or i==57:
                                  pdf.showPage()
                                  x=855
                                  pdf.drawString(28,x-100,"__________________________________________________________________________________")
                              else:
                                  pdf.drawString(28,x,str(i[0]))
                                  
                                  pdf.drawString(110,x,str(i[2]))
                                  pdf.drawString(168,x,str(i[4]))
                                  pdf.drawString(335,x,str(i[8]))
                                  pdf.drawString(440,x,str(i[10])) 
                                  pdf.drawString(512,x,str(i[11]))
                          
                              count += 1
                              x-=15
              pdf.save()
              win32api.ShellExecute(0,"","reports\Customer_List.pdf",None,".",0)
      elif rpcheckvar1_cl.get()==0 and rpcheckvar2_cl.get()==0:
          pass
      else:
          pass
      

  def pr_exp_cld():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      if rpcheckvar1_cld.get()==1 and rpcheckvar2_cld.get()==0:
              pdf = canvas.Canvas("reports/Customer_List_Detailed.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              
              pdf.drawString(30,760, company[1])
              pdf.drawString(495,760, "Customer List")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")

              
              
              pdf.drawString(28,733,"Billing Information:                                                    Shipping Information:                      ")
              rth=cldfilter.get()
              

              if rth=="All Customers ":
                  
                  
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1'
              
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  count=0
                  for i in tre:
                      trf='select * from customer where businessname=%s'
                      vs=(str(i[18]),)
                              
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()
                      for i in thg:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                  pdf.save()
                  win32api.ShellExecute(0,"","reports\Customer_List_Detailed.pdf",None,".",0)
              elif rth=="Default":
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1'
              
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  
                  for i in tre:
                      trf='select * from customer where businessname=%s and category="Default"'
                      vs=(str(i[18]),)
                              
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()
                      for i in thg:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                  pdf.save()
                  win32api.ShellExecute(0,"","reports\Customer_List_Detailed.pdf",None,".",0)
              else:
                  pass
      elif rpcheckvar1_cld.get()==0 and rpcheckvar2_cld.get()==1:
              pdf = canvas.Canvas("reports/Customer_List_Detailed.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(495,760, "Customer List")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")

              
              
              pdf.drawString(28,733,"Billing Information:                                                    Shipping Information:                      ")
              rth=cldfilter.get()
              
              if rth=="All Customers ":
              
                  count=0
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1'
              
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  for i in tre:
                      trf='select * from customer where businessname=%s'
                      vs=(str(i[18]),)
                              
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()
                      for i in thg:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                      pdf.save()
                      win32api.ShellExecute(0,"","reports\Customer_List_Detailed.pdf",None,".",0)
              elif rth=="Default":
                  sql_inv_dt='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1'
              
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  for i in tre:
                      trf='select * from customer where businessname=%s and category="Default"'
                      vs=(str(i[18]),)
                              
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()
                      for i in thg:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                      pdf.save()
                      win32api.ShellExecute(0,"","reports\Customer_List_Detailed.pdf",None,".",0)
              else:
                  pass
      elif rpcheckvar1_cld.get()==0 and rpcheckvar2_cld.get()==0:
          pass
      elif rpcheckvar1_cld.get()==1 and rpcheckvar2_cld.get()==1:
              pdf = canvas.Canvas("reports/Customer_List_Detailed.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(495,760, "Customer List")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")

              
              
              pdf.drawString(28,733,"Billing Information:                                                    Shipping Information:                      ")
              rth=cldfilter.get()
              
              if rth=="All Customers ":
              
                  count=0
                  sql_inv_dt='SELECT * FROM customer'
                  
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  
                  for i in tre:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                  pdf.save()
                  win32api.ShellExecute(0,"","reports\Customer_List_Detailed.pdf",None,".",0)
              elif rth=="Default":
                  count=0
                  sql_inv_dt='SELECT * FROM customer where category="Default"'
                  
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  for i in tre:

                  
                          for i in tre:
                                      if x==-30 or x==57:
                                          pdf.showPage()
                                          x=855
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      else:
                                          
                                          pdf.drawString(28,x-10,'Name: '+str(i[4]))
                                      
                                          pdf.drawString(300,x-10,'Name:'+str(i[6]))
                                          pdf.drawString(28,x-25,"Customer Id:"+str(i[0]))
                                          pdf.drawString(300,x-25,"Tax exempt No.:"+str(i[17]))
                                          pdf.drawString(28,x-40,'Address: '+str(i[5]))
                                          pdf.drawString(300,x-40,'Address:'+str(i[7]))
                                          pdf.drawString(28,x-55,'Contact Person: '+str(i[8])) 
                                          pdf.drawString(300,x-55,'Contact Person:'+str(i[13]))
                                          pdf.drawString(28,x-70,'Tel:'+str(i[10]))
                                          pdf.drawString(300,x-70,'Tel:'+str(i[15]))
                                          pdf.drawString(150,x-70,'Fax: '+str(i[11])) 
                                          pdf.drawString(430,x-70,'Fax: '+str(i[16]))
                                          pdf.drawString(28,x-85,'Email: '+str(i[9]))
                                          pdf.drawString(300,x-85,'Email: '+str(i[14]))
                                          pdf.drawString(28,x-100,"__________________________________________________________________________________")
                                      
                              
                                      x-=105
                                      count += 1


                  pdf.save()
                  win32api.ShellExecute(0,"","reports\Customer_List_Detailed.pdf",None,".",0)
              else:
                  pass
      

  def pr_exp_psl():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      rth=pslfilter.get()
      if rpcheckvar1_psl.get()==1 and rpcheckvar2_psl.get()==0:
          if rth=="All product and Services ":
                  pdf = canvas.Canvas("reports/Product_And_Services_Report.pdf", pagesize=letter)

                  sql_company = "SELECT * from company"
                  fbcursor.execute(sql_company)
                  company= fbcursor.fetchone()
                  
                  pdf.setFont('Helvetica',12)
                  pdf.drawString(30,760, company[1])
                  pdf.drawString(415,760, "Product And Services Report")
                  

                  pdf.drawString(28,750,"__________________________________________________________________________________")
                  pdf.drawString(28,730,"__________________________________________________________________________________")


                  pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

                  count=0
                  sql_inv_dt='SELECT * FROM productservice where stock > stocklimit'
              
                  fbcursor.execute(sql_inv_dt)
                  tre=fbcursor.fetchall()
                  x=705
                  sqlr= 'select currencysign from company'
                  fbcursor.execute(sqlr)
                  crncy=fbcursor.fetchone()
                                
                  crc=crncy[0]
                  sqlrt= 'select currsignplace from company'
                  fbcursor.execute(sqlrt)
                  post_rp=fbcursor.fetchone()
                  ps_cr=post_rp[0]
                  for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


                  pdf.save()
                  win32api.ShellExecute(0,"","reports\Product_And_Services_Report.pdf",None,".",0)
          elif rth=="All products":
              pdf = canvas.Canvas("reports/Product_And_Services_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Products" and stock>stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Product_And_Services_Report.pdf",None,".",0)
          elif rth=="All Service":
              pdf = canvas.Canvas("reports/Product_And_Services_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Service" and stock>stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Product_And_Services_Report.pdf",None,".",0)
          elif rth=="Default":
              pdf = canvas.Canvas("reports/Product_And_Services_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Default" and stock>stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Product_And_Services_Report.pdf",None,".",0)
          else:
              pass
      elif rpcheckvar1_psl.get()==0 and rpcheckvar2_psl.get()==1:
          if rth=="All product and Services ":
              pdf = canvas.Canvas("reports/Product_And_Services_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Product_And_Services_Report.pdf",None,".",0)
          elif rth=="All products":
              pdf = canvas.Canvas("reports/Product_And_Services_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Products" and stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15
              pdf.save()
              win32api.ShellExecute(0,"","reports\Product_And_Services_Report.pdf",None,".",0)
          elif rth=="All Service":
              pdf = canvas.Canvas("reports/Product_And_Services_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Service" and stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15

              pdf.save()
              win32api.ShellExecute(0,"","reports\Product_And_Services_Report.pdf",None,".",0)
          elif rth=="Default":
              pdf = canvas.Canvas("reports/Product_And_Services_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Default" and stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Product_And_Services_Report.pdf",None,".",0)
          else:
              pass
      elif rpcheckvar1_psl.get()==1 and rpcheckvar2_psl.get()==1:
          if rth=="All product and Services ":
              pdf = canvas.Canvas("reports/Product_And_Services_Report.pdf", pagesize=letter)
              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Product_And_Services_Report.pdf",None,".",0)
          elif rth=="All products":
              pdf = canvas.Canvas("reports/Product_And_Services_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Products"'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Product_And_Services_Report.pdf",None,".",0)
          elif rth=="All Service":
              pdf = canvas.Canvas("reports/Product_And_Services_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Service"'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15
              pdf.save()
              win32api.ShellExecute(0,"","reports\Product_And_Services_Report.pdf",None,".",0)
          elif rth=="Default":
              pdf = canvas.Canvas("reports/Product_And_Services_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID    Category     Product/ Service Name  Description        Warehouse        Stock  Cost    Price      ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Default"'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+str(i[11]))
                          
                    
                                
                              elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+str(crc))
                                    pdf.drawString(545,x,str(i[11])+str(crc))
                                
                              elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(crc)+" "+str(i[9]))
                                    pdf.drawString(545,x,str(crc)+" "+str(i[11]))
                                
                              elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                                    pdf.drawString(95,x,str(i[3]))
                                    pdf.drawString(165,x,str(i[4]))
                                    pdf.drawString(295,x,str(i[5]))
                                    pdf.drawString(380,x,str(i[15])) 
                                    pdf.drawString(475,x,str(i[13]))
                                    pdf.drawString(510,x,str(i[9])+" "+str(crc))
                                    pdf.drawString(545,x,str(i[11])+" "+str(crc))
                                        
                              else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Product_And_Services_Report.pdf",None,".",0)
          else:
              pass
      elif rpcheckvar1_psl.get()==0 and rpcheckvar2_psl.get()==0:
          pass
      

  def pr_exp_prl():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      rth=prlfilter.get()
      if rpcheckvar1_pl.get()==1 and rpcheckvar2_pl.get()==1:
          if rth=="All product and Services ":
              pdf = canvas.Canvas("reports/Price_List.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(492,760, "Price List")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15
                        #   else:
                  
                        #       pdf.drawString(28,x,str(i[0]))
                              
                              
                        #       pdf.drawString(145,x,str(i[4]))
                        #       pdf.drawString(373,x,str(i[5]))
                              
                        #       pdf.drawString(515,x,str(i[7]))
                          


              pdf.save()
              win32api.ShellExecute(0,"","reports\Price_List.pdf",None,".",0)
          elif rth=="All products":
              pdf = canvas.Canvas("reports/Price_List.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Products"'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Price_List.pdf",None,".",0)
          elif rth=="All Service":
              pdf = canvas.Canvas("reports/Price_List.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Service"'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Price_List.pdf",None,".",0)
          elif rth=="Default":
              pdf = canvas.Canvas("reports/Price_List.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Default"'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15

              pdf.save()
              win32api.ShellExecute(0,"","reports\Price_List.pdf",None,".",0)
          else:
              pass
      elif rpcheckvar1_pl.get()==1 and rpcheckvar2_pl.get()==0:
          if rth=="All product and Services ":
              pdf = canvas.Canvas("reports/Price_List.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where stock>stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Price_List.pdf",None,".",0)
          elif rth=="All products":
              pdf = canvas.Canvas("reports/Price_List.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Products" and stock>stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15

              pdf.save()
              win32api.ShellExecute(0,"","reports\Price_List.pdf",None,".",0)
          elif rth=="All Service":
              pdf = canvas.Canvas("reports/Price_List.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Service" and stock>stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Price_List.pdf",None,".",0)
          elif rth=="Default":
              pdf = canvas.Canvas("reports/Price_List.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Default" and stock>stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15

              pdf.save()
              win32api.ShellExecute(0,"","reports\Price_List.pdf",None,".",0)
          else:
              pass
      elif rpcheckvar1_pl.get()==0 and rpcheckvar2_pl.get()==1:
          if rth=="All product and Services ":
              pdf = canvas.Canvas("reports/Price_List.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Price_List.pdf",None,".",0)
          elif rth=="All products":
              pdf = canvas.Canvas("reports/Price_List.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Products" and stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15

              pdf.save()
              win32api.ShellExecute(0,"","reports\Price_List.pdf",None,".",0)
          elif rth=="All Service":
              pdf = canvas.Canvas("reports/Price_List.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Service" and stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Price_List.pdf",None,".",0)
          elif rth=="Default":
              pdf = canvas.Canvas("reports/Price_List.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product And Services Report")
              

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")


              pdf.drawString(28,733,"Product ID               Product/ Service Name                                  Description                        Unit Price          ")

              count=0
              sql_inv_dt='SELECT * FROM productservice where category="Default" and stock<stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                          if x==47 or x==50:
                            pdf.showPage()
                            x=750
                          else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+str(i[7]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(crc)+" "+str(i[7]))
                    
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                              
                              
                                    pdf.drawString(145,x,str(i[4]))
                                    pdf.drawString(373,x,str(i[5]))
                                    
                                    pdf.drawString(515,x,str(i[7])+" "+str(crc))
                    
                            else:
                                pass
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Price_List.pdf",None,".",0)
          else:
              pass
      elif rpcheckvar1_pl.get()==0 and rpcheckvar2_pl.get()==0:
          pass
      else:
          pass
      
      


  def pr_exp_plsr():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch


      if rpcheckvar1_plr.get()==1 and rpcheckvar2_plr.get()==1:
              pdf = canvas.Canvas("reports/Product_Low_Stock_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product Low Stock Report")
                  

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")
              
              pdf.drawString(28,733,"Product ID            Category           Product Name       Warehouse        Low Stock Limit        Stock    ")
              
          
          
              count=0
              sql_inv_dt='SELECT * FROM productservice WHERE stock < stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              for i in tre:
                          if x==47 or x==50:
                              pdf.showPage()
                              x=750
                          else:
                              pdf.drawString(28,x,str(i[0]))
                              
                              pdf.drawString(128,x,str(i[3]))
                              pdf.drawString(215,x,str(i[4]))
                              pdf.drawString(315,x,str(i[15]))
                              pdf.drawString(405,x,str(i[14])) 
                              pdf.drawString(515,x,str(i[13]))
                          
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Product_Low_Stock_Report.pdf",None,".",0)
      elif rpcheckvar1_plr.get()==1 and rpcheckvar2_plr.get()==0:
              pdf = canvas.Canvas("reports/Product_Low_Stock_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product Low Stock Report")
                  

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")
              
              pdf.drawString(28,733,"Product ID            Category           Product Name       Warehouse        Low Stock Limit        Stock    ")
              
          
          
              count=0
              sql_inv_dt='SELECT * FROM productservice WHERE stock > stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              for i in tre:
                          pdf.drawString(28,x,str(i[0]))
                          
                          pdf.drawString(128,x,str(i[3]))
                          pdf.drawString(215,x,str(i[4]))
                          pdf.drawString(315,x,str(i[15]))
                          pdf.drawString(405,x,str(i[14])) 
                          pdf.drawString(515,x,str(i[13]))
                      
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Product_Low_Stock_Report.pdf",None,".",0)
      elif rpcheckvar1_plr.get()==0 and rpcheckvar2_plr.get()==1:
              pdf = canvas.Canvas("reports/Product_Low_Stock_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              pdf.drawString(415,760, "Product Low Stock Report")
                  

              pdf.drawString(28,750,"__________________________________________________________________________________")
              pdf.drawString(28,730,"__________________________________________________________________________________")
              
              pdf.drawString(28,733,"Product ID            Category           Product Name       Warehouse        Low Stock Limit        Stock    ")
              
          
          
              count=0
              sql_inv_dt='SELECT * FROM productservice WHERE stock < stocklimit'
          
              fbcursor.execute(sql_inv_dt)
              tre=fbcursor.fetchall()
              x=705
              for i in tre:
                          pdf.drawString(28,x,str(i[0]))
                          
                          pdf.drawString(128,x,str(i[3]))
                          pdf.drawString(215,x,str(i[4]))
                          pdf.drawString(315,x,str(i[15]))
                          pdf.drawString(405,x,str(i[14])) 
                          pdf.drawString(515,x,str(i[13]))
                      
                          count += 1
                          x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Product_Low_Stock_Report.pdf",None,".",0)
      else:
              pass

  ######## 

  def pr_exp_tri():   
      
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      if rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==0:
          pass
      elif rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==0:
              pdf = canvas.Canvas("reports/Tax_report_Invoice.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              
          
              vg=len(htg)
              if vg>0:
                        pdf.drawString(30,752,htg[0])
                        
                        if vg>1:
                            pdf.drawString(30,738,htg[1])
                            
                            if vg>2:
                                pdf.drawString(30,725,htg[2])
                            
                                if vg>3:
                                    pdf.drawString(30,712,htg[3])
                                    
                                else:
                                    pass
                            else:
                                pass
                        else:
                            pass
                        
              else:
                        pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and 	invoicetot="0"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Tax_report_Invoice.pdf",None,".",0)
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==1:
              pdf = canvas.Canvas("reports/Tax_report_Invoice.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              vg=len(htg)
          
              if vg>0:
                        pdf.drawString(30,752,htg[0])
                        
                        if vg>1:
                            pdf.drawString(30,738,htg[1])
                            
                            if vg>2:
                                pdf.drawString(30,725,htg[2])
                            
                                if vg>3:
                                    pdf.drawString(30,712,htg[3])
                                    
                                else:
                                    pass
                            else:
                                pass
                        else:
                            pass
                        
              else:
                        pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or balance="0"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Tax_report_Invoice.pdf",None,".",0)
      elif rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==1:
              pdf = canvas.Canvas("reports/Tax_report_Invoice.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              vg=len(htg)
          
              if vg>0:
                        pdf.drawString(30,752,htg[0])
                        
                        if vg>1:
                            pdf.drawString(30,738,htg[1])
                            
                            if vg>2:
                                pdf.drawString(30,725,htg[2])
                            
                                if vg>3:
                                    pdf.drawString(30,712,htg[3])
                                    
                                else:
                                    pass
                            else:
                                pass
                        else:
                            pass
                        
              else:
                        pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Tax_report_Invoice.pdf",None,".",0)
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==0:
              pdf = canvas.Canvas("reports/Tax_report_Invoice.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              vg=len(htg)
          
              if vg>0:
                        pdf.drawString(30,752,htg[0])
                        
                        if vg>1:
                            pdf.drawString(30,738,htg[1])
                            
                            if vg>2:
                                pdf.drawString(30,725,htg[2])
                            
                                if vg>3:
                                    pdf.drawString(30,712,htg[3])
                                    
                                else:
                                    pass
                            else:
                                pass
                        else:
                            pass
                        
              else:
                        pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid != "0"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Tax_report_Invoice.pdf",None,".",0)
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==1:
              pdf = canvas.Canvas("reports/Tax_report_Invoice.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              vg=len(htg)
          
              if vg>0:
                        pdf.drawString(30,752,htg[0])
                        
                        if vg>1:
                            pdf.drawString(30,738,htg[1])
                            
                            if vg>2:
                                pdf.drawString(30,725,htg[2])
                            
                                if vg>3:
                                    pdf.drawString(30,712,htg[3])
                                    
                                else:
                                    pass
                            else:
                                pass
                        else:
                            pass
                        
              else:
                        pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Tax_report_Invoice.pdf",None,".",0)
      elif rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==1:
              pdf = canvas.Canvas("reports/Tax_report_Invoice.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              vg=len(htg)
          
              if vg>0:
                        pdf.drawString(30,752,htg[0])
                        
                        if vg>1:
                            pdf.drawString(30,738,htg[1])
                            
                            if vg>2:
                                pdf.drawString(30,725,htg[2])
                            
                                if vg>3:
                                    pdf.drawString(30,712,htg[3])
                                    
                                else:
                                    pass
                            else:
                                pass
                        else:
                            pass
                        
              else:
                        pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or invoicetot="0"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Tax_report_Invoice.pdf",None,".",0)
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==0:
              pdf = canvas.Canvas("reports/Tax_report_Invoice.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              vg=len(htg)
          
              if vg>0:
                        pdf.drawString(30,752,htg[0])
                        
                        if vg>1:
                            pdf.drawString(30,738,htg[1])
                            
                            if vg>2:
                                pdf.drawString(30,725,htg[2])
                            
                                if vg>3:
                                    pdf.drawString(30,712,htg[3])
                                    
                                else:
                                    pass
                            else:
                                pass
                        else:
                            pass
                        
              else:
                        pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid is not null or invoicetot="0"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15

              pdf.save()
              win32api.ShellExecute(0,"","reports\Tax_report_Invoice.pdf",None,".",0)
      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==1:
              pdf = canvas.Canvas("reports/Tax_report_Invoice.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',10)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              vg=len(htg)
          
              if vg>0:
                        pdf.drawString(30,752,htg[0])
                        
                        if vg>1:
                            pdf.drawString(30,738,htg[1])
                            
                            if vg>2:
                                pdf.drawString(30,725,htg[2])
                            
                                if vg>3:
                                    pdf.drawString(30,712,htg[3])
                                    
                                else:
                                    pass
                            else:
                                pass
                        else:
                            pass
                        
              else:
                        pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(485,760, "Tax report(Invoice)")
              pdf.drawString(370,740, "Date From:"+trifrm.get()+"  Date To:"+trito.get())
              pdf.drawString(470,720,"Invoice Category: All")
              pdf.drawString(28,695,"_________________________________________________________________________________________________")
              pdf.drawString(28,675,"_________________________________________________________________________________________________")
              pdf.drawString(28,678,"Invoice No       Issue Date     Due Date                      Total Before TAX   TAX1         TAX2               Invoice Total       ")
              

              in_dat=trifrm1.get_date()
              cr=trito1.get_date()
              var_1=in_dat
              var_2=cr
          
              count=0
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s and totpaid="0" or balance!="0"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                        
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+str(crc))
                                    pdf.drawString(348,x,str(i[16])+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[37]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[16])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[36]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                          
                                    pdf.drawString(95,x,str(i[2]))
                                    pdf.drawString(150,x,str(i[3]))
                                    pdf.drawString(268,x,str(i[37])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[16])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[36])+" "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                            else:
                                pass
                        count += 1
                        x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Tax_report_Invoice.pdf",None,".",0)
      else:
          pass
      

  def pr_exp_tro():   
      
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      pdf = canvas.Canvas("reports/Tax_report_Orders.pdf", pagesize=letter)

      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      pdf.setFont('Helvetica',10)
      pdf.drawString(30,768, company[1])
      text=company[2]
      wraped_text="\n".join(wrap(text,30))
      htg=wraped_text.split('\n')
      vg=len(htg)
          
      if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
      else:
              pass
      pdf.drawString(30,700, "Sales tax reg No:"+company[4])
      pdf.drawString(488,760, "Tax report(Orders)")
      pdf.drawString(370,740, "Date From:"+trofrm.get()+"  Date To:"+troto.get())
      pdf.drawString(470,720,"Invoice Category: All")
      pdf.drawString(28,695,"_________________________________________________________________________________________________")
      pdf.drawString(28,675,"_________________________________________________________________________________________________")
      pdf.drawString(28,678,"Order No         Issue Date     Due Date                      Total Before TAX   TAX1         TAX2                Order Total       ")
      

      in_dat=trofrm1.get_date()
      cr=troto1.get_date()
      var_1=in_dat
      var_2=cr
    
      count=0
      sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
      inv_valuz=(var_1,var_2)
      fbcursor.execute(sql_inv_dt,inv_valuz)
      tre=fbcursor.fetchall()
      x=660
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
                        
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]
      for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                  
                                    pdf.drawString(95,x,str(i[1]))
                                    pdf.drawString(150,x,str(i[2]))
                                    pdf.drawString(268,x,str(crc)+str(i[28]))
                                    pdf.drawString(348,x,str(crc)+str(i[14])) 
                                    pdf.drawString(400,x,str(crc)+str(i[29]))
                                    pdf.drawString(465,x,str(crc)+str(i[8]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                  
                                    pdf.drawString(95,x,str(i[1]))
                                    pdf.drawString(150,x,str(i[2]))
                                    pdf.drawString(268,x,str(i[28])+str(crc))
                                    pdf.drawString(348,x,str(i[14])+str(crc)) 
                                    pdf.drawString(400,x,str(i[29])+str(crc))
                                    pdf.drawString(465,x,str(i[8])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                  
                                    pdf.drawString(95,x,str(i[1]))
                                    pdf.drawString(150,x,str(i[2]))
                                    pdf.drawString(268,x,str(crc)+" "+str(i[28]))
                                    pdf.drawString(348,x,str(crc)+" "+str(i[14])) 
                                    pdf.drawString(400,x,str(crc)+" "+str(i[29]))
                                    pdf.drawString(465,x,str(crc)+" "+str(i[8]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                  
                                    pdf.drawString(95,x,str(i[1]))
                                    pdf.drawString(150,x,str(i[2]))
                                    pdf.drawString(268,x,str(i[28])+" "+str(crc))
                                    pdf.drawString(348,x,str(i[14])+" "+str(crc)) 
                                    pdf.drawString(400,x,str(i[29])+ " "+str(crc))
                                    pdf.drawString(465,x,str(i[8])+" "+str(crc))
                  
                            else:
                                pass
                        count += 1
                        x-=15
            #   else:
                          
            #       pdf.drawString(28,x,str(i[0]))
                  
            #       pdf.drawString(95,x,str(i[1]))
            #       pdf.drawString(150,x,str(i[2]))
            #       pdf.drawString(268,x,str(i[28]))
            #       pdf.drawString(348,x,str(i[14])) 
            #       pdf.drawString(400,x,str(i[29]))
            #       pdf.drawString(465,x,str(i[8]))
                  
              


      pdf.save()
      win32api.ShellExecute(0,"","reports\Tax_report_Orders.pdf",None,".",0)


  def pr_exp_srgd():   
      
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      rth=srgdfilter.get()
    
      if rth==rth:
          pdf = canvas.Canvas("reports/Sales_Report_Group_By_Date.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',10)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          vg=len(htg)
                
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(442,760, "Sales Report(Group By Date)")
          pdf.drawString(365,740, "Date From:"+srgdfrm.get()+"  Date To:"+srgdto.get())
          pdf.drawString(470,720,"Invoice Category: All")
          pdf.drawString(28,695,"_________________________________________________________________________________________________")
          pdf.drawString(28,675,"_________________________________________________________________________________________________")
          pdf.drawString(28,678,"Date                              Quantity                          Cost                                            Income                         profit                ")
      
          lkts=srgdfilter.get()
      
          in_dat=srgd_frm.get_date()
          cr=srgd_to.get_date()
          var_1=in_dat
          var_2=cr
      
          count=0
          sql_inv='SELECT * FROM productservice Where name=%s'
                  # inv_valuz=(var1,var2)
                  
          inv=(lkts,)
          fbcursor.execute(sql_inv, inv)
          tre=fbcursor.fetchall()
          
          lkt=srgdfilter.get()
          sel_inv_dt1='SELECT * FROM invoice Where invodate between %s and %s and Productserviceid=(SELECT Productserviceid from productservice Where name=%s)'
          inv_valuz=(var_1, var_2,lkt,)
          fbcursor.execute(sel_inv_dt1, inv_valuz)
          tre1=fbcursor.fetchall()

          
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
                            
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]
          for i in tre1:
              for j in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    k=int(int(j[9])*int(i[38]))
                                    rt=int(i[8])
                                    l=rt-k
                                    pdf.drawString(28,x,str(i[2]))
                                    
                                    pdf.drawString(138,x,str(i[38]))
                                    pdf.drawString(245,x,str(crc)+str(k))
                                    pdf.drawString(385,x,str(crc)+str(i[8]))
                                    pdf.drawString(485,x,str(crc)+str(l)) 
                    
                                
                            elif ps_cr=="after amount":
                                    k=int(int(j[9])*int(i[38]))
                                    rt=int(i[8])
                                    l=rt-k
                                    pdf.drawString(28,x,str(i[2]))
                                    
                                    pdf.drawString(138,x,str(i[38]))
                                    pdf.drawString(245,x,str(k)+str(crc))
                                    pdf.drawString(385,x,str(i[8])+str(crc))
                                    pdf.drawString(485,x,str(l)+str(crc)) 
                    
                            elif ps_cr=="before amount with space":
                                    k=int(int(j[9])*int(i[38]))
                                    rt=int(i[8])
                                    l=rt-k
                                    pdf.drawString(28,x,str(i[2]))
                                    
                                    pdf.drawString(138,x,str(i[38]))
                                    pdf.drawString(245,x,str(crc)+" "+str(k))
                                    pdf.drawString(385,x,str(crc)+" "+str(i[8]))
                                    pdf.drawString(485,x,str(crc)+" "+str(l)) 
                                
                            elif ps_cr=="after amount with space":
                                    k=int(int(j[9])*int(i[38]))
                                    rt=int(i[8])
                                    l=rt-k
                                    pdf.drawString(28,x,str(i[2]))
                                    
                                    pdf.drawString(138,x,str(i[38]))
                                    pdf.drawString(245,x,str(k)+" "+str(crc))
                                    pdf.drawString(385,x,str(i[8])+" "+str(crc))
                                    pdf.drawString(485,x,str(l)+" "+str(crc)) 
                            else:
                                pass
                        count += 1
                        x-=15
        
          pdf.save()
          win32api.ShellExecute(0,"","reports\Sales_Report_Group_By_Date.pdf",None,".",0)
      else:
          pass

  def pr_exp_ird():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      pdf = canvas.Canvas("reports/Invoice_Report_Detailed.pdf", pagesize=letter)

      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      pdf.setFont('Helvetica',12)
      pdf.drawString(30,768, company[1])
      text=company[2]
      wraped_text="\n".join(wrap(text,30))
      htg=wraped_text.split('\n')
      vg=len(htg)
                
      if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
      else:
              pass
      pdf.drawString(30,700, "Sales tax reg No:"+company[4])
      pdf.drawString(450,760, "Invoice Report(Detailed)")
      
      pdf.drawString(335,740, "Date From:"+irdfrm.get()+"  Date To:"+irdto.get())
      pdf.drawString(460,720,"Invoice Category: All")
      pdf.drawString(28,695,"__________________________________________________________________________________")
      pdf.drawString(28,675,"__________________________________________________________________________________")
      
      pdf.drawString(28,678,"Invoice No          Date           Customer                  Invoice Total                       Paid                 Balance      ")
      
      
      in_dat=irdfrm1.get_date()
      cr=irdfrm2.get_date()
      var_1=in_dat
      var_2=cr
    
    
      count=0
      sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
      inv_valuz=(var_1,var_2)
      fbcursor.execute(sql_inv_dt,inv_valuz)
      tre=fbcursor.fetchall()
      x=660
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
                            
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]
      for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(108,x,str(i[2]))
                                    pdf.drawString(180,x,str(i[29]))
                                    pdf.drawString(300,x,str(crc)+str(i[8]))
                                    pdf.drawString(435,x,str(crc)+str(i[9])) 
                                    pdf.drawString(520,x,str(crc)+str(i[10]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(108,x,str(i[2]))
                                    pdf.drawString(180,x,str(i[29]))
                                    pdf.drawString(300,x,str(i[8])+str(crc))
                                    pdf.drawString(435,x,str(i[9])+str(crc)) 
                                    pdf.drawString(520,x,str(i[10])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(108,x,str(i[2]))
                                    pdf.drawString(180,x,str(i[29]))
                                    pdf.drawString(300,x,str(crc)+" "+str(i[8]))
                                    pdf.drawString(435,x,str(crc)+" "+str(i[9])) 
                                    pdf.drawString(520,x,str(crc)+" "+str(i[10]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(108,x,str(i[2]))
                                    pdf.drawString(180,x,str(i[29]))
                                    pdf.drawString(300,x,str(i[8])+" "+str(crc))
                                    pdf.drawString(435,x,str(i[9])+" "+str(crc)) 
                                    pdf.drawString(520,x,str(i[10])+" "+str(crc))
                  
                            else:
                                pass 
                        count += 1
                        x-=15 
            #   else:
                          
                #   pdf.drawString(28,x,str(i[1]))
                  
                #   pdf.drawString(108,x,str(i[2]))
                #   pdf.drawString(180,x,str(i[29]))
                #   pdf.drawString(300,x,str(i[8]))
                #   pdf.drawString(435,x,str(i[9])) 
                #   pdf.drawString(520,x,str(i[10]))
                
              


      pdf.save()
      win32api.ShellExecute(0,"","reports\Invoice_Report_Detailed.pdf",None,".",0)


  def pr_exp_dir():


      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      pdf = canvas.Canvas("reports/Daily_Invoice_Report.pdf", pagesize=letter)

      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      pdf.setFont('Helvetica',12)
      pdf.drawString(30,768, company[1])
      text=company[2]
      wraped_text="\n".join(wrap(text,30))
      htg=wraped_text.split('\n')
      vg=len(htg)
                
      if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
      else:
              pass
      pdf.drawString(30,700, "Sales tax reg No:"+company[4])
      pdf.drawString(460,760, "Daily Invoice Report")
      
      pdf.drawString(445,740, "Date From:"+dirdate.get())
      pdf.drawString(460,720,"Invoice Category: All")
      pdf.drawString(28,695,"__________________________________________________________________________________")
      pdf.drawString(28,675,"__________________________________________________________________________________")
      
      pdf.drawString(28,678,"Invoice No          Date           Customer                  Invoice Total                       Paid                 Balance      ")
      
      
      in_dat=dir_frm.get_date()
    
      var_1=in_dat
    
    
    
      count=0
      sql_inv_dt='SELECT * FROM invoice WHERE invodate=%s'
      inv_valuz=(str(var_1),)
      fbcursor.execute(sql_inv_dt,inv_valuz)
      tre=fbcursor.fetchall()
      x=655
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
                            
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      ps_cr=post_rp[0]
      for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(100,x,str(i[2]))
                                    pdf.drawString(178,x,str(i[29]))
                                    pdf.drawString(295,x,str(crc)+str(i[8]))
                                    pdf.drawString(428,x,str(crc)+str(i[9])) 
                                    pdf.drawString(515,x,str(crc)+str(i[10]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(100,x,str(i[2]))
                                    pdf.drawString(178,x,str(i[29]))
                                    pdf.drawString(295,x,str(i[8])+str(crc))
                                    pdf.drawString(428,x,str(i[9])+str(crc)) 
                                    pdf.drawString(515,x,str(i[10])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(100,x,str(i[2]))
                                    pdf.drawString(178,x,str(i[29]))
                                    pdf.drawString(295,x,str(crc)+" "+str(i[8]))
                                    pdf.drawString(428,x,str(crc)+" "+str(i[9])) 
                                    pdf.drawString(515,x,str(crc)+" "+str(i[10]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[1]))
                  
                                    pdf.drawString(100,x,str(i[2]))
                                    pdf.drawString(178,x,str(i[29]))
                                    pdf.drawString(295,x,str(i[8])+" "+str(crc))
                                    pdf.drawString(428,x,str(i[9])+" "+str(crc)) 
                                    pdf.drawString(515,x,str(i[10])+" "+str(crc))
                  
                            else:
                                pass  
                        count += 1
                        x-=15   
            #   else:
                      
            #       pdf.drawString(28,x,str(i[1]))
                  
            #       pdf.drawString(100,x,str(i[2]))
            #       pdf.drawString(178,x,str(i[29]))
            #       pdf.drawString(295,x,str(i[8]))
            #       pdf.drawString(428,x,str(i[9])) 
            #       pdf.drawString(515,x,str(i[10]))
                
              
      


      pdf.save()
      win32api.ShellExecute(0,"","reports\Daily_Invoice_Report.pdf",None,".",0)


  def pr_exp_por():
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch
      if rpcheckvar1_por.get()==1 and rpcheckvar2_por.get()==0:
          pdf = canvas.Canvas("reports/Parchase_Order_Report.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          vg=len(htg)
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(450,760, "Parchase Order Report")
          
          pdf.drawString(345,740, "Date From:"+porfrm.get()+"  Date To:"+porto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                  Date           Due Date                  Vendor                       Status                    P.Order Total        ")
          

          
          in_dat=porfrm1.get_date()
          cr=porto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM porder where porderdate between %s and %s and status="Complete"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=660
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
                                
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]
          for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(crc)+str(i[10]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(i[10])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(crc)+" "+str(i[10]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(i[10])+" "+str(crc))
                  
                            else:
                                pass
                        count += 1
                        x-=15  


          pdf.save()
          win32api.ShellExecute(0,"","reports\Parchase_Order_Report.pdf",None,".",0)
      elif rpcheckvar1_por.get()==0 and rpcheckvar2_por.get()==1:
          pdf = canvas.Canvas("reports/Parchase_Order_Report.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          vg=len(htg)
                
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(450,760, "Parchase Order Report")
          
          pdf.drawString(345,740, "Date From:"+porfrm.get()+"  Date To:"+porto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                  Date           Due Date                  Vendor                       Status                    P.Order Total        ")
          

          
          in_dat=porfrm1.get_date()
          cr=porto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM porder where porderdate between %s and %s and status="Draft"'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=655
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
                                
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]
          for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(crc)+str(i[10]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(i[10])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(crc)+" "+str(i[10]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(i[10])+" "+str(crc))
                  
                            else:
                                pass
                        count += 1
                        x-=15  


          pdf.save()
          win32api.ShellExecute(0,"","reports\Parchase_Order_Report.pdf",None,".",0)
      elif rpcheckvar1_por.get()==1 and rpcheckvar2_por.get()==1:
      
          pdf = canvas.Canvas("reports/Parchase_Order_Report.pdf", pagesize=letter)

          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()
          
          pdf.setFont('Helvetica',12)
          pdf.drawString(30,768, company[1])
          text=company[2]
          wraped_text="\n".join(wrap(text,30))
          htg=wraped_text.split('\n')
          vg=len(htg)
                
          if vg>0:
              pdf.drawString(30,752,htg[0])
              print("1")
              if vg>1:
                pdf.drawString(30,738,htg[1])
                print("2")
                if vg>2:
                    pdf.drawString(30,725,htg[2])
                    print("3")
                    if vg>3:
                        pdf.drawString(30,712,htg[3])
                        print("4")
                    else:
                        pass
                else:
                    pass
              else:
                  pass
              
          else:
              pass
          pdf.drawString(30,700, "Sales tax reg No:"+company[4])
          pdf.drawString(450,760, "Parchase Order Report")
          
          pdf.drawString(345,740, "Date From:"+porfrm.get()+"  Date To:"+porto.get())
          pdf.drawString(460,720,"Invoice Category: All")
          pdf.drawString(28,695,"__________________________________________________________________________________")
          pdf.drawString(28,675,"__________________________________________________________________________________")
          
          pdf.drawString(28,678,"No                  Date           Due Date                  Vendor                       Status                    P.Order Total        ")
          

          
          in_dat=porfrm1.get_date()
          cr=porto1.get_date()
          var_1=in_dat
          var_2=cr
      
      
          count=0
          sql_inv_dt='SELECT * FROM porder where porderdate between %s and %s'
          inv_valuz=(var_1,var_2)
          fbcursor.execute(sql_inv_dt,inv_valuz)
          tre=fbcursor.fetchall()
          x=655
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
                                
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          ps_cr=post_rp[0]
          for i in tre:
                        if x==44 or x==50:
                            pdf.showPage()
                            x=750
                        else:
                            if ps_cr=="before amount":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(crc)+str(i[10]))
                    
                                
                            elif ps_cr=="after amount":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(i[10])+str(crc))
                    
                            elif ps_cr=="before amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(crc)+" "+str(i[10]))
                                
                            elif ps_cr=="after amount with space":
                                    pdf.drawString(28,x,str(i[0]))
                      
                                    pdf.drawString(88,x,str(i[2]))
                                    pdf.drawString(160,x,str(i[3]))
                                    pdf.drawString(280,x,str(i[26]))
                                    pdf.drawString(395,x,str(i[5])) 
                                    pdf.drawString(495,x,str(i[10])+" "+str(crc))
                  
                            else:
                                pass
                        count += 1
                        x-=15  


          pdf.save()
          win32api.ShellExecute(0,"","reports\Parchase_Order_Report.pdf",None,".",0)

  def pr_exp_exp():
      rth=expfilter.get()
      
      from reportlab.pdfgen import canvas
      # from tkdocviewer import *
      from reportlab.lib import colors
      from reportlab.pdfbase.ttfonts import TTFont
      from reportlab.pdfbase import pdfmetrics
      from reportlab.platypus import SimpleDocTemplate, Table, TableStyle
      from reportlab.lib.pagesizes import letter, inch

      if rpcheckvar1_exp.get()==0 and rpcheckvar2_exp.get()==1:
          if rth=="All":
              pdf = canvas.Canvas("reports/Expenses_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(475,760, "Expenses Report")
              
              pdf.drawString(335,740, "Date From:"+expfrm.get()+"  Date To:"+expto.get())
              pdf.drawString(460,720,"Invoice Category: All")
              pdf.drawString(28,695,"__________________________________________________________________________________")
              pdf.drawString(28,675,"__________________________________________________________________________________")
              
              pdf.drawString(28,678,"Date            Customer                        Vendor                  Invoice           Rebill.Amount              Amount        ")
              

              
              in_dat=exp_frm.get_date()
              cr=exp_to.get_date()
              var_1=in_dat
              var_2=cr
          
          
              count=0
              sql_inv_dt='SELECT * FROM expenses where date between %s and %s and rebillable="Yes"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                    
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                            if x==44 or x==50:
                                pdf.showPage()
                                x=750
                            else:
                                if ps_cr=="before amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+str(i[3]))
                        
                                    
                                elif ps_cr=="after amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+str(crc))
                        
                                elif ps_cr=="before amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+" "+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+" "+str(i[3]))
                                    
                                elif ps_cr=="after amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+" "+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+" "+str(crc))
                    
                                else:
                                    pass
                            count += 1
                            x-=15
                    #   else:
                          
                    
                    #       pdf.drawString(28,x,str(i[4]))
                          
                    #       pdf.drawString(105,x,str(i[10]))
                    #       pdf.drawString(220,x,str(i[5]))
                    #       pdf.drawString(330,x,str(i[14]))
                    #       pdf.drawString(405,x,str(i[16])) 
                    #       pdf.drawString(520,x,str(i[3]))
                      
                      


              pdf.save()
              win32api.ShellExecute(0,"","reports\Expenses_Report.pdf",None,".",0)

          elif rth=="Internal":
              pdf = canvas.Canvas("reports/Expenses_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
                
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(475,760, "Expenses Report")
              
              pdf.drawString(335,740, "Date From:"+expfrm.get()+"  Date To:"+expto.get())
              pdf.drawString(460,720,"Invoice Category: All")
              pdf.drawString(28,695,"__________________________________________________________________________________")
              pdf.drawString(28,675,"__________________________________________________________________________________")
              
              pdf.drawString(28,678,"Date            Customer                        Vendor                  Invoice           Rebill.Amount              Amount        ")
              

              
              in_dat=exp_frm.get_date()
              cr=exp_to.get_date()
              var_1=in_dat
              var_2=cr
          
          
              count=0
              sql_inv_dt='SELECT * FROM expenses where date between %s and %s and customer="Internal" and rebillable="Yes"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                    
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                            if x==44 or x==50:
                                pdf.showPage()
                                x=750
                            else:
                                if ps_cr=="before amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+str(i[3]))
                        
                                    
                                elif ps_cr=="after amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+str(crc))
                        
                                elif ps_cr=="before amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+" "+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+" "+str(i[3]))
                                    
                                elif ps_cr=="after amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+" "+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+" "+str(crc))
                    
                                else:
                                    pass
                            count += 1
                            x-=15

              pdf.save()
              win32api.ShellExecute(0,"","reports\Expenses_Report.pdf",None,".",0)
          else:
              pass
      elif rpcheckvar1_exp.get()==1 and rpcheckvar2_exp.get()==0:
          if rth=="All":
              pdf = canvas.Canvas("reports/Expenses_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
                
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(475,760, "Expenses Report")
              
              pdf.drawString(335,740, "Date From:"+expfrm.get()+"  Date To:"+expto.get())
              pdf.drawString(460,720,"Invoice Category: All")
              pdf.drawString(28,695,"__________________________________________________________________________________")
              pdf.drawString(28,675,"__________________________________________________________________________________")
              
              pdf.drawString(28,678,"Date            Customer                        Vendor                  Invoice           Rebill.Amount              Amount        ")
              

              
              in_dat=exp_frm.get_date()
              cr=exp_to.get_date()
              var_1=in_dat
              var_2=cr
          
          
              count=0
              sql_inv_dt='SELECT * FROM expenses where date between %s and %s and invoiced="Yes"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                    
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                            if x==44 or x==50:
                                pdf.showPage()
                                x=750
                            else:
                                if ps_cr=="before amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+str(i[3]))
                        
                                    
                                elif ps_cr=="after amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+str(crc))
                        
                                elif ps_cr=="before amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+" "+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+" "+str(i[3]))
                                    
                                elif ps_cr=="after amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+" "+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+" "+str(crc))
                    
                                else:
                                    pass
                            count += 1
                            x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Expenses_Report.pdf",None,".",0)

          elif rth=="Internal":
              pdf = canvas.Canvas("reports/Expenses_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
                
              
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(475,760, "Expenses Report")
              
              pdf.drawString(335,740, "Date From:"+expfrm.get()+"  Date To:"+expto.get())
              pdf.drawString(460,720,"Invoice Category: All")
              pdf.drawString(28,695,"__________________________________________________________________________________")
              pdf.drawString(28,675,"__________________________________________________________________________________")
              
              pdf.drawString(28,678,"Date            Customer                        Vendor                  Invoice           Rebill.Amount              Amount        ")
              

              
              in_dat=exp_frm.get_date()
              cr=exp_to.get_date()
              var_1=in_dat
              var_2=cr
          
          
              count=0
              sql_inv_dt='SELECT * FROM expenses where date between %s and %s and customer="Internal" and invoiced="Yes"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                    
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                            if x==44 or x==50:
                                pdf.showPage()
                                x=750
                            else:
                                if ps_cr=="before amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+str(i[3]))
                        
                                    
                                elif ps_cr=="after amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+str(crc))
                        
                                elif ps_cr=="before amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+" "+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+" "+str(i[3]))
                                    
                                elif ps_cr=="after amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+" "+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+" "+str(crc))
                    
                                else:
                                    pass
                            count += 1
                            x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Expenses_Report.pdf",None,".",0)
          else:
              pass
      elif rpcheckvar1_exp.get()==0 and rpcheckvar2_exp.get()==0:
          pass
      elif rpcheckvar1_exp.get()==1 and rpcheckvar2_exp.get()==1: 
      

          if rth=="All":
              pdf = canvas.Canvas("reports/Expenses_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,768, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
                
              vg=len(htg)
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(475,760, "Expenses Report")
              
              pdf.drawString(335,740, "Date From:"+expfrm.get()+"  Date To:"+expto.get())
              pdf.drawString(460,720,"Invoice Category: All")
              pdf.drawString(28,695,"__________________________________________________________________________________")
              pdf.drawString(28,675,"__________________________________________________________________________________")
              
              pdf.drawString(28,678,"Date            Customer                        Vendor                  Invoice           Rebill.Amount              Amount        ")
              

              
              in_dat=exp_frm.get_date()
              cr=exp_to.get_date()
              var_1=in_dat
              var_2=cr
          
          
              count=0
              sql_inv_dt='SELECT * FROM expenses where date between %s and %s'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                    
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                            if x==44 or x==50:
                                pdf.showPage()
                                x=750
                            else:
                                if ps_cr=="before amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+str(i[3]))
                        
                                    
                                elif ps_cr=="after amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+str(crc))
                        
                                elif ps_cr=="before amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+" "+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+" "+str(i[3]))
                                    
                                elif ps_cr=="after amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+" "+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+" "+str(crc))
                    
                                else:
                                    pass
                            count += 1
                            x-=15

              pdf.save()
              win32api.ShellExecute(0,"","reports\Expenses_Report.pdf",None,".",0)

          elif rth=="Internal":
              pdf = canvas.Canvas("reports/Expenses_Report.pdf", pagesize=letter)

              sql_company = "SELECT * from company"
              fbcursor.execute(sql_company)
              company= fbcursor.fetchone()
              
              pdf.setFont('Helvetica',12)
              pdf.drawString(30,760, company[1])
              text=company[2]
              wraped_text="\n".join(wrap(text,30))
              htg=wraped_text.split('\n')
                
              if vg>0:
                    pdf.drawString(30,752,htg[0])
                    print("1")
                    if vg>1:
                        pdf.drawString(30,738,htg[1])
                        print("2")
                        if vg>2:
                            pdf.drawString(30,725,htg[2])
                            print("3")
                            if vg>3:
                                pdf.drawString(30,712,htg[3])
                                print("4")
                            else:
                                pass
                        else:
                            pass
                    else:
                        pass
                    
              else:
                    pass
              pdf.drawString(30,700, "Sales tax reg No:"+company[4])
              pdf.drawString(475,760, "Expenses Report")
              
              pdf.drawString(335,740, "Date From:"+expfrm.get()+"  Date To:"+expto.get())
              pdf.drawString(460,720,"Invoice Category: All")
              pdf.drawString(28,695,"__________________________________________________________________________________")
              pdf.drawString(28,675,"__________________________________________________________________________________")
              
              pdf.drawString(28,678,"Date            Customer                        Vendor                  Invoice           Rebill.Amount              Amount        ")
              

              
              in_dat=exp_frm.get_date()
              cr=exp_to.get_date()
              var_1=in_dat
              var_2=cr
          
          
              count=0
              sql_inv_dt='SELECT * FROM expenses where date between %s and %s and customer="Internal"'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              x=660
              sqlr= 'select currencysign from company'
              fbcursor.execute(sqlr)
              crncy=fbcursor.fetchone()
                                    
              crc=crncy[0]
              sqlrt= 'select currsignplace from company'
              fbcursor.execute(sqlrt)
              post_rp=fbcursor.fetchone()
              ps_cr=post_rp[0]
              for i in tre:
                            if x==44 or x==50:
                                pdf.showPage()
                                x=750
                            else:
                                if ps_cr=="before amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+str(i[3]))
                        
                                    
                                elif ps_cr=="after amount":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+str(crc))
                        
                                elif ps_cr=="before amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(crc)+" "+str(i[16])) 
                                        pdf.drawString(520,x,str(crc)+" "+str(i[3]))
                                    
                                elif ps_cr=="after amount with space":
                                        pdf.drawString(28,x,str(i[4]))
                            
                                        pdf.drawString(105,x,str(i[10]))
                                        pdf.drawString(220,x,str(i[5]))
                                        pdf.drawString(330,x,str(i[14]))
                                        pdf.drawString(405,x,str(i[16])+" "+str(crc)) 
                                        pdf.drawString(520,x,str(i[3])+" "+str(crc))
                    
                                else:
                                    pass
                            count += 1
                            x-=15


              pdf.save()
              win32api.ShellExecute(0,"","reports\Expenses_Report.pdf",None,".",0)
          else:
              pass

  #############print image

  def image_print():
      
      from PIL import ImageGrab
    #   x=root.winfo_rootx()+event.winfo_x()
    #   y=root.winfo_rooty()+event.winfo_y()
    #   x1=x+event.winfo_width()
    #   y1=y+event.winfo_height()
    #   thr=ImageGrab.grab().crop((x,182,x1,760)).save("reports/Screen_Chart.png")
      thr=ImageGrab.grab().crop((20,182,1360,760)).save("reports/Screen_Chart.png")
      win32api.ShellExecute(0,"","reports\Screen_Chart.png",None,".",0)    

  def image():
      from PIL import ImageGrab
      path = filedialog.asksaveasfilename(initialdir=os.getcwd,title="Save File",filetypes=[('PNG File', '*.png',)],
      defaultextension=".png")
    #   x=root.winfo_rootx()+widget.winfo_x()
    #   y=root.winfo_rooty()+widget.winfo_y()
    #   x1=x+widget.winfo_width()
    #   y1=y+widget.winfo_height()
      thr=ImageGrab.grab().crop((20,182,1360,760)).save(path)
    

  ##################################### (Report Preview)############################################################# 


  # emails ---------------------

  def rp_send_mails():

      rp_sender_email = "saijuinfox@gmail.com"    
      rp_sender_password = "8848937577" 

      rp_server = smtplib.SMTP('smtp.gmail.com', 587)
    
      rp_server.starttls()

      rp_server.login(rp_sender_email, rp_sender_password)

    
      rp_carbcopy_info = rp_carcopyem_address.get()
      

    
      rp_msg = MIMEMultipart()
      rp_msg['Subject'] = rp_email_subject.get() 
    
      rp_mail_content  = rp_mframe.get('1.0','end-1c') 
      rp_msg['From'] = rp_email_from.get()
      rp_msg['To'] = rp_email_address.get()
    
        
      rp_gettingimg=rp_lstfrm.get()
      rp_lst_data = rp_gettingimg[1:-1].split(',')


      rp_msg.attach(MIMEText(rp_mail_content, 'plain'))

      for i in rp_lst_data:
          if len(i.strip()[1:-1])>1:

              with open('images/'+ i.strip()[1:-1], "rb") as attachment:
    
                  rp_part = MIMEBase("application", "octet-stream")
                  rp_part.set_payload(attachment.read())

                  encoders.encode_base64(rp_part)
                  rp_part.add_header('Content-Disposition', "attachment; filename= %s" % 'images/'+ i.strip()[1:-1]) 

      
                  rp_msg.attach(rp_part)
        

      rp_server.sendmail(rp_email_from.get(),rp_email_address.get(),rp_msg.as_string())
      rp_server.sendmail(rp_email_from.get(), rp_carbcopy_info,rp_msg.as_string()) 

  def rp_empsfile_image(event):
            global rp_yawn
            for i in rp_htcodeframe.curselection():
              print("hloo",rp_htcodeframe.get(i))
              rp_yawn=rp_htcodeframe.get(i)        
              edit_window_img = Toplevel()
              edit_window_img.title("View Image")
              edit_window_img.geometry("700x500")
              image = Image.open("images/"+rp_yawn)
              resize_image = image.resize((700, 500))
              image = ImageTk.PhotoImage(resize_image)
              rp_psimage = Label(edit_window_img,image=image)
              rp_psimage.photo = image
              rp_psimage.pack()


  def op_file(event):
      win32api.ShellExecute(0,"",rp_filenamez,None,".",0)
      

  def rp_UploadAction(event=None):
        global rp_filenamez
        rp_filenamez = askopenfilename(filetypes=(('PDF', '*.pdf',),("png file ",'.png'),("jpg file", ".jpg"),  ("All files", "*.*"),))
        shutil.copyfile(rp_filenamez, os.getcwd()+'/images/'+rp_filenamez.split('/')[-1])
        rp_htcodeframe.insert(0, rp_filenamez.split('/')[-1])
        
      
  def rp_addemail_order():

          rp_emailnow = fbcursor.fetchone()
          rp_mailDetail=Toplevel()
          rp_mailDetail.title("Send E-mail")
          rp_mailDetail.geometry("1080x550")
          rp_mailDetail.resizable(False, False)

          style = ttk.Style()
          style.theme_use('default')
          style.configure('TNotebook.Tab', background="#999999", padding=5)
          rp_email_Notebook = ttk.Notebook(rp_mailDetail)
          rp_email_Frame = Frame(rp_email_Notebook, height=500, width=1080)
          rp_account_Frame = Frame(rp_email_Notebook, height=550, width=1080)
          rp_email_Notebook.add(rp_email_Frame, text="E-mail")
          rp_email_Notebook.add(rp_account_Frame, text="Account")
          rp_email_Notebook.place(x=0, y=0)

          rp_messagelbframe=LabelFrame(rp_email_Frame,text="Message", height=500, width=730)
          rp_messagelbframe.place(x=5, y=5)
          global rp_email_address, rp_email_subject, rp_email_from,rp_email_pswrd,rp_carcopyem_address,rp_mframe,rp_htcodeframe,rp_lstfrm,rp_langs
          rp_email_address = StringVar() 
          rp_email_subject = StringVar()

          rp_email_from = StringVar()
          rp_email_pswrd = StringVar()
          rp_carcopyem_address = StringVar()

          rp_lbl_emailtoaddr=Label(rp_messagelbframe, text="Email to address").place(x=5, y=5)
          rp_emailtoent=Entry(rp_messagelbframe, width=50,textvariable=rp_email_address)
          rp_emailtoent.place(x=120, y=5)
        
          rp_sendemail_btn=Button(rp_messagelbframe, text="Send Email", width=10, height=1, command=rp_send_mails).place(x=600, y=10)

          rp_lbl_carcopyto=Label(rp_messagelbframe, text="Carbon copy to").place(x=5, y=32)
          rp_carcopyent=Entry(rp_messagelbframe, width=50,textvariable=rp_carcopyem_address)
          rp_carcopyent.place(x=120, y=32)

          rp_lbl_subject=Label(rp_messagelbframe, text="Subject").place(x=5, y=59)
          rp_subent=Entry(rp_messagelbframe, width=50, textvariable=rp_email_subject)
          rp_subent.place(x=120, y=59)
          rp_subjectinsrt='ORD_'+str("")
          rp_subent.delete(0,'end')
          rp_subent.insert(0, rp_subjectinsrt)

          
          style = ttk.Style()
          style.theme_use('default')
          style.configure('TNotebook.Tab', background="#999999", width=20, padding=5)
          rp_mess_Notebook = ttk.Notebook(rp_messagelbframe)
          rp_emailmessage_Frame =Frame(rp_mess_Notebook, height=350, width=710)
          rp_htmlsourse_Frame = Frame(rp_mess_Notebook, height=350, width=710)
          rp_mess_Notebook.add(rp_emailmessage_Frame, text="E-mail message")

          rp_mess_Notebook.add(rp_htmlsourse_Frame, )
          rp_mess_Notebook.place(x=5, y=90)
          

          

          from tkinter import font,colorchooser
          fontSize=16
          fontStyle='Arial'
          
          def rp_font_style(event):
              global fontStyle
              fontStyle=font_family_variable.get()
              rp_mframe.config(font=(fontStyle,fontSize))

          def rp_font_size(event):
              global fontSize
              
              fontSize=size_variable.get()
              
              
              rp_mframe.config(font=(fontStyle,fontSize))

          def rp_bold_text():
              bold_font = font.Font(rp_mframe, rp_mframe.cget("font"))
              bold_font.configure(weight="bold")

              rp_mframe.tag_configure("bold", font=bold_font)

              current_tags = rp_mframe.tag_names("sel.first")

              if "bold" in current_tags:
                rp_mframe.tag_remove("bold", "sel.first", "sel.last")
              else:
                rp_mframe.tag_add("bold", "sel.first", "sel.last")    
          
          def rp_italic_text():
              italic_font = font.Font(rp_mframe, rp_mframe.cget("font"))
              italic_font.configure(slant="italic")

              rp_mframe.tag_configure("italic", font=italic_font)

              current_tags = rp_mframe.tag_names("sel.first")

              if "italic" in current_tags:
                rp_mframe.tag_remove("italic", "sel.first", "sel.last")
              else:
                rp_mframe.tag_add("italic", "sel.first", "sel.last")

          def rp_underline_text():
            try:
                if rp_mframe.tag_nextrange('underline_selection', 'sel.first', 'sel.last') != ():
                    rp_mframe.tag_remove('underline_selection', 'sel.first', 'sel.last')
                else:
                    rp_mframe.tag_add('underline_selection', 'sel.first', 'sel.last')
                    rp_mframe.tag_configure('underline_selection', underline=True)
            except TclError:
                pass

          def rp_color_select():
              color=colorchooser.askcolor()[1]
              if color:
            # if color:

                color_font = font.Font(rp_mframe, rp_mframe.cget("font"))

                rp_mframe.tag_configure("colored", font=color_font, foreground=color)

                current_tags = rp_mframe.tag_names("sel.first")

              if "colored" in current_tags:
                rp_mframe.tag_remove("colored", "sel.first", "sel.last")
              else:
                rp_mframe.tag_add("colored", "sel.first", "sel.last")

          def rp_align_right():
              data=rp_mframe.get(0.0,END)
              rp_mframe.tag_config('right',justify=RIGHT)
              rp_mframe.delete(0.0,END)
              rp_mframe.insert(INSERT,data,'right')

          def rp_align_left():
              data=rp_mframe.get(0.0,END)
              rp_mframe.tag_config('left',justify=LEFT)
              rp_mframe.delete(0.0,END)
              rp_mframe.insert(INSERT,data,'left')

          def rp_align_center():
              data=rp_mframe.get(0.0,END)
              rp_mframe.tag_config('center',justify=CENTER)
              rp_mframe.delete(0.0,END)
              rp_mframe.insert(INSERT,data,'center')

          def add_link():
              # from tkHyperLinkManager import HyperlinkManager
              # import webbrowser
              # from functools import partial
              
              hghf=rp_mframe.selection_get()
              content=hghf
              
              
            #   content.configure(foreground="red")
              rp_mframe.insert(END, " "+content)
              
              # rp_mframe.delete(1.0,END)
              
              
              
          def callback(url):
              webbrowser.open_new_tab_url(url)

          def addlinkbox():
              global top
              top = Toplevel()
              top.title('Hyperlink')
              top.geometry("400x100")
              hyp_lbl = LabelFrame(top,text="Hyperlink Information", height=80, width=300)
              hyp_lbl.place(x=10, y=5)

              hyp_lbl1 = Label(top,text="Type:")
              hyp_lbl1.place(x=18, y=24)
              
              def comb_select(event):
                  hyper = cb_comb.get()
                  if hyper == "(other)":
                      hyp= Entry(top,width=35)
                      hyp.place(x=90,y=55)
                      hyp.insert(END,  "(other)")
                  elif hyper == "file://":
                      hyp= Entry(top,width=35)
                      hyp.place(x=90,y=55)
                      hyp.insert(END,  "file://")
                  elif hyper == "ftp://":
                      hyp= Entry(top,width=35)
                      hyp.place(x=90,y=55)
                      hyp.insert(END,  "ftp://") 
                  elif hyper == "http://":
                      hyp= Entry(top,width=35)
                      hyp.place(x=90,y=55)
                      hyp.insert(END,  "http://") 
                  elif hyper == "https://":
                      hyp= Entry(top,width=35)
                      hyp.place(x=90,y=55)
                      hyp.insert(END,  "https://") 
                  elif hyper == "mailto:":
                      hyp= Entry(top,width=35)
                      hyp.place(x=90,y=55)
                      hyp.insert(END,  "mailto:") 
                  elif hyper == "telnet:":
                      hyp= Entry(top,width=35)
                      hyp.place(x=90,y=55)
                      hyp.insert(END,  "telnet:")


              cb_comb = StringVar()
              cb1=ttk.Combobox(top,textvariable=cb_comb,width=15)
              cb1.grid(row=1,column=1,padx=90,pady=30)
              cb1['values']=('(other)','file://','ftp://','http://','https://','mailto:','news:','telnet:')
              cb1.current(0)
              cb1.bind('<<ComboboxSelected>>',comb_select)


              hyp_lbl2 = Label(top,text="URL:")
              hyp_lbl2.place(x=18, y=55)
              global rp_hyper
              rp_hyper = StringVar()
              
              hyp= Entry(top,textvariable=rp_hyper,width=35)
              hyp.place(x=90,y=55)

              

              hypbtn1 = Button(top,text="OK",width=10, command=add_link)
              hypbtn1.place(x=315,y=8)

              hypbtn2 = Button(top,text="Cancel",width=10)
              hypbtn2.place(x=315,y=35)

         

          rp_mframe=Text(rp_emailmessage_Frame,undo=True,width=84, bg="white", height=20)
          rp_mframe.pack(padx=0,pady=28,expand=False)


          rp_scrollbar1 = Scrollbar(rp_emailmessage_Frame,orient=VERTICAL,command=rp_mframe.yview)
          rp_scrollbar3= Scrollbar(rp_emailmessage_Frame,orient=HORIZONTAL,command=rp_mframe.xview, width=0)
          rp_scrollbar3.place(x=0, y=340, height=20,width=690)
          rp_scrollbar2= Scrollbar(rp_mframe,orient=HORIZONTAL,command=rp_mframe.xview, width=0)
          rp_scrollbar2.pack(fill=X,expand=True,side=BOTTOM,padx=310,pady=155)
        #   rp_scrollbar2.place(x=0, y=310, height=20,width=670)
          rp_mframe.config(xscrollcommand=rp_scrollbar2.set)
          rp_mframe.config(yscrollcommand=rp_scrollbar1.set)
          rp_scrollbar1.config(command=rp_mframe.yview)
          rp_scrollbar1.place(x =690, y=0, height=360)
          rp_scrollbar2.config(command=rp_mframe.xview)
         

        #   rp_mframe=Text(rp_emailmessage_Frame, yscrollcommand=scrollbar1.set, xscrollcommand=scrollbar2.set,undo=True,width=88, bg="white", height=22)
        #   scrollbar1.config(command=rp_mframe.yview)
        #   scrollbar1.place(x=0, y=0, height=30)
        # #   scrollbar2.config(command=rp_mframe.xview)
        # #   scrollbar2.place(x=1000, y=400, height=200)
          
        #   rp_mframe.place(x=0, y=30)
          
        #   # link.bind("<Button-1>",lambda e:callback("http://www.tutorialspoint.com"))
          
          
          

          rp_btn1=Button(rp_emailmessage_Frame,width=20,height=20,compound = LEFT,image=selectall,command=lambda :rp_mframe.event_generate('<Control a>'))
          rp_btn1.place(x=0, y=1)

                  
          rp_btn2=Button(rp_emailmessage_Frame,width=31,height=23,compound = LEFT,image=cut,command=lambda :rp_mframe.event_generate('<Control x>'))
          rp_btn2.place(x=36, y=1)

          rp_btn3=Button(rp_emailmessage_Frame,width=31,height=23,compound = LEFT,image=copy,command=lambda :rp_mframe.event_generate('<Control c>'))
          rp_btn3.place(x=73, y=1)

          rp_btn4=Button(rp_emailmessage_Frame,width=31,height=23,compound = LEFT,image=paste,command=lambda :rp_mframe.event_generate('<Control v>'))
          rp_btn4.place(x=105, y=1)
          rp_btn5=Button(rp_emailmessage_Frame,width=31,height=23,compound = LEFT,image=undo, command=lambda:rp_mframe.event_generate("<<Undo>>")).place(x=140, y=1)

          rp_btn6=Button(rp_emailmessage_Frame,width=31,height=23,compound = LEFT,image=redo, command=lambda:rp_mframe.event_generate("<<Redo>>")).place(x=175, y=1)

          rp_btn7=Button(rp_emailmessage_Frame,width=31,height=23,compound = LEFT,image=bold,command=rp_bold_text)
          rp_btn7.place(x=210, y=1)

          rp_btn8=Button(rp_emailmessage_Frame,width=31,height=23,compound = LEFT,image=italics,command=rp_italic_text)
          rp_btn8.place(x=245, y=1)

          rp_btn9=Button(rp_emailmessage_Frame,width=31,height=23,compound = LEFT,image=underline,command=rp_underline_text)
          rp_btn9.place(x=280, y=1)

          rp_btn10=Button(rp_emailmessage_Frame,width=31,height=23,compound = LEFT,image=left,command=rp_align_left)
          rp_btn10.place(x=315, y=1)

          rp_btn11=Button(rp_emailmessage_Frame,width=31,height=23,compound = LEFT,image=right,command=rp_align_right)
          rp_btn11.place(x=350, y=1)

          rp_btn12=Button(rp_emailmessage_Frame,width=31,height=23,compound = LEFT,image=center,command=rp_align_center)
          rp_btn12.place(x=385, y=1)

          rp_btn14=Button(rp_emailmessage_Frame,width=31,height=23,compound = LEFT,image=remove,command=lambda :rp_mframe.delete(0.0,END))
          rp_btn14.place(x=455, y=1)
          
          rp_btn15=Button(rp_emailmessage_Frame,width=31,height=23,compound = LEFT,image=color,command=rp_color_select)
          rp_btn15.place(x=420, y=1)
          rp_btn16=Button(rp_emailmessage_Frame,width=31,height=23,compound = LEFT,image=hyperlink, command=addlinkbox)
          rp_btn16.place(x=491, y=1)
          global size_variable
          size_variable=IntVar()

          rp_dropcomp11 = ttk.Combobox(rp_emailmessage_Frame, width=6, textvariable=size_variable, values=tuple(range(8,17)))
          
          rp_dropcomp11.place(x=530, y=5)
        #   rp_dropcomp11.bind('<<ComboboxSelected>>',frmar)
          
          font_family_variable=StringVar()
          font_familyes=font.families()
          # dropcompo147 = ttk.Combobox(rp_emailmessage_Frame, width=10, textvariable=font_family_variable, values=font_familyes)
          # dropcompo147.place(x=600, y=5)
          # dropcompo147.current(font_familyes.index('Arial'))
          # dropcompo147.bind('<<ComboboxSelected>>', rp_font_style)
          rp_dropcomp11.bind('<<ComboboxSelected>>', rp_font_size)
          
          rp_attachlbframe=LabelFrame(rp_email_Frame,text="Attachment(s)", height=350, width=280)
          rp_attachlbframe.place(x=740, y=5)

          rp_lstfrm=StringVar()  
          rp_htcodeframe=Listbox(rp_attachlbframe, height=13, width=43,listvariable=rp_lstfrm, bg="white")
          rp_htcodeframe.place(x=5, y=5)
          rp_htcodeframe.bind('<Double-Button-1>' , op_file)

          def rp_deslist():
              rp_laa=rp_htcodeframe.curselection()
              print("hloo",rp_htcodeframe.get(rp_laa))
              rp_yawn=rp_htcodeframe.get(rp_laa)        
              rp_htcodeframe.delete(ACTIVE)

          rp_lbl_btn_info=Label(rp_attachlbframe, text="Double click on attachment to view").place(x=30, y=230)
          rp_btn17=Button(rp_attachlbframe, width=20, text="Add attachment file...", command=rp_UploadAction).place(x=60, y=260)
          rp_btn18=Button(rp_attachlbframe, width=20, text="Remove attachment",command=rp_deslist).place(x=60, y=295)
          rp_lbl_tt_info=Label(rp_email_Frame, text="You can create predefined invoice, order, estimate\nand payment receipt email templates under Main\nmenu/Settings/E-Mail templates tab")
          rp_lbl_tt_info.place(x=740, y=370)

          rp_ready_frame=Frame(rp_mailDetail, height=20, width=1080, bg="#b3b3b3").place(x=0,y=530)
          
          rp_sendatalbframe=LabelFrame(rp_account_Frame,text="E-Mail(Sender data)",height=140, width=600)
          rp_sendatalbframe.place(x=240, y=165 )
          rp_lbl_sendermail=Label(rp_sendatalbframe, text="Company email address").place(x=5, y=10)
          rp_sentent=Entry(rp_sendatalbframe, width=40, textvariable=rp_email_from)
          rp_sentent.place(x=195, y=10)

          rp_lbl_senderpswrd=Label(rp_sendatalbframe, text="Email Password").place(x=5, y=40)
          rp_pswrdent=Entry(rp_sendatalbframe, width=40, textvariable=rp_email_pswrd,show="*")
          rp_pswrdent.place(x=195, y=40)

          

  #Filter by category----------------------------------------------------------------------------
  #-----------------------------------------------ScreenChart-------------------------------
  def screen_flt(): 
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      global dts
      if not rp_date_for:
                pass
      else:
                if rp_date_for[0]=="mm-dd-yyyy":
                    dts='%m-%d-%Y'

                elif rp_date_for[0]=="dd-mm-yyyy":
                    dts='%d-%m-%Y'
        
                # elif rp_date_for[0]=="yyyy.mm.dd":
                #     dts='%Y.%m.%d'
            
                elif rp_date_for[0]=="mm/dd/yyyy":
                    dts='%m/%d/%y'
            
                elif rp_date_for[0]=="dd/mm/yyyy":
                    dts='%d/%m/%Y'
                    
                elif rp_date_for[0]=="dd.mm.yyyy":
                    dts='%d.%m.%Y'
                    
                # elif rp_date_for[0]=="yyyy/mm/dd":
                #     dts='%Y/%m/%d'

                else:
                    dts='%d-%m-%Y'
      rth=scrfilter.get()

      
      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()

      if rth=="Last 3 Month":
          if company is not None:
              
              in_dat = (datetime.now()-relativedelta(months=3))
              # given_date = datetime.today().month()
              # in_dat = given_date.replace(months=3)
              
              rp_scr_frm.delete(0,'end')
              rp_scr_frm.insert(0, in_dat.strftime(dts))

              cr=date.today()
              rp_sc_to.delete(0,'end')
              rp_sc_to.insert(0, cr.strftime(dts))

              lscr=in_dat
              
              lscr1=cr
              
              var_1=in_dat
              var_2=cr
              
              sql_paid ="SELECT SUM(invoicetot)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_paid,inv_valuz)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice WHERE invodate BETWEEN %s and %s)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(x_axis, inv_valuz)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_company,inv_valuz)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_outstanding,inv_valuz)
              outstanding= fbcursor.fetchone()

              
              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=lscr1
            
              y=invoice

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=outstanding
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=paid
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT invoicetot from (select invodate, invoicetot from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sec_paid,inv_valuz)
              paid_sec_x= fbcursor.fetchone()

              


              sec_paid_y = "SELECT businessname from (select invodate, businessname from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)

              fbcursor.execute(sec_paid_y,inv_valuz)

              paid_sec_y= fbcursor.fetchone()

              


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_sec_y
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT invoicetot from(select invodate,invoicetot from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid,inv_valuz)
              paid_thrd_x= fbcursor.fetchone()
              


              thrd_paid_y = "select name from productservice where Productserviceid=(SELECT Productserviceid from(select invodate,Productserviceid from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid_y,inv_valuz)

              paid_thrd_y= fbcursor.fetchone()

              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_thrd_y
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sales", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)
              # def my_popup(event):
              #     my_menu.tk_popup(event.x_root, event.y_root)
                  
              # my_menu= Menu(canvasbar, tearoff=False)
              # my_menu.add_command(label="Refresh Chart", command="run")
              # my_menu.add_separator()
              # my_menu.add_command(label="Copy Chart To Clipboard", command="pr")
              # my_menu.add_separator()
              # my_menu.add_command(label="Save Chart As Image", command='emailrp')
              # my_menu.add_separator()
              # my_menu.add_command(label="Print Chart", command="excel")
              # canvasbar.bind("<Button-3>", my_popup)

          else:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=datetime.today()

              y=0

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=0
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=0
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT MAX(invoicetot) from invoice"
              fbcursor.execute(sec_paid)
              paid_sec_x= fbcursor.fetchone()

              sec_paid_y = "SELECT businessname from invoice WHERE invoicetot= (SELECT MAX(invoicetot) from invoice)"

              fbcursor.execute(sec_paid_y)

              paid_sec_y= fbcursor.fetchone()


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT MAX(unitprice) from productservice"
              fbcursor.execute(thrd_paid)
              paid_thrd_x= fbcursor.fetchone()


              thrd_paid_y = "SELECT name from productservice WHERE unitprice= (SELECT MAX(unitprice) from productservice)"

              fbcursor.execute(thrd_paid_y)

              paid_thrd_y= fbcursor.fetchone()

              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

          lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
          lbl_invdtt2.place(x=2, y=85)

          irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
          irwcuw1.place(x=1135, y=97)
          lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
          lbl_invdtt2.place(x=1140, y=97)

              
          

      #--------------------------------------------------------------------------------------------------------------
      elif rth=="Year To Date":
          
          
          if company is not None:
              test_date=pendulum.today().date()
              start = test_date.start_of('year')
              rp_scr_frm.delete(0,'end')
              rp_scr_frm.insert(0, start.strftime(dts))

              cr=date.today()
              rp_sc_to.delete(0,'end')
              rp_sc_to.insert(0, cr.strftime(dts))
              
              lscr=start
              lscr1=cr

              var_1=start
              var_2=cr
              
              sql_paid ="SELECT SUM(invoicetot)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_paid,inv_valuz)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice WHERE invodate BETWEEN %s and %s)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(x_axis, inv_valuz)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_company,inv_valuz)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_outstanding,inv_valuz)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=lscr1
            
              y=invoice

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=outstanding
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=paid
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

            #   #second graph

              sec_paid = "SELECT invoicetot from (select invodate, invoicetot from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sec_paid,inv_valuz)
              paid_sec_x= fbcursor.fetchone()

              


              sec_paid_y = "SELECT businessname from (select invodate, businessname from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)

              fbcursor.execute(sec_paid_y,inv_valuz)

              paid_sec_y= fbcursor.fetchone()

              


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_sec_y
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT invoicetot from(select invodate,invoicetot from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid,inv_valuz)
              paid_thrd_x= fbcursor.fetchone()
              


              thrd_paid_y = "select name from productservice where Productserviceid=(SELECT Productserviceid from(select invodate,Productserviceid from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid_y,inv_valuz)

              paid_thrd_y= fbcursor.fetchone()


              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_thrd_y
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)
              

          else:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=datetime.today()

              y=0

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()


              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=0
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=0
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT MAX(invoicetot) from invoice"
              fbcursor.execute(sec_paid)
              paid_sec_x= fbcursor.fetchone()

              sec_paid_y = "SELECT businessname from invoice WHERE invoicetot= (SELECT MAX(invoicetot) from invoice)"

              fbcursor.execute(sec_paid_y)

              paid_sec_y= fbcursor.fetchone()


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT MAX(unitprice) from productservice"
              fbcursor.execute(thrd_paid)
              paid_thrd_x= fbcursor.fetchone()


              thrd_paid_y = "SELECT name from productservice WHERE unitprice= (SELECT MAX(unitprice) from productservice)"

              fbcursor.execute(thrd_paid_y)

              paid_thrd_y= fbcursor.fetchone()

              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)

          lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
          lbl_invdtt2.place(x=2, y=85)

          irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
          irwcuw1.place(x=1135, y=97)
          lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
          lbl_invdtt2.place(x=1140, y=97)


            
          #===============================================================================================
      elif rth=="Current year":
          

          
          if company is not None:
              test_date=pendulum.today().date()
              start = test_date.start_of('year')
              rp_scr_frm.delete(0,'end')
              rp_scr_frm.insert(0, start.strftime(dts))

              test_date_end=pendulum.today().date()
              end = test_date_end.end_of('year')
              rp_sc_to.delete(0,'end')
              rp_sc_to.insert(0, end.strftime(dts))

              lscr=start
              lscr1=end

              var_1=start
              var_2=end
              
              sql_paid ="SELECT SUM(invoicetot)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_paid,inv_valuz)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice WHERE invodate BETWEEN %s and %s)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(x_axis, inv_valuz)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_company,inv_valuz)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_outstanding,inv_valuz)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=lscr1
            
              y=invoice

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=outstanding
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=paid
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT invoicetot from (select invodate, invoicetot from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sec_paid,inv_valuz)
              paid_sec_x= fbcursor.fetchone()

              


              sec_paid_y = "SELECT businessname from (select invodate, businessname from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)

              fbcursor.execute(sec_paid_y,inv_valuz)

              paid_sec_y= fbcursor.fetchone()

              


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_sec_y
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT invoicetot from(select invodate,invoicetot from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid,inv_valuz)
              paid_thrd_x= fbcursor.fetchone()
              


              thrd_paid_y = "select name from productservice where Productserviceid=(SELECT Productserviceid from(select invodate,Productserviceid from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid_y,inv_valuz)

              paid_thrd_y= fbcursor.fetchone()

              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_thrd_y
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)
              # def my_popup(event):
              #     my_menu.tk_popup(event.x_root, event.y_root)
                  
              # my_menu= Menu(canvasbar, tearoff=False)
              # my_menu.add_command(label="Refresh Chart", command="run")
              # my_menu.add_separator()
              # my_menu.add_command(label="Copy Chart To Clipboard", command="pr")
              # my_menu.add_separator()
              # my_menu.add_command(label="Save Chart As Image", command='emailrp')
              # my_menu.add_separator()
              # my_menu.add_command(label="Print Chart", command="excel")
              # canvasbar.bind("<Button-3>", my_popup)

          else:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=datetime.today()

              y=0

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=0
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=0
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT MAX(invoicetot) from invoice"
              fbcursor.execute(sec_paid)
              paid_sec_x= fbcursor.fetchone()

              sec_paid_y = "SELECT businessname from invoice WHERE invoicetot= (SELECT MAX(invoicetot) from invoice)"

              fbcursor.execute(sec_paid_y)

              paid_sec_y= fbcursor.fetchone()


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Total")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT MAX(unitprice) from productservice"
              fbcursor.execute(thrd_paid)
              paid_thrd_x= fbcursor.fetchone()


              thrd_paid_y = "SELECT name from productservice WHERE unitprice= (SELECT MAX(unitprice) from productservice)"

              fbcursor.execute(thrd_paid_y)

              paid_thrd_y= fbcursor.fetchone()

              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)

          lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
          lbl_invdtt2.place(x=2, y=85)

          irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
          irwcuw1.place(x=1135, y=97)
          lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
          lbl_invdtt2.place(x=1140, y=97)


              
      #==============================================================================================================
      elif rth=="Last 6 Month":
              
          
          if company is not None:
              in_dat = (datetime.now()-relativedelta(months=6))
              # given_date = datetime.today().month()
              # in_dat = given_date.replace(months=3)
              
              rp_scr_frm.delete(0,'end')
              rp_scr_frm.insert(0, in_dat.strftime(dts))

              cr=date.today()
              rp_sc_to.delete(0,'end')
              rp_sc_to.insert(0, cr.strftime(dts))

              lscr=in_dat
              
              lscr1=cr

              var_1=in_dat
              var_2=cr
              
              sql_paid ="SELECT SUM(invoicetot)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_paid,inv_valuz)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice WHERE invodate BETWEEN %s and %s)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(x_axis, inv_valuz)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_company,inv_valuz)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_outstanding,inv_valuz)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=lscr1
            
              y=invoice

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=outstanding
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=paid
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT invoicetot from (select invodate, invoicetot from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sec_paid,inv_valuz)
              paid_sec_x= fbcursor.fetchone()

              


              sec_paid_y = "SELECT businessname from (select invodate, businessname from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)

              fbcursor.execute(sec_paid_y,inv_valuz)

              paid_sec_y= fbcursor.fetchone()

              


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_sec_y
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Total")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT invoicetot from(select invodate,invoicetot from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid,inv_valuz)
              paid_thrd_x= fbcursor.fetchone()
              


              thrd_paid_y = "select name from productservice where Productserviceid=(SELECT Productserviceid from(select invodate,Productserviceid from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid_y,inv_valuz)

              paid_thrd_y= fbcursor.fetchone()


              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_thrd_y
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)
              # def my_popup(event):
              #     my_menu.tk_popup(event.x_root, event.y_root)
                  
              # my_menu= Menu(canvasbar, tearoff=False)
              # my_menu.add_command(label="Refresh Chart", command="run")
              # my_menu.add_separator()
              # my_menu.add_command(label="Copy Chart To Clipboard", command="pr")
              # my_menu.add_separator()
              # my_menu.add_command(label="Save Chart As Image", command='emailrp')
              # my_menu.add_separator()
              # my_menu.add_command(label="Print Chart", command="excel")
              # canvasbar.bind("<Button-3>", my_popup)

          else:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=datetime.today()

              y=0

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=0
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=0
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT MAX(invoicetot) from invoice"
              fbcursor.execute(sec_paid)
              paid_sec_x= fbcursor.fetchone()

              sec_paid_y = "SELECT businessname from invoice WHERE invoicetot= (SELECT MAX(invoicetot) from invoice)"

              fbcursor.execute(sec_paid_y)

              paid_sec_y= fbcursor.fetchone()


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT MAX(unitprice) from productservice"
              fbcursor.execute(thrd_paid)
              paid_thrd_x= fbcursor.fetchone()


              thrd_paid_y = "SELECT name from productservice WHERE unitprice= (SELECT MAX(unitprice) from productservice)"

              fbcursor.execute(thrd_paid_y)

              paid_thrd_y= fbcursor.fetchone()

              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)

          lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
          lbl_invdtt2.place(x=2, y=85)

          irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
          irwcuw1.place(x=1135, y=97)
          lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
          lbl_invdtt2.place(x=1140, y=97)


              
          #=====================================================================================================
      elif rth=="Last 12 Month":
          

          
          if company is not None:
              in_dat = (datetime.now()-relativedelta(months=12))
              # given_date = datetime.today().month()
              # in_dat = given_date.replace(months=3)
              
              rp_scr_frm.delete(0,'end')
              rp_scr_frm.insert(0, in_dat.strftime(dts))

              cr=date.today()
              rp_sc_to.delete(0,'end')
              rp_sc_to.insert(0, cr.strftime(dts))
              

              lscr=in_dat
              
              lscr1=cr

              var_1=in_dat
              var_2=cr
              
              sql_paid ="SELECT SUM(invoicetot)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_paid,inv_valuz)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice WHERE invodate BETWEEN %s and %s)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(x_axis, inv_valuz)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_company,inv_valuz)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_outstanding,inv_valuz)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=lscr1
            
              y=invoice

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=outstanding
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=paid
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT invoicetot from (select invodate, invoicetot from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sec_paid,inv_valuz)
              paid_sec_x= fbcursor.fetchone()

              


              sec_paid_y = "SELECT businessname from (select invodate, businessname from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)

              fbcursor.execute(sec_paid_y,inv_valuz)

              paid_sec_y= fbcursor.fetchone()

              


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_sec_y
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT invoicetot from(select invodate,invoicetot from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid,inv_valuz)
              paid_thrd_x= fbcursor.fetchone()
              


              thrd_paid_y = "select name from productservice where Productserviceid=(SELECT Productserviceid from(select invodate,Productserviceid from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid_y,inv_valuz)

              paid_thrd_y= fbcursor.fetchone()


              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_thrd_y
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("TOtal Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)
              # def my_popup(event):
              #     my_menu.tk_popup(event.x_root, event.y_root)
                  
              # my_menu= Menu(canvasbar, tearoff=False)
              # my_menu.add_command(label="Refresh Chart", command="run")
              # my_menu.add_separator()
              # my_menu.add_command(label="Copy Chart To Clipboard", command="pr")
              # my_menu.add_separator()
              # my_menu.add_command(label="Save Chart As Image", command='emailrp')
              # my_menu.add_separator()
              # my_menu.add_command(label="Print Chart", command="excel")
              # canvasbar.bind("<Button-3>", my_popup)

          else:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=datetime.today()

              y=0

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=0
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=0
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT MAX(invoicetot) from invoice"
              fbcursor.execute(sec_paid)
              paid_sec_x= fbcursor.fetchone()

              sec_paid_y = "SELECT businessname from invoice WHERE invoicetot= (SELECT MAX(invoicetot) from invoice)"

              fbcursor.execute(sec_paid_y)

              paid_sec_y= fbcursor.fetchone()


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT MAX(unitprice) from productservice"
              fbcursor.execute(thrd_paid)
              paid_thrd_x= fbcursor.fetchone()


              thrd_paid_y = "SELECT name from productservice WHERE unitprice= (SELECT MAX(unitprice) from productservice)"

              fbcursor.execute(thrd_paid_y)

              paid_thrd_y= fbcursor.fetchone()

              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)

          lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
          lbl_invdtt2.place(x=2, y=85)

          irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
          irwcuw1.place(x=1135, y=97)
          lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
          lbl_invdtt2.place(x=1140, y=97)


              
          #=================================================================================================
      elif rth=="Last 18 Month":
          
      
          if company is not None:
              in_dat = (datetime.now()-relativedelta(months=18))
              # given_date = datetime.today().month()
              # in_dat = given_date.replace(months=3)
              
              rp_scr_frm.delete(0,'end')
              rp_scr_frm.insert(0, in_dat.strftime(dts))

              cr=date.today()
              rp_sc_to.delete(0,'end')
              rp_sc_to.insert(0, cr.strftime(dts))

              lscr=in_dat
              
              lscr1=cr

              var_1=in_dat
              var_2=cr
              
              sql_paid ="SELECT SUM(invoicetot)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_paid,inv_valuz)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice WHERE invodate BETWEEN %s and %s)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(x_axis, inv_valuz)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_company,inv_valuz)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_outstanding,inv_valuz)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=lscr1
            
              y=invoice

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=outstanding
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=paid
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT invoicetot from (select invodate, invoicetot from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sec_paid,inv_valuz)
              paid_sec_x= fbcursor.fetchone()

              


              sec_paid_y = "SELECT businessname from (select invodate, businessname from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)

              fbcursor.execute(sec_paid_y,inv_valuz)

              paid_sec_y= fbcursor.fetchone()

              


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_sec_y
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT invoicetot from(select invodate,invoicetot from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid,inv_valuz)
              paid_thrd_x= fbcursor.fetchone()
              


              thrd_paid_y = "select name from productservice where Productserviceid=(SELECT Productserviceid from(select invodate,Productserviceid from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid_y,inv_valuz)

              paid_thrd_y= fbcursor.fetchone()


              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_thrd_y
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)
              # def my_popup(event):
              #     my_menu.tk_popup(event.x_root, event.y_root)
                  
              # my_menu= Menu(canvasbar, tearoff=False)
              # my_menu.add_command(label="Refresh Chart", command="run")
              # my_menu.add_separator()
              # my_menu.add_command(label="Copy Chart To Clipboard", command="pr")
              # my_menu.add_separator()
              # my_menu.add_command(label="Save Chart As Image", command='emailrp')
              # my_menu.add_separator()
              # my_menu.add_command(label="Print Chart", command="excel")
              # canvasbar.bind("<Button-3>", my_popup)

          else:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=datetime.today()

              y=0

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=0
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=0
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT MAX(invoicetot) from invoice"
              fbcursor.execute(sec_paid)
              paid_sec_x= fbcursor.fetchone()

              sec_paid_y = "SELECT businessname from invoice WHERE invoicetot= (SELECT MAX(invoicetot) from invoice)"

              fbcursor.execute(sec_paid_y)

              paid_sec_y= fbcursor.fetchone()


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT MAX(unitprice) from productservice"
              fbcursor.execute(thrd_paid)
              paid_thrd_x= fbcursor.fetchone()


              thrd_paid_y = "SELECT name from productservice WHERE unitprice= (SELECT MAX(unitprice) from productservice)"

              fbcursor.execute(thrd_paid_y)

              paid_thrd_y= fbcursor.fetchone()

              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)

          lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
          lbl_invdtt2.place(x=2, y=85)

          irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
          irwcuw1.place(x=1135, y=97)
          lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
          lbl_invdtt2.place(x=1140, y=97)


              
      
      #=====================================================================================================
      elif rth=="Last 24 Month":
        
          
          if company is not None:
              in_dat = (datetime.now()-relativedelta(months=6))
              # given_date = datetime.today().month()
              # in_dat = given_date.replace(months=3)
              
              rp_scr_frm.delete(0,'end')
              rp_scr_frm.insert(0, in_dat.strftime(dts))

              cr=date.today()
              rp_sc_to.delete(0,'end')
              rp_sc_to.insert(0, cr.strftime(dts))

              lscr=in_dat
              
              lscr1=cr

              var_1=in_dat
              var_2=cr
              
              sql_paid ="SELECT SUM(invoicetot)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_paid,inv_valuz)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice WHERE invodate BETWEEN %s and %s)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(x_axis, inv_valuz)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_company,inv_valuz)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_outstanding,inv_valuz)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=lscr1
            
              y=invoice

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=outstanding
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=paid
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT invoicetot from (select invodate, invoicetot from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sec_paid,inv_valuz)
              paid_sec_x= fbcursor.fetchone()

              


              sec_paid_y = "SELECT businessname from (select invodate, businessname from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)

              fbcursor.execute(sec_paid_y,inv_valuz)

              paid_sec_y= fbcursor.fetchone()

              


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_sec_y
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT invoicetot from(select invodate,invoicetot from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid,inv_valuz)
              paid_thrd_x= fbcursor.fetchone()
              


              thrd_paid_y = "select name from productservice where Productserviceid=(SELECT Productserviceid from(select invodate,Productserviceid from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid_y,inv_valuz)

              paid_thrd_y= fbcursor.fetchone()

              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_thrd_y
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)
              # def my_popup(event):
              #     my_menu.tk_popup(event.x_root, event.y_root)
                  
              # my_menu= Menu(canvasbar, tearoff=False)
              # my_menu.add_command(label="Refresh Chart", command="run")
              # my_menu.add_separator()
              # my_menu.add_command(label="Copy Chart To Clipboard", command="pr")
              # my_menu.add_separator()
              # my_menu.add_command(label="Save Chart As Image", command='emailrp')
              # my_menu.add_separator()
              # my_menu.add_command(label="Print Chart", command="excel")
              # canvasbar.bind("<Button-3>", my_popup)

          else:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=datetime.today()

              y=0

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=0
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=0
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT MAX(invoicetot) from invoice"
              fbcursor.execute(sec_paid)
              paid_sec_x= fbcursor.fetchone()

              sec_paid_y = "SELECT businessname from invoice WHERE invoicetot= (SELECT MAX(invoicetot) from invoice)"

              fbcursor.execute(sec_paid_y)

              paid_sec_y= fbcursor.fetchone()


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT MAX(unitprice) from productservice"
              fbcursor.execute(thrd_paid)
              paid_thrd_x= fbcursor.fetchone()


              thrd_paid_y = "SELECT name from productservice WHERE unitprice= (SELECT MAX(unitprice) from productservice)"

              fbcursor.execute(thrd_paid_y)

              paid_thrd_y= fbcursor.fetchone()

              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)

          lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
          lbl_invdtt2.place(x=2, y=85)

          irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
          irwcuw1.place(x=1135, y=97)
          lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
          lbl_invdtt2.place(x=1140, y=97)


              
      #========================================================================================================
      #================================================================================================================
      
          #====================================================================================================
      elif rth=="Before Previous Year":
          
          if company is not None:
              in_dat = (datetime.now()-relativedelta(years=2))
              # given_date = datetime.today().month()
              # in_dat = given_date.replace(months=3)
              
              rp_scr_frm.delete(0,'end')
              rp_scr_frm.insert(0, in_dat.strftime(dts))

              cr=date.today()
              rp_sc_to.delete(0,'end')
              rp_sc_to.insert(0, cr.strftime(dts))

              lscr=in_dat
              
              lscr1=cr

              var_1=in_dat
              var_2=cr

              sql_paid ="SELECT SUM(invoicetot)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_paid,inv_valuz)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice WHERE invodate BETWEEN %s and %s)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(x_axis, inv_valuz)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_company,inv_valuz)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_outstanding,inv_valuz)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=lscr1
            
              y=invoice

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=outstanding
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("x-axis")
              plt.ylabel("y-label")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=paid
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("x-axis")
              plt.ylabel("y-label")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT invoicetot from (select invodate, invoicetot from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sec_paid,inv_valuz)
              paid_sec_x= fbcursor.fetchone()

              


              sec_paid_y = "SELECT businessname from (select invodate, businessname from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)

              fbcursor.execute(sec_paid_y,inv_valuz)

              paid_sec_y= fbcursor.fetchone()

              


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_sec_y
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT invoicetot from(select invodate,invoicetot from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid,inv_valuz)
              paid_thrd_x= fbcursor.fetchone()
              


              thrd_paid_y = "select name from productservice where Productserviceid=(SELECT Productserviceid from(select invodate,Productserviceid from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid_y,inv_valuz)

              paid_thrd_y= fbcursor.fetchone()


              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_thrd_y
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)
              # def my_popup(event):
              #     my_menu.tk_popup(event.x_root, event.y_root)
                  
              # my_menu= Menu(canvasbar, tearoff=False)
              # my_menu.add_command(label="Refresh Chart", command="run")
              # my_menu.add_separator()
              # my_menu.add_command(label="Copy Chart To Clipboard", command="pr")
              # my_menu.add_separator()
              # my_menu.add_command(label="Save Chart As Image", command='emailrp')
              # my_menu.add_separator()
              # my_menu.add_command(label="Print Chart", command="excel")
              # canvasbar.bind("<Button-3>", my_popup)

          else:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=datetime.today()

              y=0

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=0
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=0
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT MAX(invoicetot) from invoice"
              fbcursor.execute(sec_paid)
              paid_sec_x= fbcursor.fetchone()

              sec_paid_y = "SELECT businessname from invoice WHERE invoicetot= (SELECT MAX(invoicetot) from invoice)"

              fbcursor.execute(sec_paid_y)

              paid_sec_y= fbcursor.fetchone()


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT MAX(unitprice) from productservice"
              fbcursor.execute(thrd_paid)
              paid_thrd_x= fbcursor.fetchone()


              thrd_paid_y = "SELECT name from productservice WHERE unitprice= (SELECT MAX(unitprice) from productservice)"

              fbcursor.execute(thrd_paid_y)

              paid_thrd_y= fbcursor.fetchone()

              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)

          lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
          lbl_invdtt2.place(x=2, y=85)

          irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
          irwcuw1.place(x=1135, y=97)
          lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
          lbl_invdtt2.place(x=1140, y=97)


          
          #===========================================================================================================
      elif rth=="Previous year":
          
          if company is not None:
              last_year = (datetime.now()-relativedelta(years=1))
              rp_scr_frm.delete(0,'end')
              rp_scr_frm.insert(0, last_year.strftime(dts))

              cr=date.today()
              rp_sc_to.delete(0,'end')
              rp_sc_to.insert(0, cr.strftime(dts))

              lscr=last_year
              lscr1=cr

              var_1=last_year
              var_2=cr
              
              sql_paid ="SELECT SUM(invoicetot)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_paid,inv_valuz)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice WHERE invodate BETWEEN %s and %s)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(x_axis, inv_valuz)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_company,inv_valuz)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice WHERE invodate BETWEEN %s and %s"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_outstanding,inv_valuz)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=lscr1
            
              y=invoice

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=outstanding
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=paid
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT invoicetot from (select invodate, invoicetot from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sec_paid,inv_valuz)
              paid_sec_x= fbcursor.fetchone()

              


              sec_paid_y = "SELECT businessname from (select invodate, businessname from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
              inv_valuz=(var_1,var_2)

              fbcursor.execute(sec_paid_y,inv_valuz)

              paid_sec_y= fbcursor.fetchone()

              


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_sec_y
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT invoicetot from(select invodate,invoicetot from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid,inv_valuz)
              paid_thrd_x= fbcursor.fetchone()
              


              thrd_paid_y = "select name from productservice where Productserviceid=(SELECT Productserviceid from(select invodate,Productserviceid from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii)"
              inv_valuz=(var_1,var_2)
              fbcursor.execute(thrd_paid_y,inv_valuz)

              paid_thrd_y= fbcursor.fetchone()


              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=paid_thrd_y
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)
              # def my_popup(event):
              #     my_menu.tk_popup(event.x_root, event.y_root)
                  
              # my_menu= Menu(canvasbar, tearoff=False)
              # my_menu.add_command(label="Refresh Chart", command="run")
              # my_menu.add_separator()
              # my_menu.add_command(label="Copy Chart To Clipboard", command="pr")
              # my_menu.add_separator()
              # my_menu.add_command(label="Save Chart As Image", command='emailrp')
              # my_menu.add_separator()
              # my_menu.add_command(label="Print Chart", command="excel")
              # canvasbar.bind("<Button-3>", my_popup)

          else:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=datetime.today()

              y=0

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=0
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=0
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT MAX(invoicetot) from invoice"
              fbcursor.execute(sec_paid)
              paid_sec_x= fbcursor.fetchone()

              sec_paid_y = "SELECT businessname from invoice WHERE invoicetot= (SELECT MAX(invoicetot) from invoice)"

              fbcursor.execute(sec_paid_y)

              paid_sec_y= fbcursor.fetchone()


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT MAX(unitprice) from productservice"
              fbcursor.execute(thrd_paid)
              paid_thrd_x= fbcursor.fetchone()


              thrd_paid_y = "SELECT name from productservice WHERE unitprice= (SELECT MAX(unitprice) from productservice)"

              fbcursor.execute(thrd_paid_y)

              paid_thrd_y= fbcursor.fetchone()

              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)

          lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
          lbl_invdtt2.place(x=2, y=85)

          irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
          irwcuw1.place(x=1135, y=97)
          lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
          lbl_invdtt2.place(x=1140, y=97)


              
      # ------------------------------
      elif rth=="Custom Range":
          lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
          lbl_invdtt2.place(x=2, y=85)

          irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
          irwcuw1.place(x=1135, y=97)
          lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
          lbl_invdtt2.place(x=1140, y=97)
          

          
          if company is not None:
              ltr=rp_scr_frm.get_date()
              ltr1=rp_sc_to.get_date()
              # var_12=ltr
              # var_21=ltr1

              # sqlr_paid ="SELECT * from invoice WHERE invodate BETWEEN %s and %s"
              # invs_valuz=(var_12,var_21)
              # fbcursor.execute(sqlr_paid,invs_valuz)
              # invoicess= fbcursor.fetchone()

              if ltr!=ltr1:
                  print("hai")


                  ltt=rp_scr_frm.get_date()
                  ltt1=rp_sc_to.get_date()
                  

                  var_1=ltt
                  var_2=ltt1
                  
                  sql_paid ="SELECT SUM(invoicetot)from invoice WHERE invodate BETWEEN %s and %s"
                  inv_valuz=(var_1,var_2)
                  fbcursor.execute(sql_paid,inv_valuz)
                  invoice= fbcursor.fetchone()

                  x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice WHERE invodate BETWEEN %s and %s)"
                  inv_valuz=(var_1,var_2)
                  fbcursor.execute(x_axis, inv_valuz)
                  axis_x= fbcursor.fetchone()



                  sql_company = "SELECT SUM(totpaid)from invoice WHERE invodate BETWEEN %s and %s"
                  inv_valuz=(var_1,var_2)
                  fbcursor.execute(sql_company,inv_valuz)
                  paid= fbcursor.fetchone()



                  sql_outstanding = "SELECT SUM(balance)from invoice WHERE invodate BETWEEN %s and %s"
                  inv_valuz=(var_1,var_2)
                  fbcursor.execute(sql_outstanding,inv_valuz)
                  outstanding= fbcursor.fetchone()


                  frame = Frame(
                          reportframe,
                          width=1380,
                          height=1000,
                          bg='#b3b3b3',
                          )
                  frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                      
                  frame.pack()


                  x=ltt1
              
                  y=invoice

                  x=axis_x
                  figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
                  plt.bar(x,y, label="Invoice", color="orange")
                  plt.legend()
                  plt.xlabel("Total Amount")
                  plt.ylabel("Date")
                  axes=plt.gca()
                  axes.yaxis.grid()

                  # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




                  #**************add dates********

                  dates=axis_x[0]+timedelta(days=2)

                  y=outstanding
                  x=dates
                  plt.bar(x,y, label="Outstanding", color="blue")
                  plt.legend()
                  plt.xlabel("Total Amount")
                  plt.ylabel("Date")
                  axes=plt.gca()
                  axes.yaxis.grid()
                  # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


                  dates3=axis_x[0]-timedelta(days=2)
                  y=paid
                  x=dates3
                  plt.bar(x,y, label="Paid", color="green") 
                  plt.legend()
                  plt.xlabel("Total Amount")
                  plt.ylabel("Date")
                  axes=plt.gca()
                  axes.yaxis.grid()
                  # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

                  #used to display chart in our frame
                  canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
                  canvasbar.draw()
                  canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

                  #second graph

                  sec_paid = "SELECT invoicetot from (select invodate, invoicetot from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
                  inv_valuz=(var_1,var_2)
                  fbcursor.execute(sec_paid,inv_valuz)
                  paid_sec_x= fbcursor.fetchone()

                  


                  sec_paid_y = "SELECT businessname from (select invodate, businessname from invoice  GROUP BY businessname having invodate BETWEEN %s and %s ORDER by COUNT(businessname) DESC LIMIT 1)as sec"
                  inv_valuz=(var_1,var_2)

                  fbcursor.execute(sec_paid_y,inv_valuz)

                  paid_sec_y= fbcursor.fetchone()

                  


                  figsecond = plt.figure(figsize=(9, 4), dpi=80)

                  x=paid_sec_y
                  y=paid_sec_x
                  plt.barh(x,y, label="Top Billed Customer", color="orange") 
                  plt.legend()
                  plt.xlabel("Invoiced Amont")
                  plt.ylabel("")
                  axes=plt.gca()
                  axes.xaxis.grid()


                  canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
                  canvasbar.draw()
                  canvasbar.get_tk_widget().place(x=0, y=370)

                  # #second graph

                  thrd_paid = "SELECT invoicetot from(select invodate,invoicetot from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii"
                  inv_valuz=(var_1,var_2)
                  fbcursor.execute(thrd_paid,inv_valuz)
                  paid_thrd_x= fbcursor.fetchone()
                  


                  thrd_paid_y = "select name from productservice where Productserviceid=(SELECT Productserviceid from(select invodate,Productserviceid from invoice GROUP BY Productserviceid HAVING invodate BETWEEN %s and %s ORDER by COUNT(Productserviceid) DESC LIMIT 1)as lkiii)"
                  inv_valuz=(var_1,var_2)
                  fbcursor.execute(thrd_paid_y,inv_valuz)

                  paid_thrd_y= fbcursor.fetchone()


                  figlast = plt.figure(figsize=(9, 4), dpi=80)

                  x=paid_thrd_y
                  y=paid_thrd_x   
                  plt.barh(x,y, label="Top Product Sale", color="blue") 
                  plt.legend()
                  plt.xlabel("Total Sales")
                  plt.ylabel("")
                  axes=plt.gca()
                  axes.xaxis.grid()
                  

                  canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
                  canvasbar.draw()
                  canvasbar.get_tk_widget().place(x=650, y=370)

                  lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
                  lbl_invdtt2.place(x=2, y=85)
                  # def my_popup(event):
                  #     my_menu.tk_popup(event.x_root, event.y_root)
                      
                  # my_menu= Menu(canvasbar, tearoff=False)
                  # my_menu.add_command(label="Refresh Chart", command="run")
                  # my_menu.add_separator()
                  # my_menu.add_command(label="Copy Chart To Clipboard", command="pr")
                  # my_menu.add_separator()
                  # my_menu.add_command(label="Save Chart As Image", command='emailrp')
                  # my_menu.add_separator()
                  # my_menu.add_command(label="Print Chart", command="excel")
                  # canvasbar.bind("<Button-3>", my_popup)
              else:
              
                  sql_paid = "SELECT SUM(invoicetot)from invoice"
                  fbcursor.execute(sql_paid)
                  invoice= fbcursor.fetchone()

                  x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
                  fbcursor.execute(x_axis)
                  axis_x= fbcursor.fetchone()



                  sql_company = "SELECT SUM(totpaid)from invoice"
                  fbcursor.execute(sql_company)
                  paid= fbcursor.fetchone()



                  sql_outstanding = "SELECT SUM(balance)from invoice"
                  fbcursor.execute(sql_outstanding)
                  outstanding= fbcursor.fetchone()


                  frame = Frame(
                          reportframe,
                          width=1380,
                          height=1000,
                          bg='#b3b3b3',
                          )
                  frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                      
                  frame.pack()


                  x=datetime.today()

                  y=0

                  x=axis_x
                  figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
                  plt.bar(x,y, label="Invoice", color="orange")
                  plt.legend()
                  plt.xlabel("Total Amount")
                  plt.ylabel("Date")
                  axes=plt.gca()
                  axes.yaxis.grid()

                  # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




                  #**************add dates********

                  dates=axis_x[0]+timedelta(days=2)

                  y=0
                  x=dates
                  plt.bar(x,y, label="Outstanding", color="blue")
                  plt.legend()
                  plt.xlabel("Total Amount")
                  plt.ylabel("Date")
                  axes=plt.gca()
                  axes.yaxis.grid()
                  # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


                  dates3=axis_x[0]-timedelta(days=2)
                  y=0
                  x=dates3
                  plt.bar(x,y, label="Paid", color="green") 
                  plt.legend()
                  plt.xlabel("Total Amount")
                  plt.ylabel("Date")
                  axes=plt.gca()
                  axes.yaxis.grid()
                  # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

                  #used to display chart in our frame
                  canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
                  canvasbar.draw()
                  canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

                  #second graph

                  sec_paid = "SELECT MAX(invoicetot) from invoice"
                  fbcursor.execute(sec_paid)
                  paid_sec_x= fbcursor.fetchone()

                  sec_paid_y = "SELECT businessname from invoice WHERE invoicetot= (SELECT MAX(invoicetot) from invoice)"

                  fbcursor.execute(sec_paid_y)

                  paid_sec_y= fbcursor.fetchone()


                  figsecond = plt.figure(figsize=(9, 4), dpi=80)

                  x=0
                  y=0
                  plt.barh(x,y, label="Top Billed Customer", color="orange") 
                  plt.legend()
                  plt.xlabel("Invoiced Amount")
                  plt.ylabel("")
                  axes=plt.gca()
                  axes.xaxis.grid()


                  canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
                  canvasbar.draw()
                  canvasbar.get_tk_widget().place(x=0, y=370)

                  # #second graph

                  thrd_paid = "SELECT MAX(unitprice) from productservice"
                  fbcursor.execute(thrd_paid)
                  paid_thrd_x= fbcursor.fetchone()


                  thrd_paid_y = "SELECT name from productservice WHERE unitprice= (SELECT MAX(unitprice) from productservice)"

                  fbcursor.execute(thrd_paid_y)

                  paid_thrd_y= fbcursor.fetchone()

                  figlast = plt.figure(figsize=(9, 4), dpi=80)

                  x=0
                  y=0 
                  plt.barh(x,y, label="Top Product Sale", color="blue") 
                  plt.legend()
                  plt.xlabel("Total Sales")
                  plt.ylabel("")
                  axes=plt.gca()
                  axes.xaxis.grid()
                  

                  canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
                  canvasbar.draw()
                  canvasbar.get_tk_widget().place(x=650, y=370)

                  lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
                  lbl_invdtt2.place(x=2, y=85)

          else:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              frame = Frame(
                      reportframe,
                      width=1380,
                      height=1000,
                      bg='#b3b3b3',
                      )
              frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
                  
              frame.pack()


              x=datetime.today()

              y=0

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)

              y=0
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=0
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Total Amount")
              plt.ylabel("Date")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              #second graph

              sec_paid = "SELECT MAX(invoicetot) from invoice"
              fbcursor.execute(sec_paid)
              paid_sec_x= fbcursor.fetchone()

              sec_paid_y = "SELECT businessname from invoice WHERE invoicetot= (SELECT MAX(invoicetot) from invoice)"

              fbcursor.execute(sec_paid_y)

              paid_sec_y= fbcursor.fetchone()


              figsecond = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_sec_x
              plt.barh(x,y, label="Top Billed Customer", color="orange") 
              plt.legend()
              plt.xlabel("Invoiced Amount")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()


              canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=0, y=370)

              # #second graph

              thrd_paid = "SELECT MAX(unitprice) from productservice"
              fbcursor.execute(thrd_paid)
              paid_thrd_x= fbcursor.fetchone()


              thrd_paid_y = "SELECT name from productservice WHERE unitprice= (SELECT MAX(unitprice) from productservice)"

              fbcursor.execute(thrd_paid_y)

              paid_thrd_y= fbcursor.fetchone()

              figlast = plt.figure(figsize=(9, 4), dpi=80)

              x=0
              y=paid_thrd_x   
              plt.barh(x,y, label="Top Product Sale", color="blue") 
              plt.legend()
              plt.xlabel("Total Sales")
              plt.ylabel("")
              axes=plt.gca()
              axes.xaxis.grid()
              

              canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
              canvasbar.draw()
              canvasbar.get_tk_widget().place(x=650, y=370)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)

          


            

          #============================================================================================
      else:
          pass
      

  #---------------------------------------------------INVOICE FILTER-----------------------------------------------
  def emailkj():
              rpmailDetail=Toplevel()
              rpmailDetail.title("E-Mail")
              p2 = PhotoImage(file = "images/fbicon.png")
              rpmailDetail.iconphoto(False, p2)
              rpmailDetail.geometry("1030x550+150+120")
              
              def myrp_SMTP():
                  if True:
                      em_ser_conbtn.destroy()
                      mysmtpservercon=LabelFrame(account_Frame,text="SMTP server connection(ask your ISP for your SMTP settings)", height=165, width=380)
                      mysmtpservercon.place(x=610, y=110)
                      lbl_hostn=Label(mysmtpservercon, text="Hostname").place(x=5, y=10)
                      hostnent=Entry(mysmtpservercon, width=30).place(x=80, y=10)
                      lbl_portn=Label(mysmtpservercon, text="Port").place(x=5, y=35)
                      portent=Entry(mysmtpservercon, width=30).place(x=80, y=35)
                      lbl_usn=Label(mysmtpservercon, text="Username").place(x=5, y=60)
                      unament=Entry(mysmtpservercon, width=30).place(x=80, y=60)
                      lbl_pasn=Label(mysmtpservercon, text="Password").place(x=5, y=85)
                      pwdent=Entry(mysmtpservercon, width=30).place(x=80, y=85)
                      ssl_chkvar=IntVar()
                      ssl_chkbtn=Checkbutton(mysmtpservercon, variable=ssl_chkvar, text="This server requires a secure connection(SSL)", onvalue=1, offvalue=0)
                      ssl_chkbtn.place(x=50, y=110)
                      em_ser_conbtn1=Button(account_Frame, text="Test E-mail Server Connection").place(x=610, y=285)
                  else:
                      pass
              
              style = ttk.Style()
              style.theme_use('default')
              style.configure('TNotebook.Tab', background="#999999", padding=5)
              email_Notebook = ttk.Notebook(rpmailDetail)
              email_Frame = Frame(email_Notebook, height=500, width=1080)
              account_Frame = Frame(email_Notebook, height=550, width=1080)
              email_Notebook.add(email_Frame, text="E-mail")
              email_Notebook.add(account_Frame, text="Account")
              email_Notebook.place(x=0, y=0)
              messagelbframe=LabelFrame(email_Frame,text="Message", height=495, width=730)
              messagelbframe.place(x=5, y=5)
              lbl_emailtoaddr=Label(messagelbframe, text="Email to address").place(x=5, y=5)
              emailtoent=Entry(messagelbframe, width=50).place(x=120, y=5)
              sendemail_btn=Button(messagelbframe, text="Send Email", width=10, height=1).place(x=600, y=10)
              lbl_carcopyto=Label(messagelbframe, text="Carbon copy to").place(x=5, y=32)
              carcopyent=Entry(messagelbframe, width=50).place(x=120, y=32)
              stopemail_btn=Button(messagelbframe, text="Stop sending", width=10, height=1).place(x=600, y=40)
              lbl_subject=Label(messagelbframe, text="Subject").place(x=5, y=59)
              subent=Entry(messagelbframe, width=50).place(x=120, y=59)

              style = ttk.Style()
              style.theme_use('default')
              style.configure('TNotebook.Tab', background="#999999", width=20, padding=5)
              mess_Notebook = ttk.Notebook(messagelbframe)
              emailmessage_Frame = Frame(mess_Notebook, height=350, width=710)
              htmlsourse_Frame = Frame(mess_Notebook, height=350, width=710)
              mess_Notebook.add(emailmessage_Frame, text="E-mail message")
              mess_Notebook.add(htmlsourse_Frame, text="Html sourse code")
              mess_Notebook.place(x=5, y=90)

              btn1=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=selectall).place(x=0, y=1)  
              btn2=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=cut).place(x=36, y=1)
              btn3=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=copy).place(x=73, y=1)
              btn4=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=paste).place(x=105, y=1)
              btn5=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=undo).place(x=140, y=1)
              btn6=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=redo).place(x=175, y=1)
              btn7=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=bold).place(x=210, y=1)
              btn8=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=italics).place(x=245, y=1)
              btn9=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=underline).place(x=280, y=1)
              btn10=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=left).place(x=315, y=1)
              btn11=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=right).place(x=350, y=1)
              btn12=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=center).place(x=385, y=1)
              btn13=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=hyperlink).place(x=420, y=1)
              btn14=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=remove).place(x=455, y=1)

              dropcomp = ttk.Combobox(emailmessage_Frame, width=12, height=3).place(x=500, y=5)
              dropcompo = ttk.Combobox(emailmessage_Frame, width=6, height=3).place(x=600, y=5)
              mframe=Frame(emailmessage_Frame, height=350, width=710, bg="white")
              mframe.place(x=0, y=28)
              btn1=Button(htmlsourse_Frame,width=31,height=23,compound = LEFT,image=selectall).place(x=0, y=1)
              btn2=Button(htmlsourse_Frame,width=31,height=23,compound = LEFT,image=cut).place(x=36, y=1)
              btn3=Button(htmlsourse_Frame,width=31,height=23,compound = LEFT,image=copy).place(x=73, y=1)
              btn4=Button(htmlsourse_Frame,width=31,height=23,compound = LEFT,image=paste).place(x=105, y=1)
              mframe=Frame(htmlsourse_Frame, height=350, width=710, bg="white")
              mframe.place(x=0, y=28)
              rp_attachlbframe=LabelFrame(email_Frame,text="Attachment(s)", height=350, width=280)
              rp_attachlbframe.place(x=740, y=5)
              htcodeframe=Frame(rp_attachlbframe, height=220, width=265, bg="white").place(x=5, y=5)
              lbl_btn_info=Label(rp_attachlbframe, text="Double click on attachment to view").place(x=30, y=230)
              btn17=Button(rp_attachlbframe, width=20, text="Add attacment file...").place(x=60, y=260)
              btn18=Button(rp_attachlbframe, width=20, text="Remove attacment").place(x=60, y=295)
              lbl_tt_info=Label(email_Frame, text="You can create predefined invoice, order, estimate\nand payment receipt email templates under Main\nmenu/Settings/E-Mail templates tab")
              lbl_tt_info.place(x=740, y=370)

              ready_frame=Frame(rpmailDetail, height=20, width=1080, bg="#b3b3b3").place(x=0,y=530)
              
              sendatalbframe=LabelFrame(account_Frame,text="E-Mail(Sender data)",height=270, width=600)
              sendatalbframe.place(x=5, y=5)
              lbl_sendermail=Label(sendatalbframe, text="Your company email address").place(x=5, y=30)
              sentent=Entry(sendatalbframe, width=40).place(x=195, y=30)
              lbl_orcompanyname=Label(sendatalbframe, text="Your name or company name").place(x=5, y=60)
              nament=Entry(sendatalbframe, width=40).place(x=195, y=60)
              lbl_reply=Label(sendatalbframe, text="Reply to email address").place(x=5, y=90)
              replyent=Entry(sendatalbframe, width=40).place(x=195, y=90)
              lbl_sign=Label(sendatalbframe, text="Signature").place(x=5, y=120)
              signent=Entry(sendatalbframe,width=50).place(x=100, y=120,height=75)
              confirm_chkvar=IntVar()
              confirm_chkbtn=Checkbutton(sendatalbframe, variable=confirm_chkvar, text="Confirmation reading", onvalue=1, offvalue=0)
              confirm_chkbtn.place(x=200, y=215)
              btn18=Button(account_Frame, width=15, text="Save settings").place(x=25, y=285)

              sendatalbframe=LabelFrame(account_Frame,text="SMTP Server",height=100, width=380)
              sendatalbframe.place(x=610, y=5)
              servar=IntVar()
              SMTP_rbtn=Radiobutton(sendatalbframe, text="Use the Built-In SMTP Server Settings", variable=servar, value=1)
              SMTP_rbtn.place(x=10, y=10)
              MySMTP_rbtn=Radiobutton(sendatalbframe, text="Use My Own SMTP Server Settings(Recommended)", variable=servar, value=2, command=myrp_SMTP)
              MySMTP_rbtn.place(x=10, y=40)
              em_ser_conbtn=Button(account_Frame, text="Test E-mail Server Connection")
              em_ser_conbtn.place(x=710, y=110)

 

  def category():
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      global dts
      if not rp_date_for:
                pass
      else:
                if rp_date_for[0]=="mm-dd-yyyy":
                    dts='%m-%d-%Y'

                elif rp_date_for[0]=="dd-mm-yyyy":
                    dts='%d-%m-%Y'
        
                # elif rp_date_for[0]=="yyyy.mm.dd":
                #     dts='%Y.%m.%d'
            
                elif rp_date_for[0]=="mm/dd/yyyy":
                    dts='%m/%d/%y'
            
                elif rp_date_for[0]=="dd/mm/yyyy":
                    dts='%d/%m/%Y'
                    
                elif rp_date_for[0]=="dd.mm.yyyy":
                    dts='%d.%m.%Y'
                    
                # elif rp_date_for[0]=="yyyy/mm/dd":
                #     dts='%Y/%m/%d'

                else:
                    dts='%d-%m-%Y'
      
    # firtst filter-----------------------------------Month to date
      
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      global drf
      
      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      
      #-------------------------
      
      rth=invfilter.get()
      
      if rth=="Month to date":
          sql='select dateformat from company'
          fbcursor.execute(sql)
          rp_date_for=fbcursor.fetchone()

          print(rp_exir.get())
          lkj=rp_exir.get()
          given_date = datetime.today().date()
          in_dat = given_date.replace(day=1)
          print(in_dat)
          rp_exir.delete(0,'end')
        #   jh=rp_exir.insert(0, in_dat)
          rp_exir.set_date(in_dat.strftime(dts))
        
          cr=date.today()
          rp_exir1.delete(0,'end')
          rp_exir1.insert(0, cr.strftime(dts))
          
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )

          drf=canvas

          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')

          # Create an instance of Style widget
          style=ttk.Style()
          style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
          style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
          style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
          
          if company is not None:
        
              labelcmp=Label(canvas,text=company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company[2], bg="white",font=("Helvetica", 9),anchor="nw",justify=LEFT, width=50, height=6)
              labelcmpl.config(justify="left")
              
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company[4],fill='black',font=("Helvetica", 8), justify='left')
              
              
              # Add a Treeview widge
                  
              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
            
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  
                  count += 1
              
              
              # total_tri='SELECT SUM(invoicetot) from invoice WHERE invoicetot = (SELECT invoicetot FROM invoice WHERE invodate BETWEEN %s and %s)'
              
              # inv_valuz1=(var1,var2)
              # fbcursor.execute(total_tri,inv_valuz1)
              # print ('haii')
              # tot_tri= fbcursor.fetchall()
              

              # total_tax1_tri='SELECT SUM(totpaid) from invoice WHERE totpaid = (SELECT totpaid FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz2=(var1,var2)
              
              # fbcursor.execute(total_tax1_tri,inv_valuz2)
              # tot_tax1_tri= fbcursor.fetchall()
              
              # total_tax2_tri='SELECT SUM(balance) from invoice WHERE balance = (SELECT balance FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz3=(var1,var2)
              # fbcursor.execute(total_tax2_tri,inv_valuz3)
              # tot_inv_bal= fbcursor.fetchall()
              
              # rp_inv_tree.insert('', 'end',text="1",values=('','','-End Of List- ','','','Invoice Total','Total Paid','Balance'))
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','',tot_tri,tot_tax1_tri,tot_inv_bal))
              

              window = canvas.create_window(270, 260, anchor="nw", window=rp_inv_tree)
              
              
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          
          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+invfrm.get()+"      Date To:"+invto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp())


          canvas.bind("<Button-3>", my_popup)
      

      #--------------------------------------------------------------------------------------------------------------
      elif rth=="Year To Date":
          test_date=pendulum.today().date()
          start = test_date.start_of('year')
          rp_exir.delete(0,'end')
          rp_exir.insert(0, start.strftime(dts))

          cr=date.today()
          rp_exir1.delete(0,'end')
          rp_exir1.insert(0, cr.strftime(dts))
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          # Create an instance of Style widget
          style=ttk.Style()
          style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
          style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
          style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
          
          if company is not None:
              labelcmp=Label(canvas,text=company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company[2], bg="white",font=("Helvetica", 9),anchor="nw",justify=LEFT, width=50, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company[4],fill='black',font=("Helvetica", 8), justify='left')

              # Add a Treeview widge
                  
              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0

              var1=start
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)

              fbcursor.execute(sql_inv_dt,inv_valuz)
            
              
              for i in fbcursor:
               
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(invoicetot) from invoice WHERE invoicetot = (SELECT invoicetot FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz1=(var1,var2)
              # fbcursor.execute(total_tri,inv_valuz1)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(totpaid) from invoice WHERE totpaid = (SELECT totpaid FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz2=(var1,var2)
              # fbcursor.execute(total_tax1_tri,inv_valuz2)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(balance) from invoice WHERE balance = (SELECT balance FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz3=(var1,var2)
              # fbcursor.execute(total_tax2_tri,inv_valuz3)
              # tot_tax2_tri= fbcursor.fetchone()
              
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','',tot_tri,tot_tax1_tri,tot_tax2_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+invfrm.get()+"      Date To:"+invto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp())


          canvas.bind("<Button-3>", my_popup)
          #===============================================================================================
      elif rth=="Current year":
          test_date=pendulum.today().date()
          start = test_date.start_of('year')
          rp_exir.delete(0,'end')
          rp_exir.insert(0, start.strftime(dts))

          test_date_end=pendulum.today().date()
          end = test_date_end.end_of('year')
          rp_exir1.delete(0,'end')
          rp_exir1.insert(0, end.strftime(dts))
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          # Create an instance of Style widget
          style=ttk.Style()
          style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
          style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
          style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
          
          if company is not None:
              labelcmp=Label(canvas,text=company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company[2], bg="white",font=("Helvetica", 9),anchor="nw", justify=LEFT,width=50, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company[4],fill='black',font=("Helvetica", 8), justify='left')

              # Add a Treeview widge
                  
              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0

              var1=start
              var2=end
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)

              fbcursor.execute(sql_inv_dt,inv_valuz)
              tot_tris= fbcursor.fetchall()
            
              
              for i in tot_tris:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
            #   total_tri='SELECT SUM(invoicetot) from invoice WHERE invoicetot = (SELECT invoicetot FROM invoice WHERE invodate BETWEEN %s and %s)'
            #   inv_valuz1=(var1,var2)
            #   fbcursor.execute(total_tri,inv_valuz1)
            #   tot_tri1= fbcursor.fetchone()
              

            #   total_tax1_tri='SELECT SUM(totpaid) from invoice WHERE totpaid = (SELECT totpaid FROM invoice WHERE invodate BETWEEN %s and %s)'
            #   inv_valuz2=(var1,var2)
            #   fbcursor.execute(total_tax1_tri,inv_valuz2)
            #   tot_tax1_tri= fbcursor.fetchone()

            #   total_tax2_tri='SELECT SUM(balance) from invoice WHERE balance = (SELECT balance FROM invoice WHERE invodate BETWEEN %s and %s)'
            #   inv_valuz3=(var1,var2)
            #   fbcursor.execute(total_tax2_tri,inv_valuz3)
            #   tot_balance= fbcursor.fetchone()
              
            #   rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
            #   rp_inv_tree.insert('', 'end',text="1",values=('','','','','',tot_tri1,tot_tax1_tri,tot_balance))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+invfrm.get()+"      Date To:"+invto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp())


          canvas.bind("<Button-3>", my_popup)
      #==============================================================================================================
      elif rth=="Current month":
          given_date = datetime.today().date()
          in_dat = given_date.replace(day=1)
          rp_exir.delete(0,'end')
          rp_exir.insert(0, in_dat.strftime(dts))

          test_date=date.today()
          nxt_mnth=(test_date+relativedelta(day=31))
          rp_exir1.delete(0,'end')
          rp_exir1.insert(0, nxt_mnth.strftime(dts))
          
          
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          # Create an instance of Style widget
          style=ttk.Style()
          style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
          style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
          style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
          
          if company is not None:
              labelcmp=Label(canvas,text=company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50, justify=LEFT,height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company[4],fill='black',font=("Helvetica", 8), justify='left')

              # Add a Treeview widge
                  
              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0

              var1=in_dat
              var2=nxt_mnth
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)

              fbcursor.execute(sql_inv_dt,inv_valuz)
            
              
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(invoicetot) from invoice WHERE invoicetot = (SELECT invoicetot FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz1=(var1,var2)
              # fbcursor.execute(total_tri,inv_valuz1)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(totpaid) from invoice WHERE totpaid = (SELECT totpaid FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz2=(var1,var2)
              # fbcursor.execute(total_tax1_tri,inv_valuz2)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(balance) from invoice WHERE balance = (SELECT balance FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz3=(var1,var2)
              # fbcursor.execute(total_tax2_tri,inv_valuz3)
              # tot_tax2_tri= fbcursor.fetchone()
              
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','',tot_tri,tot_tax1_tri,tot_tax2_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+invfrm.get()+"      Date To:"+invto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp())


          canvas.bind("<Button-3>", my_popup)
          #=====================================================================================================
      elif rth=="Current days":

        #   given_date=rp_exir.get_date().strftime(dts)
          
          given_date = date.today()
          rp_exir.delete(0,'end')
          rp_exir.insert(0,given_date.strftime(dts))

        #   cr=date.today()
        #   rp_exir1.delete(0,'end')
        #   rp_exir1.insert(0, cr.strftime(dts))
          cr=rp_exir1.get_date().strftime(dts)
          
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          # Create an instance of Style widget
          style=ttk.Style()
          style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
          style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
          style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
          
          if company is not None:
              labelcmp=Label(canvas,text=company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company[4],fill='black',font=("Helvetica", 8), justify='left')

              # Add a Treeview widge
                  
              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0

              var1=given_date
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)

              fbcursor.execute(sql_inv_dt,inv_valuz)
            
              
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              total_tri='SELECT SUM(invoicetot) from invoice WHERE invoicetot = (SELECT invoicetot FROM invoice WHERE invodate BETWEEN %s and %s)'
              inv_valuz1=(var1,var2)
              fbcursor.execute(total_tri,inv_valuz1)
              tot_tri= fbcursor.fetchone()
              

              total_tax1_tri='SELECT SUM(totpaid) from invoice WHERE totpaid = (SELECT totpaid FROM invoice WHERE invodate BETWEEN %s and %s)'
              inv_valuz2=(var1,var2)
              fbcursor.execute(total_tax1_tri,inv_valuz2)
              tot_tax1_tri= fbcursor.fetchone()

              total_tax2_tri='SELECT SUM(balance) from invoice WHERE balance = (SELECT balance FROM invoice WHERE invodate BETWEEN %s and %s)'
              inv_valuz3=(var1,var2)
              fbcursor.execute(total_tax2_tri,inv_valuz3)
              tot_tax2_tri= fbcursor.fetchone()
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoicess Total','Total Paid','Balance'))
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','',tot_tri,tot_tax1_tri,tot_tax2_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+invfrm.get()+"      Date To:"+invto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp())


          canvas.bind("<Button-3>", my_popup)


          
          #=================================================================================================
      elif rth=="Last 30 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=30)
          rp_exir.delete(0,'end')
          rp_exir.insert(0, in_dat.strftime(dts))

          cr=date.today()
          rp_exir1.delete(0,'end')
          rp_exir1.insert(0, cr.strftime(dts))
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          # Create an instance of Style widget
          style=ttk.Style()
          style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
          style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
          style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
          
          if company is not None:
              labelcmp=Label(canvas,text=company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company[4],fill='black',font=("Helvetica", 8), justify='left')

              # Add a Treeview widge
                  
              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)

              fbcursor.execute(sql_inv_dt,inv_valuz)
            
              
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(invoicetot) from invoice WHERE invoicetot = (SELECT invoicetot FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz1=(var1,var2)
              # fbcursor.execute(total_tri,inv_valuz1)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(totpaid) from invoice WHERE totpaid = (SELECT totpaid FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz2=(var1,var2)
              # fbcursor.execute(total_tax1_tri,inv_valuz2)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(balance) from invoice WHERE balance = (SELECT balance FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz3=(var1,var2)
              # fbcursor.execute(total_tax2_tri,inv_valuz3)
              # tot_tax2_tri= fbcursor.fetchone()
              
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','',tot_tri,tot_tax1_tri,tot_tax2_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+invfrm.get()+"      Date To:"+invto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp())


          canvas.bind("<Button-3>", my_popup)
      
      #=====================================================================================================
      elif rth=="Last 60 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=60)
          rp_exir.delete(0,'end')
          rp_exir.insert(0, in_dat)

          cr=date.today()
          rp_exir1.delete(0,'end')
          rp_exir1.insert(0, cr)
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          # Create an instance of Style widget
          style=ttk.Style()
          style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
          style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
          style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
          
          if company is not None:
              labelcmp=Label(canvas,text=company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company[4],fill='black',font=("Helvetica", 8), justify='left')
              # Add a Treeview widge
                  
              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)

              fbcursor.execute(sql_inv_dt,inv_valuz)
            
              
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(invoicetot) from invoice WHERE invoicetot = (SELECT invoicetot FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz1=(var1,var2)
              # fbcursor.execute(total_tri,inv_valuz1)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(totpaid) from invoice WHERE totpaid = (SELECT totpaid FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz2=(var1,var2)
              # fbcursor.execute(total_tax1_tri,inv_valuz2)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(balance) from invoice WHERE balance = (SELECT balance FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz3=(var1,var2)
              # fbcursor.execute(total_tax2_tri,inv_valuz3)
              # tot_tax2_tri= fbcursor.fetchone()
              
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','',tot_tri,tot_tax1_tri,tot_tax2_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+invfrm.get()+"      Date To:"+invto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp())


          canvas.bind("<Button-3>", my_popup)
      #========================================================================================================
      #================================================================================================================
      elif rth=="Last 90 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=90)
          rp_exir.delete(0,'end')
          rp_exir.insert(0, in_dat.strftime(dts))

          cr=date.today()
          rp_exir1.delete(0,'end')
          rp_exir1.insert(0, cr.strftime(dts))
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          # Create an instance of Style widget
          style=ttk.Style()
          style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
          style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
          style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
          
          if company is not None:
              labelcmp=Label(canvas,text=company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company[4],fill='black',font=("Helvetica", 8), justify='left')

              # Add a Treeview widge
                  
              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)

              fbcursor.execute(sql_inv_dt,inv_valuz)
            
              
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(invoicetot) from invoice WHERE invoicetot = (SELECT invoicetot FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz1=(var1,var2)
              # fbcursor.execute(total_tri,inv_valuz1)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(totpaid) from invoice WHERE totpaid = (SELECT totpaid FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz2=(var1,var2)
              # fbcursor.execute(total_tax1_tri,inv_valuz2)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(balance) from invoice WHERE balance = (SELECT balance FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz3=(var1,var2)
              # fbcursor.execute(total_tax2_tri,inv_valuz3)
              # tot_tax2_tri= fbcursor.fetchone()
              
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','',tot_tri,tot_tax1_tri,tot_tax2_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=100)
              tree.heading("# 4", text="Terms")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Invoice Paid")
              tree.column("# 8", anchor=E, stretch=NO, width=100)
              tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+invfrm.get()+"      Date To:"+invto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')

          canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp())


          canvas.bind("<Button-3>", my_popup)
          #====================================================================================================
      elif rth=="Previous month":
          last_day_of_prev_month=date.today().replace(day=1)- timedelta(days=1)
          in_dat=date.today().replace(day=1)-timedelta(last_day_of_prev_month.day)
          rp_exir.delete(0,'end')
          rp_exir.insert(0, in_dat.strftime(dts))

          cr=date.today()
          rp_exir1.delete(0,'end')
          rp_exir1.insert(0, cr.strftime(dts))
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          # Create an instance of Style widget
          style=ttk.Style()
          style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
          style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
          style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
          
          if company is not None:
              labelcmp=Label(canvas,text=company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company[4],fill='black',font=("Helvetica", 8), justify='left')

              # Add a Treeview widge
                  
              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)

              fbcursor.execute(sql_inv_dt,inv_valuz)
            
              
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(invoicetot) from invoice WHERE invoicetot = (SELECT invoicetot FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz1=(var1,var2)
              # fbcursor.execute(total_tri,inv_valuz1)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(totpaid) from invoice WHERE totpaid = (SELECT totpaid FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz2=(var1,var2)
              # fbcursor.execute(total_tax1_tri,inv_valuz2)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(balance) from invoice WHERE balance = (SELECT balance FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz3=(var1,var2)
              # fbcursor.execute(total_tax2_tri,inv_valuz3)
              # tot_tax2_tri= fbcursor.fetchone()
              
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','',tot_tri,tot_tax1_tri,tot_tax2_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+invfrm.get()+"      Date To:"+invto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp())


          canvas.bind("<Button-3>", my_popup)
          #===========================================================================================================
      elif rth=="Previous year":
          

          last_year = (datetime.now()-relativedelta(years=1))
          rp_exir.delete(0,'end')
          rp_exir.insert(0, last_year.strftime(dts))

          cr=date.today()
          rp_exir1.delete(0,'end')
          rp_exir1.insert(0, cr.strftime(dts))
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          # Create an instance of Style widget
          style=ttk.Style()
          style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
          style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
          style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
          
          if company is not None:
              labelcmp=Label(canvas,text=company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company[4],fill='black',font=("Helvetica", 8), justify='left')

              # Add a Treeview widge
                  
              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0

              var1=last_year
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)

              fbcursor.execute(sql_inv_dt,inv_valuz)
            
              
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(invoicetot) from invoice WHERE invoicetot = (SELECT invoicetot FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz1=(var1,var2)
              # fbcursor.execute(total_tri,inv_valuz1)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(totpaid) from invoice WHERE totpaid = (SELECT totpaid FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz2=(var1,var2)
              # fbcursor.execute(total_tax1_tri,inv_valuz2)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(balance) from invoice WHERE balance = (SELECT balance FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz3=(var1,var2)
              # fbcursor.execute(total_tax2_tri,inv_valuz3)
              # tot_tax2_tri= fbcursor.fetchone()
              
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','',tot_tri,tot_tax1_tri,tot_tax2_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+invfrm.get()+"      Date To:"+invto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp())


          canvas.bind("<Button-3>", my_popup)
      # ------------------------------
      elif rth=="Custom Range":
          ltt=rp_exir.get_date()
        #   ltt=trt.set_date(trt).strftime(dts)
          ltt1=rp_exir1.get_date()

          
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          # Create an instance of Style widget
          style=ttk.Style()
          style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
          style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
          style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
          
          if company is not None:
              labelcmp=Label(canvas,text=company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company[4],fill='black',font=("Helvetica", 8), justify='left')

              # Add a Treeview widge
                  
              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0
            
              var1=ltt
              var2=ltt1
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)

              fbcursor.execute(sql_inv_dt,inv_valuz)
            
              
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(invoicetot) from invoice WHERE invoicetot = (SELECT invoicetot FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz1=(var1,var2)
              # fbcursor.execute(total_tri,inv_valuz1)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(totpaid) from invoice WHERE totpaid = (SELECT totpaid FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz2=(var1,var2)
              # fbcursor.execute(total_tax1_tri,inv_valuz2)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(balance) from invoice WHERE balance = (SELECT balance FROM invoice WHERE invodate BETWEEN %s and %s)'
              # inv_valuz3=(var1,var2)
              # fbcursor.execute(total_tax2_tri,inv_valuz3)
              # tot_tax2_tri= fbcursor.fetchone()
              
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              # rp_inv_tree.insert('', 'end',text="1",values=('','','','','',tot_tri,tot_tax1_tri,tot_tax2_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              rp_inv_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+invfrm.get()+"      Date To:"+invto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp())


          canvas.bind("<Button-3>", my_popup)

          #============================================================================================
      else:
          pass
      
  #---------------------------------------------------INVOICE REPORT (WITH CUSTOMER)---------------------------------
  def category_irwc(): 
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      if not rp_date_for:
                pass
      else:
                if rp_date_for[0]=="mm-dd-yyyy":
                    dts='%m-%d-%Y'

                elif rp_date_for[0]=="dd-mm-yyyy":
                    dts='%d-%m-%Y'
        
                # elif rp_date_for[0]=="yyyy.mm.dd":
                #     dts='%Y.%m.%d'
            
                elif rp_date_for[0]=="mm/dd/yyyy":
                    dts='%m/%d/%y'
            
                elif rp_date_for[0]=="dd/mm/yyyy":
                    dts='%d/%m/%Y'
                    
                elif rp_date_for[0]=="dd.mm.yyyy":
                    dts='%d.%m.%Y'
                    
                # elif rp_date_for[0]=="yyyy/mm/dd":
                #     dts='%Y/%m/%d'

                else:
                    dts='%d-%m-%Y'
    # firtst filter-----------------------------------Month to date
      
      # #for company details
      tro_company = "SELECT * from company"
      fbcursor.execute(tro_company)
      company_tro= fbcursor.fetchone()
     

      rth=invfilter.get()
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
    
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      
      ps_cr=post_rp[0]
      global drf
      rth=irwcfilter.get()
      if rth=="Month to date":
          

          given_date = datetime.today().date()
          in_dat = given_date.replace(day=1)
          irwcfrm1.delete(0,'end')
          irwcfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          irwcto1.delete(0,'end')
          irwcto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_irwc_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              # Insert the data in Treeview widget
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0
              

              
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              print(ps_cr)

              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_ird= fbcursor.fetchone()
          
              
              # rp_irwc_tree.insert('', 'end',text="1",values=('','','End of List','','','Invoice Total'))

              # rp_irwc_tree.insert('', 'end',text="1",values=('','','','','Summary:',tot_ird))
              
              window = canvas.create_window(270, 260, anchor="nw", window=rp_irwc_tree)


              
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+irwcfrm.get()+"      Date To:"+irwcto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_irwc())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_irwc())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas2())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_irwc())


          canvas.bind("<Button-3>", my_popup)

      #--------------------------------------------------------------------------------------------------------------
      elif rth=="Year To Date":
          test_date=pendulum.today().date()
          start = test_date.start_of('year')
          irwcfrm1.delete(0,'end')
          irwcfrm1.insert(0, start.strftime(dts))

          cr=date.today()
          irwcto1.delete(0,'end')
          irwcto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50, justify=LEFT,height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_irwc_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              # Insert the data in Treeview widget
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0

              var1=start
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_ird= fbcursor.fetchone()
          
              
              # rp_irwc_tree.insert('', 'end',text="1",values=('','','End of List','','','Invoice Total'))

              # rp_irwc_tree.insert('', 'end',text="1",values=('','','','','Summary:',tot_ird))
              
              window = canvas.create_window(270, 260, anchor="nw", window=rp_irwc_tree)


              
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+irwcfrm.get()+"      Date To:"+irwcto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_irwc())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_irwc())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas2())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_irwc())


          canvas.bind("<Button-3>", my_popup)
          #===============================================================================================
      elif rth=="Current year":
          test_date=pendulum.today().date()
          start = test_date.start_of('year')
          irwcfrm1.delete(0,'end')
          irwcfrm1.insert(0, start.strftime(dts))

          test_date_end=pendulum.today().date()
          end = test_date_end.end_of('year')
          irwcto1.delete(0,'end')
          irwcto1.insert(0, end.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_irwc_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              # Insert the data in Treeview widget
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0
              var1=start
              var2=end
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_ird= fbcursor.fetchone()
          
              
              # rp_irwc_tree.insert('', 'end',text="1",values=('','','End of List','','','Invoice Total'))

              # rp_irwc_tree.insert('', 'end',text="1",values=('','','','','Summary:',tot_ird))
              
              window = canvas.create_window(270, 260, anchor="nw", window=rp_irwc_tree)


              
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+irwcfrm.get()+"      Date To:"+irwcto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')



          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_irwc())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_irwc())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas2())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_irwc())


          canvas.bind("<Button-3>", my_popup)
      #==============================================================================================================
      elif rth=="Current month":
          given_date = datetime.today().date()
          in_dat = given_date.replace(day=1)
          irwcfrm1.delete(0,'end')
          irwcfrm1.insert(0, in_dat.strftime(dts))

          test_date=date.today()
          nxt_mnth=(test_date+relativedelta(day=31))
          irwcto1.delete(0,'end')
          irwcto1.insert(0, nxt_mnth.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_irwc_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              # Insert the data in Treeview widget
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0
              var1=in_dat
              var2=nxt_mnth
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_ird= fbcursor.fetchone()
          
              
              # rp_irwc_tree.insert('', 'end',text="1",values=('','','End of List','','','Invoice Total'))

              # rp_irwc_tree.insert('', 'end',text="1",values=('','','','','Summary:',tot_ird))
              
              window = canvas.create_window(270, 260, anchor="nw", window=rp_irwc_tree)


              
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+irwcfrm.get()+"      Date To:"+irwcto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')



          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_irwc())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_irwc())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas2())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_irwc())


          canvas.bind("<Button-3>", my_popup)
          #=====================================================================================================
      elif rth=="Current days":
        #   given_date = date.today()
        #   irwcfrm1.delete(0,'end')
          given_date=irwcfrm1.get_date()
        #   irwcfrm1.insert(0,given_date.strftime(dts))

          cr=date.today()
          irwcto1.delete(0,'end')
          irwcto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_irwc_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              # Insert the data in Treeview widget
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0
              var1=given_date
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_ird= fbcursor.fetchone()
          
              
              # rp_irwc_tree.insert('', 'end',text="1",values=('','','End of List','','','Invoice Total'))

              # rp_irwc_tree.insert('', 'end',text="1",values=('','','','','Summary:',tot_ird))
              
              window = canvas.create_window(270, 260, anchor="nw", window=rp_irwc_tree)


              
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+irwcfrm.get()+"      Date To:"+irwcto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_irwc())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_irwc())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas2())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_irwc())


          canvas.bind("<Button-3>", my_popup)
          #=================================================================================================
      elif rth=="Last 30 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=30)
          irwcfrm1.delete(0,'end')
          irwcfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          irwcto1.delete(0,'end')
          irwcto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_irwc_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              # Insert the data in Treeview widget
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_ird= fbcursor.fetchone()
          
              
              # rp_irwc_tree.insert('', 'end',text="1",values=('','','End of List','','','Invoice Total'))

              # rp_irwc_tree.insert('', 'end',text="1",values=('','','','','Summary:',tot_ird))
              
              window = canvas.create_window(270, 260, anchor="nw", window=rp_irwc_tree)


              
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+irwcfrm.get()+"      Date To:"+irwcto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')



          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_irwc())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_irwc())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas2())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_irwc())


          canvas.bind("<Button-3>", my_popup)
      
      #=====================================================================================================
      elif rth=="Last 60 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=60)
          irwcfrm1.delete(0,'end')
          irwcfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          irwcto1.delete(0,'end')
          irwcto1.insert(0, cr.strftime(dts))
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_irwc_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              # Insert the data in Treeview widget
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0
              
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_ird= fbcursor.fetchone()
          
              
              # rp_irwc_tree.insert('', 'end',text="1",values=('','','End of List','','','Invoice Total'))

              # rp_irwc_tree.insert('', 'end',text="1",values=('','','','','Summary:',tot_ird))
              
              window = canvas.create_window(270, 260, anchor="nw", window=rp_irwc_tree)


              
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+irwcfrm.get()+"      Date To:"+irwcto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_irwc())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_irwc())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas2())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_irwc())


          canvas.bind("<Button-3>", my_popup)
  
      #================================================================================================================
      elif rth=="Last 90 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=90)
          irwcfrm1.delete(0,'end')
          irwcfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          irwcto1.delete(0,'end')
          irwcto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_irwc_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              # Insert the data in Treeview widget
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0
              
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_ird= fbcursor.fetchone()
          
              
              # rp_irwc_tree.insert('', 'end',text="1",values=('','','End of List','','','Invoice Total'))

              # rp_irwc_tree.insert('', 'end',text="1",values=('','','','','Summary:',tot_ird))
              
              window = canvas.create_window(270, 260, anchor="nw", window=rp_irwc_tree)


              
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+irwcfrm.get()+"      Date To:"+irwcto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_irwc())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_irwc())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas2())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_irwc())


          canvas.bind("<Button-3>", my_popup)
          #====================================================================================================
      elif rth=="Previous month":
          last_day_of_prev_month=date.today().replace(day=1)- timedelta(days=1)
          in_dat=date.today().replace(day=1)-timedelta(last_day_of_prev_month.day)
          irwcfrm1.delete(0,'end')
          irwcfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          irwcto1.delete(0,'end')
          irwcto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_irwc_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              # Insert the data in Treeview widget
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0
              
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_ird= fbcursor.fetchone()
          
              
              # rp_irwc_tree.insert('', 'end',text="1",values=('','','End of List','','','Invoice Total'))

              # rp_irwc_tree.insert('', 'end',text="1",values=('','','','','Summary:',tot_ird))
              
              window = canvas.create_window(270, 260, anchor="nw", window=rp_irwc_tree)


              
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+irwcfrm.get()+"      Date To:"+irwcto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')



          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_irwc())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_irwc())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas2())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_irwc())


          canvas.bind("<Button-3>", my_popup)
          #===========================================================================================================
      elif rth=="Previous year":
          last_year = (datetime.now()-relativedelta(years=1))
          irwcfrm1.delete(0,'end')
          irwcfrm1.insert(0, last_year.strftime(dts))

          cr=date.today()
          irwcto1.delete(0,'end')
          irwcto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_irwc_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              # Insert the data in Treeview widget
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0
              
              var1=last_year
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_ird= fbcursor.fetchone()
          
              
              # rp_irwc_tree.insert('', 'end',text="1",values=('','','End of List','','','Invoice Total'))

              # rp_irwc_tree.insert('', 'end',text="1",values=('','','','','Summary:',tot_ird))
              
              window = canvas.create_window(270, 260, anchor="nw", window=rp_irwc_tree)


              
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+irwcfrm.get()+"      Date To:"+irwcto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')



          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_irwc())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_irwc())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas2())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_irwc())


          canvas.bind("<Button-3>", my_popup)
      elif rth=="Custom Range":
          lte=irwcfrm1.get_date()
          lte1=irwcto1.get_date()
        

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_irwc_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              # Insert the data in Treeview widget
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0

              var1=lte
              var2=lte1
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_ird= fbcursor.fetchone()
          
              
              # rp_irwc_tree.insert('', 'end',text="1",values=('','','End of List','','','Invoice Total'))

              # rp_irwc_tree.insert('', 'end',text="1",values=('','','','','Summary:',tot_ird))
              
              window = canvas.create_window(270, 260, anchor="nw", window=rp_irwc_tree)


              
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+irwcfrm.get()+"      Date To:"+irwcto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')



          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
              
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_irwc())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_irwc())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas2())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_irwc())


          canvas.bind("<Button-3>", my_popup)

          #============================================================================================
      
      else:
          pass
      
      

  #-------------------------------------------------Order report-----------------------------------------
  def category_or():
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      if not rp_date_for:
                pass
      else:
                if rp_date_for[0]=="mm-dd-yyyy":
                    dts='%m-%d-%Y'

                elif rp_date_for[0]=="dd-mm-yyyy":
                    dts='%d-%m-%Y'
        
                # elif rp_date_for[0]=="yyyy.mm.dd":
                #     dts='%Y.%m.%d'
            
                elif rp_date_for[0]=="mm/dd/yyyy":
                    dts='%m/%d/%y'
            
                elif rp_date_for[0]=="dd/mm/yyyy":
                    dts='%d/%m/%Y'
                    
                elif rp_date_for[0]=="dd.mm.yyyy":
                    dts='%d.%m.%Y'
                    
                # elif rp_date_for[0]=="yyyy/mm/dd":
                #     dts='%Y/%m/%d'

                else:
                    dts='%d-%m-%Y'
    # firtst filter-----------------------------------Month to date
      
      # #for company details
      or_company = "SELECT * from company"
      fbcursor.execute(or_company)
      company_or= fbcursor.fetchone()
      global drf
      rth=invfilter.get()
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      rth=orfilter.get()
      if rth=="Month to date":
          given_date = datetime.today().date()
          in_dat = given_date.replace(day=1)
          orfrm1.delete(0,'end')
          orfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          orto1.delete(0,'end')
          orto1.insert(0, cr.strftime(dts))

          frame = Frame( 
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvas,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_or_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_or_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_or_tree.heading("# 1", text="No")
              rp_or_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 2", text="Date")
              rp_or_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 3", text="Due Date")
              rp_or_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_or_tree.heading("# 4", text="Customer")
              rp_or_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 5", text="Status")
              rp_or_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_or_tree.get_children():
                  rp_or_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+str(i[26])))
                     
                  elif ps_cr=="after amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+" "+str(i[26])))
                      
                  elif ps_cr=="after amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+" "+crc))
                      
                   
                  else:
                      pass
                  
                  
                  count += 1
              # total_tri='SELECT SUM(sum_subtotal) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_or_tree)


          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
                  
                  # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

                  # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          
          canvas.create_text(900,100,text="Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+orfrm.get()+"      Date To:"+orto.get()+"\n order Category: All",fill='black',font=("Helvetica", 8), justify='right')
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_or())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_or())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas3())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_or())
          canvas.bind("<Button-3>", my_popup)

      #--------------------------------------------------------------------------------------------------------------
      elif rth=="Year To Date":
          test_date=pendulum.today().date()
          start = test_date.start_of('year')
          orfrm1.delete(0,'end')
          orfrm1.insert(0, start.strftime(dts))

          cr=date.today()
          orto1.delete(0,'end')
          orto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvas,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_or_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_or_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_or_tree.heading("# 1", text="No")
              rp_or_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 2", text="Date")
              rp_or_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 3", text="Due Date")
              rp_or_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_or_tree.heading("# 4", text="Customer")
              rp_or_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 5", text="Status")
              rp_or_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_or_tree.get_children():
                  rp_or_tree.delete(record)
              count=0

              var1=start
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  
                  if ps_cr=="before amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+str(i[26])))
                     
                  elif ps_cr=="after amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+" "+str(i[26])))
                      
                  elif ps_cr=="after amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(sum_subtotal) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_or_tree)


          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
                  
                  # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

                  # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          
          canvas.create_text(900,100,text="Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+orfrm.get()+"      Date To:"+orto.get()+"\n order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_or())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_or())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas3())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_or())
          canvas.bind("<Button-3>", my_popup)
          #===============================================================================================
      elif rth=="Current year":
          test_date=pendulum.today().date()
          start = test_date.start_of('year')
          orfrm1.delete(0,'end')
          orfrm1.insert(0, start.strftime(dts))

          test_date_end=pendulum.today().date()
          end = test_date_end.end_of('year')
          orto1.delete(0,'end')
          orto1.insert(0, end.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvas,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_or_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_or_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_or_tree.heading("# 1", text="No")
              rp_or_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 2", text="Date")
              rp_or_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 3", text="Due Date")
              rp_or_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_or_tree.heading("# 4", text="Customer")
              rp_or_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 5", text="Status")
              rp_or_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_or_tree.get_children():
                  rp_or_tree.delete(record)
              count=0
              var1=start
              var2=end
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  
                  if ps_cr=="before amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+str(i[26])))
                     
                  elif ps_cr=="after amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+" "+str(i[26])))
                      
                  elif ps_cr=="after amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(sum_subtotal) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))
              window = canvas.create_window(270, 260, anchor="nw", window=rp_or_tree)


          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
                  
                  # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

                  # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          
          canvas.create_text(900,100,text="Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+orfrm.get()+"      Date To:"+orto.get()+"\n order Category: All",fill='black',font=("Helvetica", 8), justify='right')
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_or())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_or())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas3())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_or())
          canvas.bind("<Button-3>", my_popup)
      #==============================================================================================================
      elif rth=="Current month":
          given_date = datetime.today().date()
          in_dat = given_date.replace(day=1)
          orfrm1.delete(0,'end')
          orfrm1.insert(0, in_dat.strftime(dts))

          test_date=date.today()
          nxt_mnth=(test_date+relativedelta(day=31))
          orto1.delete(0,'end')
          orto1.insert(0, nxt_mnth.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvas,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
              
              rp_or_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_or_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_or_tree.heading("# 1", text="No")
              rp_or_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 2", text="Date")
              rp_or_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 3", text="Due Date")
              rp_or_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_or_tree.heading("# 4", text="Customer")
              rp_or_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 5", text="Status")
              rp_or_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_or_tree.get_children():
                  rp_or_tree.delete(record)
              count=0

              var1=in_dat
              var2=nxt_mnth
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  
                  if ps_cr=="before amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+str(i[26])))
                     
                  elif ps_cr=="after amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+" "+str(i[26])))
                      
                  elif ps_cr=="after amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(sum_subtotal) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_or_tree)


          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
                  
                  # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

                  # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          
          canvas.create_text(900,100,text="Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+orfrm.get()+"      Date To:"+orto.get()+"\n order Category: All",fill='black',font=("Helvetica", 8), justify='right')
          

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_or())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_or())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas3())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_or())
          canvas.bind("<Button-3>", my_popup)
          #=====================================================================================================
      elif rth=="Current days":
          given_date = date.today()
          orfrm1.delete(0,'end')
          orfrm1.insert(0,given_date.strftime(dts))

          cr=date.today()
          orto1.delete(0,'end')
          orto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvas,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_or_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_or_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_or_tree.heading("# 1", text="No")
              rp_or_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 2", text="Date")
              rp_or_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 3", text="Due Date")
              rp_or_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_or_tree.heading("# 4", text="Customer")
              rp_or_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 5", text="Status")
              rp_or_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_or_tree.get_children():
                  rp_or_tree.delete(record)
              count=0
              var1=given_date
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  
                  if ps_cr=="before amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+str(i[26])))
                     
                  elif ps_cr=="after amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+" "+str(i[26])))
                      
                  elif ps_cr=="after amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(sum_subtotal) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_or_tree)


          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
                  
                  # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

                  # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          
          canvas.create_text(900,100,text="Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+orfrm.get()+"      Date To:"+orto.get()+"\n order Category: All",fill='black',font=("Helvetica", 8), justify='right')
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_or())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_or())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas3())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_or())
          canvas.bind("<Button-3>", my_popup)
          #=================================================================================================
      elif rth=="Last 30 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=30)
          orfrm1.delete(0,'end')
          orfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          orto1.delete(0,'end')
          orto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvas,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_or_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_or_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_or_tree.heading("# 1", text="No")
              rp_or_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 2", text="Date")
              rp_or_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 3", text="Due Date")
              rp_or_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_or_tree.heading("# 4", text="Customer")
              rp_or_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 5", text="Status")
              rp_or_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_or_tree.get_children():
                  rp_or_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  
                  if ps_cr=="before amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+str(i[26])))
                     
                  elif ps_cr=="after amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+" "+str(i[26])))
                      
                  elif ps_cr=="after amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(sum_subtotal) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_or_tree)


          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
                  
                  # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

                  # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          
          canvas.create_text(900,100,text="Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+orfrm.get()+"      Date To:"+orto.get()+"\n order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_or())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_or())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas3())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_or())
          canvas.bind("<Button-3>", my_popup)
      
      #=====================================================================================================
      elif rth=="Last 60 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=60)
          orfrm1.delete(0,'end')
          orfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          orto1.delete(0,'end')
          orto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvas,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_or_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_or_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_or_tree.heading("# 1", text="No")
              rp_or_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 2", text="Date")
              rp_or_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 3", text="Due Date")
              rp_or_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_or_tree.heading("# 4", text="Customer")
              rp_or_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 5", text="Status")
              rp_or_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_or_tree.get_children():
                  rp_or_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  
                  if ps_cr=="before amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+str(i[26])))
                     
                  elif ps_cr=="after amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+" "+str(i[26])))
                      
                  elif ps_cr=="after amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(sum_subtotal) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_or_tree)


          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
                  
                  # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

                  # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          
          canvas.create_text(900,100,text="Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+orfrm.get()+"      Date To:"+orto.get()+"\n order Category: All",fill='black',font=("Helvetica", 8), justify='right')
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_or())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_or())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas3())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_or())
          canvas.bind("<Button-3>", my_popup)


      #================================================================================================================
      elif rth=="Last 90 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=90)
          orfrm1.delete(0,'end')
          orfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          orto1.delete(0,'end')
          orto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvas,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_or_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_or_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_or_tree.heading("# 1", text="No")
              rp_or_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 2", text="Date")
              rp_or_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 3", text="Due Date")
              rp_or_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_or_tree.heading("# 4", text="Customer")
              rp_or_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 5", text="Status")
              rp_or_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_or_tree.get_children():
                  rp_or_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  
                  if ps_cr=="before amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+str(i[26])))
                     
                  elif ps_cr=="after amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+" "+str(i[26])))
                      
                  elif ps_cr=="after amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(sum_subtotal) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_or_tree)


          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
                  
                  # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

                  # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          
          canvas.create_text(900,100,text="Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+orfrm.get()+"      Date To:"+orto.get()+"\n order Category: All",fill='black',font=("Helvetica", 8), justify='right')
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_or())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_or())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas3())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_or())
          canvas.bind("<Button-3>", my_popup)
          #====================================================================================================
      elif rth=="Previous month":
          last_day_of_prev_month=date.today().replace(day=1)- timedelta(days=1)
          in_dat=date.today().replace(day=1)-timedelta(last_day_of_prev_month.day)
          orfrm1.delete(0,'end')
          orfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          orto1.delete(0,'end')
          orto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvas,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_or_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_or_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_or_tree.heading("# 1", text="No")
              rp_or_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 2", text="Date")
              rp_or_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 3", text="Due Date")
              rp_or_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_or_tree.heading("# 4", text="Customer")
              rp_or_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 5", text="Status")
              rp_or_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_or_tree.get_children():
                  rp_or_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  
                  if ps_cr=="before amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+str(i[26])))
                     
                  elif ps_cr=="after amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+" "+str(i[26])))
                      
                  elif ps_cr=="after amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(sum_subtotal) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_or_tree)


          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
                  
                  # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

                  # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          
          canvas.create_text(900,100,text="Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+orfrm.get()+"      Date To:"+orto.get()+"\n order Category: All",fill='black',font=("Helvetica", 8), justify='right')
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_or())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_or())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas3())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_or())
          canvas.bind("<Button-3>", my_popup)
          #===========================================================================================================
      elif rth=="Previous year":
          last_year = (datetime.now()-relativedelta(years=1))
          orfrm1.delete(0,'end')
          orfrm1.insert(0, last_year.strftime(dts))

          cr=date.today()
          orto1.delete(0,'end')
          orto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvas,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_or_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_or_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_or_tree.heading("# 1", text="No")
              rp_or_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 2", text="Date")
              rp_or_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 3", text="Due Date")
              rp_or_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_or_tree.heading("# 4", text="Customer")
              rp_or_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 5", text="Status")
              rp_or_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_or_tree.get_children():
                  rp_or_tree.delete(record)
              count=0

              var1=last_year
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  
                  if ps_cr=="before amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+str(i[26])))
                     
                  elif ps_cr=="after amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+" "+str(i[26])))
                      
                  elif ps_cr=="after amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(sum_subtotal) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_or_tree)


          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
                  
                  # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

                  # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          
          canvas.create_text(900,100,text="Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+orfrm.get()+"      Date To:"+orto.get()+"\n order Category: All",fill='black',font=("Helvetica", 8), justify='right')
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_or())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_or())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas3())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_or())
          canvas.bind("<Button-3>", my_popup)
      elif rth=="Custom Range":
          loy=orfrm1.get_date()
          loy1=orto1.get_date()
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvas,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_or_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_or_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_or_tree.heading("# 1", text="No")
              rp_or_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 2", text="Date")
              rp_or_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_or_tree.heading("# 3", text="Due Date")
              rp_or_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_or_tree.heading("# 4", text="Customer")
              rp_or_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 5", text="Status")
              rp_or_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_or_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_or_tree.get_children():
                  rp_or_tree.delete(record)
              count=0
              var1=loy
              var2=loy1
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  
                  if ps_cr=="before amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+str(i[26])))
                     
                  elif ps_cr=="after amount":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], crc+" "+str(i[26])))
                      
                  elif ps_cr=="after amount with space":
                      rp_or_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], i[3], i[4], str(i[26])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(sum_subtotal) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              # rp_or_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_or_tree)


          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
                  
                  # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

                  # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          
          canvas.create_text(900,100,text="Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+orfrm.get()+"      Date To:"+orto.get()+"\n order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_or())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_or())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas3())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_or())
          canvas.bind("<Button-3>", my_popup)

          #============================================================================================
      else:
          pass
  #-------------------------------------------------Tax Report Invoice-----------------------------------------
  def category_tri():
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      if not rp_date_for:
                pass
      else:
                if rp_date_for[0]=="mm-dd-yyyy":
                    dts='%m-%d-%Y'

                elif rp_date_for[0]=="dd-mm-yyyy":
                    dts='%d-%m-%Y'
        
                # elif rp_date_for[0]=="yyyy.mm.dd":
                #     dts='%Y.%m.%d'
            
                elif rp_date_for[0]=="mm/dd/yyyy":
                    dts='%m/%d/%y'
            
                elif rp_date_for[0]=="dd/mm/yyyy":
                    dts='%d/%m/%Y'
                    
                elif rp_date_for[0]=="dd.mm.yyyy":
                    dts='%d.%m.%Y'
                    
                # elif rp_date_for[0]=="yyyy/mm/dd":
                #     dts='%Y/%m/%d'

                else:
                    dts='%d-%m-%Y'
    # firtst filter-----------------------------------Month to date
      
      tri_company = "SELECT * from company"
      fbcursor.execute(tri_company)
      company_tri= fbcursor.fetchone()
      global drf
      rth=invfilter.get()
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      rth=trifilter.get()
      if rth=="Month to date":
          given_date = datetime.today().date()
          in_dat = given_date.replace(day=1)
          trifrm1.delete(0,'end')
          trifrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          trito1.delete(0,'end')
          trito1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500, 
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                    
                  
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from invoice'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr= fbcursor.fetchone()

              
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','',tot_bfr,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tri_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tri_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 1", text="Invoice No")
              rep_tri_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 2", text="Issue Date")
              rep_tri_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rep_tri_tree.heading("# 3", text="Due Date")
              rep_tri_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tri_tree.heading("# 4", text="Total Before TAX")
              rep_tri_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 5", text="TAX1")
              rep_tri_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 6", text="TAX2")
              rep_tri_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tri_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=rep_tri_tree)

          canvas.create_text(875,100,text="Tax Report(Invoice)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trifrm.get()+"      Date To:"+trito.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tri())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tri())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas11())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tri())
          canvas.bind("<Button-3>", my_popup)
          

      #--------------------------------------------------------------------------------------------------------------
      elif rth=="Year To Date":
          test_date=pendulum.today().date()
          start = test_date.start_of('year')
          trifrm1.delete(0,'end')
          trifrm1.insert(0, start.strftime(dts))

          cr=date.today()
          trito1.delete(0,'end')
          trito1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0

              var1=start
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from invoice'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr= fbcursor.fetchone()

              
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','',tot_bfr,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tri_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tri_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 1", text="Invoice No")
              rep_tri_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 2", text="Issue Date")
              rep_tri_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rep_tri_tree.heading("# 3", text="Due Date")
              rep_tri_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tri_tree.heading("# 4", text="Total Before TAX")
              rep_tri_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 5", text="TAX1")
              rep_tri_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 6", text="TAX2")
              rep_tri_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tri_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=rep_tri_tree)

          canvas.create_text(875,100,text="Tax Report(Invoice)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trifrm.get()+"      Date To:"+trito.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tri())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tri())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas11())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tri())
          canvas.bind("<Button-3>", my_popup)
          #===============================================================================================
      elif rth=="Current year":
          test_date=pendulum.today().date()
          start = test_date.start_of('year')
          trifrm1.delete(0,'end')
          trifrm1.insert(0, start.strftime(dts))

          test_date_end=pendulum.today().date()
          end = test_date_end.end_of('year')
          trito1.delete(0,'end')
          trito1.insert(0, end.strftime(dts))
          
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0

              var1=start
              var2=end
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from invoice'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr= fbcursor.fetchone()

              
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','',tot_bfr,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tri_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tri_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 1", text="Invoice No")
              rep_tri_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 2", text="Issue Date")
              rep_tri_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rep_tri_tree.heading("# 3", text="Due Date")
              rep_tri_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tri_tree.heading("# 4", text="Total Before TAX")
              rep_tri_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 5", text="TAX1")
              rep_tri_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 6", text="TAX2")
              rep_tri_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tri_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=rep_tri_tree)

          canvas.create_text(875,100,text="Tax Report(Invoice)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trifrm.get()+"      Date To:"+trito.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tri())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tri())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas11())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tri())
          canvas.bind("<Button-3>", my_popup)
      #==============================================================================================================
      elif rth=="Current month":
          given_date = datetime.today().date()
          in_dat = given_date.replace(day=1)
          trifrm1.delete(0,'end')
          trifrm1.insert(0, in_dat.strftime(dts))

          test_date=date.today()
          nxt_mnth=(test_date+relativedelta(day=31))
          trito1.delete(0,'end')
          trito1.insert(0, nxt_mnth.strftime(dts))
          
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0

              var1=in_dat
              var2=nxt_mnth
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from invoice'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr= fbcursor.fetchone()

              
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','',tot_bfr,tot_tax1_tri,tot_tax2_tri,tot_tri))
              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tri_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tri_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 1", text="Invoice No")
              rep_tri_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 2", text="Issue Date")
              rep_tri_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rep_tri_tree.heading("# 3", text="Due Date")
              rep_tri_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tri_tree.heading("# 4", text="Total Before TAX")
              rep_tri_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 5", text="TAX1")
              rep_tri_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 6", text="TAX2")
              rep_tri_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tri_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=rep_tri_tree)

          canvas.create_text(875,100,text="Tax Report(Invoice)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trifrm.get()+"      Date To:"+trito.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')



          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tri())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tri())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas11())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tri())
          canvas.bind("<Button-3>", my_popup)
          #=====================================================================================================
      elif rth=="Current days":
          given_date = date.today()
          trifrm1.delete(0,'end')
          trifrm1.insert(0,given_date.strftime(dts))

          cr=date.today()
          trito1.delete(0,'end')
          trito1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0

              var1=given_date
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from invoice'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr= fbcursor.fetchone()

              
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','',tot_bfr,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tri_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tri_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 1", text="Invoice No")
              rep_tri_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 2", text="Issue Date")
              rep_tri_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rep_tri_tree.heading("# 3", text="Due Date")
              rep_tri_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tri_tree.heading("# 4", text="Total Before TAX")
              rep_tri_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 5", text="TAX1")
              rep_tri_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 6", text="TAX2")
              rep_tri_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tri_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=rep_tri_tree)

          canvas.create_text(875,100,text="Tax Report(Invoice)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trifrm.get()+"      Date To:"+trito.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tri())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tri())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas11())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tri())
          canvas.bind("<Button-3>", my_popup)
          #=================================================================================================
      elif rth=="Last 30 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=30)
          trifrm1.delete(0,'end')
          trifrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          trito1.delete(0,'end')
          trito1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
            
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from invoice'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr= fbcursor.fetchone()

              
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','',tot_bfr,tot_tax1_tri,tot_tax2_tri,tot_tri))


              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tri_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tri_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 1", text="Invoice No")
              rep_tri_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 2", text="Issue Date")
              rep_tri_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rep_tri_tree.heading("# 3", text="Due Date")
              rep_tri_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tri_tree.heading("# 4", text="Total Before TAX")
              rep_tri_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 5", text="TAX1")
              rep_tri_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 6", text="TAX2")
              rep_tri_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tri_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=rep_tri_tree)

          canvas.create_text(875,100,text="Tax Report(Invoice)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trifrm.get()+"      Date To:"+trito.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')



          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tri())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tri())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas11())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tri())
          canvas.bind("<Button-3>", my_popup)
      
      #=====================================================================================================
      elif rth=="Last 60 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=60)
          trifrm1.delete(0,'end')
          trifrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          trito1.delete(0,'end')
          trito1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from invoice'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr= fbcursor.fetchone()

              
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','',tot_bfr,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tri_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tri_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 1", text="Invoice No")
              rep_tri_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 2", text="Issue Date")
              rep_tri_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rep_tri_tree.heading("# 3", text="Due Date")
              rep_tri_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tri_tree.heading("# 4", text="Total Before TAX")
              rep_tri_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 5", text="TAX1")
              rep_tri_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 6", text="TAX2")
              rep_tri_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tri_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=rep_tri_tree)

          canvas.create_text(875,100,text="Tax Report(Invoice)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trifrm.get()+"      Date To:"+trito.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tri())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tri())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas11())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tri())
          canvas.bind("<Button-3>", my_popup)


      #================================================================================================================
      elif rth=="Last 90 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=90)
          trifrm1.delete(0,'end')
          trifrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          trito1.delete(0,'end')
          trito1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from invoice'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr= fbcursor.fetchone()

              
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','',tot_bfr,tot_tax1_tri,tot_tax2_tri,tot_tri))
              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tri_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tri_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 1", text="Invoice No")
              rep_tri_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 2", text="Issue Date")
              rep_tri_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rep_tri_tree.heading("# 3", text="Due Date")
              rep_tri_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tri_tree.heading("# 4", text="Total Before TAX")
              rep_tri_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 5", text="TAX1")
              rep_tri_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 6", text="TAX2")
              rep_tri_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tri_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=rep_tri_tree)

          canvas.create_text(875,100,text="Tax Report(Invoice)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trifrm.get()+"      Date To:"+trito.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tri())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tri())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas11())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tri())
          canvas.bind("<Button-3>", my_popup)
          #====================================================================================================
      elif rth=="Previous month":
          last_day_of_prev_month=date.today().replace(day=1)- timedelta(days=1)
          in_dat=date.today().replace(day=1)-timedelta(last_day_of_prev_month.day)
          trifrm1.delete(0,'end')
          trifrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          trito1.delete(0,'end')
          trito1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from invoice'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr= fbcursor.fetchone()

              
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','',tot_bfr,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tri_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tri_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 1", text="Invoice No")
              rep_tri_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 2", text="Issue Date")
              rep_tri_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rep_tri_tree.heading("# 3", text="Due Date")
              rep_tri_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tri_tree.heading("# 4", text="Total Before TAX")
              rep_tri_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 5", text="TAX1")
              rep_tri_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 6", text="TAX2")
              rep_tri_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tri_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=rep_tri_tree)

          canvas.create_text(875,100,text="Tax Report(Invoice)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trifrm.get()+"      Date To:"+trito.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tri())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tri())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas11())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tri())
          canvas.bind("<Button-3>", my_popup)
          #===========================================================================================================
      elif rth=="Previous year":
          last_year = (datetime.now()-relativedelta(years=1))
          trifrm1.delete(0,'end')
          trifrm1.insert(0, last_year.strftime(dts))

          cr=date.today()
          trito1.delete(0,'end')
          trito1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=last_year
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from invoice'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr= fbcursor.fetchone()

              
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','',tot_bfr,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tri_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tri_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 1", text="Invoice No")
              rep_tri_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 2", text="Issue Date")
              rep_tri_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rep_tri_tree.heading("# 3", text="Due Date")
              rep_tri_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tri_tree.heading("# 4", text="Total Before TAX")
              rep_tri_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 5", text="TAX1")
              rep_tri_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 6", text="TAX2")
              rep_tri_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tri_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=rep_tri_tree)

          canvas.create_text(875,100,text="Tax Report(Invoice)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trifrm.get()+"      Date To:"+trito.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tri())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tri())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas11())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tri())
          canvas.bind("<Button-3>", my_popup)
      elif rth=="Custom Range":
          mlk=trifrm1.get_date()
          mlk1=trito1.get_date()
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=mlk
              var2=mlk1
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from invoice'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr= fbcursor.fetchone()

              
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','',tot_bfr,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tri_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tri_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 1", text="Invoice No")
              rep_tri_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 2", text="Issue Date")
              rep_tri_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rep_tri_tree.heading("# 3", text="Due Date")
              rep_tri_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tri_tree.heading("# 4", text="Total Before TAX")
              rep_tri_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 5", text="TAX1")
              rep_tri_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 6", text="TAX2")
              rep_tri_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tri_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=rep_tri_tree)

          canvas.create_text(875,100,text="Tax Report(Invoice)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trifrm.get()+"      Date To:"+trito.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tri())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tri())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas11())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tri())
          canvas.bind("<Button-3>", my_popup)

          #============================================================================================
      else:
          pass
      drf=canvas
  #-------------------------------------------------tax report order-----------------------------------------
  def category_tro():
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      if not rp_date_for:
                pass
      else:
                if rp_date_for[0]=="mm-dd-yyyy":
                    dts='%m-%d-%Y'

                elif rp_date_for[0]=="dd-mm-yyyy":
                    dts='%d-%m-%Y'
        
                # elif rp_date_for[0]=="yyyy.mm.dd":
                #     dts='%Y.%m.%d'
            
                elif rp_date_for[0]=="mm/dd/yyyy":
                    dts='%m/%d/%y'
            
                elif rp_date_for[0]=="dd/mm/yyyy":
                    dts='%d/%m/%Y'
                    
                elif rp_date_for[0]=="dd.mm.yyyy":
                    dts='%d.%m.%Y'
                    
                # elif rp_date_for[0]=="yyyy/mm/dd":
                #     dts='%Y/%m/%d'

                else:
                    dts='%d-%m-%Y'
    # firtst filter-----------------------------------Month to date
      

      # #for company details
      tro_company = "SELECT * from company"
      fbcursor.execute(tro_company)
      company_tro= fbcursor.fetchone()
      rth=invfilter.get()
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      rth=trofilter.get()
      if rth=="Month to date":

          given_date = datetime.today().date()
          in_dat = given_date.replace(day=1)
          trofrm1.delete(0,'end')
          trofrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          troto1.delete(0,'end')
          troto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Order No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+str(i[28]), crc+str(i[14]), crc+str(i[29]),crc+str(i[8])))
                      
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+crc, str(i[14])+crc, str(i[29])+crc,str(i[8])+crc))
                      
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+" "+str(i[28]), crc+" "+str(i[14]), crc+" "+str(i[29]),crc+" "+str(i[8])))
                    
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+" "+crc, str(i[14])+" "+crc, str(i[29])+" "+crc,str(i[8])+" "+crc))
                      
                  else:
                      pass

                  
                  count += 1

              # total_tri='SELECT SUM(Order_total) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from orders'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr_tri= fbcursor.fetchone()
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','-End of list-','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','Summary:',tot_bfr_tri,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)

              
              
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

          

              
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Order No")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Total Before TAX")
              tree.column("# 5", anchor=E, stretch=NO, width=90)
              tree.heading("# 5", text="TAX1")
              tree.column("# 6", anchor=E, stretch=NO, width=90)
              tree.heading("# 6", text="TAX2")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Order Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(880,100,text="Tax Report(Orders)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trofrm.get()+"      Date To:"+troto.get()+"\n Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tro())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tro())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas12())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tro())
          canvas.bind("<Button-3>", my_popup)

      #--------------------------------------------------------------------------------------------------------------
      elif rth=="Year To Date":
          test_date=pendulum.today().date()
          start = test_date.start_of('year')
          trofrm1.delete(0,'end')
          trofrm1.insert(0, start.strftime(dts))

          cr=date.today()
          troto1.delete(0,'end')
          troto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Order No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=start
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:

                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+str(i[28]), crc+str(i[14]), crc+str(i[29]),crc+str(i[8])))
                      
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+crc, str(i[14])+crc, str(i[29])+crc,str(i[8])+crc))
                      
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+" "+str(i[28]), crc+" "+str(i[14]), crc+" "+str(i[29]),crc+" "+str(i[8])))
                    
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+" "+crc, str(i[14])+" "+crc, str(i[29])+" "+crc,str(i[8])+" "+crc))
                      
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(Order_total) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from orders'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr_tri= fbcursor.fetchone()
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','-End of list-','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','Summary:',tot_bfr_tri,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)

              
              
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

          
              
              

              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Order No")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Total Before TAX")
              tree.column("# 5", anchor=E, stretch=NO, width=90)
              tree.heading("# 5", text="TAX1")
              tree.column("# 6", anchor=E, stretch=NO, width=90)
              tree.heading("# 6", text="TAX2")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Order Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(880,100,text="Tax Report(Orders)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trofrm.get()+"      Date To:"+troto.get()+"\n Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tro())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tro())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas12())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tro())
          canvas.bind("<Button-3>", my_popup)
          
          #===============================================================================================
      elif rth=="Current year":
          test_date=pendulum.today().date()
          start = test_date.start_of('year')
          trofrm1.delete(0,'end')
          trofrm1.insert(0, start.strftime(dts))

          test_date_end=pendulum.today().date()
          end = test_date_end.end_of('year')
          troto1.delete(0,'end')
          troto1.insert(0, end.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Order No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0

              var1=start
              var2=end
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:

                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+str(i[28]), crc+str(i[14]), crc+str(i[29]),crc+str(i[8])))
                      
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+crc, str(i[14])+crc, str(i[29])+crc,str(i[8])+crc))
                      
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+" "+str(i[28]), crc+" "+str(i[14]), crc+" "+str(i[29]),crc+" "+str(i[8])))
                    
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+" "+crc, str(i[14])+" "+crc, str(i[29])+" "+crc,str(i[8])+" "+crc))
                      
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(Order_total) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from orders'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr_tri= fbcursor.fetchone()
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','-End of list-','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','Summary:',tot_bfr_tri,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)

              
              
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

          

              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Order No")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Total Before TAX")
              tree.column("# 5", anchor=E, stretch=NO, width=90)
              tree.heading("# 5", text="TAX1")
              tree.column("# 6", anchor=E, stretch=NO, width=90)
              tree.heading("# 6", text="TAX2")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Order Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(880,100,text="Tax Report(Orders)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trofrm.get()+"      Date To:"+troto.get()+"\n Order Category: All",fill='black',font=("Helvetica", 8), justify='right')
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tro())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tro())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas12())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tro())
          canvas.bind("<Button-3>", my_popup)
      #==============================================================================================================
      elif rth=="Current month":
          given_date = datetime.today().date()
          in_dat = given_date.replace(day=1)
          trofrm1.delete(0,'end')
          trofrm1.insert(0, in_dat.strftime(dts))

          test_date=date.today()
          nxt_mnth=(test_date+relativedelta(day=31))
          troto1.delete(0,'end')
          troto1.insert(0, nxt_mnth.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Order No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=in_dat
              var2=nxt_mnth
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:

                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+str(i[28]), crc+str(i[14]), crc+str(i[29]),crc+str(i[8])))
                      
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+crc, str(i[14])+crc, str(i[29])+crc,str(i[8])+crc))
                      
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+" "+str(i[28]), crc+" "+str(i[14]), crc+" "+str(i[29]),crc+" "+str(i[8])))
                    
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+" "+crc, str(i[14])+" "+crc, str(i[29])+" "+crc,str(i[8])+" "+crc))
                      
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(Order_total) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from orders'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr_tri= fbcursor.fetchone()
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','-End of list-','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','Summary:',tot_bfr_tri,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)

              
              
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

          

              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Order No")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Total Before TAX")
              tree.column("# 5", anchor=E, stretch=NO, width=90)
              tree.heading("# 5", text="TAX1")
              tree.column("# 6", anchor=E, stretch=NO, width=90)
              tree.heading("# 6", text="TAX2")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Order Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(880,100,text="Tax Report(Orders)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trofrm.get()+"      Date To:"+troto.get()+"\n Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tro())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tro())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas12())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tro())
          canvas.bind("<Button-3>", my_popup)
          #=====================================================================================================
      elif rth=="Current days":
          given_date = date.today()
          trofrm1.delete(0,'end')
          trofrm1.insert(0,given_date.strftime(dts))

          cr=date.today()
          troto1.delete(0,'end')
          troto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the  headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Order No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=given_date
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:

                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+str(i[28]), crc+str(i[14]), crc+str(i[29]),crc+str(i[8])))
                      
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+crc, str(i[14])+crc, str(i[29])+crc,str(i[8])+crc))
                      
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+" "+str(i[28]), crc+" "+str(i[14]), crc+" "+str(i[29]),crc+" "+str(i[8])))
                    
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+" "+crc, str(i[14])+" "+crc, str(i[29])+" "+crc,str(i[8])+" "+crc))
                      
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(Order_total) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from orders'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr_tri= fbcursor.fetchone()
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','-End of list-','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','Summary:',tot_bfr_tri,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)

              
              
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

          

              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Order No")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Total Before TAX")
              tree.column("# 5", anchor=E, stretch=NO, width=90)
              tree.heading("# 5", text="TAX1")
              tree.column("# 6", anchor=E, stretch=NO, width=90)
              tree.heading("# 6", text="TAX2")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Order Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(880,100,text="Tax Report(Orders)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trofrm.get()+"      Date To:"+troto.get()+"\n Order Category: All",fill='black',font=("Helvetica", 8), justify='right')
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tro())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tro())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas12())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tro())
          canvas.bind("<Button-3>", my_popup)
          #=================================================================================================
      elif rth=="Last 30 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=30)
          trofrm1.delete(0,'end')
          trofrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          troto1.delete(0,'end')
          troto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Order No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:

                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+str(i[28]), crc+str(i[14]), crc+str(i[29]),crc+str(i[8])))
                      
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+crc, str(i[14])+crc, str(i[29])+crc,str(i[8])+crc))
                      
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+" "+str(i[28]), crc+" "+str(i[14]), crc+" "+str(i[29]),crc+" "+str(i[8])))
                    
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+" "+crc, str(i[14])+" "+crc, str(i[29])+" "+crc,str(i[8])+" "+crc))
                      
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(Order_total) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from orders'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr_tri= fbcursor.fetchone()
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','-End of list-','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','Summary:',tot_bfr_tri,tot_tax1_tri,tot_tax2_tri,tot_tri))


              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)

              
              
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

          

              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Order No")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Total Before TAX")
              tree.column("# 5", anchor=E, stretch=NO, width=90)
              tree.heading("# 5", text="TAX1")
              tree.column("# 6", anchor=E, stretch=NO, width=90)
              tree.heading("# 6", text="TAX2")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Order Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(880,100,text="Tax Report(Orders)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trofrm.get()+"      Date To:"+troto.get()+"\n Order Category: All",fill='black',font=("Helvetica", 8), justify='right')
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tro())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tro())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas12())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tro())
          canvas.bind("<Button-3>", my_popup)
      
      #=====================================================================================================
      elif rth=="Last 60 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=60)
          trofrm1.delete(0,'end')
          trofrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          troto1.delete(0,'end')
          troto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Order No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:

                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+str(i[28]), crc+str(i[14]), crc+str(i[29]),crc+str(i[8])))
                      
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+crc, str(i[14])+crc, str(i[29])+crc,str(i[8])+crc))
                      
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+" "+str(i[28]), crc+" "+str(i[14]), crc+" "+str(i[29]),crc+" "+str(i[8])))
                    
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+" "+crc, str(i[14])+" "+crc, str(i[29])+" "+crc,str(i[8])+" "+crc))
                      
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(Order_total) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from orders'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr_tri= fbcursor.fetchone()
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','-End of list-','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','Summary:',tot_bfr_tri,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)

              
              
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

          

              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Order No")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Total Before TAX")
              tree.column("# 5", anchor=E, stretch=NO, width=90)
              tree.heading("# 5", text="TAX1")
              tree.column("# 6", anchor=E, stretch=NO, width=90)
              tree.heading("# 6", text="TAX2")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Order Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(880,100,text="Tax Report(Orders)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trofrm.get()+"      Date To:"+troto.get()+"\n Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tro())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tro())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas12())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tro())
          canvas.bind("<Button-3>", my_popup)


      #================================================================================================================
      elif rth=="Last 90 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=90)
          trofrm1.delete(0,'end')
          trofrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          troto1.delete(0,'end')
          troto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Order No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:

                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+str(i[28]), crc+str(i[14]), crc+str(i[29]),crc+str(i[8])))
                      
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+crc, str(i[14])+crc, str(i[29])+crc,str(i[8])+crc))
                      
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+" "+str(i[28]), crc+" "+str(i[14]), crc+" "+str(i[29]),crc+" "+str(i[8])))
                    
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+" "+crc, str(i[14])+" "+crc, str(i[29])+" "+crc,str(i[8])+" "+crc))
                      
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(Order_total) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from orders'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr_tri= fbcursor.fetchone()
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','-End of list-','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','Summary:',tot_bfr_tri,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)

              
              
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

          

              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Order No")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Total Before TAX")
              tree.column("# 5", anchor=E, stretch=NO, width=90)
              tree.heading("# 5", text="TAX1")
              tree.column("# 6", anchor=E, stretch=NO, width=90)
              tree.heading("# 6", text="TAX2")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Order Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(880,100,text="Tax Report(Orders)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trofrm.get()+"      Date To:"+troto.get()+"\n Order Category: All",fill='black',font=("Helvetica", 8), justify='right')
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tro())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tro())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas12())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tro())
          canvas.bind("<Button-3>", my_popup)
          #====================================================================================================
      elif rth=="Previous month":
          last_day_of_prev_month=date.today().replace(day=1)- timedelta(days=1)
          in_dat=date.today().replace(day=1)-timedelta(last_day_of_prev_month.day)
          trofrm1.delete(0,'end')
          trofrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          troto1.delete(0,'end')
          troto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Order No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:

                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+str(i[28]), crc+str(i[14]), crc+str(i[29]),crc+str(i[8])))
                      
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+crc, str(i[14])+crc, str(i[29])+crc,str(i[8])+crc))
                      
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+" "+str(i[28]), crc+" "+str(i[14]), crc+" "+str(i[29]),crc+" "+str(i[8])))
                    
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+" "+crc, str(i[14])+" "+crc, str(i[29])+" "+crc,str(i[8])+" "+crc))
                      
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(Order_total) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from orders'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr_tri= fbcursor.fetchone()
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','-End of list-','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','Summary:',tot_bfr_tri,tot_tax1_tri,tot_tax2_tri,tot_tri))
              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)

              
              
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

          

              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Order No")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Total Before TAX")
              tree.column("# 5", anchor=E, stretch=NO, width=90)
              tree.heading("# 5", text="TAX1")
              tree.column("# 6", anchor=E, stretch=NO, width=90)
              tree.heading("# 6", text="TAX2")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Order Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(880,100,text="Tax Report(Orders)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trofrm.get()+"      Date To:"+troto.get()+"\n Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tro())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tro())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas12())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tro())
          canvas.bind("<Button-3>", my_popup)
          #===========================================================================================================
      elif rth=="Previous year":
          last_year = (datetime.now()-relativedelta(years=1))
          trofrm1.delete(0,'end')
          trofrm1.insert(0, last_year.strftime(dts))

          cr=date.today()
          troto1.delete(0,'end')
          troto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Order No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=last_year
              var2=cr
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:

                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+str(i[28]), crc+str(i[14]), crc+str(i[29]),crc+str(i[8])))
                      
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+crc, str(i[14])+crc, str(i[29])+crc,str(i[8])+crc))
                      
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+" "+str(i[28]), crc+" "+str(i[14]), crc+" "+str(i[29]),crc+" "+str(i[8])))
                    
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+" "+crc, str(i[14])+" "+crc, str(i[29])+" "+crc,str(i[8])+" "+crc))
                      
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(Order_total) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from orders'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr_tri= fbcursor.fetchone()
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','-End of list-','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','Summary:',tot_bfr_tri,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)

              
              
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

          

              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Order No")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Total Before TAX")
              tree.column("# 5", anchor=E, stretch=NO, width=90)
              tree.heading("# 5", text="TAX1")
              tree.column("# 6", anchor=E, stretch=NO, width=90)
              tree.heading("# 6", text="TAX2")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Order Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(880,100,text="Tax Report(Orders)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trofrm.get()+"      Date To:"+troto.get()+"\n Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tro())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tro())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas12())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tro())
          canvas.bind("<Button-3>", my_popup)
      elif rth=="Custom Range":
          cft=trofrm1.get_date()
          cft1=troto1.get_date()
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(365,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tro_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Order No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0
              var1=cft
              var2=cft1
              sql_inv_dt='SELECT * FROM orders WHERE order_date BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:

                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+str(i[28]), crc+str(i[14]), crc+str(i[29]),crc+str(i[8])))
                      
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+crc, str(i[14])+crc, str(i[29])+crc,str(i[8])+crc))
                      
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], crc+" "+str(i[28]), crc+" "+str(i[14]), crc+" "+str(i[29]),crc+" "+str(i[8])))
                    
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[1], i[2], str(i[28])+" "+crc, str(i[14])+" "+crc, str(i[29])+" "+crc,str(i[8])+" "+crc))
                      
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(Order_total) from orders'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(tax1) from orders'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(tax2) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_tri= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(totalbeforetax) from orders'
              # fbcursor.execute(total_tax2_tri)
              # tot_bfr_tri= fbcursor.fetchone()
              
              # rep_tro_tree.insert('', 'end',text="1",values=('','-End of list-','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              # rep_tro_tree.insert('', 'end',text="1",values=('','','Summary:',tot_bfr_tri,tot_tax1_tri,tot_tax2_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rep_tro_tree)

              
              
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

          

              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Order No")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Total Before TAX")
              tree.column("# 5", anchor=E, stretch=NO, width=90)
              tree.heading("# 5", text="TAX1")
              tree.column("# 6", anchor=E, stretch=NO, width=90)
              tree.heading("# 6", text="TAX2")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Order Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Order Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(880,100,text="Tax Report(Orders)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+trofrm.get()+"      Date To:"+troto.get()+"\n Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_tro())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_tro())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas12())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_tro())
          canvas.bind("<Button-3>", my_popup)

          #============================================================================================
      else:
          pass
  #-------------------------------------------------Sales report group by date------------------------------------------
  def category_srgd():
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      if not rp_date_for:
                pass
      else:
                if rp_date_for[0]=="mm-dd-yyyy":
                    dts='%m-%d-%Y'

                elif rp_date_for[0]=="dd-mm-yyyy":
                    dts='%d-%m-%Y'
        
                # elif rp_date_for[0]=="yyyy.mm.dd":
                #     dts='%Y.%m.%d'
            
                elif rp_date_for[0]=="mm/dd/yyyy":
                    dts='%m/%d/%y'
            
                elif rp_date_for[0]=="dd/mm/yyyy":
                    dts='%d/%m/%Y'
                    
                elif rp_date_for[0]=="dd.mm.yyyy":
                    dts='%d.%m.%Y'
                    
                # elif rp_date_for[0]=="yyyy/mm/dd":
                #     dts='%Y/%m/%d'

                else:
                    dts='%d-%m-%Y'
    # firtst filter-----------------------------------Month to date
      
      # #for company details
      tro_company = "SELECT * from company"
      fbcursor.execute(tro_company)
      company_tro= fbcursor.fetchone()
      rth=invfilter.get()
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]

      irt1=srgd_frm.get_date()
      irt2=srgd_to.get_date()
      rth=srgdfilter.get()
      if rth==rth:
          lkt=srgdfilter.get()
          lkts=srgdfilter.get()
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )

          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
              
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=120)
              tree.heading("# 1", text="Date")
              tree.column("# 2", anchor=E, stretch=NO, width=145)
              tree.heading("# 2", text="Quantity")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Cost")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Income")
              tree.column("# 5", anchor=E, stretch=NO, width=150)
              tree.heading("# 5", text="Profit")
              
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','',''))
              
              for record in tree.get_children():
                  tree.delete(record)
              count=0

              var_1=irt1
              var_2=irt2
              sql_inv='SELECT * FROM productservice Where name=%s'
              # inv_valuz=(var1,var2)
              
              inv=(lkts,)
              fbcursor.execute(sql_inv, inv)
              tre=fbcursor.fetchall()
              

              sel_inv_dt1='SELECT * FROM invoice Where invodate between %s and %s and Productserviceid=(SELECT Productserviceid from productservice Where name=%s)'
              inv_valuz=(var_1, var_2,lkt)
              fbcursor.execute(sel_inv_dt1, inv_valuz)
              tre1=fbcursor.fetchall()

              
              
              for i in tre1:
                  for j in tre:
                      y=int(j[9])*int(i[38])
                      r=i[8]
                      l=r-y
                      if ps_cr=="before amount":
                            tree.insert(parent='', index='end', text='hello',values=(i[2],i[38],crc+str(int(j[9])*int(i[38])),crc+str(i[8]),crc+str(l)))
                            
                            
                      elif ps_cr=="after amount":
                            tree.insert(parent='', index='end', text='hello',values=(i[2],i[38],str(int(j[9])*int(i[38]))+crc,str(i[8])+crc,str(l)+crc))
                            
                            
                      elif ps_cr=="before amount with space":
                            tree.insert(parent='', index='end', text='hello',values=(i[2],i[38],crc+" "+str(int(j[9])*int(i[38])),crc+" "+str(i[8]),crc+" "+str(l)))
                            
                            
                      elif ps_cr=="after amount with space":
                            tree.insert(parent='', index='end', text='hello',values=(i[2],i[38],str(int(j[9])*int(i[38]))+" "+crc,str(i[8])+" "+crc,str(l)+" "+crc))
                            
                      else:
                            pass
                            # tree.insert(parent='', index='end', text='hello',values=(i[2],i[38],int(j[9])*int(i[38]),i[8],l))
                      count += 1


                  count +=1


              window = canvas.create_window(270, 260, anchor="nw", window=tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=100)
              tree.heading("# 4", text="Terms")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Invoice Paid")
              tree.column("# 8", anchor=E, stretch=NO, width=100)
              tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(850,100,text="Sales Report(Group By Daste)",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+srgdfrm.get()+"      Date To:"+srgdto.get()+"\nOrder Category: All",fill='black',font=("Helvetica", 8), justify='right')
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_srgd())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_srgd())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas13())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_srgd())
          canvas.bind("<Button-3>", my_popup)

      else:
          pass

  #----------------------------------------invoice report detail------------------------------------------------------
  def category_ird():
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      if not rp_date_for:
                pass
      else:
                if rp_date_for[0]=="mm-dd-yyyy":
                    dts='%m-%d-%Y'

                elif rp_date_for[0]=="dd-mm-yyyy":
                    dts='%d-%m-%Y'
        
                # elif rp_date_for[0]=="yyyy.mm.dd":
                #     dts='%Y.%m.%d'
            
                elif rp_date_for[0]=="mm/dd/yyyy":
                    dts='%m/%d/%y'
            
                elif rp_date_for[0]=="dd/mm/yyyy":
                    dts='%d/%m/%Y'
                    
                elif rp_date_for[0]=="dd.mm.yyyy":
                    dts='%d.%m.%Y'
                    
                # elif rp_date_for[0]=="yyyy/mm/dd":
                #     dts='%Y/%m/%d'

                else:
                    dts='%d-%m-%Y'
    # firtst filter-----------------------------------Month to date
      
      ird1=irdfrm1.get_date()
      ird2=irdfrm2.get_date()
      tro_company = "SELECT * from company"
      fbcursor.execute(tro_company)
      company_tro= fbcursor.fetchone()
      rth=invfilter.get()
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      rth=irdfilter.get()
      if rth=="All":

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )

          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_ird_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rep_ird_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_ird_tree.heading("# 1", text="Invoice No")
              rep_ird_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_ird_tree.heading("# 2", text="Date")
              rep_ird_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rep_ird_tree.heading("# 3", text="Customer")
              rep_ird_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rep_ird_tree.heading("# 4", text="Invoice Total")
              rep_ird_tree.column("# 5", anchor=E, stretch=NO, width=130)
              rep_ird_tree.heading("# 5", text="Paid")
              rep_ird_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rep_ird_tree.heading("# 6", text="Balance")
              # Insert the data in Treeview widget
              for record in rep_ird_tree.get_children():
                  rep_ird_tree.delete(record)
              count=0

              var_1=ird1
              var_2=ird2
              
              sql_inv_dt='SELECT * from invoice where invodate between %s and %s'
              inv_valuz=(var_1,var_2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              rep_ird_tree.insert('', 'end',text="1",values=('','','','Invoice Total','Paid','Balance'))
              
              for i in tre:
                  if ps_cr=="before amount":
                      rep_ird_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[29], crc+str(i[8]), crc+str(i[9]), crc+str(i[10])))
                  elif ps_cr=="after amount":
                      rep_ird_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[29], str(i[8])+crc, str(i[9])+crc, str(i[10])+crc))
  
                  elif ps_cr=="before amount with space":
                      rep_ird_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[29], crc+" "+str(i[8]), crc+" "+str(i[9]), crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rep_ird_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[29], str(i[8])+" "+crc, str(i[9])+" "+crc, str(i[10])+" "+crc))
 
                  else:
                      pass
                #   rep_ird_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[29], i[8], i[9], i[10]))
                  count += 1

              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_ird= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(totpaid) from invoice'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_ird= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(balance) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_ird= fbcursor.fetchone()
              
              # rep_ird_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2'))

              # rep_ird_tree.insert('', 'end',text="1",values=('','','Summary:',tot_ird,tot_tax1_ird,tot_tax2_ird))
              
              window = canvas.create_window(270, 260, anchor="nw", window=rep_ird_tree)

              
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Invoice No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Customer")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Invoice Total")
              tree.column("# 5", anchor=E, stretch=NO, width=130)
              tree.heading("# 5", text="Paid")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Balance")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','Invoice Total','Paid','Balance'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(900,100,text="Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+irdfrm.get()+"      Date To:"+irdto.get()+"\n Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_ird())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_ird())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas14())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_ird())
          canvas.bind("<Button-3>", my_popup)
      else:
          pass
  #-----------------------------------daily invoice report
  def category_dir():
          sql='select dateformat from company'
          fbcursor.execute(sql)
          rp_date_for=fbcursor.fetchone()
          if not rp_date_for:
                        pass
          else:
                        if rp_date_for[0]=="mm-dd-yyyy":
                            dts='%m-%d-%Y'

                        elif rp_date_for[0]=="dd-mm-yyyy":
                            dts='%d-%m-%Y'
                
                        # elif rp_date_for[0]=="yyyy.mm.dd":
                        #     dts='%Y.%m.%d'
                    
                        elif rp_date_for[0]=="mm/dd/yyyy":
                            dts='%m/%d/%y'
                    
                        elif rp_date_for[0]=="dd/mm/yyyy":
                            dts='%d/%m/%Y'
                            
                        elif rp_date_for[0]=="dd.mm.yyyy":
                            dts='%d.%m.%Y'
                            
                        # elif rp_date_for[0]=="yyyy/mm/dd":
                        #     dts='%Y/%m/%d'

                        else:
                            dts='%d-%m-%Y'
          tro_company = "SELECT * from company"
          fbcursor.execute(tro_company)
          company_tro= fbcursor.fetchone()
          
          ddr=dir_frm.get_date()

          ddr2=date.today().strftime(dts)
          rth=invfilter.get()
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          global crc
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          global ps_cr
          ps_cr=post_rp[0]
          
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )

          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_ird_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rep_ird_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_ird_tree.heading("# 1", text="Invoice No")
              rep_ird_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_ird_tree.heading("# 2", text="Date")
              rep_ird_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rep_ird_tree.heading("# 3", text="Customer")
              rep_ird_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rep_ird_tree.heading("# 4", text="Invoice Total")
              rep_ird_tree.column("# 5", anchor=E, stretch=NO, width=130)
              rep_ird_tree.heading("# 5", text="Paid")
              rep_ird_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rep_ird_tree.heading("# 6", text="Balance")
              # Insert the data in Treeview widget
              for record in rep_ird_tree.get_children():
                  rep_ird_tree.delete(record)
              count=0
              rep_ird_tree.insert('', 'end',text="1",values=('','','','Invoice Total','Paid','Balance'))
              
              sql_inv_dt='SELECT * FROM invoice WHERE invodate=%s'
          
              inv_valuz=(ddr,)
              
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              

              for i in tre:
                  if ps_cr=="before amount":
                      rep_ird_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[29], crc+str(i[8]), crc+str(i[9]), crc+str(i[10])))
                  elif ps_cr=="after amount":
                      rep_ird_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[29], str(i[8])+crc, str(i[9])+crc, str(i[10])+crc))
  
                  elif ps_cr=="before amount with space":
                      rep_ird_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[29], crc+" "+str(i[8]), crc+" "+str(i[9]), crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rep_ird_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[29], str(i[8])+" "+crc, str(i[9])+" "+crc, str(i[10])+" "+crc))
 
                  else:
                      pass
                #   rep_ird_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[29], i[8], i[9], i[10]))
                  count += 1
              # total_tri='SELECT SUM(invoicetot) from invoice'
              # fbcursor.execute(total_tri)
              # tot_ird= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(totpaid) from invoice'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_ird= fbcursor.fetchone()

              # total_tax2_tri='SELECT SUM(balance) from invoice'
              # fbcursor.execute(total_tax2_tri)
              # tot_tax2_ird= fbcursor.fetchone()
              
              # rep_ird_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2'))

              # rep_ird_tree.insert('', 'end',text="1",values=('','','Summary:',tot_ird,tot_tax1_ird,tot_tax2_ird))
              
              window = canvas.create_window(270, 260, anchor="nw", window=rep_ird_tree)
          
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Invoice No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Customer")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Invoice Total")
              tree.column("# 5", anchor=E, stretch=NO, width=130)
              tree.heading("# 5", text="Paid")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Balance")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','Invoice Total','Paid','Balance'))


              window = canvas.create_window(290, 260, anchor="nw", window=tree)
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
          canvas.create_text(880,100,text="Daily Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(935,145,text="Date:"+dirdate.get(),fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_dir())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_dir())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas15())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_dir())
          canvas.bind("<Button-3>", my_popup)


  #----------------------------------------------Purchase Order Report-------------------------------------

  def category_por():   
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      if not rp_date_for:
                pass
      else:
                if rp_date_for[0]=="mm-dd-yyyy":
                    dts='%m-%d-%Y'

                elif rp_date_for[0]=="dd-mm-yyyy":
                    dts='%d-%m-%Y'
        
                # elif rp_date_for[0]=="yyyy.mm.dd":
                #     dts='%Y.%m.%d'
            
                elif rp_date_for[0]=="mm/dd/yyyy":
                    dts='%m/%d/%y'
            
                elif rp_date_for[0]=="dd/mm/yyyy":
                    dts='%d/%m/%Y'
                    
                elif rp_date_for[0]=="dd.mm.yyyy":
                    dts='%d.%m.%Y'
                    
                # elif rp_date_for[0]=="yyyy/mm/dd":
                #     dts='%Y/%m/%d'

                else:
                    dts='%d-%m-%Y'
    # firtst filter-----------------------------------Month to date
      
      # #for company details
      or_company = "SELECT * from company"
      fbcursor.execute(or_company)
      company_or= fbcursor.fetchone()
      global drf
      ddr2=date.today()
      rth=invfilter.get()
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      rth=porfilter.get()
      if rth=="Month to date":
          given_date = datetime.today().date()
          in_dat = given_date.replace(day=1)
          porfrm1.delete(0,'end')
          porfrm1.insert(0, in_dat.strftime(dts))
          
          cr=date.today()
          porto1.delete(0,'end')
          porto1.insert(0, cr.strftime(dts))

          
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          global canvaspor
          canvaspor=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvaspor
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvaspor.yview)
          canvaspor.config(width=1310,height=600)

          canvaspor.config(
              yscrollcommand=vertibar.set
              )
          canvaspor.pack(expand=True,side=LEFT,fill=BOTH)
          canvaspor.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvaspor,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvaspor.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvaspor,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvaspor.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvaspor.create_text(359,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_por_tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_por_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_por_tree.heading("# 1", text="No")
              rp_por_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_por_tree.heading("# 2", text="Date")
              rp_por_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 3", text="Due Date")
              rp_por_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 4", text="Vendor")
              rp_por_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 5", text="Status")
              rp_por_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 6", text="P.Order Total")

              # Insert the data in Treeview widget
              rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              
              for record in rp_por_tree.get_children():
                  rp_por_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM porder WHERE porderdate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
                  if ps_cr=="before amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+crc))
                     
                  elif ps_cr=="before amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+" "+crc))
 
                  else:
                      pass
          
                #   rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], i[10]))
                  count += 1
              # total_tri='SELECT SUM(total) from porder'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvaspor.create_window(270, 260, anchor="nw", window=rp_por_tree)


          else:
              canvaspor.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvaspor.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvaspor.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)
          canvaspor.create_text(870,100,text="Purchase Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvaspor.create_text(880,145,text="Date From:"+porfrm.get()+"      Date To:"+porto.get()+"\n Purchase Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

         

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvaspor, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_por())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_por())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas16())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_por())
          canvaspor.bind("<Button-3>", my_popup)


      #--------------------------------------------------------------------------------------------------------------
      elif rth=="Year To Date":
          test_date=pendulum.today().date()
          start = test_date.start_of('year')
          porfrm1.delete(0,'end')
          porfrm1.insert(0, start.strftime(dts))

          cr=date.today()
          porto1.delete(0,'end')
          porto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvaspor=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvaspor
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvaspor.yview)
          canvaspor.config(width=1310,height=600)

          canvaspor.config(
              yscrollcommand=vertibar.set
              )
          canvaspor.pack(expand=True,side=LEFT,fill=BOTH)
          canvaspor.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvaspor,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvaspor.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvaspor,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvaspor.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvaspor.create_text(359,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_por_tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_por_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_por_tree.heading("# 1", text="No")
              rp_por_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_por_tree.heading("# 2", text="Date")
              rp_por_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 3", text="Due Date")
              rp_por_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 4", text="Vendor")
              rp_por_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 5", text="Status")
              rp_por_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 6", text="P.Order Total")

              # Insert the data in Treeview widget
              rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              
              for record in rp_por_tree.get_children():
                  rp_por_tree.delete(record)
              count=0
              var1=start
              var2=cr
              sql_inv_dt='SELECT * FROM porder WHERE porderdate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
          
                  if ps_cr=="before amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+crc))
                     
                  elif ps_cr=="before amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+" "+crc))
 
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(total) from porder'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvaspor.create_window(270, 260, anchor="nw", window=rp_por_tree)


          else:
              canvaspor.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvaspor.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=90)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)
              canvaspor.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
          canvaspor.create_text(870,100,text="Purchase Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvaspor.create_text(880,145,text="Date From:"+porfrm.get()+"      Date To:"+porto.get()+"\n Purchase Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvaspor, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_por())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_por())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas16())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_por())
          canvaspor.bind("<Button-3>", my_popup)
          #===============================================================================================
      elif rth=="Current year":
          test_date=pendulum.today().date()
          start = test_date.start_of('year')
          porfrm1.delete(0,'end')
          porfrm1.insert(0, start.strftime(dts))

          test_date_end=pendulum.today().date()
          end = test_date_end.end_of('year')
          porto1.delete(0,'end')
          porto1.insert(0, end.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvaspor=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvaspor
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvaspor.yview)
          canvaspor.config(width=1310,height=600)

          canvaspor.config(
              yscrollcommand=vertibar.set
              )
          canvaspor.pack(expand=True,side=LEFT,fill=BOTH)
          canvaspor.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvaspor,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvaspor.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvaspor,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvaspor.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvaspor.create_text(359,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_por_tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_por_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_por_tree.heading("# 1", text="No")
              rp_por_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_por_tree.heading("# 2", text="Date")
              rp_por_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 3", text="Due Date")
              rp_por_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 4", text="Vendor")
              rp_por_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 5", text="Status")
              rp_por_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 6", text="P.Order Total")

              # Insert the data in Treeview widget
              rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              
              for record in rp_por_tree.get_children():
                  rp_por_tree.delete(record)
              count=0
              var1=start
              var2=end
              sql_inv_dt='SELECT * FROM porder WHERE porderdate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
          
                  if ps_cr=="before amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+crc))
                     
                  elif ps_cr=="before amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+" "+crc))
 
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(total) from porder'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))


              window = canvaspor.create_window(270, 260, anchor="nw", window=rp_por_tree)


          else:

              canvaspor.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvaspor.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)
              canvaspor.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

          canvaspor.create_text(870,100,text="Purchase Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvaspor.create_text(880,145,text="Date From:"+porfrm.get()+"      Date To:"+porto.get()+"\n Purchase Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvaspor, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_por())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_por())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas16())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_por())
          canvaspor.bind("<Button-3>", my_popup)
      #==============================================================================================================
      elif rth=="Current month":
          given_date = datetime.today().date()
          in_dat = given_date.replace(day=1)
          porfrm1.delete(0,'end')
          porfrm1.insert(0, in_dat.strftime(dts))

          test_date=date.today()
          nxt_mnth=(test_date+relativedelta(day=31))
          porto1.delete(0,'end')
          porto1.insert(0, nxt_mnth.strftime(dts))
          
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvaspor=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvaspor
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvaspor.yview)
          canvaspor.config(width=1310,height=600)

          canvaspor.config(
              yscrollcommand=vertibar.set
              )
          canvaspor.pack(expand=True,side=LEFT,fill=BOTH)
          canvaspor.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvaspor,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvaspor.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvaspor,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvaspor.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvaspor.create_text(359,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_por_tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_por_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_por_tree.heading("# 1", text="No")
              rp_por_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_por_tree.heading("# 2", text="Date")
              rp_por_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 3", text="Due Date")
              rp_por_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 4", text="Vendor")
              rp_por_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 5", text="Status")
              rp_por_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 6", text="P.Order Total")

              # Insert the data in Treeview widget
              rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              
              for record in rp_por_tree.get_children():
                  rp_por_tree.delete(record)
              count=0
              var1=in_dat
              var2=nxt_mnth
              sql_inv_dt='SELECT * FROM porder WHERE porderdate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
          
                  if ps_cr=="before amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+crc))
                     
                  elif ps_cr=="before amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+" "+crc))
 
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(total) from porder'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvaspor.create_window(270, 260, anchor="nw", window=rp_por_tree)


          else:
              canvaspor.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvaspor.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)
              canvaspor.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
          canvaspor.create_text(870,100,text="Purchase Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvaspor.create_text(880,145,text="Date From:"+porfrm.get()+"      Date To:"+porto.get()+"\n Purchase Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
              
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvaspor, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_por())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_por())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas16())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_por())
          canvaspor.bind("<Button-3>", my_popup)
          #=====================================================================================================
      elif rth=="Current days":
          given_date = date.today()
          porfrm1.delete(0,'end')
          porfrm1.insert(0,given_date.strftime(dts))

          cr=date.today()
          porto1.delete(0,'end')
          porto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvaspor=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvaspor
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvaspor.yview)
          canvaspor.config(width=1310,height=600)

          canvaspor.config(
              yscrollcommand=vertibar.set
              )
          canvaspor.pack(expand=True,side=LEFT,fill=BOTH)
          canvaspor.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvaspor,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvaspor.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvaspor,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvaspor.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvaspor.create_text(359,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_por_tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_por_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_por_tree.heading("# 1", text="No")
              rp_por_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_por_tree.heading("# 2", text="Date")
              rp_por_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 3", text="Due Date")
              rp_por_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 4", text="Vendor")
              rp_por_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 5", text="Status")
              rp_por_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 6", text="P.Order Total")

              # Insert the data in Treeview widget
              rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              
              for record in rp_por_tree.get_children():
                  rp_por_tree.delete(record)
              count=0
              var1=given_date
              var2=cr
              sql_inv_dt='SELECT * FROM porder WHERE porderdate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
          
                  if ps_cr=="before amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+crc))
                     
                  elif ps_cr=="before amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+" "+crc))
 
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(total) from porder'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))


              window = canvaspor.create_window(270, 260, anchor="nw", window=rp_por_tree)


          else:
              canvaspor.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvaspor.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              canvaspor.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)
          canvaspor.create_text(870,100,text="Purchase Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvaspor.create_text(880,145,text="Date From:"+porfrm.get()+"      Date To:"+porto.get()+"\n Purchase Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
              
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvaspor, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_por())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_por())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas16())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_por())
          canvaspor.bind("<Button-3>", my_popup)
          #=================================================================================================
      elif rth=="Last 30 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=30)
          porfrm1.delete(0,'end')
          porfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          porto1.delete(0,'end')
          porto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvaspor=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvaspor
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvaspor.yview)
          canvaspor.config(width=1310,height=600)

          canvaspor.config(
              yscrollcommand=vertibar.set
              )
          canvaspor.pack(expand=True,side=LEFT,fill=BOTH)
          canvaspor.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvaspor,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvaspor.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvaspor,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvaspor.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvaspor.create_text(359,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_por_tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_por_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_por_tree.heading("# 1", text="No")
              rp_por_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_por_tree.heading("# 2", text="Date")
              rp_por_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 3", text="Due Date")
              rp_por_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 4", text="Vendor")
              rp_por_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 5", text="Status")
              rp_por_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 6", text="P.Order Total")

              # Insert the data in Treeview widget
              rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              
              for record in rp_por_tree.get_children():
                  rp_por_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM porder WHERE porderdate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
          
                  if ps_cr=="before amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+crc))
                     
                  elif ps_cr=="before amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+" "+crc))
 
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(total) from porder'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))
              window = canvaspor.create_window(270, 260, anchor="nw", window=rp_por_tree)


          else:

              canvaspor.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvaspor.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvaspor.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)
          canvaspor.create_text(870,100,text="Purchase Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvaspor.create_text(880,145,text="Date From:"+porfrm.get()+"      Date To:"+porto.get()+"\n Purchase Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          

              
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvaspor, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_por())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_por())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas16())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_por())
          canvaspor.bind("<Button-3>", my_popup)
      
      #=====================================================================================================
      elif rth=="Last 60 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=60)
          porfrm1.delete(0,'end')
          porfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          porto1.delete(0,'end')
          porto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvaspor=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvaspor
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvaspor.yview)
          canvaspor.config(width=1310,height=600)

          canvaspor.config(
              yscrollcommand=vertibar.set
              )
          canvaspor.pack(expand=True,side=LEFT,fill=BOTH)
          canvaspor.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvaspor,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvaspor.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvaspor,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvaspor.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvaspor.create_text(359,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_por_tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_por_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_por_tree.heading("# 1", text="No")
              rp_por_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_por_tree.heading("# 2", text="Date")
              rp_por_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 3", text="Due Date")
              rp_por_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 4", text="Vendor")
              rp_por_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 5", text="Status")
              rp_por_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 6", text="P.Order Total")

              # Insert the data in Treeview widget
              rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              
              for record in rp_por_tree.get_children():
                  rp_por_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM porder WHERE porderdate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
          
                  if ps_cr=="before amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+crc))
                     
                  elif ps_cr=="before amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+" "+crc))
 
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(total) from porder'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvaspor.create_window(270, 260, anchor="nw", window=rp_por_tree)


          else:
              canvaspor.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvaspor.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)
              canvaspor.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
          canvaspor.create_text(870,100,text="Purchase Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvaspor.create_text(880,145,text="Date From:"+porfrm.get()+"      Date To:"+porto.get()+"\n Purchase Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvaspor, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_por())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_por())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas16())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_por())
          canvaspor.bind("<Button-3>", my_popup)
      #========================================================================================================
      
      #================================================================================================================
      elif rth=="Last 90 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=90)
          porfrm1.delete(0,'end')
          porfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          porto1.delete(0,'end')
          porto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvaspor=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvaspor
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvaspor.yview)
          canvaspor.config(width=1310,height=600)

          canvaspor.config(
              yscrollcommand=vertibar.set
              )
          canvaspor.pack(expand=True,side=LEFT,fill=BOTH)
          canvaspor.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvaspor,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvaspor.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvaspor,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvaspor.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvaspor.create_text(359,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_por_tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_por_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_por_tree.heading("# 1", text="No")
              rp_por_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_por_tree.heading("# 2", text="Date")
              rp_por_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 3", text="Due Date")
              rp_por_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 4", text="Vendor")
              rp_por_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 5", text="Status")
              rp_por_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 6", text="P.Order Total")

              # Insert the data in Treeview widget
              rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              
              for record in rp_por_tree.get_children():
                  rp_por_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM porder WHERE porderdate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
          
                  if ps_cr=="before amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+crc))
                     
                  elif ps_cr=="before amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+" "+crc))
 
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(total) from porder'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))
              window = canvaspor.create_window(270, 260, anchor="nw", window=rp_por_tree)


          else:
              canvaspor.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvaspor.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

          
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)
              canvaspor.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
          canvaspor.create_text(870,100,text="Purchase Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvaspor.create_text(880,145,text="Date From:"+porfrm.get()+"      Date To:"+porto.get()+"\n Purchase Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvaspor, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_por())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_por())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas16())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_por())
          canvaspor.bind("<Button-3>", my_popup)
          #====================================================================================================
      elif rth=="Previous month":
          last_day_of_prev_month=date.today().replace(day=1)- timedelta(days=1)
          in_dat=date.today().replace(day=1)-timedelta(last_day_of_prev_month.day)
          porfrm1.delete(0,'end')
          porfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          porto1.delete(0,'end')
          porto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvaspor=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvaspor
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvaspor.yview)
          canvaspor.config(width=1310,height=600)

          canvaspor.config(
              yscrollcommand=vertibar.set
              )
          canvaspor.pack(expand=True,side=LEFT,fill=BOTH)
          canvaspor.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvaspor,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvaspor.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvaspor,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvaspor.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvaspor.create_text(359,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_por_tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_por_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_por_tree.heading("# 1", text="No")
              rp_por_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_por_tree.heading("# 2", text="Date")
              rp_por_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 3", text="Due Date")
              rp_por_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 4", text="Vendor")
              rp_por_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 5", text="Status")
              rp_por_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 6", text="P.Order Total")

              # Insert the data in Treeview widget
              rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              
              for record in rp_por_tree.get_children():
                  rp_por_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM porder WHERE porderdate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
          
                  if ps_cr=="before amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+crc))
                     
                  elif ps_cr=="before amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+" "+crc))
 
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(total) from porder'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvaspor.create_window(270, 260, anchor="nw", window=rp_por_tree)


          else:
              canvaspor.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvaspor.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)
              canvaspor.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
          canvaspor.create_text(870,100,text="Purchase Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvaspor.create_text(880,145,text="Date From:"+porfrm.get()+"      Date To:"+porto.get()+"\n Purchase Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvaspor, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_por())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_por())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas16())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_por())
          canvaspor.bind("<Button-3>", my_popup)
          #===========================================================================================================
      elif rth=="Previous year":
          last_year = (datetime.now()-relativedelta(years=1))
          porfrm1.delete(0,'end')
          porfrm1.insert(0, last_year.strftime(dts))

          cr=date.today()
          porto1.delete(0,'end')
          porto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvaspor=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvaspor
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvaspor.yview)
          canvaspor.config(width=1310,height=600)

          canvaspor.config(
              yscrollcommand=vertibar.set
              )
          canvaspor.pack(expand=True,side=LEFT,fill=BOTH)
          canvaspor.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvaspor,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvaspor.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvaspor,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvaspor.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvaspor.create_text(359,228,text="Sales tax reg No:"+company_or[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_por_tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_por_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_por_tree.heading("# 1", text="No")
              rp_por_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_por_tree.heading("# 2", text="Date")
              rp_por_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 3", text="Due Date")
              rp_por_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 4", text="Vendor")
              rp_por_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 5", text="Status")
              rp_por_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 6", text="P.Order Total")

              # Insert the data in Treeview widget
              rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              
              for record in rp_por_tree.get_children():
                  rp_por_tree.delete(record)
              count=0
              var1=last_year
              var2=cr
              sql_inv_dt='SELECT * FROM porder WHERE porderdate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
          
                  if ps_cr=="before amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+crc))
                     
                  elif ps_cr=="before amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+" "+crc))
 
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(total) from porder'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvaspor.create_window(270, 260, anchor="nw", window=rp_por_tree)


          else:
              canvaspor.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvaspor.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)
              canvaspor.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
          canvaspor.create_text(870,100,text="Purchase Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvaspor.create_text(880,145,text="Date From:"+porfrm.get()+"      Date To:"+porto.get()+"\n Purchase Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvaspor, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_por())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_por())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas16())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_por())
          canvaspor.bind("<Button-3>", my_popup)
      # ------------------------------
      elif rth=="Custom Range":
          lhy=porfrm1.get_date()
          lhy1=porto1.get_date()
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvaspor=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvaspor
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvaspor.yview)
          canvaspor.config(width=1310,height=600)

          canvaspor.config(
              yscrollcommand=vertibar.set
              )
          canvaspor.pack(expand=True,side=LEFT,fill=BOTH)
          canvaspor.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_or is not None:
              labelcmp=Label(canvaspor,text=company_or[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvaspor.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvaspor,text=company_or[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvaspor.create_window(285,120, anchor="nw", window=labelcmpl)
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_por_tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_por_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_por_tree.heading("# 1", text="No")
              rp_por_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_por_tree.heading("# 2", text="Date")
              rp_por_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 3", text="Due Date")
              rp_por_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 4", text="Vendor")
              rp_por_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 5", text="Status")
              rp_por_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 6", text="P.Order Total")

              # Insert the data in Treeview widget
              rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              
              for record in rp_por_tree.get_children():
                  rp_por_tree.delete(record)
              count=0
              var1=lhy
              var2=lhy1
              sql_inv_dt='SELECT * FROM porder WHERE porderdate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
          
                  if ps_cr=="before amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+crc))
                     
                  elif ps_cr=="before amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+" "+crc))
 
                  else:
                      pass
                  count += 1
              # total_tri='SELECT SUM(total) from porder'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvaspor.create_window(270, 260, anchor="nw", window=rp_por_tree)


          else:
              canvaspor.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvaspor.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)
              canvaspor.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

          canvaspor.create_text(870,100,text="Purchase Order Report",fill='black',font=("Helvetica", 16), justify='right')
          canvaspor.create_text(880,145,text="Date From:"+porfrm.get()+"      Date To:"+porto.get()+"\n Purchase Order Category: All",fill='black',font=("Helvetica", 8), justify='right')

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvaspor, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_por())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_por())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas16())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_por())
          canvaspor.bind("<Button-3>", my_popup)

          #============================================================================================
      else:
          pass
  #------------------------------------expense report--------------------
  def category_exp():
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      if not rp_date_for:
                pass
      else:
                if rp_date_for[0]=="mm-dd-yyyy":
                    dts='%m-%d-%Y'

                elif rp_date_for[0]=="dd-mm-yyyy":
                    dts='%d-%m-%Y'
        
                # elif rp_date_for[0]=="yyyy.mm.dd":
                #     dts='%Y.%m.%d'
            
                elif rp_date_for[0]=="mm/dd/yyyy":
                    dts='%m/%d/%y'
            
                elif rp_date_for[0]=="dd/mm/yyyy":
                    dts='%d/%m/%Y'
                    
                elif rp_date_for[0]=="dd.mm.yyyy":
                    dts='%d.%m.%Y'
                    
                # elif rp_date_for[0]=="yyyy/mm/dd":
                #     dts='%Y/%m/%d'

                else:
                    dts='%d-%m-%Y'
      
    # firtst filter-----------------------------------Month to date
      
      
      tro_company = "SELECT * from company"
      fbcursor.execute(tro_company)
      company_tro= fbcursor.fetchone()
      ddr2=date.today()
      rth=invfilter.get()
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      
      # given_date = datetime.today().date()
      # in_dat = given_date.replace(day=1)
      # exp_frm.delete(0,'end')
      # exp_frm.insert(0, in_dat)

      # cr=date.today()
      # exp_to.delete(0,'end')
      # exp_to.insert(0, cr)

      global drf
      rth=expfilter.get()
      if rth=="All":
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas

          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_exp_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_exp_tree.column("# 1", anchor=E, stretch=NO, width=80)
              rp_exp_tree.heading("# 1", text="Date")
              rp_exp_tree.column("# 2", anchor=E, stretch=NO, width=160)
              rp_exp_tree.heading("# 2", text="Customer")
              rp_exp_tree.column("# 3", anchor=E, stretch=NO, width=160)
              rp_exp_tree.heading("# 3", text="Vendor")
              rp_exp_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_exp_tree.heading("# 4", text="Invoice")
              rp_exp_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_exp_tree.heading("# 5", text="Rebill.Amount")
              rp_exp_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_exp_tree.heading("# 6", text="Amount")
              # Insert the data in Treeview widget
              rp_exp_tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))
              
              for record in rp_exp_tree.get_children():
                  rp_exp_tree.delete(record)
              count=0
              var_1=exp_frm.get_date()
              var_2=exp_to.get_date()

              lre='SELECT * from expenses WHERE date BETWEEN %s and %s '
              sre=(var_1, var_2)
              fbcursor.execute(lre,sre)
              tre=fbcursor.fetchall()

              for i in tre:
                #   if ps_cr=="before amount":
                #       rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],i[14], crc+str(i[16]), crc+str(i[3])))
                      
                     
                #   elif ps_cr=="after amount":
                #       rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], str(i[16])+crc, str(i[3])+crc))
                      
                     
                #   elif ps_cr=="before amount with space":
                #       rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],i[14], crc+" "+str(i[16]), crc+" "+str(i[3])))
                      
                #   elif ps_cr=="after amount with space":
                #       rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], str(i[16])+" "+crc, str(i[3])+" "+crc))
                   
                #   else:
                #       pass
 
                  rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], i[16], i[3]))
                  count += 1

              # total_tri='SELECT SUM(expense_amount) from expenses'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(rebill_amount) from expenses'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              
              # rp_exp_tree.insert('', 'end',text="1",values=('','','','-End List-','Rebill.Amount','Amount'))
              # rp_exp_tree.insert('', 'end',text="1",values=('','','','Summary',tot_tax1_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_exp_tree)

              
              
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Date")
              tree.column("# 2", anchor=E, stretch=NO, width=150)
              tree.heading("# 2", text="Customer")
              tree.column("# 3", anchor=E, stretch=NO, width=120)
              tree.heading("# 3", text="Vendor")
              tree.column("# 4", anchor=E, stretch=NO, width=100)
              tree.heading("# 4", text="Invoice")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Rebill.Amount")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="Amount")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(900,100,text="Expenses Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+expfrm.get()+"      Date To:"+expto.get()+"\n Expense Category: All",fill='black',font=("Helvetica", 8), justify='right')

          

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_exp())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_exp())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas17())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_exp())
          canvas.bind("<Button-3>", my_popup)

      elif rth=="Internal":

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_exp_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_exp_tree.column("# 1", anchor=E, stretch=NO, width=80)
              rp_exp_tree.heading("# 1", text="Date")
              rp_exp_tree.column("# 2", anchor=E, stretch=NO, width=160)
              rp_exp_tree.heading("# 2", text="Customer")
              rp_exp_tree.column("# 3", anchor=E, stretch=NO, width=160)
              rp_exp_tree.heading("# 3", text="Vendor")
              rp_exp_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_exp_tree.heading("# 4", text="Invoice")
              rp_exp_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_exp_tree.heading("# 5", text="Rebill.Amount")
              rp_exp_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_exp_tree.heading("# 6", text="Amount")
              # Insert the data in Treeview widget
              rp_exp_tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))
              
              for record in rp_exp_tree.get_children():
                  rp_exp_tree.delete(record)
              count=0
              var_1=exp_frm.get_date()
              var_2=exp_to.get_date()

              lre='SELECT * from expenses WHERE date BETWEEN %s and %s and customer="Internal" '
              sre=(var_1, var_2)
              fbcursor.execute(lre,sre)
              tre=fbcursor.fetchall()


              for i in tre:
                  if ps_cr=="before amount":
                      rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],i[14], crc+str(i[16]), crc+str(i[3])))
                      
                     
                  elif ps_cr=="after amount":
                      rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], str(i[16])+crc, str(i[3])+crc))
                      
                     
                  elif ps_cr=="before amount with space":
                      rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],i[14], crc+" "+str(i[16]), crc+" "+str(i[3])))
                      
                  elif ps_cr=="after amount with space":
                      rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], str(i[16])+" "+crc, str(i[3])+" "+crc))
                   
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(expense_amount) from expenses WHERE customer="Internal" '
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              

              # total_tax1_tri='SELECT SUM(rebill_amount) from expenses WHERE customer="Internal"'
              # fbcursor.execute(total_tax1_tri)
              # tot_tax1_tri= fbcursor.fetchone()

              
              # rp_exp_tree.insert('', 'end',text="1",values=('','','','-End List-','Rebill.Amount','Amount'))
              # rp_exp_tree.insert('', 'end',text="1",values=('','','','Summary',tot_tax1_tri,tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_exp_tree)

              
              
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Date")
              tree.column("# 2", anchor=E, stretch=NO, width=150)
              tree.heading("# 2", text="Customer")
              tree.column("# 3", anchor=E, stretch=NO, width=120)
              tree.heading("# 3", text="Vendor")
              tree.column("# 4", anchor=E, stretch=NO, width=100)
              tree.heading("# 4", text="Invoice")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Rebill.Amount")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="Amount")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
          canvas.create_text(900,100,text="Expenses Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+expfrm.get()+"      Date To:"+expto.get()+"\n Expense Category: All",fill='black',font=("Helvetica", 8), justify='right')

          

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_exp())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_exp())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas17())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_exp())
          canvas.bind("<Button-3>", my_popup)
      else:
          pass
      
  #------------------------------payment report------------------------
  def category_pyr():
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      if not rp_date_for:
                pass
      else:
                if rp_date_for[0]=="mm-dd-yyyy":
                    dts='%m-%d-%Y'

                elif rp_date_for[0]=="dd-mm-yyyy":
                    dts='%d-%m-%Y'
        
                # elif rp_date_for[0]=="yyyy.mm.dd":
                #     dts='%Y.%m.%d'
            
                elif rp_date_for[0]=="mm/dd/yyyy":
                    dts='%m/%d/%y'
            
                elif rp_date_for[0]=="dd/mm/yyyy":
                    dts='%d/%m/%Y'
                    
                elif rp_date_for[0]=="dd.mm.yyyy":
                    dts='%d.%m.%Y'
                    
                # elif rp_date_for[0]=="yyyy/mm/dd":
                #     dts='%Y/%m/%d'

                else:
                    dts='%d-%m-%Y'
    # firtst filter-----------------------------------Month to date
      
      tri_company = "SELECT * from company"
      fbcursor.execute(tri_company)
      company_tri= fbcursor.fetchone()
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      global drf
      rth=pyrfilter.get()
      if rth=="Month to date":
          given_date = datetime.today().date()
          in_dat = given_date.replace(day=1)
          pyrfrm1.delete(0,'end')
          pyrfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          pyrto1.delete(0,'end')
          pyrto1.insert(0, cr.strftime(dts))


          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas

          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pr_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rp_pr_tree.column("# 1", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 1", text="Invoice No")
              rp_pr_tree.column("# 2", anchor=E, stretch=NO, width=140)
              rp_pr_tree.heading("# 2", text="Invoice Issue Date")
              rp_pr_tree.column("# 3", anchor=E, stretch=NO, width=130)
              rp_pr_tree.heading("# 3", text="Customer")
              rp_pr_tree.column("# 4", anchor=E, stretch=NO, width=90)
              rp_pr_tree.heading("# 4", text="Payment ID")
              rp_pr_tree.column("# 5", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 5", text="Payment Date")
              rp_pr_tree.column("# 6", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 6", text="Paid By")
              rp_pr_tree.column("# 7", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 7", text="Amount Paid")
              rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',''))
              for record in rp_pr_tree.get_children():
                  rp_pr_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+str(i[9])))

                  elif ps_cr=="after amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+" "+str(i[9])))

                  elif ps_cr=="after amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+" "+crc))
 
                  else:
                      pass
                #   rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],i[9]))
                  count += 1

              # total_tri='SELECT SUM(totpaid) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              # rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_pr_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Invoice No")
              tree.column("# 2", anchor=E, stretch=NO, width=140)
              tree.heading("# 2", text="Invoice Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=130)
              tree.heading("# 3", text="Customer")
              tree.column("# 4", anchor=E, stretch=NO, width=90)
              tree.heading("# 4", text="Payment ID")
              tree.column("# 5", anchor=E, stretch=NO, width=110)
              tree.heading("# 5", text="Payment Date")
              tree.column("# 6", anchor=E, stretch=NO, width=80)
              tree.heading("# 6", text="Paid By")
              tree.column("# 7", anchor=E, stretch=NO, width=110)
              tree.heading("# 7", text="Amount Paid")
      
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','',''))

              window = canvas.create_window(260, 260, anchor="nw", window=tree)
          canvas.create_text(900,100,text="Payment Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+pyrfrm.get()+"      Date To:"+pyrto.get(),fill='black',font=("Helvetica", 8), justify='right')

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_pyr())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_pym())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas18())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_pym())
          canvas.bind("<Button-3>", my_popup)

      #--------------------------------------------------------------------------------------------------------------
      elif rth=="Year To Date":
          test_date=pendulum.today().date()
          start = test_date.start_of('year')
          pyrfrm1.delete(0,'end')
          pyrfrm1.insert(0, start.strftime(dts))

          cr=date.today()
          pyrto1.delete(0,'end')
          pyrto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pr_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rp_pr_tree.column("# 1", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 1", text="Invoice No")
              rp_pr_tree.column("# 2", anchor=E, stretch=NO, width=140)
              rp_pr_tree.heading("# 2", text="Invoice Issue Date")
              rp_pr_tree.column("# 3", anchor=E, stretch=NO, width=130)
              rp_pr_tree.heading("# 3", text="Customer")
              rp_pr_tree.column("# 4", anchor=E, stretch=NO, width=90)
              rp_pr_tree.heading("# 4", text="Payment ID")
              rp_pr_tree.column("# 5", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 5", text="Payment Date")
              rp_pr_tree.column("# 6", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 6", text="Paid By")
              rp_pr_tree.column("# 7", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 7", text="Amount Paid")
              rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',''))
              for record in rp_pr_tree.get_children():
                  rp_pr_tree.delete(record)
              count=0
              var1=start
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
              
                  if ps_cr=="before amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+str(i[9])))

                  elif ps_cr=="after amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+" "+str(i[9])))

                  elif ps_cr=="after amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+" "+crc))
 
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(totpaid) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              # rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_pr_tree)
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Invoice No")
              tree.column("# 2", anchor=E, stretch=NO, width=140)
              tree.heading("# 2", text="Invoice Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=130)
              tree.heading("# 3", text="Customer")
              tree.column("# 4", anchor=E, stretch=NO, width=90)
              tree.heading("# 4", text="Payment ID")
              tree.column("# 5", anchor=E, stretch=NO, width=110)
              tree.heading("# 5", text="Payment Date")
              tree.column("# 6", anchor=E, stretch=NO, width=80)
              tree.heading("# 6", text="Paid By")
              tree.column("# 7", anchor=E, stretch=NO, width=110)
              tree.heading("# 7", text="Amount Paid")
      
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','',''))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Payment Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+pyrfrm.get()+"      Date To:"+pyrto.get(),fill='black',font=("Helvetica", 8), justify='right')

          

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_pyr())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_pym())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas18())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_pym())
          canvas.bind("<Button-3>", my_popup)
          #===============================================================================================
      elif rth=="Current year":
          test_date=pendulum.today().date()
          start = test_date.start_of('year')
          pyrfrm1.delete(0,'end')
          pyrfrm1.insert(0, start.strftime(dts))

          test_date_end=pendulum.today().date()
          end = test_date_end.end_of('year')
          pyrto1.delete(0,'end')
          pyrto1.insert(0, end.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pr_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rp_pr_tree.column("# 1", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 1", text="Invoice No")
              rp_pr_tree.column("# 2", anchor=E, stretch=NO, width=140)
              rp_pr_tree.heading("# 2", text="Invoice Issue Date")
              rp_pr_tree.column("# 3", anchor=E, stretch=NO, width=130)
              rp_pr_tree.heading("# 3", text="Customer")
              rp_pr_tree.column("# 4", anchor=E, stretch=NO, width=90)
              rp_pr_tree.heading("# 4", text="Payment ID")
              rp_pr_tree.column("# 5", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 5", text="Payment Date")
              rp_pr_tree.column("# 6", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 6", text="Paid By")
              rp_pr_tree.column("# 7", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 7", text="Amount Paid")
              rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',''))
              for record in rp_pr_tree.get_children():
                  rp_pr_tree.delete(record)
              count=0
              var1=start
              var2=end
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
              
                  if ps_cr=="before amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+str(i[9])))

                  elif ps_cr=="after amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+" "+str(i[9])))

                  elif ps_cr=="after amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+" "+crc))
 
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(totpaid) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              # rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_pr_tree)
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Invoice No")
              tree.column("# 2", anchor=E, stretch=NO, width=140)
              tree.heading("# 2", text="Invoice Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=130)
              tree.heading("# 3", text="Customer")
              tree.column("# 4", anchor=E, stretch=NO, width=90)
              tree.heading("# 4", text="Payment ID")
              tree.column("# 5", anchor=E, stretch=NO, width=110)
              tree.heading("# 5", text="Payment Date")
              tree.column("# 6", anchor=E, stretch=NO, width=80)
              tree.heading("# 6", text="Paid By")
              tree.column("# 7", anchor=E, stretch=NO, width=110)
              tree.heading("# 7", text="Amount Paid")
      
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','',''))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(900,100,text="Payment Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+pyrfrm.get()+"      Date To:"+pyrto.get(),fill='black',font=("Helvetica", 8), justify='right')

          

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_pyr())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_pym())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas18())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_pym())
          canvas.bind("<Button-3>", my_popup)
      #==============================================================================================================
      elif rth=="Current month":
          given_date = datetime.today().date()
          in_dat = given_date.replace(day=1)
          pyrfrm1.delete(0,'end')
          pyrfrm1.insert(0, in_dat.strftime(dts))

          test_date=date.today()
          nxt_mnth=(test_date+relativedelta(day=31))
          pyrto1.delete(0,'end')
          pyrto1.insert(0, nxt_mnth.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pr_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rp_pr_tree.column("# 1", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 1", text="Invoice No")
              rp_pr_tree.column("# 2", anchor=E, stretch=NO, width=140)
              rp_pr_tree.heading("# 2", text="Invoice Issue Date")
              rp_pr_tree.column("# 3", anchor=E, stretch=NO, width=130)
              rp_pr_tree.heading("# 3", text="Customer")
              rp_pr_tree.column("# 4", anchor=E, stretch=NO, width=90)
              rp_pr_tree.heading("# 4", text="Payment ID")
              rp_pr_tree.column("# 5", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 5", text="Payment Date")
              rp_pr_tree.column("# 6", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 6", text="Paid By")
              rp_pr_tree.column("# 7", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 7", text="Amount Paid")
              rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',''))
              for record in rp_pr_tree.get_children():
                  rp_pr_tree.delete(record)
              count=0
              var1=in_dat
              var2=nxt_mnth
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
              
                  if ps_cr=="before amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+str(i[9])))

                  elif ps_cr=="after amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+" "+str(i[9])))

                  elif ps_cr=="after amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+" "+crc))
 
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(totpaid) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              # rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_pr_tree)
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Invoice No")
              tree.column("# 2", anchor=E, stretch=NO, width=140)
              tree.heading("# 2", text="Invoice Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=130)
              tree.heading("# 3", text="Customer")
              tree.column("# 4", anchor=E, stretch=NO, width=90)
              tree.heading("# 4", text="Payment ID")
              tree.column("# 5", anchor=E, stretch=NO, width=110)
              tree.heading("# 5", text="Payment Date")
              tree.column("# 6", anchor=E, stretch=NO, width=80)
              tree.heading("# 6", text="Paid By")
              tree.column("# 7", anchor=E, stretch=NO, width=110)
              tree.heading("# 7", text="Amount Paid")
      
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','',''))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)

          canvas.create_text(900,100,text="Payment Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+pyrfrm.get()+"      Date To:"+pyrto.get(),fill='black',font=("Helvetica", 8), justify='right')

          

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_pyr())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_pym())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas18())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_pym())
          canvas.bind("<Button-3>", my_popup)
          #=====================================================================================================
      elif rth=="Current days":
          given_date = date.today()
          pyrfrm1.delete(0,'end')
          pyrfrm1.insert(0,given_date.strftime(dts))

          cr=date.today()
          pyrto1.delete(0,'end')
          pyrto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pr_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rp_pr_tree.column("# 1", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 1", text="Invoice No")
              rp_pr_tree.column("# 2", anchor=E, stretch=NO, width=140)
              rp_pr_tree.heading("# 2", text="Invoice Issue Date")
              rp_pr_tree.column("# 3", anchor=E, stretch=NO, width=130)
              rp_pr_tree.heading("# 3", text="Customer")
              rp_pr_tree.column("# 4", anchor=E, stretch=NO, width=90)
              rp_pr_tree.heading("# 4", text="Payment ID")
              rp_pr_tree.column("# 5", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 5", text="Payment Date")
              rp_pr_tree.column("# 6", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 6", text="Paid By")
              rp_pr_tree.column("# 7", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 7", text="Amount Paid")
              rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',''))
              for record in rp_pr_tree.get_children():
                  rp_pr_tree.delete(record)
              count=0
              var1=given_date
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
              
                  if ps_cr=="before amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+str(i[9])))

                  elif ps_cr=="after amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+" "+str(i[9])))

                  elif ps_cr=="after amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+" "+crc))
 
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(totpaid) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              # rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_pr_tree)
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

          
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Invoice No")
              tree.column("# 2", anchor=E, stretch=NO, width=140)
              tree.heading("# 2", text="Invoice Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=130)
              tree.heading("# 3", text="Customer")
              tree.column("# 4", anchor=E, stretch=NO, width=90)
              tree.heading("# 4", text="Payment ID")
              tree.column("# 5", anchor=E, stretch=NO, width=110)
              tree.heading("# 5", text="Payment Date")
              tree.column("# 6", anchor=E, stretch=NO, width=80)
              tree.heading("# 6", text="Paid By")
              tree.column("# 7", anchor=E, stretch=NO, width=110)
              tree.heading("# 7", text="Amount Paid")
      
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','',''))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(900,100,text="Payment Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+pyrfrm.get()+"      Date To:"+pyrto.get(),fill='black',font=("Helvetica", 8), justify='right')

          
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_pyr())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_pym())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas18())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_pym())
          canvas.bind("<Button-3>", my_popup)
          #=================================================================================================
      elif rth=="Last 30 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=30)
          pyrfrm1.delete(0,'end')
          pyrfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          pyrto1.delete(0,'end')
          pyrto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pr_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rp_pr_tree.column("# 1", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 1", text="Invoice No")
              rp_pr_tree.column("# 2", anchor=E, stretch=NO, width=140)
              rp_pr_tree.heading("# 2", text="Invoice Issue Date")
              rp_pr_tree.column("# 3", anchor=E, stretch=NO, width=130)
              rp_pr_tree.heading("# 3", text="Customer")
              rp_pr_tree.column("# 4", anchor=E, stretch=NO, width=90)
              rp_pr_tree.heading("# 4", text="Payment ID")
              rp_pr_tree.column("# 5", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 5", text="Payment Date")
              rp_pr_tree.column("# 6", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 6", text="Paid By")
              rp_pr_tree.column("# 7", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 7", text="Amount Paid")
              rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',''))
              for record in rp_pr_tree.get_children():
                  rp_pr_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
              
                  if ps_cr=="before amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+str(i[9])))

                  elif ps_cr=="after amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+" "+str(i[9])))

                  elif ps_cr=="after amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+" "+crc))
 
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(totpaid) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              # rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_pr_tree)
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Invoice No")
              tree.column("# 2", anchor=E, stretch=NO, width=140)
              tree.heading("# 2", text="Invoice Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=130)
              tree.heading("# 3", text="Customer")
              tree.column("# 4", anchor=E, stretch=NO, width=90)
              tree.heading("# 4", text="Payment ID")
              tree.column("# 5", anchor=E, stretch=NO, width=110)
              tree.heading("# 5", text="Payment Date")
              tree.column("# 6", anchor=E, stretch=NO, width=80)
              tree.heading("# 6", text="Paid By")
              tree.column("# 7", anchor=E, stretch=NO, width=110)
              tree.heading("# 7", text="Amount Paid")
      
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','',''))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
          canvas.create_text(900,100,text="Payment Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+pyrfrm.get()+"      Date To:"+pyrto.get(),fill='black',font=("Helvetica", 8), justify='right')

          

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_pyr())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_pym())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas18())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_pym())
          canvas.bind("<Button-3>", my_popup)
      
      #=====================================================================================================
      elif rth=="Last 60 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=60)
          pyrfrm1.delete(0,'end')
          pyrfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          pyrto1.delete(0,'end')
          pyrto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pr_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rp_pr_tree.column("# 1", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 1", text="Invoice No")
              rp_pr_tree.column("# 2", anchor=E, stretch=NO, width=140)
              rp_pr_tree.heading("# 2", text="Invoice Issue Date")
              rp_pr_tree.column("# 3", anchor=E, stretch=NO, width=130)
              rp_pr_tree.heading("# 3", text="Customer")
              rp_pr_tree.column("# 4", anchor=E, stretch=NO, width=90)
              rp_pr_tree.heading("# 4", text="Payment ID")
              rp_pr_tree.column("# 5", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 5", text="Payment Date")
              rp_pr_tree.column("# 6", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 6", text="Paid By")
              rp_pr_tree.column("# 7", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 7", text="Amount Paid")
              rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',''))
              for record in rp_pr_tree.get_children():
                  rp_pr_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
              
                  if ps_cr=="before amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+str(i[9])))

                  elif ps_cr=="after amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+" "+str(i[9])))

                  elif ps_cr=="after amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+" "+crc))
 
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(totpaid) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              # rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_pr_tree)
          else:
              
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Invoice No")
              tree.column("# 2", anchor=E, stretch=NO, width=140)
              tree.heading("# 2", text="Invoice Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=130)
              tree.heading("# 3", text="Customer")
              tree.column("# 4", anchor=E, stretch=NO, width=90)
              tree.heading("# 4", text="Payment ID")
              tree.column("# 5", anchor=E, stretch=NO, width=110)
              tree.heading("# 5", text="Payment Date")
              tree.column("# 6", anchor=E, stretch=NO, width=80)
              tree.heading("# 6", text="Paid By")
              tree.column("# 7", anchor=E, stretch=NO, width=110)
              tree.heading("# 7", text="Amount Paid")
      
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','',''))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(900,100,text="Payment Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+pyrfrm.get()+"      Date To:"+pyrto.get(),fill='black',font=("Helvetica", 8), justify='right')

          
              
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_pyr())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_pym())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas18())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_pym())
          canvas.bind("<Button-3>", my_popup)
    

      #================================================================================================================
      elif rth=="Last 90 days":
          date_filter=date.today()
          in_dat=date_filter-timedelta(days=90)
          pyrfrm1.delete(0,'end')
          pyrfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          pyrto1.delete(0,'end')
          pyrto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pr_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rp_pr_tree.column("# 1", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 1", text="Invoice No")
              rp_pr_tree.column("# 2", anchor=E, stretch=NO, width=140)
              rp_pr_tree.heading("# 2", text="Invoice Issue Date")
              rp_pr_tree.column("# 3", anchor=E, stretch=NO, width=130)
              rp_pr_tree.heading("# 3", text="Customer")
              rp_pr_tree.column("# 4", anchor=E, stretch=NO, width=90)
              rp_pr_tree.heading("# 4", text="Payment ID")
              rp_pr_tree.column("# 5", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 5", text="Payment Date")
              rp_pr_tree.column("# 6", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 6", text="Paid By")
              rp_pr_tree.column("# 7", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 7", text="Amount Paid")
              rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',''))
              for record in rp_pr_tree.get_children():
                  rp_pr_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
              
                  if ps_cr=="before amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+str(i[9])))

                  elif ps_cr=="after amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+" "+str(i[9])))

                  elif ps_cr=="after amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+" "+crc))
 
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(totpaid) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              # rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_pr_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Invoice No")
              tree.column("# 2", anchor=E, stretch=NO, width=140)
              tree.heading("# 2", text="Invoice Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=130)
              tree.heading("# 3", text="Customer")
              tree.column("# 4", anchor=E, stretch=NO, width=90)
              tree.heading("# 4", text="Payment ID")
              tree.column("# 5", anchor=E, stretch=NO, width=110)
              tree.heading("# 5", text="Payment Date")
              tree.column("# 6", anchor=E, stretch=NO, width=80)
              tree.heading("# 6", text="Paid By")
              tree.column("# 7", anchor=E, stretch=NO, width=110)
              tree.heading("# 7", text="Amount Paid")
      
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','',''))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

          canvas.create_text(900,100,text="Payment Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+pyrfrm.get()+"      Date To:"+pyrto.get(),fill='black',font=("Helvetica", 8), justify='right')

          
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_pyr())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_pym())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas18())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_pym())
          canvas.bind("<Button-3>", my_popup)
          #====================================================================================================
      elif rth=="Previous month":
          last_day_of_prev_month=date.today().replace(day=1)- timedelta(days=1)
          in_dat=date.today().replace(day=1)-timedelta(last_day_of_prev_month.day)
          pyrfrm1.delete(0,'end')
          pyrfrm1.insert(0, in_dat.strftime(dts))

          cr=date.today()
          pyrto1.delete(0,'end')
          pyrto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pr_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rp_pr_tree.column("# 1", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 1", text="Invoice No")
              rp_pr_tree.column("# 2", anchor=E, stretch=NO, width=140)
              rp_pr_tree.heading("# 2", text="Invoice Issue Date")
              rp_pr_tree.column("# 3", anchor=E, stretch=NO, width=130)
              rp_pr_tree.heading("# 3", text="Customer")
              rp_pr_tree.column("# 4", anchor=E, stretch=NO, width=90)
              rp_pr_tree.heading("# 4", text="Payment ID")
              rp_pr_tree.column("# 5", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 5", text="Payment Date")
              rp_pr_tree.column("# 6", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 6", text="Paid By")
              rp_pr_tree.column("# 7", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 7", text="Amount Paid")
              rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',''))
              for record in rp_pr_tree.get_children():
                  rp_pr_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
              
                  if ps_cr=="before amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+str(i[9])))

                  elif ps_cr=="after amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+" "+str(i[9])))

                  elif ps_cr=="after amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+" "+crc))
 
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(totpaid) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              # rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_pr_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Invoice No")
              tree.column("# 2", anchor=E, stretch=NO, width=140)
              tree.heading("# 2", text="Invoice Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=130)
              tree.heading("# 3", text="Customer")
              tree.column("# 4", anchor=E, stretch=NO, width=90)
              tree.heading("# 4", text="Payment ID")
              tree.column("# 5", anchor=E, stretch=NO, width=110)
              tree.heading("# 5", text="Payment Date")
              tree.column("# 6", anchor=E, stretch=NO, width=80)
              tree.heading("# 6", text="Paid By")
              tree.column("# 7", anchor=E, stretch=NO, width=110)
              tree.heading("# 7", text="Amount Paid")
      
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','',''))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
          canvas.create_text(900,100,text="Payment Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+pyrfrm.get()+"      Date To:"+pyrto.get(),fill='black',font=("Helvetica", 8), justify='right')

          

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_pyr())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_pym())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas18())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_pym())
          canvas.bind("<Button-3>", my_popup)
          #===========================================================================================================
      elif rth=="Previous year":
          last_year = (datetime.now()-relativedelta(years=1))
          pyrfrm1.delete(0,'end')
          pyrfrm1.insert(0, last_year.strftime(dts))

          cr=date.today()
          pyrto1.delete(0,'end')
          pyrto1.insert(0, cr.strftime(dts))

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pr_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rp_pr_tree.column("# 1", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 1", text="Invoice No")
              rp_pr_tree.column("# 2", anchor=E, stretch=NO, width=140)
              rp_pr_tree.heading("# 2", text="Invoice Issue Date")
              rp_pr_tree.column("# 3", anchor=E, stretch=NO, width=130)
              rp_pr_tree.heading("# 3", text="Customer")
              rp_pr_tree.column("# 4", anchor=E, stretch=NO, width=90)
              rp_pr_tree.heading("# 4", text="Payment ID")
              rp_pr_tree.column("# 5", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 5", text="Payment Date")
              rp_pr_tree.column("# 6", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 6", text="Paid By")
              rp_pr_tree.column("# 7", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 7", text="Amount Paid")
              rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',''))
              for record in rp_pr_tree.get_children():
                  rp_pr_tree.delete(record)
              count=0
              var1=last_year
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
              
                  if ps_cr=="before amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+str(i[9])))

                  elif ps_cr=="after amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+" "+str(i[9])))

                  elif ps_cr=="after amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+" "+crc))
 
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(totpaid) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              # rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_pr_tree)
          else:
          
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Invoice No")
              tree.column("# 2", anchor=E, stretch=NO, width=140)
              tree.heading("# 2", text="Invoice Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=130)
              tree.heading("# 3", text="Customer")
              tree.column("# 4", anchor=E, stretch=NO, width=90)
              tree.heading("# 4", text="Payment ID")
              tree.column("# 5", anchor=E, stretch=NO, width=110)
              tree.heading("# 5", text="Payment Date")
              tree.column("# 6", anchor=E, stretch=NO, width=80)
              tree.heading("# 6", text="Paid By")
              tree.column("# 7", anchor=E, stretch=NO, width=110)
              tree.heading("# 7", text="Amount Paid")
      
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','',''))
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(900,100,text="Payment Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+pyrfrm.get()+"      Date To:"+pyrto.get(),fill='black',font=("Helvetica", 8), justify='right')

          

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_pyr())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_pym())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas18())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_pym())
          canvas.bind("<Button-3>", my_popup)
      # ------------------------------
      elif rth=="Custom Range":
          ltr=pyrfrm1.get_date()
          ltr1=pyrto1.get_date()
          
          

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tri is not None:
              labelcmp=Label(canvas,text=company_tri[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tri[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tri[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pr_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rp_pr_tree.column("# 1", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 1", text="Invoice No")
              rp_pr_tree.column("# 2", anchor=E, stretch=NO, width=140)
              rp_pr_tree.heading("# 2", text="Invoice Issue Date")
              rp_pr_tree.column("# 3", anchor=E, stretch=NO, width=130)
              rp_pr_tree.heading("# 3", text="Customer")
              rp_pr_tree.column("# 4", anchor=E, stretch=NO, width=90)
              rp_pr_tree.heading("# 4", text="Payment ID")
              rp_pr_tree.column("# 5", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 5", text="Payment Date")
              rp_pr_tree.column("# 6", anchor=E, stretch=NO, width=80)
              rp_pr_tree.heading("# 6", text="Paid By")
              rp_pr_tree.column("# 7", anchor=E, stretch=NO, width=110)
              rp_pr_tree.heading("# 7", text="Amount Paid")
              rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',''))
              for record in rp_pr_tree.get_children():
                  rp_pr_tree.delete(record)
              count=0
              var1=ltr
              var2=ltr1
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
              
                  if ps_cr=="before amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+str(i[9])))

                  elif ps_cr=="after amount":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],crc+" "+str(i[9])))

                  elif ps_cr=="after amount with space":
                      rp_pr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[18], i[34], i[2], i[18],str(i[9])+" "+crc))
 
                  else:
                      pass
                  count += 1

              # total_tri='SELECT SUM(totpaid) from invoice'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              # rp_pr_tree.insert('', 'end',text="1",values=('','','','','','',tot_tri))

              window = canvas.create_window(270, 260, anchor="nw", window=rp_pr_tree)
          else:
          
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Invoice No")
              tree.column("# 2", anchor=E, stretch=NO, width=140)
              tree.heading("# 2", text="Invoice Issue Date")
              tree.column("# 3", anchor=E, stretch=NO, width=130)
              tree.heading("# 3", text="Customer")
              tree.column("# 4", anchor=E, stretch=NO, width=90)
              tree.heading("# 4", text="Payment ID")
              tree.column("# 5", anchor=E, stretch=NO, width=110)
              tree.heading("# 5", text="Payment Date")
              tree.column("# 6", anchor=E, stretch=NO, width=80)
              tree.heading("# 6", text="Paid By")
              tree.column("# 7", anchor=E, stretch=NO, width=110)
              tree.heading("# 7", text="Amount Paid")
      
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','',''))
              window = canvas.create_window(290, 260, anchor="nw", window=tree)
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
          
          canvas.create_text(900,100,text="Payment Report",fill='black',font=("Helvetica", 16), justify='right')
          canvas.create_text(875,145,text="Date From:"+pyrfrm.get()+"      Date To:"+pyrto.get(),fill='black',font=("Helvetica", 8), justify='right')

          

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_pyr())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_pym())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas18())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_pym())
          canvas.bind("<Button-3>", my_popup)

          #============================================================================================
      else:
          pass

  #Recurring Invoice----------------------------------------------
  def category_rir():
          tro_company = "SELECT * from company"
          fbcursor.execute(tro_company)
          company_tro= fbcursor.fetchone()
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          global crc
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          global ps_cr
          ps_cr=post_rp[0]
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )

          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company_tro[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company_tro[4],fill='black',font=("Helvetica", 8), justify='left')
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_rir_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_rir_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_rir_tree.heading("# 1", text="Invoice No")
              rp_rir_tree.column("# 2", anchor=E, stretch=NO, width=130)
              rp_rir_tree.heading("# 2", text="Customer")
              rp_rir_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rp_rir_tree.heading("# 3", text="Next Invoice")
              rp_rir_tree.column("# 4", anchor=E, stretch=NO, width=140)
              rp_rir_tree.heading("# 4", text="Recurring Interval")
              rp_rir_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_rir_tree.heading("# 5", text="Stop After")
              rp_rir_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_rir_tree.heading("# 6", text="Invoice Total")
              # Insert the data in Treeview widget
              rp_rir_tree.insert('', 'end',text="1",values=('','','','','','Total'))
              # Insert the data in Treeview widget
              for record in rp_rir_tree.get_children():
                  rp_rir_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from invoice')
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_rir_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[18], i[26], i[24], i[27], crc+str(i[8])))

                  elif ps_cr=="after amount":
                      rp_rir_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[18], i[26], i[24], i[27], str(i[8])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_rir_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[18], i[26], i[24], i[27], crc+" "+str(i[8])))

                  elif ps_cr=="after amount with space":
                      rp_rir_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[18], i[26], i[24], i[27], str(i[8])+" "+crc))
 
                  else:
                      pass
                #   rp_rir_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[18], i[26], i[24], i[27], i[8]))
                  count += 1

              total_tri='SELECT SUM(invoicetot) from invoice'
              fbcursor.execute(total_tri)
              tot_ird= fbcursor.fetchone()
              
              
              rp_rir_tree.insert('', 'end',text="1",values=('','','','','','Total'))

              rp_rir_tree.insert('', 'end',text="1",values=('','','-End List-','','Total',tot_ird))
              
              window = canvas.create_window(270, 260, anchor="nw", window=rp_rir_tree)

              
          else:
                  
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')


              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="Invoice No")
              tree.column("# 2", anchor=E, stretch=NO, width=130)
              tree.heading("# 2", text="Customer")
              tree.column("# 3", anchor=E, stretch=NO, width=100)
              tree.heading("# 3", text="Next Invoice")
              tree.column("# 4", anchor=E, stretch=NO, width=140)
              tree.heading("# 4", text="Recurring Interval")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Stop After")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="Invoice Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Total'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(865,100,text="Recurring Invoice Report",fill='black',font=("Helvetica", 16), justify='right')

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_rir())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_rir())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas4())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_rir())
          canvas.bind("<Button-3>", my_popup)

  #-------------------------------------------------past due invoice------------------------------------------
  def category_pdi():
          sql_company = "SELECT * from company"
          fbcursor.execute(sql_company)
          company= fbcursor.fetchone()

          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          global crc
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          global ps_cr
          ps_cr=post_rp[0]
          global drf
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company is not None:
              labelcmp=Label(canvas,text=company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)

              labelcmpl=Label(canvas,text=company[2], bg="white",font=("Helvetica", 9),anchor="nw", width=50,justify=LEFT, height=6)
              windowl = canvas.create_window(285,120, anchor="nw", window=labelcmpl)
              lk=canvas.create_text(359,228,text="Sales tax reg No:"+company[4],fill='black',font=("Helvetica", 8), justify='left')

              # Add a Treeview widge
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                  
              rp_pdi_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_pdi_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_pdi_tree.heading("# 1", text="No")
              rp_pdi_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_pdi_tree.heading("# 2", text="Date")
              rp_pdi_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_pdi_tree.heading("# 3", text="Due Date")
              rp_pdi_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_pdi_tree.heading("# 4", text="Terms")
              rp_pdi_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_pdi_tree.heading("# 5", text="Status")
              rp_pdi_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_pdi_tree.heading("# 6", text="Invoice Total")
              rp_pdi_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_pdi_tree.heading("# 7", text="Invoice Paid")
              rp_pdi_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_pdi_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_pdi_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_pdi_tree.get_children():
                  rp_pdi_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * FROM invoice WHERE duedate>invodate')
              
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_pdi_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))

                  elif ps_cr=="after amount":
                      rp_pdi_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pdi_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_pdi_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
 
                  else:
                      pass
                  
                #   rp_pdi_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], i[8], i[9],i[10]))
                  count += 1

            #   total_tri='SELECT SUM(invoicetot) from invoice'
            #   fbcursor.execute(total_tri)
            #   tot_ird= fbcursor.fetchone()
              

            #   total_tax1_tri='SELECT SUM(totpaid) from invoice'
            #   fbcursor.execute(total_tax1_tri)
            #   tot_tax1_ird= fbcursor.fetchone()

            #   total_tax2_tri='SELECT SUM(balance) from invoice'
            #   fbcursor.execute(total_tax2_tri)
            #   tot_tax2_ird= fbcursor.fetchone()
              

            #   rp_pdi_tree.insert('', 'end',text="1",values=('','','','','',tot_ird,tot_tax1_ird,tot_tax2_ird))
              window = canvas.create_window(270, 260, anchor="nw", window=rp_pdi_tree)
          else:
              
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
              canvas.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')
              canvas.create_text(930,145,text="Invoice Category: All",fill='black',font=("Helvetica", 8), justify='right')
              canvas.create_text(330,228,text="Sales tax reg No.",fill='black',font=("Helvetica", 8), justify='left')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6","c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=60)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=80)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=100)
              tree.heading("# 4", text="Terms")
              tree.column("# 5", anchor=E, stretch=NO, width=110)
              tree.heading("# 5", text="Overdue Days")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Total Paid")
              tree.column("# 8", anchor=E, stretch=NO, width=100)
              tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Total', '', ''))

              window = canvas.create_window(270, 260, anchor="nw", window=tree)
          canvas.create_text(865,100,text="Past Due Invoice Report",fill='black',font=("Helvetica", 16), justify='right')
          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_pdi())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_pdi())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas5())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_pdi())
          canvas.bind("<Button-3>", my_popup)
  #-----------------------Customer list --------------------------------------
  def category_cl():
    # firtst filter-----------------------------------Month to date
      
      # #for company details
      tro_company = "SELECT * from company"
      fbcursor.execute(tro_company)
      company_tro= fbcursor.fetchone()

      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]

      global drf
      
      rth=clfilter.get()
      if rth=="All Customers ":

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(120,25,1200,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(175,80, anchor="nw", window=labelcmp)          
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_cl_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_cl_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_cl_tree.heading("# 1", text="Customer Id")
              rp_cl_tree.column("# 2", anchor=E, stretch=NO, width=170)
              rp_cl_tree.heading("# 2", text="Category")
              rp_cl_tree.column("# 3", anchor=E, stretch=NO, width=250)
              rp_cl_tree.heading("# 3", text="Customer Businnes Name")
              rp_cl_tree.column("# 4", anchor=E, stretch=NO, width=180)
              rp_cl_tree.heading("# 4", text="Customer Person")
              rp_cl_tree.column("# 5", anchor=E, stretch=NO, width=140)
              rp_cl_tree.heading("# 5", text="Tel")
              rp_cl_tree.column("# 6", anchor=E, stretch=NO, width=130)
              rp_cl_tree.heading("# 6", text="Fax")
              # Insert the data in Treeview widget
              rp_cl_tree.insert('', 'end',text="1",values=('','','','','',''))

              # Insert the data in Treeview widget
              for record in rp_cl_tree.get_children():
                  rp_cl_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from customer')
              for i in fbcursor:
                  rp_cl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[4], i[8], i[10], i[11]))
                  count += 1
              window = canvas.create_window(170, 150, anchor="nw",  window=rp_cl_tree)
          
          
          else:
              canvas.create_text(240,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
                  
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Customer Id")
              tree.column("# 2", anchor=E, stretch=NO, width=170)
              tree.heading("# 2", text="Category")
              tree.column("# 3", anchor=E, stretch=NO, width=250)
              tree.heading("# 3", text="Customer Businnes Name")
              tree.column("# 4", anchor=E, stretch=NO, width=180)
              tree.heading("# 4", text="Customer Person")
              tree.column("# 5", anchor=E, stretch=NO, width=130)
              tree.heading("# 5", text="Tel")
              tree.column("# 6", anchor=E, stretch=NO, width=130)
              tree.heading("# 6", text="Fax")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','',''))

              window = canvas.create_window(170, 150, anchor="nw", window=tree)
          canvas.create_text(1070,100,text="Customers List",fill='black',font=("Helvetica", 16), justify='right') 

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_cl())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_cl())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas6())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_cl())
          canvas.bind("<Button-3>", my_popup)

      #--------------------------------------------------------------------------------------------------------------
      elif rth=="Default":
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(120,25,1200,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)           
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_cl_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_cl_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_cl_tree.heading("# 1", text="Customer Id")
              rp_cl_tree.column("# 2", anchor=E, stretch=NO, width=170)
              rp_cl_tree.heading("# 2", text="Category")
              rp_cl_tree.column("# 3", anchor=E, stretch=NO, width=250)
              rp_cl_tree.heading("# 3", text="Customer Businnes Name")
              rp_cl_tree.column("# 4", anchor=E, stretch=NO, width=180)
              rp_cl_tree.heading("# 4", text="Customer Person")
              rp_cl_tree.column("# 5", anchor=E, stretch=NO, width=140)
              rp_cl_tree.heading("# 5", text="Tel")
              rp_cl_tree.column("# 6", anchor=E, stretch=NO, width=130)
              rp_cl_tree.heading("# 6", text="Fax")
              # Insert the data in Treeview widget
              rp_cl_tree.insert('', 'end',text="1",values=('','','','','',''))

              # Insert the data in Treeview widget
              for record in rp_cl_tree.get_children():
                  rp_cl_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from customer WHERE category="Default"')
              if fbcursor is not None:
                  for i in fbcursor:
                      rp_cl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[4], i[8], i[10], i[11]))
                      count += 1
              else:
                  rp_cl_tree.insert('', 'end',text="1",values=('','','','-No Data-','',''))


              window = canvas.create_window(170, 150, anchor="nw",  window=rp_cl_tree)
          
          
          else:
              canvas.create_text(240,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Customer Id")
              tree.column("# 2", anchor=E, stretch=NO, width=170)
              tree.heading("# 2", text="Category")
              tree.column("# 3", anchor=E, stretch=NO, width=250)
              tree.heading("# 3", text="Customer Businnes Name")
              tree.column("# 4", anchor=E, stretch=NO, width=180)
              tree.heading("# 4", text="Customer Person")
              tree.column("# 5", anchor=E, stretch=NO, width=130)
              tree.heading("# 5", text="Tel")
              tree.column("# 6", anchor=E, stretch=NO, width=130)
              tree.heading("# 6", text="Fax")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','',''))

              window = canvas.create_window(170, 150, anchor="nw", window=tree)
          canvas.create_text(1070,100,text="Customers List",fill='black',font=("Helvetica", 16), justify='right') 

          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_cl())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_cl())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas6())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_cl())
          canvas.bind("<Button-3>", my_popup)
      else:
          pass
      drf=canvas
  #-----------------------Customer list detailed--------------------------
  def category_cld():
    # firtst filter-----------------------------------Month to date
      
      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()

      global drf
      rth=cldfilter.get()

      if rth=="All Customers ":
          # #for company details
          tro_company = "SELECT * from company"
          fbcursor.execute(tro_company)
          company_tro= fbcursor.fetchone()
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company is not None:
              labelcmp=Label(canvas,text=company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)           
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_cld_tree=ttk.Treeview(canvas, column=("c1", "c2"), show='headings', height=55, style='mystyle.Treeview')
              rp_cld_tree.column("# 1", anchor="sw", stretch=NO, width=345)
              rp_cld_tree.heading("# 1", text="")
              rp_cld_tree.column("# 2", anchor="sw", stretch=NO, width=345)
              rp_cld_tree.heading("# 2", text="")
              
              # Insert the data in Treeview widget
              rp_cld_tree.insert('', 'end',text="1",values=('',''))

              # Insert the data in Treeview widget
              for record in rp_cld_tree.get_children():
                  rp_cld_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from customer')
              for i in fbcursor:
                  rp_cld_tree.insert("","end", iid=i, text='hello', values=("Billing Information:                      Customer Id:"+str(i[0]),"Shipping Information:                      Tax exempt No.:"+str(i[17])))

                  rp_cld_tree.insert("","end", values=('Name: '+str(i[4]),'Name:'+str(i[6])))

                  rp_cld_tree.insert("","end", values=('Address: '+str(i[5]),'Address:'+str(i[7])))
                  rp_cld_tree.insert("","end", values=('Contact Person: '+str(i[8]),'Contact Person:'+str(i[13])))
                  rp_cld_tree.insert("","end", values=('Tel:'+str(i[10])+'          Fax: '+str(i[11]),'Tel:'+str(i[15])+'          Fax: '+str(i[16])))
                  rp_cld_tree.insert("","end", values=('Email: '+str(i[9]),'Email: '+str(i[14])))
                  rp_cld_tree.insert('', 'end',text="1",values=('____________________________________________________________','____________________________________________________________'))
                  
                  count += 1
              window = canvas.create_window(290, 130, anchor="nw", window=rp_cld_tree)
          
          
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=345)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=345)
              tree.heading("# 2", text="Date")
              
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('',''))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(900,100,text="Customer List",fill='black',font=("Helvetica", 16), justify='right') 

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_cld())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_cld())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas7())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_cld())
          canvas.bind("<Button-3>", my_popup)

      #--------------------------------------------------------------------------------------------------------------
      elif rth=="Default":
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company is not None:
              labelcmp=Label(canvas,text=company[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)             
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_cld_tree=ttk.Treeview(canvas, column=("c1", "c2"), show='headings', height=55, style='mystyle.Treeview')
              rp_cld_tree.column("# 1", anchor="sw", stretch=NO, width=345)
              rp_cld_tree.heading("# 1", text="")
              rp_cld_tree.column("# 2", anchor="sw", stretch=NO, width=345)
              rp_cld_tree.heading("# 2", text="")
              
              # Insert the data in Treeview widget
              rp_cld_tree.insert('', 'end',text="1",values=('',''))

              # Insert the data in Treeview widget
              for record in rp_cld_tree.get_children():
                  rp_cld_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from customer WHERE category="Default"')
              for i in fbcursor:
                  rp_cld_tree.insert("","end", iid=i, text='hello', values=("Billing Information:                      Customer Id:"+str(i[0]),"Shipping Information:                      Tax exempt No.:"+str(i[17])))

                  rp_cld_tree.insert("","end", values=('Name: '+str(i[4]),'Name:'+str(i[6])))

                  rp_cld_tree.insert("","end", values=('Address: '+str(i[5]),'Address:'+str(i[7])))
                  rp_cld_tree.insert("","end", values=('Contact Person: '+str(i[8]),'Contact Person:'+str(i[13])))
                  rp_cld_tree.insert("","end", values=('Tel:'+str(i[10])+'          Fax: '+str(i[11]),'Tel:'+str(i[15])+'          Fax: '+str(i[16])))
                  rp_cld_tree.insert("","end", values=('Email: '+str(i[9]),'Email: '+str(i[14])))
                  rp_cld_tree.insert('', 'end',text="1",values=('____________________________________________________________','____________________________________________________________'))
                  
                  count += 1
              window = canvas.create_window(290, 130, anchor="nw", window=rp_cld_tree)
          
          
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=100)
              tree.heading("# 4", text="Terms")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Invoice Paid")
              tree.column("# 8", anchor=E, stretch=NO, width=100)
              tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))

              window = canvas.create_window(290, 260, anchor="nw", window=tree)
          canvas.create_text(900,100,text="Customer List",fill='black',font=("Helvetica", 16), justify='right')
                    


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_cld())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_cld())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas7())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_cld())
          canvas.bind("<Button-3>", my_popup)
      else:
          pass
      
  #products/Service list--------------------------------------------------------------------------
  def category_psl():
    # firtst filter-----------------------------------Month to date
      
      tro_company = "SELECT * from company"
      fbcursor.execute(tro_company)
      company_tro= fbcursor.fetchone()
      global drf
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      rth=pslfilter.get()
      
      if rth=="All product and Services ":

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(120,25,1200,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(175,80, anchor="nw", window=labelcmp)           
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_psl_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 1", text="Product ID")
              rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
              rp_psl_tree.heading("# 2", text="Category")
              rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
              rp_psl_tree.heading("# 3", text="Product/ Service Name")
              rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rp_psl_tree.heading("# 4", text="Description")
              rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
              rp_psl_tree.heading("# 5", text="Warehouse")
              rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 6", text="Stock")
              rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 7", text="Cost")
              rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 8", text="Price")
              # Insert the data in Treeview widget
              rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


              # Insert the data in Treeview widget
              for record in rp_psl_tree.get_children():
                  rp_psl_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from productservice')
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                  elif ps_cr=="after amount":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                  elif ps_cr=="after amount with space":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
 
                  else:
                      pass
                #   rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], i[9], i[11]))
                  count += 1
              window = canvas.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
          
          
          else:
              canvas.create_text(240,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Product ID")
              tree.column("# 2", anchor=E, stretch=NO, width=120)
              tree.heading("# 2", text="Category")
              tree.column("# 3", anchor=E, stretch=NO, width=180)
              tree.heading("# 3", text="Product/ Service Name")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Description")
              tree.column("# 5", anchor=E, stretch=NO, width=150)
              tree.heading("# 5", text="Warehouse")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Stock")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Cost")
              tree.column("# 8", anchor=E, stretch=NO, width=100)
              tree.heading("# 8", text="Price")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','','',''))

              window = canvas.create_window(170, 150, anchor="nw", window=tree)
          canvas.create_text(1000,100,text="Products And Services Report",fill='black',font=("Helvetica", 16), justify='right') 

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_psl())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_psl())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas8())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_psl())
          canvas.bind("<Button-3>", my_popup)

      #--------------------------------------------------------------------------------------------------------------
      elif rth=="All products":
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(120,25,1200,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(175,80, anchor="nw", window=labelcmp)             
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_psl_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 1", text="Product ID")
              rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
              rp_psl_tree.heading("# 2", text="Category")
              rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
              rp_psl_tree.heading("# 3", text="Product/ Service Name")
              rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rp_psl_tree.heading("# 4", text="Description")
              rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
              rp_psl_tree.heading("# 5", text="Warehouse")
              rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 6", text="Stock")
              rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 7", text="Cost")
              rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 8", text="Price")
              # Insert the data in Treeview widget
              rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


              # Insert the data in Treeview widget
              for record in rp_psl_tree.get_children():
                  rp_psl_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from productservice WHERE category="products" ')
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                  elif ps_cr=="after amount":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                  elif ps_cr=="after amount with space":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
 
                  else:
                      pass
                  count += 1
              window = canvas.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
          
          
          else:

              canvas.create_text(240,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Product ID")
              tree.column("# 2", anchor=E, stretch=NO, width=120)
              tree.heading("# 2", text="Category")
              tree.column("# 3", anchor=E, stretch=NO, width=180)
              tree.heading("# 3", text="Product/ Service Name")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Description")
              tree.column("# 5", anchor=E, stretch=NO, width=150)
              tree.heading("# 5", text="Warehouse")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Stock")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Cost")
              tree.column("# 8", anchor=E, stretch=NO, width=100)
              tree.heading("# 8", text="Price")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','','',''))

              window = canvas.create_window(170, 150, anchor="nw", window=tree)
          canvas.create_text(1000,100,text="Products And Services Report",fill='black',font=("Helvetica", 16), justify='right') 
              
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_psl())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_psl())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas8())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_psl())
          canvas.bind("<Button-3>", my_popup)
          #===============================================================================================
      elif rth=="All Service":
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(120,25,1200,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(175,80, anchor="nw", window=labelcmp)             
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_psl_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 1", text="Product ID")
              rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
              rp_psl_tree.heading("# 2", text="Category")
              rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
              rp_psl_tree.heading("# 3", text="Product/ Service Name")
              rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rp_psl_tree.heading("# 4", text="Description")
              rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
              rp_psl_tree.heading("# 5", text="Warehouse")
              rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 6", text="Stock")
              rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 7", text="Cost")
              rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 8", text="Price")
              # Insert the data in Treeview widget
              rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


              # Insert the data in Treeview widget
              for record in rp_psl_tree.get_children():
                  rp_psl_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from productservice WHERE category="Service" ')
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                  elif ps_cr=="after amount":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                  elif ps_cr=="after amount with space":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
 
                  else:
                      pass
                  count += 1
              window = canvas.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
          
          
          else:
                  
              canvas.create_text(240,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Product ID")
              tree.column("# 2", anchor=E, stretch=NO, width=120)
              tree.heading("# 2", text="Category")
              tree.column("# 3", anchor=E, stretch=NO, width=180)
              tree.heading("# 3", text="Product/ Service Name")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Description")
              tree.column("# 5", anchor=E, stretch=NO, width=150)
              tree.heading("# 5", text="Warehouse")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Stock")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Cost")
              tree.column("# 8", anchor=E, stretch=NO, width=100)
              tree.heading("# 8", text="Price")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','','',''))

              window = canvas.create_window(170, 150, anchor="nw", window=tree)

          canvas.create_text(1000,100,text="Products And Services Report",fill='black',font=("Helvetica", 16), justify='right') 

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_psl())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_psl())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas8())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_psl())
          canvas.bind("<Button-3>", my_popup)
      #==============================================================================================================
      elif rth=="Default":
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )
          drf=canvas
          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(120,25,1200,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(175,80, anchor="nw", window=labelcmp)           
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_psl_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 1", text="Product ID")
              rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
              rp_psl_tree.heading("# 2", text="Category")
              rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
              rp_psl_tree.heading("# 3", text="Product/ Service Name")
              rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rp_psl_tree.heading("# 4", text="Description")
              rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
              rp_psl_tree.heading("# 5", text="Warehouse")
              rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 6", text="Stock")
              rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 7", text="Cost")
              rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_psl_tree.heading("# 8", text="Price")
              # Insert the data in Treeview widget
              rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


              # Insert the data in Treeview widget
              for record in rp_psl_tree.get_children():
                  rp_psl_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from productservice WHERE category="Default"')
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                  elif ps_cr=="after amount":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                  elif ps_cr=="after amount with space":
                      rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
 
                  else:
                      pass
                  count += 1
              window = canvas.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
          
          
          else:

              canvas.create_text(240,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
    
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Product ID")
              tree.column("# 2", anchor=E, stretch=NO, width=120)
              tree.heading("# 2", text="Category")
              tree.column("# 3", anchor=E, stretch=NO, width=180)
              tree.heading("# 3", text="Product/ Service Name")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Description")
              tree.column("# 5", anchor=E, stretch=NO, width=150)
              tree.heading("# 5", text="Warehouse")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Stock")
              tree.column("# 7", anchor=E, stretch=NO, width=100)
              tree.heading("# 7", text="Cost")
              tree.column("# 8", anchor=E, stretch=NO, width=100)
              tree.heading("# 8", text="Price")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','','',''))

              window = canvas.create_window(170, 150, anchor="nw", window=tree)
          canvas.create_text(1000,100,text="Products And Services Report",fill='black',font=("Helvetica", 16), justify='right') 


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_psl())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_psl())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas8())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_psl())
          canvas.bind("<Button-3>", my_popup)
      else:
          pass
      
  #-------------------------------------------------prace list----------------------
  def category_prl():
    # firtst filter-----------------------------------Month to date
      
      # #for company details
      tro_company = "SELECT * from company"
      fbcursor.execute(tro_company)
      company_tro= fbcursor.fetchone()
      global drf
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      rth=prlfilter.get()
      if rth=="All product and Services ":

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )

          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)           
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pl_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
              rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
              rp_pl_tree.heading("# 1", text="Product ID")
              rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
              rp_pl_tree.heading("# 2", text="Product/Service Name")
              rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
              rp_pl_tree.heading("# 3", text="Description")
              rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_pl_tree.heading("# 4", text="Unit Price")
              
              # Insert the data in Treeview widget
              rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


              # Insert the data in Treeview widget
              for record in rp_pl_tree.get_children():
                  rp_pl_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from productservice')
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                  elif ps_cr=="after amount":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                  elif ps_cr=="after amount with space":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
 
                  else:
                      pass
                 
                #   rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], i[7]))
                  count += 1
              window = canvas.create_window(280, 130, anchor="nw", window=rp_pl_tree)
          
          
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=150)
              tree.heading("# 1", text="Product ID")
              tree.column("# 2", anchor=E, stretch=NO, width=200)
              tree.heading("# 2", text="Product/Service Name")
              tree.column("# 3", anchor=E, stretch=NO, width=200)
              tree.heading("# 3", text="Description")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Unit Price")
              
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','',''))

              window = canvas.create_window(280, 130, anchor="nw", window=tree)
          canvas.create_text(930,100,text="Price List",fill='black',font=("Helvetica", 16), justify='right')

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_prl())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_prl())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas9())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_prl())
          canvas.bind("<Button-3>", my_popup)

      #--------------------------------------------------------------------------------------------------------------
      elif rth=="All products":
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )

          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)          
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pl_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
              rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
              rp_pl_tree.heading("# 1", text="Product ID")
              rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
              rp_pl_tree.heading("# 2", text="Product/Service Name")
              rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
              rp_pl_tree.heading("# 3", text="Description")
              rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_pl_tree.heading("# 4", text="Unit Price")
              
              # Insert the data in Treeview widget
              rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


              # Insert the data in Treeview widget
              for record in rp_pl_tree.get_children():
                  rp_pl_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from productservice WHERE category="Products"')
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                  elif ps_cr=="after amount":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                  elif ps_cr=="after amount with space":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
 
                  else:
                      pass
                  count += 1
              window = canvas.create_window(280, 130, anchor="nw", window=rp_pl_tree)
          
          
          else:

              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')


              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=150)
              tree.heading("# 1", text="Product ID")
              tree.column("# 2", anchor=E, stretch=NO, width=200)
              tree.heading("# 2", text="Product/Service Name")
              tree.column("# 3", anchor=E, stretch=NO, width=200)
              tree.heading("# 3", text="Description")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Unit Price")
              
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','',''))

              window = canvas.create_window(280, 130, anchor="nw", window=tree)
          canvas.create_text(930,100,text="Price List",fill='black',font=("Helvetica", 16), justify='right')


          
          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_prl())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_prl())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas9())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_prl())
          canvas.bind("<Button-3>", my_popup)
          #===============================================================================================
      elif rth=="All Service":
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )

          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)        
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pl_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
              rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
              rp_pl_tree.heading("# 1", text="Product ID")
              rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
              rp_pl_tree.heading("# 2", text="Product/Service Name")
              rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
              rp_pl_tree.heading("# 3", text="Description")
              rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_pl_tree.heading("# 4", text="Unit Price")
              
              # Insert the data in Treeview widget
              rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


              # Insert the data in Treeview widget
              for record in rp_pl_tree.get_children():
                  rp_pl_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from productservice WHERE category="Service"')
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                  elif ps_cr=="after amount":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                  elif ps_cr=="after amount with space":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
 
                  else:
                      pass
                  count += 1
              window = canvas.create_window(280, 130, anchor="nw", window=rp_pl_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=150)
              tree.heading("# 1", text="Product ID")
              tree.column("# 2", anchor=E, stretch=NO, width=200)
              tree.heading("# 2", text="Product/Service Name")
              tree.column("# 3", anchor=E, stretch=NO, width=200)
              tree.heading("# 3", text="Description")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Unit Price")
              
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','',''))

              window = canvas.create_window(280, 130, anchor="nw", window=tree)

          canvas.create_text(930,100,text="Price List",fill='black',font=("Helvetica", 16), justify='right')

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_prl())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_prl())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas9())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_prl())
          canvas.bind("<Button-3>", my_popup)
      #==============================================================================================================
      elif rth=="Default":
          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )

          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp)         
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_pl_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
              rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
              rp_pl_tree.heading("# 1", text="Product ID")
              rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
              rp_pl_tree.heading("# 2", text="Product/Service Name")
              rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
              rp_pl_tree.heading("# 3", text="Description")
              rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_pl_tree.heading("# 4", text="Unit Price")
              
              # Insert the data in Treeview widget
              rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


              # Insert the data in Treeview widget
              for record in rp_pl_tree.get_children():
                  rp_pl_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from productservice WHERE category="Default"')
              for i in fbcursor:
                  if ps_cr=="before amount":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                  elif ps_cr=="after amount":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
  
                  elif ps_cr=="before amount with space":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                  elif ps_cr=="after amount with space":
                      rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
 
                  else:
                      pass
                  count += 1
              window = canvas.create_window(280, 130, anchor="nw", window=rp_pl_tree)
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=150)
              tree.heading("# 1", text="Product ID")
              tree.column("# 2", anchor=E, stretch=NO, width=200)
              tree.heading("# 2", text="Product/Service Name")
              tree.column("# 3", anchor=E, stretch=NO, width=200)
              tree.heading("# 3", text="Description")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Unit Price")
              
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','',''))

              window = canvas.create_window(280, 130, anchor="nw", window=tree)

          canvas.create_text(930,100,text="Price List",fill='black',font=("Helvetica", 16), justify='right')

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_prl())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_prl())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas9())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_prl())
          canvas.bind("<Button-3>", my_popup)
      else:
          pass
      drf=canvas

  #-------------------------product low stock report---------------------
  def category_plsr():
          tro_company = "SELECT * from company"
          fbcursor.execute(tro_company)
          company_tro= fbcursor.fetchone()

          global drf
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          global crc
          crc=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          global ps_cr
          ps_cr=post_rp[0]

          frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
          frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
          frame.place(x=20,y=115)
          canvas=Canvas(
              frame,
              bg='grey',
              width=1400,
              height=1200,
              scrollregion=(0,0,1500, 1500)
              )

          vertibar=Scrollbar(
              frame,
              orient=VERTICAL
              )
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1310,height=600)

          canvas.config(
              yscrollcommand=vertibar.set
              )
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
          if company_tro is not None:
              labelcmp=Label(canvas,text=company_tro[1], bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=2)
              window = canvas.create_window(285,80, anchor="nw", window=labelcmp) 
              
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_plsr_tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_plsr_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_plsr_tree.heading("# 1", text="Product Id")
              rp_plsr_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rp_plsr_tree.heading("# 2", text="Category")
              rp_plsr_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_plsr_tree.heading("# 3", text="Product Name")
              rp_plsr_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rp_plsr_tree.heading("# 4", text="Warehouse")
              rp_plsr_tree.column("# 5", anchor=E, stretch=NO, width=130)
              rp_plsr_tree.heading("# 5", text="Low Stock Limit")
              rp_plsr_tree.column("# 6", anchor=E, stretch=NO, width=70)
              rp_plsr_tree.heading("# 6", text="Stock")
              # Insert the data in Treeview widget
              rp_plsr_tree.insert('', 'end',text="1",values=('','','','','',''))
              # Insert the data in Treeview widget
              for record in rp_plsr_tree.get_children():
                  rp_plsr_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from productservice WHERE stock < stocklimit')
              for i in fbcursor:
                  rp_plsr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[15], i[14], i[13]))
                  count += 1
              
              window = canvas.create_window(290, 130, anchor="nw", window=rp_plsr_tree)

              
          else:
              canvas.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')
              # Create an instance of Style widget
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Product Id")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Category")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Product Name")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Warehouse")
              tree.column("# 5", anchor=E, stretch=NO, width=130)
              tree.heading("# 5", text="Low Stock Limit")
              tree.column("# 6", anchor=E, stretch=NO, width=70)
              tree.heading("# 6", text="Stock")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','',''))

              window = canvas.create_window(290, 130, anchor="nw", window=tree)
          canvas.create_text(840,100,text="Product Low Stock Report",fill='black',font=("Helvetica", 16), justify='right')

          def my_popup(event):
              my_menu.tk_popup(event.x_root, event.y_root)
          my_menu= Menu(canvas, tearoff=False)
          my_menu.add_command(label="Run Report", command=lambda:category_plsr())
          my_menu.add_separator()
          my_menu.add_command(label="Print Report", command=lambda:pr_exp_plsr())
          my_menu.add_command(label="Email Report", command=lambda:rp_addemail_order())

          my_menu.add_separator()
          my_menu.add_command(label="Export Report To Excel", command=lambda:exportcanvas10())
          my_menu.add_command(label="Export Report To PDF", command=lambda:pdf_exp_plsr())
          canvas.bind("<Button-3>", my_popup)
          drf=canvas
  ######################################################################################################################


  canvas=StringVar()
  scrfilter=StringVar()
  scrfrm=StringVar()
  scrto=StringVar()
  #it is for invoice report
  invfilter = StringVar()# veriable for store category filter
  invfrm=StringVar()
  invto=StringVar()

  #it is for invoice report(With cust)
  irwcfilter = StringVar()
  irwcfrm=StringVar()
  irwcto=StringVar()

  #it is for Order report
  orfilter = StringVar()
  orfrm=StringVar()
  orto=StringVar()

  #Tax report Invoice
  trifilter = StringVar()
  trifrm=StringVar()
  trito=StringVar()

  #Tax report order
  trofilter = StringVar()
  trofrm=StringVar()
  troto=StringVar()

  #Tax report order
  srgdfilter = StringVar()
  srgdfrm=StringVar()
  srgdto=StringVar()

  #invoice report by date
  irdfilter = StringVar()
  irdfrm=StringVar()
  irdto=StringVar()

  #daily invoice report by date

  dirdate=StringVar()

  #purchase order report 
  porfilter = StringVar()
  porfrm=StringVar()
  porto=StringVar()

  #expense report
  expfilter = StringVar()
  expfrm=StringVar()
  expto=StringVar()

  #payment report
  pyrfilter = StringVar()
  pyrfrm=StringVar()
  pyrto=StringVar()
  #customer list
  clfilter = StringVar()
  #customer list Detaild
  cldfilter = StringVar()

  #Purchase/ service list
  pslfilter = StringVar()

  #price list
  prlfilter = StringVar()

  #function For chkbox     
  checkvar1 = BooleanVar()
  checkvar2 = BooleanVar()
  checkvar3 = BooleanVar()

  rpcheckvar1_ir = BooleanVar()
  rpcheckvar2_ir = BooleanVar()
  rpcheckvar3_ir = BooleanVar()

  rpcheckvar1_irwc = BooleanVar()
  rpcheckvar2_irwc = BooleanVar()
  rpcheckvar3_irwc = BooleanVar()

  rpcheckvar1_tri = BooleanVar()
  rpcheckvar2_tri = BooleanVar()
  rpcheckvar3_tri = BooleanVar()


  rpcheckvar1_plr = BooleanVar()
  rpcheckvar2_plr = BooleanVar()


  rpcheckvar1_psl = BooleanVar()
  rpcheckvar2_psl = BooleanVar()


  rpcheckvar1_pl = BooleanVar()
  rpcheckvar2_pl = BooleanVar()


  rpcheckvar1_por= BooleanVar()
  rpcheckvar2_por= BooleanVar()

  rpcheckvar1_exp= BooleanVar()
  rpcheckvar2_exp= BooleanVar()

  rpcheckvar1_cl= BooleanVar()
  rpcheckvar2_cl= BooleanVar()

  rpcheckvar1_cld= BooleanVar()
  rpcheckvar2_cld= BooleanVar()


  #####################################(Drop down Function)##################################################
  def maindropmenu(event):
    sql='select dateformat from company'
    fbcursor.execute(sql)
    rp_date_for=fbcursor.fetchone()
    
    if not rp_date_for:
        ldt='yyyy-MM-dd'
    
    elif rp_date_for[0]=="mm-dd-yyyy":
        ldt='mm-dd-yyyy'

    elif rp_date_for[0]=="dd-mm-yyyy":
        ldt='dd-mm-yyyy'
                
    # elif rp_date_for[0]=="yyyy.mm.dd":
    #     ldt='yyyy.mm.dd'
                    
    elif rp_date_for[0]=="mm/dd/yyyy":
        ldt='mm/dd/yyyy'
                    
    elif rp_date_for[0]=="dd/mm/yyyy":
        ldt='dd/mm/yyyy'
                            
    elif rp_date_for[0]=="dd.mm.yyyy":
        ldt='dd.mm.yyyy'
                            
    # elif rp_date_for[0]=="yyyy/mm/dd":
    #     ldt='yyyy/mm/dd'

    else:
        ldt='yyyy-MM-dd'
    menuvar=menu1.get()
    if menuvar== "Screen Charts":
          rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55, command=lambda:screen_flt())
          rprefreshlebel.place(x=22,y=12)


          rpprintlabel = Button(midFrame,compound="top", text="Print Chart",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:image_print())
          rpprintlabel.place(x=95,y=12)
      


          rpsaveLabel = Button(midFrame,compound="top", text="Save Chart\nimage",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:image())
          rpsaveLabel.place(x=168,y=12)

          rpcopyLabel = Button(midFrame,compound="top", text="Copy Chart\n to Clipboard",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:image())
          rpcopyLabel.place(x=240,y=12)
          
          iruw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
          iruw1.place(x=415,y=9)
          iruw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
          iruw2.place(x=530,y=9)

          global rp_scr_frm
          global rp_sc_to


          lbl_ir =Label(midFrame, text="From:" , bg="#f8f8f2")
          lbl_ir.place(x=676,y=10)

          exir=DateEntry(midFrame,textvariable=scrfrm,date_pattern=ldt)
          exir.place(x=721,y=10)

          lbl_ir =Label(midFrame, text="To:", bg="#f8f8f2")
          lbl_ir.place(x=690,y=50)

          exir=DateEntry(midFrame,textvariable=scrto,date_pattern=ldt)
          exir.place(x=721,y=50)

          lbl_ir = Label(midFrame, text="Category:", bg="#f8f8f2")
          lbl_ir.place(x=470,y=10)

          menuir = StringVar()
          drop1ir=ttk.Combobox(midFrame, textvariable=menuir)
          drop1ir.place(x=530,y=10)
          drop1ir["values"]=("Java","Php", "POP")
          drop1ir.current(0)

          
          drop2=ttk.Combobox(midFrame, textvariable=scrfilter)
          drop2.place(x=530,y=50)
          drop2["values"]=("Year To Date","Current year","Last 3 Month","Last 6 Month", "Last 12 Month", "Last 18 Month", "Last 24 Month","Previous Year", "Before Previous Year", "Custom Range" )
          drop2.current(0)



          #--------------------------------check box-------------------------------------
          

          # checkvar1 = BooleanVar()
          rp_1_chkbtn1 = Checkbutton(midFrame, text = "Invoice", variable = checkvar1, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2",command=lambda:chek_function())
          rp_1_chkbtn1.place(x=815,y=2)
          rp_1_chkbtn1.select()

          # checkvar2 = BooleanVar()
          rp_2_chkbtn2 = Checkbutton(midFrame, text = "Outstanding", variable = checkvar2, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:chek_function())
          rp_2_chkbtn2.place(x=830,y=40)
          rp_2_chkbtn2.select()

          # checkvar3 = BooleanVar()
          rp_3_chkbtn3 = Checkbutton(midFrame, text = "Paid", variable = checkvar3, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:chek_function())
          rp_3_chkbtn3.place(x=883,y=2)
          rp_3_chkbtn3.select()

          mainchartframe2 =Frame(reportframe,height=1500, width=200)
          mainchartframe2.pack(side="top", padx=0, pady=0)

          irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
          irwcuw1.place(x=2,y=90)


          lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
          lbl_invdtt2.place(x=2, y=87)
          irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
          irwcuw1.place(x=1135, y=97)
          lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
          lbl_invdtt2.place(x=1140, y=97)

          ######################################################################################################################


          #########################################(Graph Section)#############################################################
          sql_paid = "SELECT SUM(invoicetot)from invoice"
          fbcursor.execute(sql_paid)
          invoice= fbcursor.fetchone()

          x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
          fbcursor.execute(x_axis)
          axis_x= fbcursor.fetchone()



          sql_company = "SELECT SUM(totpaid)from invoice"
          fbcursor.execute(sql_company)
          paid= fbcursor.fetchone()



          sql_outstanding = "SELECT SUM(balance)from invoice"
          fbcursor.execute(sql_outstanding)
          outstanding= fbcursor.fetchone()


          frame = Frame(
                  reportframe,
                  width=1380,
                  height=1000,
                  bg='#b3b3b3',
                  )
          frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
              
          frame.pack()


          x=datetime.today()

          y=invoice

          x=axis_x
          figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
          plt.bar(x,y, label="Invoice", color="orange")
          plt.legend()
          plt.xlabel("x-axis")
          plt.ylabel("y-label")
          axes=plt.gca()
          axes.yaxis.grid()

          # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




          #**************add dates********

          dates=axis_x[0]+timedelta(days=2)

          y=outstanding
          x=dates
          plt.bar(x,y, label="Outstanding", color="blue")
          plt.legend()
          plt.xlabel("x-axis")
          plt.ylabel("y-label")
          axes=plt.gca()
          axes.yaxis.grid()
          # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


          dates3=axis_x[0]-timedelta(days=2)
          y=paid
          x=dates3
          plt.bar(x,y, label="Paid", color="green") 
          plt.legend()
          plt.xlabel("x-axis")
          plt.ylabel("y-label")
          axes=plt.gca()
          axes.yaxis.grid()
          # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

          #used to display chart in our frame
          canvasbar = FigureCanvasTkAgg(figfirst, master=reportframe)
          canvasbar.draw()
          canvasbar.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

          #second graph

          sec_paid = "SELECT invoicetot from invoice  GROUP BY businessname ORDER by COUNT(businessname) DESC LIMIT 1"
          fbcursor.execute(sec_paid)
          paid_sec_x= fbcursor.fetchone()

          
          sec_paid_y = "SELECT businessname from invoice  GROUP BY businessname  ORDER by COUNT(businessname) DESC LIMIT 1"
          fbcursor.execute(sec_paid_y)

          paid_sec_y= fbcursor.fetchone()


          figsecond = plt.figure(figsize=(9, 4), dpi=80)

          x=paid_sec_y
          y=paid_sec_x
          plt.barh(x,y, label="Top Billed Customer", color="orange") 
          plt.legend()
          plt.xlabel("Invoiced Amount")
          plt.ylabel("")
          axes=plt.gca()
          axes.xaxis.grid()


          canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
          canvasbar.draw()
          canvasbar.get_tk_widget().place(x=0, y=370)

          # #second graph

          thrd_paid = "SELECT invoicetot from invoice GROUP BY Productserviceid ORDER by COUNT(Productserviceid) DESC LIMIT 1"
          fbcursor.execute(thrd_paid)
          paid_thrd_x= fbcursor.fetchone()


          thrd_paid_y = "select name from productservice where Productserviceid=(SELECT Productserviceid from invoice GROUP BY Productserviceid ORDER by COUNT(Productserviceid) DESC LIMIT 1)"

          fbcursor.execute(thrd_paid_y)

          paid_thrd_y= fbcursor.fetchone()

          figlast = plt.figure(figsize=(9, 4), dpi=80)

          x=paid_thrd_y
          y=paid_thrd_x   
          plt.barh(x,y, label="Top Product Sale", color="blue") 
          plt.legend()
          plt.xlabel("Total Sales")
          plt.ylabel("")
          axes=plt.gca()
          axes.xaxis.grid()
          

          canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
          canvasbar.draw()
          canvasbar.get_tk_widget().place(x=650, y=370)

          lbl_ir = Label(reportframe, text="Right Click On Each Chart For More Options", bg="white" , font=("arial", 8))
          lbl_ir.place(x=1115,y=85)

          lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
          lbl_invdtt2.place(x=2, y=85)

    elif menuvar== "Invoice Report":
      #frame for display data to a a4 sheet

      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55, command=category)
      rprefreshlebel.place(x=22,y=12)

      
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)


      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp())
      rpprintlabel.place(x=95,y=12)
    


      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp())
      rpcopyLabel.place(x=240,y=12)
      
      iruw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      iruw1.place(x=415,y=9)
      iruw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      iruw2.place(x=530,y=9)
      lbl_ir =Label(midFrame, text="From:" , bg="#f8f8f2")
      lbl_ir.place(x=676,y=10)

      global rp_exir
      rp_exir=DateEntry(midFrame, textvariable=invfrm,date_pattern=ldt)
      rp_exir.place(x=721,y=10)

      lbl_ir =Label(midFrame, text="To:", bg="#f8f8f2")
      lbl_ir.place(x=690,y=50)
      


      global rp_exir1
      rp_exir1=DateEntry(midFrame,textvariable=invto,date_pattern=ldt)
      rp_exir1.place(x=721,y=50)

      

      lbl_ir = Label(midFrame, text="Category:", bg="#f8f8f2")
      lbl_ir.place(x=470,y=10)

      menuir = StringVar()
      drop1ir=ttk.Combobox(midFrame, textvariable=menuir)
      drop1ir.place(x=530,y=10)
      drop1ir["values"]=("Java","Php", "POP")
      drop1ir.current(0)

      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)

      
      rpdrop2_ir=ttk.Combobox(midFrame, textvariable=invfilter)
      rpdrop2_ir["values"]=("Month to date","Year To Date","Current year","Current month","Current days", "Last 30 days", "Last 60 days", "Last 90 days","Previous month", "Previous year", "Custom Range")
      rpdrop2_ir.place(x=530,y=50)
      rpdrop2_ir.current(0)



      #--------------------------------check box-------------------------------------
      
      rpchkbtn1_ir= Checkbutton(midFrame, text = "Paid", variable = rpcheckvar1_ir, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2",command=lambda:check_inv())
      rpchkbtn1_ir.place(x=815,y=2)
      rpchkbtn1_ir.select()

      
      rpchkbtn1_ir = Checkbutton(midFrame, text = "Void", variable = rpcheckvar2_ir, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:check_inv())
      rpchkbtn1_ir.place(x=815,y=40)
      rpchkbtn1_ir.select()
      
      rpchkbtn1_ir= Checkbutton(midFrame, text = "Unpaid", variable = rpcheckvar3_ir, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:check_inv())
      rpchkbtn1_ir.place(x=883,y=2)
      rpchkbtn1_ir.select()
      
      mainchartframe2 =Frame(reportframe,height=1500, width=200)
      mainchartframe2.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1200,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1000,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      
      global id_inv1
      global id_inv2
      global id_inv
      
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      id_inv=canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')
      

      id_inv1=canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      id_inv2=canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')

      # midFrame2=LabelFrame(frame, bg="red", width=100, height=60)
      # midFrame2.place(x=20, y=100)
      #----------------------------------------------------------------------------------------------------
    elif menuvar=="Invoice Report(With Customer)":

      #frame for display data to a a4 sheet

      rprefreshlebel_cst = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_irwc)
      rprefreshlebel_cst.place(x=22,y=12)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabel_cst = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_irwc())
      rpprintlabel_cst.place(x=95,y=12)
    
      rpsaveLabel_cst = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas2())
      rpsaveLabel_cst.place(x=168,y=12)

      rpcopyLabel_cst = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_irwc())
      rpcopyLabel_cst.place(x=240,y=12)

      irwcuw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      irwcuw1.place(x=415,y=9)
      irwcuw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      irwcuw2.place(x=530,y=9)
      lbl_irwc =Label(midFrame, text="From:" , bg="#f8f8f2")
      lbl_irwc.place(x=676,y=10)

      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)

      global irwcfrm1
      irwcfrm1=DateEntry(midFrame, textvariable=irwcfrm,date_pattern=ldt)
      irwcfrm1.place(x=721,y=10)

      lbl_irwc =Label(midFrame, text="To:", bg="#f8f8f2")
      lbl_irwc.place(x=690,y=50)

      global irwcto1
      irwcto1=DateEntry(midFrame, textvariable=irwcto,date_pattern=ldt)
      irwcto1.place(x=721,y=50)
      
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      if not rp_date_for:
          pass
      else:
          if rp_date_for[0]=="mm-dd-yyyy":
              irwcfrm1.set_date(irwcfrm1._date.strftime('%m-%d-%Y'))
              irwcto1.set_date(irwcto1._date.strftime('%m-%d-%Y'))
          elif rp_date_for[0]=="dd-mm-yyyy":
              irwcfrm1.set_date(irwcfrm1._date.strftime('%d-%m-%Y'))
              irwcto1.set_date(irwcto1._date.strftime('%d-%m-%Y'))
        #   elif rp_date_for[0]=="yyyy.mm.dd":
        #       rp_exir.set_date(rp_exir._date.strftime('%Y.%m.%d'))
        #       rp_exir1.set_date(rp_exir1._date.strftime('%Y.%m.%d'))
          elif rp_date_for[0]=="mm/dd/yyyy":
              irwcfrm1.set_date(irwcfrm1._date.strftime('%m/%d/%y'))
              irwcto1.set_date(irwcto1._date.strftime('%m/%d/%y'))
          elif rp_date_for[0]=="dd/mm/yyyy":
              irwcfrm1.set_date(irwcfrm1._date.strftime('%d/%m/%Y'))
              irwcto1.set_date(irwcto1._date.strftime('%d/%m/%Y'))
          elif rp_date_for[0]=="dd.mm.yyyy":
              irwcfrm1.set_date(irwcfrm1._date.strftime('%d.%m.%Y'))
              irwcto1.set_date(irwcto1._date.strftime('%d.%m.%Y'))
        #   elif rp_date_for[0]=="yyyy/mm/dd":
        #       rp_exir.set_date(rp_exir._date.strftime('%Y/%m/%d'))
        #       rp_exir1.set_date(rp_exir1._date.strftime('%Y/%m/%d'))
          else:
              irwcfrm1.set_date(irwcfrm1._date.strftime('%d-%m-%Y'))
              irwcto1.set_date(irwcto1._date.strftime('%d-%m-%Y'))

      lbl_irwc = Label(midFrame, text="Category:", bg="#f8f8f2")
      lbl_irwc.place(x=470,y=10)


      menuirwc = StringVar()
      drop1irwc=ttk.Combobox(midFrame, textvariable=menuirwc)
      drop1irwc.place(x=530,y=10)
      drop1irwc["values"]=("Java","Php", "POP")
      drop1irwc.current(0)

      
      rpdrop2_irwc=ttk.Combobox(midFrame, textvariable=irwcfilter)
      rpdrop2_irwc["values"]=("Month to date","Year To Date","Current year","Current month","Current days", "Last 30 days", "Last 60 days", "Last 90 days","Previous month", "Previous year", "Custom Range")
      rpdrop2_irwc.place(x=530,y=50)
      rpdrop2_irwc.current(0)



      #--------------------------------check box-------------------------------------
      
      rpchkbtn1_irwc= Checkbutton(midFrame, text = "Paid", variable = rpcheckvar1_irwc, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2",command=lambda:check_irwc())
      rpchkbtn1_irwc.place(x=815,y=2)
      rpchkbtn1_irwc.select()
    
      rpchkbtn1_irwc = Checkbutton(midFrame, text = "Void", variable = rpcheckvar2_irwc, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:check_irwc())
      rpchkbtn1_irwc.place(x=815,y=40)
      rpchkbtn1_irwc.select()
      
      rpchkbtn1_irwc = Checkbutton(midFrame, text = "Unpaid", variable = rpcheckvar3_irwc, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:check_irwc())
      rpchkbtn1_irwc.place(x=883,y=2)
      rpchkbtn1_irwc.select()

      mainchartframe3 =Frame(reportframe,height=1500, width=200)
      mainchartframe3.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')
      #----------------------------------------------------------------------------------------------------
    elif menuvar=="Order Report":
      #frame for display data to a a4 sheet


      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_or)
      rprefreshlebel.place(x=22,y=12)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_or())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas3())
      rpsaveLabel.place(x=168,y=12)

      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_or())
      rpcopyLabel.place(x=240,y=12)
      
      oruw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      oruw1.place(x=415,y=9)
      oruw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      oruw2.place(x=530,y=9)

      lbl_or =Label(midFrame, text="From:" , bg="#f8f8f2")
      lbl_or.place(x=676,y=10)
      
      global orfrm1
      orfrm1=DateEntry(midFrame, textvariable=orfrm,date_pattern=ldt)
      orfrm1.place(x=721,y=10)

      lbl_or =Label(midFrame, text="To:", bg="#f8f8f2")
      lbl_or.place(x=690,y=50)
      global orto1
      orto1=DateEntry(midFrame, textvariable=orto,date_pattern=ldt)
      orto1.place(x=721,y=50)
      

      lbl_or = Label(midFrame, text="Category:", bg="#f8f8f2")
      lbl_or.place(x=470,y=10)

      menuor = StringVar()
      drop1or=ttk.Combobox(midFrame, textvariable=menuor)
      drop1or.place(x=530,y=10)
      drop1or["values"]=("Java","Php", "POP")
      drop1or.current(0)


      rpdrop2_or=ttk.Combobox(midFrame, textvariable=orfilter)
      rpdrop2_or["values"]=("Month to date","Year To Date","Current year","Current month","Current days", "Last 30 days", "Last 60 days", "Last 90 days","Previous month", "Previous year", "Custom Range")
      rpdrop2_or.place(x=530,y=50)
      rpdrop2_or.current(0)
      
      mainchartframe4 =Frame(reportframe,height=1500, width=200)
      mainchartframe4.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')
    
        #----------------------------------------------------------------------------------------------------
    elif menuvar=="Recurring Invoice Report":
      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_rir)
      rprefreshlebel.place(x=22,y=12)

      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_rir())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas4())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_rir())
      rpcopyLabel.place(x=240,y=12)

      
      pruw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      pruw1.place(x=415,y=9)
      pruw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      pruw2.place(x=530,y=9)

      mainchartframe5 =Frame(reportframe,height=1500, width=200)
      mainchartframe5.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')

        #----------------------------------------------------------------------------------------------------
    elif menuvar=="Past Due Invoices":

      rprefreshlebelpdi = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_pdi)
      rprefreshlebelpdi.place(x=22,y=12)

      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabelpdi = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_pdi())
      rpprintlabelpdi.place(x=95,y=12)
    

      rpsaveLabelpdi = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas5())
      rpsaveLabelpdi.place(x=168,y=12)

      rpcopyLabelpdi = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_pdi())
      rpcopyLabelpdi.place(x=240,y=12)
      
      pdiuw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      pdiuw1.place(x=415,y=9)
      pdiuw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      pdiuw2.place(x=530,y=9)


      lbl_pdi = Label(midFrame, text="Category:", bg="#f8f8f2")
      lbl_pdi.place(x=530,y=9)
      
      menupdi = StringVar()
      drop1pdi=ttk.Combobox(midFrame, textvariable=menupdi, width=30)
      drop1pdi.place(x=530,y=50)
      drop1pdi["values"]=("Java","Php", "POP")
      drop1pdi.current(0)

      mainchartframe6 =Frame(reportframe,height=1500, width=200)
      mainchartframe6.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')
      #----------------------------------------------------------------------------------------------------
    
    elif menuvar=="Customers List":
      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_cl)
      rprefreshlebel.place(x=22,y=12)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabel = Button(midFrame,compound="top", text="Print Chart",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_cl())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas6())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_cl())
      rpcopyLabel.place(x=240,y=12)

      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)

      pdiuw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      pdiuw1.place(x=415,y=9)

      cluw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      cluw2.place(x=530,y=9)


      lbl_cl = Label(midFrame, text=" Select Customer Category:", bg="#f8f8f2")
      lbl_cl.place(x=530,y=9)
      

      drop1cl=ttk.Combobox(midFrame, textvariable=clfilter, width=30)
      drop1cl.place(x=530,y=50)
      drop1cl["values"]=("All Customers ","Default")
      drop1cl.current(0)

      
      rpchkbtn1_cl = Checkbutton(midFrame, text = "Active", variable = rpcheckvar1_cl, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2",command=lambda:check_cl())
      rpchkbtn1_cl.place(x=725,y=2)
      rpchkbtn1_cl.select()

      
      rpchkbtn1_cl = Checkbutton(midFrame, text = "Inactive", variable = rpcheckvar2_cl, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:check_cl())
      rpchkbtn1_cl.place(x=730,y=40)
      rpchkbtn1_cl.select()
      
      mainchartframe7 =Frame(reportframe,height=1500, width=200)
      mainchartframe7.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')
      #----------------------------------------------------------------------------------------------------
    
    elif menuvar=="Customers List(Detailed)":
      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_cld)
      rprefreshlebel.place(x=22,y=12)


      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_cld())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas7())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_cld())
      rpcopyLabel.place(x=240,y=12)

      cluw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      cluw2.place(x=530,y=9)


      lbl_cl = Label(midFrame, text=" Select Customer Category:", bg="#f8f8f2")
      lbl_cl.place(x=530,y=9)
      
      menucl = StringVar()
      drop1cl=ttk.Combobox(midFrame, textvariable=cldfilter, width=30)
      drop1cl.place(x=530,y=50)
      drop1cl["values"]=("All Customers ","Default")
      drop1cl.current(0)

      rpchkbtn1_cl = Checkbutton(midFrame, text = "Active", variable = rpcheckvar1_cld, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2",command=lambda:check_cld())
      rpchkbtn1_cl.place(x=725,y=2)
      rpchkbtn1_cl.select()

      rpchkbtn1_cl = Checkbutton(midFrame, text = "Inactive", variable = rpcheckvar2_cld, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:check_cld())
      rpchkbtn1_cl.place(x=730,y=40)
      rpchkbtn1_cl.select()

      mainchartframe8 =Frame(reportframe,height=1500, width=200)
      mainchartframe8.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')
      #----------------------------------------------------------------------------------------------------
    
    elif menuvar=="Product/Service List":
      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)

      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_psl)
      rprefreshlebel.place(x=22,y=12)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_psl())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas8())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_psl())
      rpcopyLabel.place(x=240,y=12) 

      psluw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      psluw1.place(x=415,y=9)

      psluw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      psluw2.place(x=530,y=9)


      lbl_psl = Label(midFrame, text=" Select Product Category:", bg="#f8f8f2")
      lbl_psl.place(x=530,y=9)
      
      menupsl = StringVar()
      drop1psl=ttk.Combobox(midFrame, textvariable=pslfilter, width=30)
      drop1psl.place(x=530,y=50)
      drop1psl["values"]=("All product and Services ", "All products", "All Service","Default")
      drop1psl.current(0)

      
      rpchkbtn1_psl = Checkbutton(midFrame, text = "Active", variable = rpcheckvar1_psl, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2",command=lambda:check_psl())
      rpchkbtn1_psl.place(x=725,y=2)
      rpchkbtn1_psl.select()
      
      rpchkbtn1_psl = Checkbutton(midFrame, text = "Inactive", variable = rpcheckvar2_psl, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:check_psl())
      rpchkbtn1_psl.place(x=730,y=40)
      rpchkbtn1_psl.select()
      mainchartframe9 =Frame(reportframe,height=1500, width=200)
      mainchartframe9.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')

        #----------------------------------------------------------------------------------------------------

    elif menuvar=="Price List":
      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_prl)
      rprefreshlebel.place(x=22,y=12)

      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)

      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_prl())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas9())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_prl())
      rpcopyLabel.place(x=240,y=12)

      pluw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      pluw1.place(x=415,y=9)

      pluw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      pluw2.place(x=530,y=9)


      lbl_pl = Label(midFrame, text=" Select Product Category:", bg="#f8f8f2")
      lbl_pl.place(x=530,y=9)
      
      menupl = StringVar()
      drop1pl=ttk.Combobox(midFrame, textvariable=prlfilter, width=30)
      drop1pl.place(x=530,y=50)
      drop1pl["values"]=("All product and Services ", "All products", "All Service","Default")
      drop1pl.current(0)

      
      rpchkbtn1_pl = Checkbutton(midFrame, text = "Active", variable = rpcheckvar1_pl, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2",command=lambda:check_pl())
      rpchkbtn1_pl.place(x=725,y=2)
      rpchkbtn1_pl.select()

      
      rpchkbtn1_pl = Checkbutton(midFrame, text = "Inactive", variable = rpcheckvar2_pl, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:check_pl())
      rpchkbtn1_pl.place(x=730,y=40)
      rpchkbtn1_pl.select()

      mainchartframe10 =Frame(reportframe,height=1500, width=200)
      mainchartframe10.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')
      #----------------------------------------------------------------------------------------------------
    
    elif menuvar=="Products Low Stock Report":
      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_plsr)
      rprefreshlebel.place(x=22,y=12)
      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_plsr())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas10())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_plsr())
      rpcopyLabel.place(x=240,y=12)

      plruw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      plruw1.place(x=415,y=9)

      plruw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      plruw2.place(x=530,y=9)


      
      rpchkbtn1_plr = Checkbutton(midFrame, text = "Active", variable = rpcheckvar1_plr, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2",command=lambda:check_plsr())
      rpchkbtn1_plr.place(x=530,y=2)
      rpchkbtn1_plr.select()
  
      rpchkbtn1_plr = Checkbutton(midFrame, text = "Inactive", variable = rpcheckvar2_plr, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:check_plsr())
      rpchkbtn1_plr.place(x=535,y=40)
      rpchkbtn1_plr.select()

      mainchartframe11 =Frame(reportframe,height=1500, width=200)
      mainchartframe11.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')
    
      #----------------------------------------------------------------------------------------------------
    elif menuvar=="Tax Report(Invoices)":
      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_tri)
      rprefreshlebel.place(x=22,y=12)

      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_tri())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas11())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_tri())
      rpcopyLabel.place(x=240,y=12)

      triuw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      triuw1.place(x=415,y=9)

      triuw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      triuw2.place(x=530,y=9)

      lbl_tri =Label(midFrame, text="From:" , bg="#f8f8f2")
      lbl_tri.place(x=676,y=10)

      global trifrm1
      global trito1
      trifrm1=DateEntry(midFrame, textvariable=trifrm,date_pattern=ldt)
      trifrm1.place(x=721,y=10)

      lbl_tri =Label(midFrame, text="To:", bg="#f8f8f2")
      lbl_tri.place(x=690,y=50)

      trito1=DateEntry(midFrame, textvariable=trito,date_pattern=ldt)
      trito1.place(x=721,y=50)
      

      lbl_tri = Label(midFrame, text="Category:", bg="#f8f8f2")
      lbl_tri.place(x=470,y=10)

      menutri = StringVar()
      drop1tri=ttk.Combobox(midFrame, textvariable=menutri)
      drop1tri.place(x=530,y=10)
      drop1tri["values"]=("Java","Php", "POP")
      drop1tri.current(0)


      rpdrop2_tri=ttk.Combobox(midFrame, textvariable=trifilter)
      rpdrop2_tri["values"]=("Month to date","Year To Date","Current year","Current month","Current days", "Last 30 days", "Last 60 days", "Last 90 days","Previous month", "Previous year", "Custom Range")
      rpdrop2_tri.place(x=530,y=50)
      rpdrop2_tri.current(0)
        

      
      rpchkbtn1_tri= Checkbutton(midFrame, text = "Paid", variable = rpcheckvar1_tri, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2",command=lambda:check_tri())
      rpchkbtn1_tri.place(x=815,y=2)
      rpchkbtn1_tri.select()
      
      rpchkbtn1_tri = Checkbutton(midFrame, text = "Void", variable = rpcheckvar2_tri, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:check_tri())
      rpchkbtn1_tri.place(x=815,y=40)
      rpchkbtn1_tri.select()

      rpchkbtn1_tri = Checkbutton(midFrame, text = "Unpaid", variable = rpcheckvar3_tri, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:check_tri())
      rpchkbtn1_tri.place(x=883,y=2)
      rpchkbtn1_tri.select()
      
      mainchartframe12 =Frame(reportframe,height=1500, width=200)
      mainchartframe12.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')

      #----------------------------------------------------------------------------------------------------
    elif menuvar=="Tax Report(Orders)":
      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_tro)
      rprefreshlebel.place(x=22,y=12)

      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_tro())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas12())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_tro())
      rpcopyLabel.place(x=240,y=12)


      trouw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      trouw1.place(x=415,y=9)

      trouw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      trouw2.place(x=530,y=9)

      lbl_tro =Label(midFrame, text="From:" , bg="#f8f8f2")
      lbl_tro.place(x=676,y=10)
      global trofrm1
      global troto1
      trofrm1=DateEntry(midFrame, textvariable=trofrm,date_pattern=ldt)
      trofrm1.place(x=721,y=10)

      lbl_tro =Label(midFrame, text="To:", bg="#f8f8f2")
      lbl_tro.place(x=690,y=50)

      troto1=DateEntry(midFrame, textvariable=troto,date_pattern=ldt)
      troto1.place(x=721,y=50)
      

      lbl_tro = Label(midFrame, text="Category:", bg="#f8f8f2")
      lbl_tro.place(x=470,y=10)

      menutro = StringVar()
      drop1tro=ttk.Combobox(midFrame, textvariable=menutro)
      drop1tro.place(x=530,y=10)
      drop1tro["values"]=("Java","Php", "POP")
      drop1tro.current(0)
    
  
      rpdrop2_tro=ttk.Combobox(midFrame, textvariable=trofilter,)
      rpdrop2_tro["values"]=("Month to date","Year To Date","Current year","Current month","Current days", "Last 30 days", "Last 60 days", "Last 90 days","Previous month", "Previous year", "Custom Range")
      rpdrop2_tro.place(x=530,y=50)
      rpdrop2_tro.current(0)
      
      mainchartframe13 =Frame(reportframe,height=1500, width=200)
      mainchartframe13.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')
      #----------------------------------------------------------------------------------------------------
    
    elif menuvar=="Sales Report(group by date)":
      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_srgd)
      rprefreshlebel.place(x=22,y=12)

      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_srgd())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas13())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_srgd())
      rpcopyLabel.place(x=240,y=12)

      sruw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      sruw1.place(x=415,y=9)

      sruw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      sruw2.place(x=530,y=9)

      lbl_sr =Label(midFrame, text="From:" , bg="#f8f8f2")
      lbl_sr.place(x=728,y=10)
        

      global srgd_frm
      global srgd_to

      

      srgd_frm=DateEntry(midFrame, textvariable=srgdfrm,date_pattern=ldt)
      srgd_frm.place(x=773,y=10)

      lbl_sr =Label(midFrame, text="To:", bg="#f8f8f2")
      lbl_sr.place(x=743,y=50)

      srgd_to=DateEntry(midFrame, textvariable=srgdto,date_pattern=ldt)
      srgd_to.place(x=773,y=50)
      


      lbl_sr = Label(midFrame, text="Category:", bg="#f8f8f2")
      lbl_sr.place(x=470,y=10)

      menusr = StringVar()
      drop1sr=ttk.Combobox(midFrame, textvariable=menusr, width=30)
      drop1sr.place(x=530,y=10)
      drop1sr["values"]=("0")
      drop1sr.current(0)

      rpdrop2_sr=ttk.Combobox(midFrame, textvariable=srgdfilter,width=30)
      
              
      sql_inv_dt='SELECT name from productservice'
      
      fbcursor.execute(sql_inv_dt)
      tre=fbcursor.fetchall()
      
        
      
      rpdrop2_sr["values"]=tre
          

      rpdrop2_sr.place(x=530,y=50)
      rpdrop2_sr.current(0)


      mainchartframe14 =Frame(reportframe,height=1500, width=200)
      mainchartframe14.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')

        #----------------------------------------------------------------------------------------------------
    elif menuvar=="Invoice Report(Detailed)":
      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_ird)
      rprefreshlebel.place(x=22,y=12)

      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_ird())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas14())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_ird())
      rpcopyLabel.place(x=240,y=12)
      plruw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      plruw1.place(x=415,y=9)

      irduw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      irduw2.place(x=530,y=9)

      lbl_ird =Label(midFrame, text="From:" , bg="#f8f8f2")
      lbl_ird.place(x=728,y=10)
      
      global irdfrm1
      global irdfrm2 
      irdfrm1=DateEntry(midFrame, textvariable=irdfrm,date_pattern=ldt)
      irdfrm1.place(x=773,y=10)

      lbl_ird =Label(midFrame, text="To:", bg="#f8f8f2")
      lbl_ird.place(x=743,y=50)

      irdfrm2=DateEntry(midFrame, textvariable=irdto,date_pattern=ldt)
      irdfrm2.place(x=773,y=50)
      

      lbl_ird = Label(midFrame, text="Category:", bg="#f8f8f2")
      lbl_ird.place(x=470,y=10)

      menuird = StringVar()
      drop1ird=ttk.Combobox(midFrame, textvariable=menuird, width=30)
      drop1ird.place(x=530,y=10)
      drop1ird["values"]=("Java","Php", "POP")
      drop1ird.current(0) 

      rpdrop2_ird=ttk.Combobox(midFrame, textvariable=irdfilter,width=30)
      rpdrop2_ird["values"]=("All")
      rpdrop2_ird.place(x=530,y=50)
      rpdrop2_ird.current(0)


      
      mainchartframe15 =Frame(reportframe,height=1500, width=200)
      mainchartframe15.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')
      #----------------------------------------------------------------------------------------------------
    elif menuvar=="Daily Invoices Report":
      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_dir)
      rprefreshlebel.place(x=22,y=12)

      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_dir())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas15())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_dir())
      rpcopyLabel.place(x=240,y=12)\

      diruw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      diruw1.place(x=415,y=9)

      diruw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      diruw2.place(x=530,y=9)


      lbl_dir = Label(midFrame, text=" Day:", bg="#f8f8f2")
      lbl_dir.place(x=526,y=9)
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      if not rp_date_for:
        yrt='yyyy-MM-dd'
    
      elif rp_date_for[0]=="mm-dd-yyyy":
        yrt='mm-dd-yyyy'

      elif rp_date_for[0]=="dd-mm-yyyy":
        yrt='dd-mm-yyyy'
                
      elif rp_date_for[0]=="yyyy.mm.dd":
        yrt='yyyy.mm.dd'
                    
      elif rp_date_for[0]=="mm/dd/yyyy":
        yrt='mm/dd/yyyy'
                    
      elif rp_date_for[0]=="dd/mm/yyyy":
        yrt='dd/mm/yyyy'
                            
      elif rp_date_for[0]=="dd.mm.yyyy":
        yrt='dd.mm.yyyy'
                            
      elif rp_date_for[0]=="yyyy/mm/dd":
        yrt='yyyy/mm/dd'

      else:
        yrt='%d-%m-%Y'
      
      
      global dir_frm
      dir_frm=DateEntry(midFrame, textvariable=dirdate,date_pattern=yrt)
      dir_frm.place(x=530,y=50)
    

    
      mainchartframe16 =Frame(reportframe,height=1500, width=200)
      mainchartframe16.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')
      #----------------------------------------------------------------------------------------------------  
    elif menuvar=="Purchase orders Report":
      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_por)
      rprefreshlebel.place(x=22,y=12)
      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_por())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas16())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_por())
      rpcopyLabel.place(x=240,y=12)

      poruw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      poruw1.place(x=415,y=9)

      poruw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      poruw2.place(x=530,y=9)

      lbl_por =Label(midFrame, text="From:" , bg="#f8f8f2")
      lbl_por.place(x=676,y=10)
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      if not rp_date_for:
        yrt='yyyy-MM-dd'
    
      elif rp_date_for[0]=="mm-dd-yyyy":
        yrt='mm-dd-yyyy'

      elif rp_date_for[0]=="dd-mm-yyyy":
        yrt='dd-mm-yyyy'
                
      elif rp_date_for[0]=="yyyy.mm.dd":
        yrt='yyyy.mm.dd'
                    
      elif rp_date_for[0]=="mm/dd/yyyy":
        yrt='mm/dd/yyyy'
                    
      elif rp_date_for[0]=="dd/mm/yyyy":
        yrt='dd/mm/yyyy'
                            
      elif rp_date_for[0]=="dd.mm.yyyy":
        yrt='dd.mm.yyyy'
                            
      elif rp_date_for[0]=="yyyy/mm/dd":
        yrt='yyyy/mm/dd'

      else:
        yrt='%d-%m-%Y'
      global porfrm1
      global porto1
      porfrm1=DateEntry(midFrame, textvariable=porfrm, date_pattern=yrt)
      porfrm1.place(x=721,y=10)

      lbl_por =Label(midFrame, text="To:", bg="#f8f8f2")
      lbl_por.place(x=690,y=50)

      porto1=DateEntry(midFrame, textvariable=porto, date_pattern=yrt)
      porto1.place(x=721,y=50)
      sql='select dateformat from company'
      fbcursor.execute(sql)
      rp_date_for=fbcursor.fetchone()
      

      lbl_por = Label(midFrame, text="Category:", bg="#f8f8f2")
      lbl_por.place(x=470,y=10)

      menupor = StringVar()
      drop1por=ttk.Combobox(midFrame, textvariable=menupor)
      drop1por.place(x=530,y=10)
      drop1por["values"]=("0")
      drop1por.current(0)

      rpdrop2_por=ttk.Combobox(midFrame, textvariable=porfilter)
      rpdrop2_por["values"]=("Month to date","Year To Date","Current year","Current month","Current days", "Last 30 days", "Last 60 days", "Last 90 days","Previous month", "Previous year", "Custom Range")
      rpdrop2_por.place(x=530,y=50)
      rpdrop2_por.current(0)
        

      
      rpchkbtn1_por= Checkbutton(midFrame, text = "Complete", variable = rpcheckvar1_por, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2",command=lambda:check_function_por())
      rpchkbtn1_por.place(x=820,y=2)
      rpchkbtn1_por.select()
      
      rpchkbtn1_por = Checkbutton(midFrame, text = "Draft", variable = rpcheckvar2_por, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:check_function_por())
      rpchkbtn1_por.place(x=810,y=40)
      rpchkbtn1_por.select()


      mainchartframe17 =Frame(reportframe,height=1500, width=200)
      mainchartframe17.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')
      #----------------------------------------------------------------------------------------------------
    elif menuvar=="Expenses Report":
      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_exp)
      rprefreshlebel.place(x=22,y=12)
      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_exp())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas17())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_exp())
      rpcopyLabel.place(x=240,y=12)
      sruw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      sruw1.place(x=415,y=9)

      sruw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      sruw2.place(x=530,y=9)

      lbl_er =Label(midFrame, text="From:" , bg="#f8f8f2")
      lbl_er.place(x=728,y=10)
      global exp_frm
      global exp_to
      exp_frm=DateEntry(midFrame, textvariable=expfrm,date_pattern=ldt)
      exp_frm.place(x=773,y=10)

      lbl_er =Label(midFrame, text="To:", bg="#f8f8f2")
      lbl_er.place(x=743,y=50)

      exp_to=DateEntry(midFrame, textvariable=expto,date_pattern=ldt)
      exp_to.place(x=773,y=50)
      

      lbl_er = Label(midFrame, text="Category:", bg="#f8f8f2")
      lbl_er.place(x=470,y=10)

      menuer = StringVar()
      drop1er=ttk.Combobox(midFrame, textvariable=menuer, width=30)
      drop1er.place(x=530,y=10)
      drop1er["values"]=("")
      

      rpdrop2_er=ttk.Combobox(midFrame, textvariable=expfilter,width=30)
      rpdrop2_er["values"]=("All","Internal")
      rpdrop2_er.place(x=530,y=50)
      rpdrop2_er.current(0)

  
      rpchkbtn1_er= Checkbutton(midFrame, text = "Invoiced", variable = rpcheckvar1_exp, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2",command=lambda:check_exp())
      rpchkbtn1_er.place(x=868,y=2)
      rpchkbtn1_er.select()

    
      rpchkbtn1_er = Checkbutton(midFrame, text = "Rebilable", variable = rpcheckvar2_exp, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=lambda:check_exp())
      rpchkbtn1_er.place(x=868,y=40)
      rpchkbtn1_er.select()

      mainchartframe19 =Frame(reportframe,height=1500, width=200)
      mainchartframe19.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')

      #----------------------------------------------------------------------------------------------------
    elif menuvar=="Payment Reports":
      rprefreshlebel = Button(midFrame,compound="top", text="Refresh",relief=RAISED, image=photo8,bg="#f5f3f2", fg="black", height=55, bd=1, width=55,command=category_pyr)
      rprefreshlebel.place(x=22,y=12)

      lbl_ir = Label(reportframe, text="    \n   \n   \n   \n   \n  ", bg="#f8f8f2")
      lbl_ir.place(x=0,y=500)
      lbl_ir = Label(reportframe, text="                                                                                     ", bg="white" , font=("arial", 8))
      lbl_ir.place(x=1110,y=85)
      rpprintlabel = Button(midFrame,compound="top", text="Print",relief=RAISED, image=photo5,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pr_exp_pym())
      rpprintlabel.place(x=95,y=12)
    

      rpsaveLabel = Button(midFrame,compound="top", text="Export Report\n to Excel",relief=RAISED, image=photo3,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:exportcanvas18())
      rpsaveLabel.place(x=168,y=12)

      rpcopyLabel = Button(midFrame,compound="top", text="Export Report\n to PDF",relief=RAISED, image=copy,bg="#f8f8f2", fg="black", height=55, bd=1, width=55,command=lambda:pdf_exp_pym())
      rpcopyLabel.place(x=240,y=12)

      pruw1 = Label(midFrame,text="                                    ", bg="#f8f8f2")
      pruw1.place(x=415,y=9)
      pruw2 = Label(midFrame,text="                                                                                                             \n                                                                                                                                                  \n                                                              \n                                                            ", bg="#f8f8f2")
      pruw2.place(x=530,y=9)


      lbl_pr = Label(midFrame, text="Date Period:", bg="#f8f8f2")
      lbl_pr.place(x=530,y=9)
      
      menupr = StringVar()
      drop1pr=ttk.Combobox(midFrame, textvariable=pyrfilter, width=30)
      drop1pr.place(x=530,y=50)
      drop1pr["values"]=("Month to date","Year To Date","Current year","Current month","Current days", "Last 30 days", "Last 60 days", "Last 90 days","Previous month", "Previous year", "Custom Range")
      drop1pr.current(0)

      lbl_pr =Label(midFrame, text="From:" , bg="#f8f8f2")
      lbl_pr.place(x=725,y=10)
      global pyrfrm1
      global pyrto1
      pyrfrm1=DateEntry(midFrame, textvariable=pyrfrm,date_pattern=ldt)
      pyrfrm1.place(x=770,y=10)

      lbl_pr =Label(midFrame, text="To:", bg="#f8f8f2")
      lbl_pr.place(x=740,y=50)

      pyrto1=DateEntry(midFrame, textvariable=pyrto,date_pattern=ldt)
      pyrto1.place(x=770,y=50)

      mainchartframe18 =Frame(reportframe,height=1500, width=200)
      mainchartframe18.pack(side="top", padx=0, pady=0)

      irwcuw1 = Label(reportframe,text="                                                                                                                                                               \n", bg="white")
      irwcuw1.place(x=2,y=90)


      lbl_invdtt2 =Label(reportframe, text="Report Result Preview", bg="white" , font=("arial", 16))
      lbl_invdtt2.place(x=2, y=87)
      irwcuw1 = Label(reportframe,text="                                                                                               ", bg="white")
      irwcuw1.place(x=1135, y=97)
      lbl_invdtt2 =Label(reportframe, text="Right Click on Preview For More Options", bg="white" , font=("arial",8 ))
      lbl_invdtt2.place(x=1140, y=97)

      frame = Frame(
          reportframe,
          width=1500,
          height=1000,
          bg="#f8f8f2"
          )
      frame.pack(expand=True, fill=BOTH,  padx=10, pady=20)
      frame.place(x=20,y=115)
      canvas=Canvas(
          frame,
          bg='grey',
          width=1400,
          height=1200,
          scrollregion=(0,0,1500, 1500)
          )

      vertibar=Scrollbar(
          frame,
          orient=VERTICAL
          )
      vertibar.pack(side=RIGHT,fill=Y)
      vertibar.config(command=canvas.yview)
      canvas.config(width=1310,height=600)

      canvas.config(
          yscrollcommand=vertibar.set
          )
      canvas.pack(expand=True,side=LEFT,fill=BOTH)
      canvas.create_rectangle(235,25,1025,1430,  outline='yellow',fill='white')
      
      canvas.create_text(620,300,text="No Data To Display",fill='black',font=("arial", 14), justify='center')

      canvas.create_text(625,350,text="Please sdelect the report type from the list above\nAfter you can set the date period or other parameters",fill='blue',font=("arial", 12), justify='center')

      canvas.create_text(620,400,text="Click on 'Run Report' button for the report result",fill='blue',font=("arial", 12), justify='center')

    
    else:
      pass

  #############################################################################################################


  #***************************************************(Three Check Box)**************************************

  def chek_function():
    
          
      if checkvar1.get()==0 and checkvar2.get()==1 and checkvar3.get()==1:
              global canvasbar_ch
              global lbl_invdtt2
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              x=datetime.today()

              y=0

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)
          



              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)
            
              y=outstanding
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=paid
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar_ch = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar_ch.draw()
              canvasbar_ch.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window
              lbl_ir = Label(reportframe, text="Right Click On Each Chart For More Options", bg="white" , font=("arial", 8))
              lbl_ir.place(x=1115,y=85)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)

      elif checkvar1.get()==0 and checkvar2.get()==0 and checkvar3.get()==1:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              x=datetime.today()

              y=0

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)
              



              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)
            
              y=0
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=paid
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar_ch = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar_ch.draw()
              canvasbar_ch.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window
              lbl_ir = Label(reportframe, text="Right Click On Each Chart For More Options", bg="white" , font=("arial", 8))
              lbl_ir.place(x=1115,y=85)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)

      elif checkvar1.get()==0 and checkvar2.get()==1 and checkvar3.get()==0:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              x=datetime.today()

              y=0

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)
              


              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)
              
              y=outstanding
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=0
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar_ch = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar_ch.draw()
              canvasbar_ch.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window
              
              lbl_ir = Label(reportframe, text="Right Click On Each Chart For More Options", bg="white" , font=("arial", 8))
              lbl_ir.place(x=1115,y=85)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)
      
      elif checkvar1.get()==1 and checkvar2.get()==1 and checkvar3.get()==1:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              x=datetime.today()

              y=invoice

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)
              



              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)
              
              y=outstanding
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=paid
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar_ch = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar_ch.draw()
              canvasbar_ch.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              lbl_ir = Label(reportframe, text="Right Click On Each Chart For More Options", bg="white" , font=("arial", 8))
              lbl_ir.place(x=1115,y=85)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)
      elif checkvar1.get()==1 and checkvar2.get()==0 and checkvar3.get()==1:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              x=datetime.today()

              y=invoice

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)
              



              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)
              
              y=0
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=paid
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar_ch = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar_ch.draw()
              canvasbar_ch.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window
              lbl_ir = Label(reportframe, text="Right Click On Each Chart For More Options", bg="white" , font=("arial", 8))
              lbl_ir.place(x=1115,y=85)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)

      elif checkvar1.get()==1 and checkvar2.get()==1 and checkvar3.get()==0:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              x=datetime.today()

              y=invoice

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)
              


              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)
              
              y=outstanding
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=0
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar_ch = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar_ch.draw()
              canvasbar_ch.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window
              lbl_ir = Label(reportframe, text="Right Click On Each Chart For More Options", bg="white" , font=("arial", 8))
              lbl_ir.place(x=1115,y=85)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)

      elif checkvar1.get()==1 and checkvar2.get()==0 and checkvar3.get()==0:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              x=datetime.today()

              y=invoice

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)
              



              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)
              
              y=0
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=0
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar_ch = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar_ch.draw()
              canvasbar_ch.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window
              lbl_ir = Label(reportframe, text="Right Click On Each Chart For More Options", bg="white" , font=("arial", 8))
              lbl_ir.place(x=1115,y=85)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)
      elif checkvar1.get()==0 and checkvar2.get()==0 and checkvar3.get()==0:
              sql_paid = "SELECT SUM(invoicetot)from invoice"
              fbcursor.execute(sql_paid)
              invoice= fbcursor.fetchone()

              x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
              fbcursor.execute(x_axis)
              axis_x= fbcursor.fetchone()



              sql_company = "SELECT SUM(totpaid)from invoice"
              fbcursor.execute(sql_company)
              paid= fbcursor.fetchone()



              sql_outstanding = "SELECT SUM(balance)from invoice"
              fbcursor.execute(sql_outstanding)
              outstanding= fbcursor.fetchone()


              x=datetime.today()

              y=0

              x=axis_x
              figfirst = plt.figure(figsize=(17, 3.58), dpi=80)
              plt.bar(x,y, label="Invoice", color="orange")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()

              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)
              



              #**************add dates********

              dates=axis_x[0]+timedelta(days=2)
              
              y=0
              x=dates
              plt.bar(x,y, label="Outstanding", color="blue")
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


              dates3=axis_x[0]-timedelta(days=2)
              y=0
              x=dates3
              plt.bar(x,y, label="Paid", color="green") 
              plt.legend()
              plt.xlabel("Date")
              plt.ylabel("Total Amount")
              axes=plt.gca()
              axes.yaxis.grid()
              # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

              #used to display chart in our frame
              canvasbar_ch = FigureCanvasTkAgg(figfirst, master=reportframe)
              canvasbar_ch.draw()
              canvasbar_ch.get_tk_widget().place(x=0, y=85) # show the barchart on the ouput window

              lbl_ir = Label(reportframe, text="Right Click On Each Chart For More Options", bg="white" , font=("arial", 8))
              lbl_ir.place(x=1115,y=85)

              lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
              lbl_invdtt2.place(x=2, y=85)


      else:
          
          pass
        

  def check_function_por():
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      if rpcheckvar1_por.get()==1 and rpcheckvar2_por.get()==0:
          
          in_dat=porfrm.get()
          cr=porto.get()
          or_company = "SELECT * from company"
          fbcursor.execute(or_company)
          company_or= fbcursor.fetchone()
          if company_or is not None:
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_por_tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_por_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_por_tree.heading("# 1", text="No")
              rp_por_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_por_tree.heading("# 2", text="Date")
              rp_por_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 3", text="Due Date")
              rp_por_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 4", text="Vendor")
              rp_por_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 5", text="Status")
              rp_por_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 6", text="P.Order Total")

              # Insert the data in Treeview widget
              rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              for record in rp_por_tree.get_children():
                  rp_por_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM porder WHERE (porderdate BETWEEN %s and %s AND status="Complete")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
          
                  if ps_cr=="before amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+crc))
                     
                  elif ps_cr=="before amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+" "+crc))
 
                  else:
                      pass
 
                  count += 1
              # total_tri='SELECT SUM(total) from porder'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvaspor.create_window(270, 260, anchor="nw", window=rp_por_tree)
          else:
              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)


      elif rpcheckvar1_por.get()==0 and rpcheckvar2_por.get()==0:
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)
      elif rpcheckvar1_por.get()==0 and rpcheckvar2_por.get()==1:
          
          in_dat=porfrm.get()
          cr=porto.get()
          or_company = "SELECT * from company"
          fbcursor.execute(or_company)
          company_or= fbcursor.fetchone()
          if company_or is not None:
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_por_tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_por_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_por_tree.heading("# 1", text="No")
              rp_por_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_por_tree.heading("# 2", text="Date")
              rp_por_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 3", text="Due Date")
              rp_por_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 4", text="Vendor")
              rp_por_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 5", text="Status")
              rp_por_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 6", text="P.Order Total")

              # Insert the data in Treeview widget
              rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              for record in rp_por_tree.get_children():
                  rp_por_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM porder WHERE (porderdate BETWEEN %s and %s AND status="Draft")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
          
                  if ps_cr=="before amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+crc))
                     
                  elif ps_cr=="before amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+" "+crc))
 
                  else:
                      pass
 
                  count += 1
              # total_tri='SELECT SUM(total) from porder'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvaspor.create_window(270, 260, anchor="nw", window=rp_por_tree)
          else:
              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)
      elif rpcheckvar1_por.get()==1 and rpcheckvar2_por.get()==1:
          
          in_dat=porfrm.get()
          cr=porto.get()
          or_company = "SELECT * from company"
          fbcursor.execute(or_company)
          company_or= fbcursor.fetchone()
          if company_or is not None:
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_por_tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_por_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_por_tree.heading("# 1", text="No")
              rp_por_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_por_tree.heading("# 2", text="Date")
              rp_por_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 3", text="Due Date")
              rp_por_tree.column("# 4", anchor=E, stretch=NO, width=150)
              rp_por_tree.heading("# 4", text="Vendor")
              rp_por_tree.column("# 5", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 5", text="Status")
              rp_por_tree.column("# 6", anchor=E, stretch=NO, width=115)
              rp_por_tree.heading("# 6", text="P.Order Total")

              # Insert the data in Treeview widget
              rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              for record in rp_por_tree.get_children():
                  rp_por_tree.delete(record)
              count=0
              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM porder WHERE porderdate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()

              for i in tre:
          
                  if ps_cr=="before amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+crc))
                     
                  elif ps_cr=="before amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], crc+" "+str(i[10])))

                  elif ps_cr=="after amount with space":
                      rp_por_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[3], i[26], i[5], str(i[10])+" "+crc))
 
                  else:
                      pass
 
                  count += 1
              # total_tri='SELECT SUM(total) from porder'
              # fbcursor.execute(total_tri)
              # tot_tri= fbcursor.fetchone()
              
              
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))
              # rp_por_tree.insert('', 'end',text="1",values=('','','','','',tot_tri))

              window = canvaspor.create_window(270, 260, anchor="nw", window=rp_por_tree)
          else:
              tree=ttk.Treeview(canvaspor, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=80)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=150)
              tree.heading("# 4", text="Vendor")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="P.Order Total")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','P.Order Total'))

              window = canvaspor.create_window(290, 260, anchor="nw", window=tree)
      else:
          pass

  def check_inv():  
      in_dat=rp_exir.get_date()
      cr=rp_exir1.get_date()
      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()
      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      
      
      if rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==0:
              print("haii")

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              rp_inv_tree.insert('', 'end',text="1",values=('','','-No Data-','','','Invoice Total','Total Paid','Balance'))

              window = drf.create_window(290, 260, anchor="nw", window=rp_inv_tree)
          
      elif rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==0:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s AND 	invoicetot="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))

              window = drf.create_window(290, 260, anchor="nw", window=rp_inv_tree)
        
        

      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid="0" or balance="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))

              window = drf.create_window(290, 260, anchor="nw", window=rp_inv_tree)

      elif rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))

              window = drf.create_window(290, 260, anchor="nw", window=rp_inv_tree)

      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==0:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid != "0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))

              window = drf.create_window(290, 260, anchor="nw", window=rp_inv_tree)

      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))

              window = drf.create_window(290, 260, anchor="nw", window=rp_inv_tree)

      elif rpcheckvar1_ir.get()==0 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid="0" or invoicetot="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))

              window = drf.create_window(290, 260, anchor="nw", window=rp_inv_tree)

      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==1 and rpcheckvar3_ir.get()==0:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid is not null or invoicetot="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))

              window = drf.create_window(290, 260, anchor="nw", window=rp_inv_tree)

      elif rpcheckvar1_ir.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_ir.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=80)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))
              
              for record in rp_inv_tree.get_children():
                  rp_inv_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid="0" or balance!="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+str(i[8]), crc+str(i[9]),crc+str(i[10])))
                     
                  elif ps_cr=="after amount":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+crc, str(i[9])+crc,str(i[10])+crc))
                      
                  elif ps_cr=="before amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], crc+" "+str(i[8]), crc+" "+str(i[9]),crc+" "+str(i[10])))
                      
                      
                  elif ps_cr=="after amount with space":
                      rp_inv_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[35], i[4], str(i[8])+" "+crc, str(i[9])+" "+crc,str(i[10])+" "+crc))
                   
                  else:
                      pass
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_inv_tree)

          else:
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_inv_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_inv_tree.heading("# 1", text="No")
              rp_inv_tree.column("# 2", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 2", text="Date")
              rp_inv_tree.column("# 3", anchor=E, stretch=NO, width=70)
              rp_inv_tree.heading("# 3", text="Due Date")
              rp_inv_tree.column("# 4", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 4", text="Terms")
              rp_inv_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 5", text="Status")
              rp_inv_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 6", text="Invoice Total")
              rp_inv_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 7", text="Invoice Paid")
              rp_inv_tree.column("# 8", anchor=E, stretch=NO, width=100)
              rp_inv_tree.heading("# 8", text="Balance")
              # Insert the data in Treeview widget
              rp_inv_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total','Total Paid','Balance'))

              window = drf.create_window(290, 260, anchor="nw", window=rp_inv_tree)
      else:
          pass

  def check_irwc():
      in_dat=irwcfrm.get_date()
      cr=irwcto.get_date()
      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()

      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]

      if rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==0:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              
              rp_irwc_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','-No Data-','','Invoice Total'))

              window = drf.create_window(270, 260, anchor="nw", window=rp_irwc_tree)
          
      elif rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==0:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s AND 	invoicetot="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass
                  count+=1
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_irwc_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)
        
        

      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_inv_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid="0" or balance="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass              
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_irwc_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)

      elif rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_irwc_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8]+" "+crc)))
                  else:
                      pass
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_irwc_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)

      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_ir.get()==0 and rpcheckvar3_irwc.get()==0:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_irwc_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid != "0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass              
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_irwc_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)

      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_irwc_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_irwc_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)

      elif rpcheckvar1_irwc.get()==0 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_irwc_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid="0" or invoicetot="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass              
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_irwc_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)

              

      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==1 and rpcheckvar3_irwc.get()==0:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_irwc_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid is not null or invoicetot="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass              
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_irwc_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)

      elif rpcheckvar1_irwc.get()==1 and rpcheckvar2_irwc.get()==0 and rpcheckvar3_irwc.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rp_irwc_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_irwc_tree.column("# 1", anchor=E, stretch=NO, width=50)
              rp_irwc_tree.heading("# 1", text="No")
              rp_irwc_tree.column("# 2", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 2", text="Date")
              rp_irwc_tree.column("# 3", anchor=E, stretch=NO, width=90)
              rp_irwc_tree.heading("# 3", text="Due Date")
              rp_irwc_tree.column("# 4", anchor=E, stretch=NO, width=300)
              rp_irwc_tree.heading("# 4", text="Customer")
              rp_irwc_tree.column("# 5", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 5", text="Status")
              rp_irwc_tree.column("# 6", anchor=E, stretch=NO, width=100)
              rp_irwc_tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              rp_irwc_tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))
              
              for record in rp_irwc_tree.get_children():
                  rp_irwc_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid="0" or balance!="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+str(i[8])))
                  elif ps_cr=="after amount":
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+crc))
                  elif ps_cr=="before amount with space":
                      
                      rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], crc+" "+str(i[8])))
                  elif ps_cr=="after amount with space":
                     rp_irwc_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], i[18], i[4], str(i[8])+" "+crc))
                  else:
                      pass               
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rp_irwc_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)
      else:
          pass


  def check_tri():
      in_dat=trifrm1.get_date()
      cr=trito1.get_date()
      sql_company = "SELECT * from company"
      fbcursor.execute(sql_company)
      company= fbcursor.fetchone()

      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]

      if rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==0:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rep_tri_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tri_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 1", text="Invoice No")
              rep_tri_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 2", text="Issue Date")
              rep_tri_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 3", text="Due Date")
              rep_tri_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tri_tree.heading("# 4", text="Total Before TAX")
              rep_tri_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 5", text="TAX1")
              rep_tri_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tri_tree.heading("# 6", text="TAX2")
              rep_tri_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tri_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tri_tree.insert('', 'end',text="1",values=('','-No Data-','','Total Before TAX','TAX1','TAX2','Invoice Total'))

              window = drf.create_window(270, 260, anchor="nw", window=rep_tri_tree)
          
      elif rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==0:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rep_tro_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s AND 	invoicetot="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count+=1
              
              window = drf.create_window(270, 260, anchor="nw", window=rep_tro_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)
        
        

      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              rep_tro_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid="0" or balance="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rep_tro_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)

      elif rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rep_tro_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rep_tro_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)

      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==0:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rep_tro_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid != "0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rep_tro_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)

      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rep_tro_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE invodate BETWEEN %s and %s'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rep_tro_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)

      elif rpcheckvar1_tri.get()==0 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rep_tro_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid="0" or invoicetot="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rep_tro_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)

              

      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==1 and rpcheckvar3_tri.get()==0:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rep_tro_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid is not null or invoicetot="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rep_tro_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)

      elif rpcheckvar1_tri.get()==1 and rpcheckvar2_tri.get()==0 and rpcheckvar3_tri.get()==1:
          if company is not None:

              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders
              rep_tro_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7"), show='headings', height=55, style='mystyle.Treeview')
              rep_tro_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 1", text="Invoice No")
              rep_tro_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 2", text="Issue Date")
              rep_tro_tree.column("# 3", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 3", text="Due Date")
              rep_tro_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rep_tro_tree.heading("# 4", text="Total Before TAX")
              rep_tro_tree.column("# 5", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 5", text="TAX1")
              rep_tro_tree.column("# 6", anchor=E, stretch=NO, width=90)
              rep_tro_tree.heading("# 6", text="TAX2")
              rep_tro_tree.column("# 7", anchor=E, stretch=NO, width=100)
              rep_tro_tree.heading("# 7", text="Invoice Total")

              # Insert the data in Treeview widget
              rep_tro_tree.insert('', 'end',text="1",values=('','','','Total Before TAX','TAX1','TAX2','Invoice Total'))
              
              for record in rep_tro_tree.get_children():
                  rep_tro_tree.delete(record)
              count=0

              var1=in_dat
              var2=cr
              sql_inv_dt='SELECT * FROM invoice WHERE(invodate BETWEEN %s and %s and totpaid="0" or balance!="0")'
              inv_valuz=(var1,var2)
              fbcursor.execute(sql_inv_dt,inv_valuz)
              tre=fbcursor.fetchall()
              
              
              for i in tre:
                  if ps_cr=="before amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+str(i[37]), crc+str(i[16]), crc+str(i[36]),crc+str(i[8])))
                     
                  elif ps_cr=="after amount":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], str(i[37])+crc, str(i[16])+crc, str(i[36])+crc,str(i[8])))
                      
                  elif ps_cr=="before amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3], crc+" "+str(i[37]), crc+" "+str(i[16]), crc+" "+str(i[36]),crc+" "+str(i[8])))
                      
                  elif ps_cr=="after amount with space":
                      rep_tro_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[1], i[2], i[3],str(i[37])+" "+crc, str(i[16])+" "+crc, str(i[36])+" "+crc,str(i[8])+" "+crc))
                      
                   
                  else:
                      pass
                  count += 1
              
              window = drf.create_window(270, 260, anchor="nw", window=rep_tro_tree)

          else:
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=50)
              tree.heading("# 1", text="No")
              tree.column("# 2", anchor=E, stretch=NO, width=70)
              tree.heading("# 2", text="Date")
              tree.column("# 3", anchor=E, stretch=NO, width=70)
              tree.heading("# 3", text="Due Date")
              tree.column("# 4", anchor=E, stretch=NO, width=300)
              tree.heading("# 4", text="Customer")
              tree.column("# 5", anchor=E, stretch=NO, width=100)
              tree.heading("# 5", text="Status")
              tree.column("# 6", anchor=E, stretch=NO, width=100)
              tree.heading("# 6", text="Invoice Total")

              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','','Invoice Total'))

              window = drf.create_window(290, 260, anchor="nw", window=tree)
      else:
          pass

  def check_plsr():
      or_company = "SELECT * from company"
      fbcursor.execute(or_company)
      company_or= fbcursor.fetchone()

      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]

      if rpcheckvar1_plr.get()==1 and rpcheckvar2_plr.get()==0:
          
          if company_or is not None:
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_plsr_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_plsr_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_plsr_tree.heading("# 1", text="Product Id")
              rp_plsr_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rp_plsr_tree.heading("# 2", text="Category")
              rp_plsr_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_plsr_tree.heading("# 3", text="Product Name")
              rp_plsr_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rp_plsr_tree.heading("# 4", text="Warehouse")
              rp_plsr_tree.column("# 5", anchor=E, stretch=NO, width=130)
              rp_plsr_tree.heading("# 5", text="Low Stock Limit")
              rp_plsr_tree.column("# 6", anchor=E, stretch=NO, width=70)
              rp_plsr_tree.heading("# 6", text="Stock")
              # Insert the data in Treeview widget
              rp_plsr_tree.insert('', 'end',text="1",values=('','','','','',''))
              # Insert the data in Treeview widget
              for record in rp_plsr_tree.get_children():
                  rp_plsr_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from productservice WHERE stock > stocklimit')
              for i in fbcursor:
                  rp_plsr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[15], i[14], i[13]))
                  count += 1
              
              window = drf.create_window(290, 130, anchor="nw", window=rp_plsr_tree)
          else:
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Product Id")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Category")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Product Name")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Warehouse")
              tree.column("# 5", anchor=E, stretch=NO, width=130)
              tree.heading("# 5", text="Low Stock Limit")
              tree.column("# 6", anchor=E, stretch=NO, width=70)
              tree.heading("# 6", text="Stock")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','',''))

              window = drf.create_window(290, 130, anchor="nw", window=tree)


      elif rpcheckvar1_plr.get()==0 and rpcheckvar2_plr.get()==0:
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Product Id")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Category")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Product Name")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Warehouse")
              tree.column("# 5", anchor=E, stretch=NO, width=130)
              tree.heading("# 5", text="Low Stock Limit")
              tree.column("# 6", anchor=E, stretch=NO, width=70)
              tree.heading("# 6", text="Stock")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','-No Data-','','',''))

              window = drf.create_window(290, 130, anchor="nw", window=tree)

      elif rpcheckvar1_plr.get()==0 and rpcheckvar2_plr.get()==1:
          if company_or is not None:
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_plsr_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_plsr_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_plsr_tree.heading("# 1", text="Product Id")
              rp_plsr_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rp_plsr_tree.heading("# 2", text="Category")
              rp_plsr_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_plsr_tree.heading("# 3", text="Product Name")
              rp_plsr_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rp_plsr_tree.heading("# 4", text="Warehouse")
              rp_plsr_tree.column("# 5", anchor=E, stretch=NO, width=130)
              rp_plsr_tree.heading("# 5", text="Low Stock Limit")
              rp_plsr_tree.column("# 6", anchor=E, stretch=NO, width=70)
              rp_plsr_tree.heading("# 6", text="Stock")
              # Insert the data in Treeview widget
              rp_plsr_tree.insert('', 'end',text="1",values=('','','','','',''))
              # Insert the data in Treeview widget
              for record in rp_plsr_tree.get_children():
                  rp_plsr_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from productservice WHERE stock < stocklimit')
              for i in fbcursor:
                  rp_plsr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[15], i[14], i[13]))
                  count += 1
              
              window = drf.create_window(290, 130, anchor="nw", window=rp_plsr_tree)
          else:
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Product Id")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Category")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Product Name")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Warehouse")
              tree.column("# 5", anchor=E, stretch=NO, width=130)
              tree.heading("# 5", text="Low Stock Limit")
              tree.column("# 6", anchor=E, stretch=NO, width=70)
              tree.heading("# 6", text="Stock")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','',''))

              window = drf.create_window(290, 130, anchor="nw", window=tree)
      elif rpcheckvar1_plr.get()==1 and rpcheckvar2_plr.get()==1:
          
          if company_or is not None:
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              rp_plsr_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              rp_plsr_tree.column("# 1", anchor=E, stretch=NO, width=100)
              rp_plsr_tree.heading("# 1", text="Product Id")
              rp_plsr_tree.column("# 2", anchor=E, stretch=NO, width=100)
              rp_plsr_tree.heading("# 2", text="Category")
              rp_plsr_tree.column("# 3", anchor=E, stretch=NO, width=150)
              rp_plsr_tree.heading("# 3", text="Product Name")
              rp_plsr_tree.column("# 4", anchor=E, stretch=NO, width=130)
              rp_plsr_tree.heading("# 4", text="Warehouse")
              rp_plsr_tree.column("# 5", anchor=E, stretch=NO, width=130)
              rp_plsr_tree.heading("# 5", text="Low Stock Limit")
              rp_plsr_tree.column("# 6", anchor=E, stretch=NO, width=70)
              rp_plsr_tree.heading("# 6", text="Stock")
              # Insert the data in Treeview widget
              rp_plsr_tree.insert('', 'end',text="1",values=('','','','','',''))
              # Insert the data in Treeview widget
              for record in rp_plsr_tree.get_children():
                  rp_plsr_tree.delete(record)
              count=0
              fbcursor.execute('SELECT * from productservice WHERE stock<stocklimit')
              for i in fbcursor:
                  rp_plsr_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[15], i[14], i[13]))
                  count += 1
              
              window = drf.create_window(290, 130, anchor="nw", window=rp_plsr_tree)
          else:
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=100)
              tree.heading("# 1", text="Product Id")
              tree.column("# 2", anchor=E, stretch=NO, width=100)
              tree.heading("# 2", text="Category")
              tree.column("# 3", anchor=E, stretch=NO, width=150)
              tree.heading("# 3", text="Product Name")
              tree.column("# 4", anchor=E, stretch=NO, width=130)
              tree.heading("# 4", text="Warehouse")
              tree.column("# 5", anchor=E, stretch=NO, width=130)
              tree.heading("# 5", text="Low Stock Limit")
              tree.column("# 6", anchor=E, stretch=NO, width=70)
              tree.heading("# 6", text="Stock")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','','','',''))

              window = drf.create_window(290, 130, anchor="nw", window=tree)
      else:
          pass


  def check_pl():
      rth=prlfilter.get()
      or_company = "SELECT * from company"
      fbcursor.execute(or_company)
      company_tro= fbcursor.fetchone()

      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      
      if rpcheckvar1_pl.get()==1 and rpcheckvar2_pl.get()==0:
          if rth=="All product and Services ":
              if company_tro is not None:
                          
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_pl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 1", text="Product ID")
                  rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 2", text="Product/Service Name")
                  rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 3", text="Description")
                  rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_pl_tree.get_children():
                      rp_pl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice WHERE stock > stocklimit')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                        elif ps_cr=="after amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                        elif ps_cr=="after amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(280, 130, anchor="nw", window=rp_pl_tree)
              
              
              else:

                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)


          #--------------------------------------------------------------------------------------------------------------
          elif rth=="All products":
              
              if company_tro is not None:           
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_pl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 1", text="Product ID")
                  rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 2", text="Product/Service Name")
                  rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 3", text="Description")
                  rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_pl_tree.get_children():
                      rp_pl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice WHERE (category="Products" and stock > stocklimit)')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                        elif ps_cr=="after amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                        elif ps_cr=="after amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(280, 130, anchor="nw", window=rp_pl_tree)
              
              
              else:

                  drf.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')


                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)

              #===============================================================================================
          elif rth=="All Service":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_pl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 1", text="Product ID")
                  rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 2", text="Product/Service Name")
                  rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 3", text="Description")
                  rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_pl_tree.get_children():
                      rp_pl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice WHERE (category="Service" and stock > stocklimit)')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                        elif ps_cr=="after amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                        elif ps_cr=="after amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(280, 130, anchor="nw", window=rp_pl_tree)
              else:
                  drf.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)
          elif rth=="Default":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_pl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 1", text="Product ID")
                  rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 2", text="Product/Service Name")
                  rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 3", text="Description")
                  rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_pl_tree.get_children():
                      rp_pl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                        elif ps_cr=="after amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                        elif ps_cr=="after amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(280, 130, anchor="nw", window=rp_pl_tree)
              else:
                  drf.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)
              
      elif rpcheckvar1_pl.get()==0 and rpcheckvar2_pl.get()==1:
          if rth=="All product and Services ":
              if company_tro is not None:
                          
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_pl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 1", text="Product ID")
                  rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 2", text="Product/Service Name")
                  rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 3", text="Description")
                  rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_pl_tree.get_children():
                      rp_pl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice WHERE stock < stocklimit')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                        elif ps_cr=="after amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                        elif ps_cr=="after amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(280, 130, anchor="nw", window=rp_pl_tree)
              
              
              else:

                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)


          #--------------------------------------------------------------------------------------------------------------
          elif rth=="All products":
              
              if company_tro is not None:           
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_pl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 1", text="Product ID")
                  rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 2", text="Product/Service Name")
                  rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 3", text="Description")
                  rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_pl_tree.get_children():
                      rp_pl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice WHERE (category="Products" and stock < stocklimit)')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                        elif ps_cr=="after amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                        elif ps_cr=="after amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(280, 130, anchor="nw", window=rp_pl_tree)
              
              
              else:

                  drf.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')


                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)

              #===============================================================================================
          elif rth=="All Service":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_pl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 1", text="Product ID")
                  rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 2", text="Product/Service Name")
                  rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 3", text="Description")
                  rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_pl_tree.get_children():
                      rp_pl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice WHERE (category="Service" and stock < stocklimit)')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                        elif ps_cr=="after amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                        elif ps_cr=="after amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(280, 130, anchor="nw", window=rp_pl_tree)
              else:
                  drf.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)

          
      #==============================================================================================================
          elif rth=="Default":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_pl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 1", text="Product ID")
                  rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 2", text="Product/Service Name")
                  rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 3", text="Description")
                  rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_pl_tree.get_children():
                      rp_pl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice WHERE (category="Default" and stock < stocklimit)')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                        elif ps_cr=="after amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                        elif ps_cr=="after amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(280, 130, anchor="nw", window=rp_pl_tree)
              else:
                  drf.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)
      elif rpcheckvar1_pl.get()==1 and rpcheckvar2_pl.get()==1:
          if rth=="All product and Services ":
              if company_tro is not None:
                          
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_pl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 1", text="Product ID")
                  rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 2", text="Product/Service Name")
                  rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 3", text="Description")
                  rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_pl_tree.get_children():
                      rp_pl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                        elif ps_cr=="after amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                        elif ps_cr=="after amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(280, 130, anchor="nw", window=rp_pl_tree)
              
              
              else:

                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)


          #--------------------------------------------------------------------------------------------------------------
          elif rth=="All products":
              
              if company_tro is not None:           
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_pl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 1", text="Product ID")
                  rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 2", text="Product/Service Name")
                  rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 3", text="Description")
                  rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_pl_tree.get_children():
                      rp_pl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice WHERE category="Products" ')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                        elif ps_cr=="after amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                        elif ps_cr=="after amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(280, 130, anchor="nw", window=rp_pl_tree)
              
              
              else:

              


                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)

              #===============================================================================================
          elif rth=="All Service":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_pl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 1", text="Product ID")
                  rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 2", text="Product/Service Name")
                  rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 3", text="Description")
                  rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_pl_tree.get_children():
                      rp_pl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice WHERE category="Service"')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                        elif ps_cr=="after amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                        elif ps_cr=="after amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(280, 130, anchor="nw", window=rp_pl_tree)
              else:
                  drf.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)

          
      #==============================================================================================================
          elif rth=="Default":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_pl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  rp_pl_tree.column("# 1", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 1", text="Product ID")
                  rp_pl_tree.column("# 2", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 2", text="Product/Service Name")
                  rp_pl_tree.column("# 3", anchor=E, stretch=NO, width=200)
                  rp_pl_tree.heading("# 3", text="Description")
                  rp_pl_tree.column("# 4", anchor=E, stretch=NO, width=150)
                  rp_pl_tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  rp_pl_tree.insert('', 'end',text="1",values=('','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_pl_tree.get_children():
                      rp_pl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice WHERE category="Default"')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+str(i[7])))

                        elif ps_cr=="after amount":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], crc+" "+str(i[7])))

                        elif ps_cr=="after amount with space":
                            rp_pl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[4], i[5], str(i[7])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(280, 130, anchor="nw", window=rp_pl_tree)
              else:
                  drf.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)

      elif rpcheckvar1_pl.get()==0 and rpcheckvar2_pl.get()==0:
          if rth=="All product and Services ":
              

                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','-No Data-',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)


          #--------------------------------------------------------------------------------------------------------------
          elif rth=="All products":
              
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','-No Data-','',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)

              #===============================================================================================
          elif rth=="All Service":
              
                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','-No Data-',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)

          
      #==============================================================================================================
          elif rth=="Default":
                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=150)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=200)
                  tree.heading("# 2", text="Product/Service Name")
                  tree.column("# 3", anchor=E, stretch=NO, width=200)
                  tree.heading("# 3", text="Description")
                  tree.column("# 4", anchor=E, stretch=NO, width=150)
                  tree.heading("# 4", text="Unit Price")
                  
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','-No Data-',''))

                  window = drf.create_window(280, 130, anchor="nw", window=tree)
      else:
          pass


  def check_psl():
      rth=pslfilter.get()
      or_company = "SELECT * from company"
      fbcursor.execute(or_company)
      company_tro= fbcursor.fetchone()

      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      
      if rpcheckvar1_psl.get()==1 and rpcheckvar2_psl.get()==0:
          if rth=="All product and Services ":
              if company_tro is not None:
                          
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_psl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 1", text="Product ID")
                  rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
                  rp_psl_tree.heading("# 2", text="Category")
                  rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
                  rp_psl_tree.heading("# 3", text="Product/ Service Name")
                  rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
                  rp_psl_tree.heading("# 4", text="Description")
                  rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
                  rp_psl_tree.heading("# 5", text="Warehouse")
                  rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 6", text="Stock")
                  rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 7", text="Cost")
                  rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_psl_tree.get_children():
                      rp_psl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice where stock>stocklimit')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                        elif ps_cr=="after amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                        elif ps_cr=="after amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
              
              
              else:

                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=120)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=180)
                  tree.heading("# 3", text="Product/ Service Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=130)
                  tree.heading("# 4", text="Description")
                  tree.column("# 5", anchor=E, stretch=NO, width=150)
                  tree.heading("# 5", text="Warehouse")
                  tree.column("# 6", anchor=E, stretch=NO, width=100)
                  tree.heading("# 6", text="Stock")
                  tree.column("# 7", anchor=E, stretch=NO, width=100)
                  tree.heading("# 7", text="Cost")
                  tree.column("# 8", anchor=E, stretch=NO, width=100)
                  tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)

          #--------------------------------------------------------------------------------------------------------------
          elif rth=="All products":
              
              if company_tro is not None:           
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_psl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 1", text="Product ID")
                  rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
                  rp_psl_tree.heading("# 2", text="Category")
                  rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
                  rp_psl_tree.heading("# 3", text="Product/ Service Name")
                  rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
                  rp_psl_tree.heading("# 4", text="Description")
                  rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
                  rp_psl_tree.heading("# 5", text="Warehouse")
                  rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 6", text="Stock")
                  rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 7", text="Cost")
                  rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_psl_tree.get_children():
                      rp_psl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice where (category="Products" and stock>stocklimit)')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                        elif ps_cr=="after amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                        elif ps_cr=="after amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
              
              
              else:

                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=120)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=180)
                  tree.heading("# 3", text="Product/ Service Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=130)
                  tree.heading("# 4", text="Description")
                  tree.column("# 5", anchor=E, stretch=NO, width=150)
                  tree.heading("# 5", text="Warehouse")
                  tree.column("# 6", anchor=E, stretch=NO, width=100)
                  tree.heading("# 6", text="Stock")
                  tree.column("# 7", anchor=E, stretch=NO, width=100)
                  tree.heading("# 7", text="Cost")
                  tree.column("# 8", anchor=E, stretch=NO, width=100)
                  tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)


              #===============================================================================================
          elif rth=="All Service":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_psl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 1", text="Product ID")
                  rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
                  rp_psl_tree.heading("# 2", text="Category")
                  rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
                  rp_psl_tree.heading("# 3", text="Product/ Service Name")
                  rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
                  rp_psl_tree.heading("# 4", text="Description")
                  rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
                  rp_psl_tree.heading("# 5", text="Warehouse")
                  rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 6", text="Stock")
                  rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 7", text="Cost")
                  rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_psl_tree.get_children():
                      rp_psl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice where (category="Service" and stock > stocklimit)')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                        elif ps_cr=="after amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                        elif ps_cr=="after amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
              
              
              else:

                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=120)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=180)
                  tree.heading("# 3", text="Product/ Service Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=130)
                  tree.heading("# 4", text="Description")
                  tree.column("# 5", anchor=E, stretch=NO, width=150)
                  tree.heading("# 5", text="Warehouse")
                  tree.column("# 6", anchor=E, stretch=NO, width=100)
                  tree.heading("# 6", text="Stock")
                  tree.column("# 7", anchor=E, stretch=NO, width=100)
                  tree.heading("# 7", text="Cost")
                  tree.column("# 8", anchor=E, stretch=NO, width=100)
                  tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)

          elif rth=="Default":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_psl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 1", text="Product ID")
                  rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
                  rp_psl_tree.heading("# 2", text="Category")
                  rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
                  rp_psl_tree.heading("# 3", text="Product/ Service Name")
                  rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
                  rp_psl_tree.heading("# 4", text="Description")
                  rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
                  rp_psl_tree.heading("# 5", text="Warehouse")
                  rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 6", text="Stock")
                  rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 7", text="Cost")
                  rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_psl_tree.get_children():
                      rp_psl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice where (category="Default" and stock > stocklimit)')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                        elif ps_cr=="after amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                        elif ps_cr=="after amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
              
              
              else:

                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=120)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=180)
                  tree.heading("# 3", text="Product/ Service Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=130)
                  tree.heading("# 4", text="Description")
                  tree.column("# 5", anchor=E, stretch=NO, width=150)
                  tree.heading("# 5", text="Warehouse")
                  tree.column("# 6", anchor=E, stretch=NO, width=100)
                  tree.heading("# 6", text="Stock")
                  tree.column("# 7", anchor=E, stretch=NO, width=100)
                  tree.heading("# 7", text="Cost")
                  tree.column("# 8", anchor=E, stretch=NO, width=100)
                  tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)


      elif rpcheckvar1_psl.get()==0 and rpcheckvar2_psl.get()==1:
          if rth=="All product and Services ":
              if company_tro is not None:
                          
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_psl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 1", text="Product ID")
                  rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
                  rp_psl_tree.heading("# 2", text="Category")
                  rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
                  rp_psl_tree.heading("# 3", text="Product/ Service Name")
                  rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
                  rp_psl_tree.heading("# 4", text="Description")
                  rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
                  rp_psl_tree.heading("# 5", text="Warehouse")
                  rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 6", text="Stock")
                  rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 7", text="Cost")
                  rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_psl_tree.get_children():
                      rp_psl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice Where stock < stocklimit')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                        elif ps_cr=="after amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                        elif ps_cr=="after amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
              
              
              else:

                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=120)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=180)
                  tree.heading("# 3", text="Product/ Service Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=130)
                  tree.heading("# 4", text="Description")
                  tree.column("# 5", anchor=E, stretch=NO, width=150)
                  tree.heading("# 5", text="Warehouse")
                  tree.column("# 6", anchor=E, stretch=NO, width=100)
                  tree.heading("# 6", text="Stock")
                  tree.column("# 7", anchor=E, stretch=NO, width=100)
                  tree.heading("# 7", text="Cost")
                  tree.column("# 8", anchor=E, stretch=NO, width=100)
                  tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)

          #--------------------------------------------------------------------------------------------------------------
          elif rth=="All products":
              
              if company_tro is not None:           
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_psl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 1", text="Product ID")
                  rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
                  rp_psl_tree.heading("# 2", text="Category")
                  rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
                  rp_psl_tree.heading("# 3", text="Product/ Service Name")
                  rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
                  rp_psl_tree.heading("# 4", text="Description")
                  rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
                  rp_psl_tree.heading("# 5", text="Warehouse")
                  rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 6", text="Stock")
                  rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 7", text="Cost")
                  rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_psl_tree.get_children():
                      rp_psl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice where (category="Products" and stock < stocklimit)')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                        elif ps_cr=="after amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                        elif ps_cr=="after amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
              
              
              else:

                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=120)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=180)
                  tree.heading("# 3", text="Product/ Service Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=130)
                  tree.heading("# 4", text="Description")
                  tree.column("# 5", anchor=E, stretch=NO, width=150)
                  tree.heading("# 5", text="Warehouse")
                  tree.column("# 6", anchor=E, stretch=NO, width=100)
                  tree.heading("# 6", text="Stock")
                  tree.column("# 7", anchor=E, stretch=NO, width=100)
                  tree.heading("# 7", text="Cost")
                  tree.column("# 8", anchor=E, stretch=NO, width=100)
                  tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)


              #===============================================================================================
          elif rth=="All Service":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_psl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 1", text="Product ID")
                  rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
                  rp_psl_tree.heading("# 2", text="Category")
                  rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
                  rp_psl_tree.heading("# 3", text="Product/ Service Name")
                  rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
                  rp_psl_tree.heading("# 4", text="Description")
                  rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
                  rp_psl_tree.heading("# 5", text="Warehouse")
                  rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 6", text="Stock")
                  rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 7", text="Cost")
                  rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_psl_tree.get_children():
                      rp_psl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice where (category="Service" and stock < stocklimit)')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                        elif ps_cr=="after amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                        elif ps_cr=="after amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
              
              
              else:

                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=120)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=180)
                  tree.heading("# 3", text="Product/ Service Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=130)
                  tree.heading("# 4", text="Description")
                  tree.column("# 5", anchor=E, stretch=NO, width=150)
                  tree.heading("# 5", text="Warehouse")
                  tree.column("# 6", anchor=E, stretch=NO, width=100)
                  tree.heading("# 6", text="Stock")
                  tree.column("# 7", anchor=E, stretch=NO, width=100)
                  tree.heading("# 7", text="Cost")
                  tree.column("# 8", anchor=E, stretch=NO, width=100)
                  tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)

          elif rth=="Default":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_psl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 1", text="Product ID")
                  rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
                  rp_psl_tree.heading("# 2", text="Category")
                  rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
                  rp_psl_tree.heading("# 3", text="Product/ Service Name")
                  rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
                  rp_psl_tree.heading("# 4", text="Description")
                  rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
                  rp_psl_tree.heading("# 5", text="Warehouse")
                  rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 6", text="Stock")
                  rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 7", text="Cost")
                  rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_psl_tree.get_children():
                      rp_psl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice where (category="Default" and stock<stocklimit)')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                        elif ps_cr=="after amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                        elif ps_cr=="after amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
              
              
              else:

                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=120)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=180)
                  tree.heading("# 3", text="Product/ Service Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=130)
                  tree.heading("# 4", text="Description")
                  tree.column("# 5", anchor=E, stretch=NO, width=150)
                  tree.heading("# 5", text="Warehouse")
                  tree.column("# 6", anchor=E, stretch=NO, width=100)
                  tree.heading("# 6", text="Stock")
                  tree.column("# 7", anchor=E, stretch=NO, width=100)
                  tree.heading("# 7", text="Cost")
                  tree.column("# 8", anchor=E, stretch=NO, width=100)
                  tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)
      elif rpcheckvar1_psl.get()==1 and rpcheckvar2_psl.get()==1:
          if rth=="All product and Services ":
              if company_tro is not None:
                          
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_psl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 1", text="Product ID")
                  rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
                  rp_psl_tree.heading("# 2", text="Category")
                  rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
                  rp_psl_tree.heading("# 3", text="Product/ Service Name")
                  rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
                  rp_psl_tree.heading("# 4", text="Description")
                  rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
                  rp_psl_tree.heading("# 5", text="Warehouse")
                  rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 6", text="Stock")
                  rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 7", text="Cost")
                  rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_psl_tree.get_children():
                      rp_psl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                        elif ps_cr=="after amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                        elif ps_cr=="after amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
              
              
              else:

                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=120)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=180)
                  tree.heading("# 3", text="Product/ Service Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=130)
                  tree.heading("# 4", text="Description")
                  tree.column("# 5", anchor=E, stretch=NO, width=150)
                  tree.heading("# 5", text="Warehouse")
                  tree.column("# 6", anchor=E, stretch=NO, width=100)
                  tree.heading("# 6", text="Stock")
                  tree.column("# 7", anchor=E, stretch=NO, width=100)
                  tree.heading("# 7", text="Cost")
                  tree.column("# 8", anchor=E, stretch=NO, width=100)
                  tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)

          #--------------------------------------------------------------------------------------------------------------
          elif rth=="All products":
              
              if company_tro is not None:           
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_psl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 1", text="Product ID")
                  rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
                  rp_psl_tree.heading("# 2", text="Category")
                  rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
                  rp_psl_tree.heading("# 3", text="Product/ Service Name")
                  rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
                  rp_psl_tree.heading("# 4", text="Description")
                  rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
                  rp_psl_tree.heading("# 5", text="Warehouse")
                  rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 6", text="Stock")
                  rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 7", text="Cost")
                  rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_psl_tree.get_children():
                      rp_psl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice where category="Products" ')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                        elif ps_cr=="after amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                        elif ps_cr=="after amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
              
              
              else:

                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=120)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=180)
                  tree.heading("# 3", text="Product/ Service Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=130)
                  tree.heading("# 4", text="Description")
                  tree.column("# 5", anchor=E, stretch=NO, width=150)
                  tree.heading("# 5", text="Warehouse")
                  tree.column("# 6", anchor=E, stretch=NO, width=100)
                  tree.heading("# 6", text="Stock")
                  tree.column("# 7", anchor=E, stretch=NO, width=100)
                  tree.heading("# 7", text="Cost")
                  tree.column("# 8", anchor=E, stretch=NO, width=100)
                  tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)


              #===============================================================================================
          elif rth=="All Service":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_psl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 1", text="Product ID")
                  rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
                  rp_psl_tree.heading("# 2", text="Category")
                  rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
                  rp_psl_tree.heading("# 3", text="Product/ Service Name")
                  rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
                  rp_psl_tree.heading("# 4", text="Description")
                  rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
                  rp_psl_tree.heading("# 5", text="Warehouse")
                  rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 6", text="Stock")
                  rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 7", text="Cost")
                  rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_psl_tree.get_children():
                      rp_psl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice where category="Service" ')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                        elif ps_cr=="after amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                        elif ps_cr=="after amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
              
              
              else:

                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=120)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=180)
                  tree.heading("# 3", text="Product/ Service Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=130)
                  tree.heading("# 4", text="Description")
                  tree.column("# 5", anchor=E, stretch=NO, width=150)
                  tree.heading("# 5", text="Warehouse")
                  tree.column("# 6", anchor=E, stretch=NO, width=100)
                  tree.heading("# 6", text="Stock")
                  tree.column("# 7", anchor=E, stretch=NO, width=100)
                  tree.heading("# 7", text="Cost")
                  tree.column("# 8", anchor=E, stretch=NO, width=100)
                  tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)

          elif rth=="Default":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_psl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  rp_psl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 1", text="Product ID")
                  rp_psl_tree.column("# 2", anchor=E, stretch=NO, width=120)
                  rp_psl_tree.heading("# 2", text="Category")
                  rp_psl_tree.column("# 3", anchor=E, stretch=NO, width=180)
                  rp_psl_tree.heading("# 3", text="Product/ Service Name")
                  rp_psl_tree.column("# 4", anchor=E, stretch=NO, width=130)
                  rp_psl_tree.heading("# 4", text="Description")
                  rp_psl_tree.column("# 5", anchor=E, stretch=NO, width=150)
                  rp_psl_tree.heading("# 5", text="Warehouse")
                  rp_psl_tree.column("# 6", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 6", text="Stock")
                  rp_psl_tree.column("# 7", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 7", text="Cost")
                  rp_psl_tree.column("# 8", anchor=E, stretch=NO, width=100)
                  rp_psl_tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  rp_psl_tree.insert('', 'end',text="1",values=('','','','','','','',''))


                  # Insert the data in Treeview widget
                  for record in rp_psl_tree.get_children():
                      rp_psl_tree.delete(record)
                  count=0
                  fbcursor.execute('SELECT * from productservice where category="Default" ')
                  for i in fbcursor:
                        if ps_cr=="before amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+str(i[9]), crc+str(i[11])))

                        elif ps_cr=="after amount":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+crc, str(i[11])+crc))
        
                        elif ps_cr=="before amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], crc+" "+str(i[9]), crc+" "+str(i[11])))

                        elif ps_cr=="after amount with space":
                            rp_psl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[3], i[4], i[5], i[15], i[13], str(i[9])+" "+crc, str(i[11])+" "+crc))
        
                        else:
                            pass
                        count += 1
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_psl_tree)
              
              
              else:

                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=120)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=180)
                  tree.heading("# 3", text="Product/ Service Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=130)
                  tree.heading("# 4", text="Description")
                  tree.column("# 5", anchor=E, stretch=NO, width=150)
                  tree.heading("# 5", text="Warehouse")
                  tree.column("# 6", anchor=E, stretch=NO, width=100)
                  tree.heading("# 6", text="Stock")
                  tree.column("# 7", anchor=E, stretch=NO, width=100)
                  tree.heading("# 7", text="Cost")
                  tree.column("# 8", anchor=E, stretch=NO, width=100)
                  tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)

      elif rpcheckvar1_psl.get()==0 and rpcheckvar2_psl.get()==0:

                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6", "c7", "c8"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Product ID")
                  tree.column("# 2", anchor=E, stretch=NO, width=120)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=180)
                  tree.heading("# 3", text="Product/ Service Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=130)
                  tree.heading("# 4", text="Description")
                  tree.column("# 5", anchor=E, stretch=NO, width=150)
                  tree.heading("# 5", text="Warehouse")
                  tree.column("# 6", anchor=E, stretch=NO, width=100)
                  tree.heading("# 6", text="Stock")
                  tree.column("# 7", anchor=E, stretch=NO, width=100)
                  tree.heading("# 7", text="Cost")
                  tree.column("# 8", anchor=E, stretch=NO, width=100)
                  tree.heading("# 8", text="Price")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)
      else:
          pass


  def check_exp():
      tro_company = "SELECT * from company"
      fbcursor.execute(tro_company)
      company_tro= fbcursor.fetchone()
      rth=expfilter.get()

      sqlr= 'select currencysign from company'
      fbcursor.execute(sqlr)
      crncy=fbcursor.fetchone()
      global crc
      crc=crncy[0]
      sqlrt= 'select currsignplace from company'
      fbcursor.execute(sqlrt)
      post_rp=fbcursor.fetchone()
      global ps_cr
      ps_cr=post_rp[0]
      if rpcheckvar1_exp.get()==1 and rpcheckvar2_exp.get()==0:
          if rth=="All":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_exp_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  rp_exp_tree.column("# 1", anchor=E, stretch=NO, width=80)
                  rp_exp_tree.heading("# 1", text="Date")
                  rp_exp_tree.column("# 2", anchor=E, stretch=NO, width=160)
                  rp_exp_tree.heading("# 2", text="Customer")
                  rp_exp_tree.column("# 3", anchor=E, stretch=NO, width=160)
                  rp_exp_tree.heading("# 3", text="Vendor")
                  rp_exp_tree.column("# 4", anchor=E, stretch=NO, width=100)
                  rp_exp_tree.heading("# 4", text="Invoice")
                  rp_exp_tree.column("# 5", anchor=E, stretch=NO, width=115)
                  rp_exp_tree.heading("# 5", text="Rebill.Amount")
                  rp_exp_tree.column("# 6", anchor=E, stretch=NO, width=115)
                  rp_exp_tree.heading("# 6", text="Amount")
                  # Insert the data in Treeview widget
                  rp_exp_tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))
                  
                  for record in rp_exp_tree.get_children():
                      rp_exp_tree.delete(record)
                  count=0
                  var_1=exp_frm.get_date()
                  var_2=exp_to.get_date()

                  lre='SELECT * from expenses WHERE(date BETWEEN %s and %s and invoiced="Yes")'
                  sre=(var_1, var_2)
                  fbcursor.execute(lre,sre)
                  tre=fbcursor.fetchall()

                  for i in tre:
                        if ps_cr=="before amount":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],i[14], crc+str(i[16]), crc+str(i[3])))
                            
                            
                        elif ps_cr=="after amount":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], str(i[16])+crc, str(i[3])+crc))
                            
                            
                        elif ps_cr=="before amount with space":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],i[14], crc+" "+str(i[16]), crc+" "+str(i[3])))
                            
                        elif ps_cr=="after amount with space":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], str(i[16])+" "+crc, str(i[3])+" "+crc))
                        
                        else:
                            pass
                        count += 1

                  rp_exp_tree.insert('', 'end',text="1",values=('','','','-End List-','Rebill.Amount','Amount'))
                  

                  window = drf.create_window(270, 260, anchor="nw", window=rp_exp_tree)

                  
                  
              else:

                  drf.create_text(360,100,text="Your Company Name",fill='black',font=("Helvetica", 12), justify='center')

                  drf.create_text(335,165,text="Address line1\nAddress line2\nAddress line3\nAddress line3\nAddress line4\nPhone 555-5555",fill='black',font=("Helvetica", 10), justify='left')

                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=80)
                  tree.heading("# 1", text="Date")
                  tree.column("# 2", anchor=E, stretch=NO, width=150)
                  tree.heading("# 2", text="Customer")
                  tree.column("# 3", anchor=E, stretch=NO, width=120)
                  tree.heading("# 3", text="Vendor")
                  tree.column("# 4", anchor=E, stretch=NO, width=100)
                  tree.heading("# 4", text="Invoice")
                  tree.column("# 5", anchor=E, stretch=NO, width=115)
                  tree.heading("# 5", text="Rebill.Amount")
                  tree.column("# 6", anchor=E, stretch=NO, width=115)
                  tree.heading("# 6", text="Amount")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))

                  window = drf.create_window(290, 260, anchor="nw", window=tree)
          elif rth=="Internal":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_exp_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  rp_exp_tree.column("# 1", anchor=E, stretch=NO, width=80)
                  rp_exp_tree.heading("# 1", text="Date")
                  rp_exp_tree.column("# 2", anchor=E, stretch=NO, width=160)
                  rp_exp_tree.heading("# 2", text="Customer")
                  rp_exp_tree.column("# 3", anchor=E, stretch=NO, width=160)
                  rp_exp_tree.heading("# 3", text="Vendor")
                  rp_exp_tree.column("# 4", anchor=E, stretch=NO, width=100)
                  rp_exp_tree.heading("# 4", text="Invoice")
                  rp_exp_tree.column("# 5", anchor=E, stretch=NO, width=115)
                  rp_exp_tree.heading("# 5", text="Rebill.Amount")
                  rp_exp_tree.column("# 6", anchor=E, stretch=NO, width=115)
                  rp_exp_tree.heading("# 6", text="Amount")
                  # Insert the data in Treeview widget
                  rp_exp_tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))
                  
                  for record in rp_exp_tree.get_children():
                      rp_exp_tree.delete(record)
                  count=0
                  var_1=exp_frm.get_date()
                  var_2=exp_to.get_date()

                  lre='SELECT * from expenses WHERE(date BETWEEN %s and %s and customer="Internal" and invoiced="Yes")'
                  sre=(var_1, var_2)
                  fbcursor.execute(lre,sre)
                  tre=fbcursor.fetchall()

                  for i in tre:
                        if ps_cr=="before amount":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],i[14], crc+str(i[16]), crc+str(i[3])))
                            
                            
                        elif ps_cr=="after amount":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], str(i[16])+crc, str(i[3])+crc))
                            
                            
                        elif ps_cr=="before amount with space":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],i[14], crc+" "+str(i[16]), crc+" "+str(i[3])))
                            
                        elif ps_cr=="after amount with space":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], str(i[16])+" "+crc, str(i[3])+" "+crc))
                        
                        else:
                            pass
                        count += 1

                  rp_exp_tree.insert('', 'end',text="1",values=('','','','-End List-','Rebill.Amount','Amount'))
                  

                  window = drf.create_window(270, 260, anchor="nw", window=rp_exp_tree)

                  
                  
              else:

                  
                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=80)
                  tree.heading("# 1", text="Date")
                  tree.column("# 2", anchor=E, stretch=NO, width=150)
                  tree.heading("# 2", text="Customer")
                  tree.column("# 3", anchor=E, stretch=NO, width=120)
                  tree.heading("# 3", text="Vendor")
                  tree.column("# 4", anchor=E, stretch=NO, width=100)
                  tree.heading("# 4", text="Invoice")
                  tree.column("# 5", anchor=E, stretch=NO, width=115)
                  tree.heading("# 5", text="Rebill.Amount")
                  tree.column("# 6", anchor=E, stretch=NO, width=115)
                  tree.heading("# 6", text="Amount")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))

                  window = drf.create_window(290, 260, anchor="nw", window=tree)


      elif rpcheckvar1_exp.get()==0 and rpcheckvar2_exp.get()==1:
          if rth=="All":
              if company_tro is not None:
              
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_exp_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  rp_exp_tree.column("# 1", anchor=E, stretch=NO, width=80)
                  rp_exp_tree.heading("# 1", text="Date")
                  rp_exp_tree.column("# 2", anchor=E, stretch=NO, width=160)
                  rp_exp_tree.heading("# 2", text="Customer")
                  rp_exp_tree.column("# 3", anchor=E, stretch=NO, width=160)
                  rp_exp_tree.heading("# 3", text="Vendor")
                  rp_exp_tree.column("# 4", anchor=E, stretch=NO, width=100)
                  rp_exp_tree.heading("# 4", text="Invoice")
                  rp_exp_tree.column("# 5", anchor=E, stretch=NO, width=115)
                  rp_exp_tree.heading("# 5", text="Rebill.Amount")
                  rp_exp_tree.column("# 6", anchor=E, stretch=NO, width=115)
                  rp_exp_tree.heading("# 6", text="Amount")
                  # Insert the data in Treeview widget
                  rp_exp_tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))
                  
                  for record in rp_exp_tree.get_children():
                      rp_exp_tree.delete(record)
                  count=0
                  var_1=exp_frm.get_date()
                  var_2=exp_to.get_date()

                  lre='SELECT * from expenses WHERE(date BETWEEN %s and %s and rebillable="Yes")'
                  sre=(var_1, var_2)
                  fbcursor.execute(lre,sre)
                  tre=fbcursor.fetchall()

                  for i in tre:
                        if ps_cr=="before amount":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],i[14], crc+str(i[16]), crc+str(i[3])))
                            
                            
                        elif ps_cr=="after amount":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], str(i[16])+crc, str(i[3])+crc))
                            
                            
                        elif ps_cr=="before amount with space":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],i[14], crc+" "+str(i[16]), crc+" "+str(i[3])))
                            
                        elif ps_cr=="after amount with space":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], str(i[16])+" "+crc, str(i[3])+" "+crc))
                        
                        else:
                            pass
                        count += 1

                  rp_exp_tree.insert('', 'end',text="1",values=('','','','-End List-','Rebill.Amount','Amount'))
                  

                  window = drf.create_window(270, 260, anchor="nw", window=rp_exp_tree)

                  
                  
              else:

                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=80)
                  tree.heading("# 1", text="Date")
                  tree.column("# 2", anchor=E, stretch=NO, width=150)
                  tree.heading("# 2", text="Customer")
                  tree.column("# 3", anchor=E, stretch=NO, width=120)
                  tree.heading("# 3", text="Vendor")
                  tree.column("# 4", anchor=E, stretch=NO, width=100)
                  tree.heading("# 4", text="Invoice")
                  tree.column("# 5", anchor=E, stretch=NO, width=115)
                  tree.heading("# 5", text="Rebill.Amount")
                  tree.column("# 6", anchor=E, stretch=NO, width=115)
                  tree.heading("# 6", text="Amount")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))

                  window = drf.create_window(290, 260, anchor="nw", window=tree)
          elif rth=="Internal":
              if company_tro is not None:
              
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_exp_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  rp_exp_tree.column("# 1", anchor=E, stretch=NO, width=80)
                  rp_exp_tree.heading("# 1", text="Date")
                  rp_exp_tree.column("# 2", anchor=E, stretch=NO, width=160)
                  rp_exp_tree.heading("# 2", text="Customer")
                  rp_exp_tree.column("# 3", anchor=E, stretch=NO, width=160)
                  rp_exp_tree.heading("# 3", text="Vendor")
                  rp_exp_tree.column("# 4", anchor=E, stretch=NO, width=100)
                  rp_exp_tree.heading("# 4", text="Invoice")
                  rp_exp_tree.column("# 5", anchor=E, stretch=NO, width=115)
                  rp_exp_tree.heading("# 5", text="Rebill.Amount")
                  rp_exp_tree.column("# 6", anchor=E, stretch=NO, width=115)
                  rp_exp_tree.heading("# 6", text="Amount")
                  # Insert the data in Treeview widget
                  rp_exp_tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))
                  
                  for record in rp_exp_tree.get_children():
                      rp_exp_tree.delete(record)
                  count=0
                  var_1=exp_frm.get_date()
                  var_2=exp_to.get_date()

                  lre='SELECT * from expenses WHERE(date BETWEEN %s and %s and customer="Internal" and rebillable="Yes")'
                  sre=(var_1, var_2)
                  fbcursor.execute(lre,sre)
                  tre=fbcursor.fetchall()

                  for i in tre:
                        if ps_cr=="before amount":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],i[14], crc+str(i[16]), crc+str(i[3])))
                            
                            
                        elif ps_cr=="after amount":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], str(i[16])+crc, str(i[3])+crc))
                            
                            
                        elif ps_cr=="before amount with space":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],i[14], crc+" "+str(i[16]), crc+" "+str(i[3])))
                            
                        elif ps_cr=="after amount with space":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], str(i[16])+" "+crc, str(i[3])+" "+crc))
                        
                        else:
                            pass
                        count += 1

                  rp_exp_tree.insert('', 'end',text="1",values=('','','','-End List-','Rebill.Amount','Amount'))
                  

                  window = drf.create_window(270, 260, anchor="nw", window=rp_exp_tree)

                  
                  
              else:

                  

                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=80)
                  tree.heading("# 1", text="Date")
                  tree.column("# 2", anchor=E, stretch=NO, width=150)
                  tree.heading("# 2", text="Customer")
                  tree.column("# 3", anchor=E, stretch=NO, width=120)
                  tree.heading("# 3", text="Vendor")
                  tree.column("# 4", anchor=E, stretch=NO, width=100)
                  tree.heading("# 4", text="Invoice")
                  tree.column("# 5", anchor=E, stretch=NO, width=115)
                  tree.heading("# 5", text="Rebill.Amount")
                  tree.column("# 6", anchor=E, stretch=NO, width=115)
                  tree.heading("# 6", text="Amount")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))

                  window = drf.create_window(290, 260, anchor="nw", window=tree)

      elif rpcheckvar1_exp.get()==1 and rpcheckvar2_exp.get()==1:
          if rth=="All":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_exp_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  rp_exp_tree.column("# 1", anchor=E, stretch=NO, width=80)
                  rp_exp_tree.heading("# 1", text="Date")
                  rp_exp_tree.column("# 2", anchor=E, stretch=NO, width=160)
                  rp_exp_tree.heading("# 2", text="Customer")
                  rp_exp_tree.column("# 3", anchor=E, stretch=NO, width=160)
                  rp_exp_tree.heading("# 3", text="Vendor")
                  rp_exp_tree.column("# 4", anchor=E, stretch=NO, width=100)
                  rp_exp_tree.heading("# 4", text="Invoice")
                  rp_exp_tree.column("# 5", anchor=E, stretch=NO, width=115)
                  rp_exp_tree.heading("# 5", text="Rebill.Amount")
                  rp_exp_tree.column("# 6", anchor=E, stretch=NO, width=115)
                  rp_exp_tree.heading("# 6", text="Amount")
                  # Insert the data in Treeview widget
                  rp_exp_tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))
                  
                  for record in rp_exp_tree.get_children():
                      rp_exp_tree.delete(record)
                  count=0
                  var_1=exp_frm.get_date()
                  var_2=exp_to.get_date()

                  lre='SELECT * from expenses WHERE(date BETWEEN %s and %s)'
                  sre=(var_1, var_2)
                  fbcursor.execute(lre,sre)
                  tre=fbcursor.fetchall()

                  for i in tre:
                        if ps_cr=="before amount":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],i[14], crc+str(i[16]), crc+str(i[3])))
                            
                            
                        elif ps_cr=="after amount":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], str(i[16])+crc, str(i[3])+crc))
                            
                            
                        elif ps_cr=="before amount with space":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],i[14], crc+" "+str(i[16]), crc+" "+str(i[3])))
                            
                        elif ps_cr=="after amount with space":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], i[14], str(i[16])+" "+crc, str(i[3])+" "+crc))
                        
                        else:
                            pass
                        count += 1

                  rp_exp_tree.insert('', 'end',text="1",values=('','','','-End List-','Rebill.Amount','Amount'))
                  

                  window = drf.create_window(270, 260, anchor="nw", window=rp_exp_tree)

                  
                  
              else:


                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=80)
                  tree.heading("# 1", text="Date")
                  tree.column("# 2", anchor=E, stretch=NO, width=150)
                  tree.heading("# 2", text="Customer")
                  tree.column("# 3", anchor=E, stretch=NO, width=120)
                  tree.heading("# 3", text="Vendor")
                  tree.column("# 4", anchor=E, stretch=NO, width=100)
                  tree.heading("# 4", text="Invoice")
                  tree.column("# 5", anchor=E, stretch=NO, width=115)
                  tree.heading("# 5", text="Rebill.Amount")
                  tree.column("# 6", anchor=E, stretch=NO, width=115)
                  tree.heading("# 6", text="Amount")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))

                  window = drf.create_window(290, 260, anchor="nw", window=tree)
          elif rth=="Internal":
              if company_tro is not None:
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_exp_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  rp_exp_tree.column("# 1", anchor=E, stretch=NO, width=80)
                  rp_exp_tree.heading("# 1", text="Date")
                  rp_exp_tree.column("# 2", anchor=E, stretch=NO, width=160)
                  rp_exp_tree.heading("# 2", text="Customer")
                  rp_exp_tree.column("# 3", anchor=E, stretch=NO, width=160)
                  rp_exp_tree.heading("# 3", text="Vendor")
                  rp_exp_tree.column("# 4", anchor=E, stretch=NO, width=100)
                  rp_exp_tree.heading("# 4", text="Invoice")
                  rp_exp_tree.column("# 5", anchor=E, stretch=NO, width=115)
                  rp_exp_tree.heading("# 5", text="Rebill.Amount")
                  rp_exp_tree.column("# 6", anchor=E, stretch=NO, width=115)
                  rp_exp_tree.heading("# 6", text="Amount")
                  # Insert the data in Treeview widget
                  rp_exp_tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))
                  
                  for record in rp_exp_tree.get_children():
                      rp_exp_tree.delete(record)
                  count=0
                  var_1=exp_frm.get_date()
                  var_2=exp_to.get_date()

                  lre='SELECT * from expenses WHERE(date BETWEEN %s and %s and customer="Internal")'
                  sre=(var_1, var_2)
                  fbcursor.execute(lre,sre)
                  tre=fbcursor.fetchall()

                  for i in tre:
                        if ps_cr=="before amount":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],crc+str(i[14]), crc+str(i[16]), crc+str(i[3])))
                            
                            
                        elif ps_cr=="after amount":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], str(i[14])+crc, str(i[16])+crc, str(i[3])+crc))
                            
                            
                        elif ps_cr=="before amount with space":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5],crc+" "+str(i[14]), crc+" "+str(i[16]), crc+" "+str(i[3])))
                            
                        elif ps_cr=="after amount with space":
                            rp_exp_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[4], i[10], i[5], str(i[14])+" "+crc, str(i[16])+" "+crc, str(i[3])+" "+crc))
                        
                        else:
                            pass
                        count += 1

                  rp_exp_tree.insert('', 'end',text="1",values=('','','','-End List-','Rebill.Amount','Amount'))
                  

                  window = drf.create_window(270, 260, anchor="nw", window=rp_exp_tree)

                  
                  
              else:

                

                  
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=80)
                  tree.heading("# 1", text="Date")
                  tree.column("# 2", anchor=E, stretch=NO, width=150)
                  tree.heading("# 2", text="Customer")
                  tree.column("# 3", anchor=E, stretch=NO, width=120)
                  tree.heading("# 3", text="Vendor")
                  tree.column("# 4", anchor=E, stretch=NO, width=100)
                  tree.heading("# 4", text="Invoice")
                  tree.column("# 5", anchor=E, stretch=NO, width=115)
                  tree.heading("# 5", text="Rebill.Amount")
                  tree.column("# 6", anchor=E, stretch=NO, width=115)
                  tree.heading("# 6", text="Amount")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','Rebill.Amount','Amount'))

                  window = drf.create_window(290, 260, anchor="nw", window=tree)

      elif rpcheckvar1_exp.get()==0 and rpcheckvar2_exp.get()==0:
          if company_tro is not None:
              
              style=ttk.Style()
              style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
              style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
              style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

              # Add a Treeview widge
                      
              tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
              tree.column("# 1", anchor=E, stretch=NO, width=130)
              tree.heading("# 1", text="Date")
              tree.column("# 2", anchor=E, stretch=NO, width=150)
              tree.heading("# 2", text="Customer")
              tree.column("# 3", anchor=E, stretch=NO, width=120)
              tree.heading("# 3", text="Vendor")
              tree.column("# 4", anchor=E, stretch=NO, width=100)
              tree.heading("# 4", text="Invoice")
              tree.column("# 5", anchor=E, stretch=NO, width=115)
              tree.heading("# 5", text="Rebill.Amount")
              tree.column("# 6", anchor=E, stretch=NO, width=115)
              tree.heading("# 6", text="Amount")
              # Insert the data in Treeview widget
              tree.insert('', 'end',text="1",values=('','','-No Data-','','Rebill.Amount','Amount'))

              window = drf.create_window(270, 260, anchor="nw", window=tree)

      else:
          pass
      


  def check_cl():
      
      
      rth=clfilter.get()
      tro_company = "SELECT * from company"
      fbcursor.execute(tro_company)
      company_tro= fbcursor.fetchone()

      if rpcheckvar1_cl.get()==1 and rpcheckvar2_cl.get()==0:
          
          if company_tro is not None:
              
              if rth=="All Customers ":
                  
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_cl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_cl_tree.heading("# 1", text="Customer Id")
                  rp_cl_tree.column("# 2", anchor=E, stretch=NO, width=170)
                  rp_cl_tree.heading("# 2", text="Category")
                  rp_cl_tree.column("# 3", anchor=E, stretch=NO, width=250)
                  rp_cl_tree.heading("# 3", text="Customer Businnes Name")
                  rp_cl_tree.column("# 4", anchor=E, stretch=NO, width=180)
                  rp_cl_tree.heading("# 4", text="Customer Person")
                  rp_cl_tree.column("# 5", anchor=E, stretch=NO, width=140)
                  rp_cl_tree.heading("# 5", text="Tel")
                  rp_cl_tree.column("# 6", anchor=E, stretch=NO, width=130)
                  rp_cl_tree.heading("# 6", text="Fax")
                  # Insert the data in Treeview widget
                  rp_cl_tree.insert('', 'end',text="1",values=('','','','','',''))

                  # Insert the data in Treeview widget
                  for record in rp_cl_tree.get_children():
                      rp_cl_tree.delete(record)
                  count=0
                  trs='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1'
                  fbcursor.execute(trs)
                  thj=fbcursor.fetchall()
                  for i in thj:
                      trf='select * from customer where businessname=%s'
                      vs=(str(i[18]),)
                      
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()

                      for i in thg:
                          rp_cl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[4], i[8], i[10], i[11]))
                          count += 1
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_cl_tree) 
              

              elif rth=="Default":
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_cl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_cl_tree.heading("# 1", text="Customer Id")
                  rp_cl_tree.column("# 2", anchor=E, stretch=NO, width=170)
                  rp_cl_tree.heading("# 2", text="Category")
                  rp_cl_tree.column("# 3", anchor=E, stretch=NO, width=250)
                  rp_cl_tree.heading("# 3", text="Customer Businnes Name")
                  rp_cl_tree.column("# 4", anchor=E, stretch=NO, width=180)
                  rp_cl_tree.heading("# 4", text="Customer Person")
                  rp_cl_tree.column("# 5", anchor=E, stretch=NO, width=140)
                  rp_cl_tree.heading("# 5", text="Tel")
                  rp_cl_tree.column("# 6", anchor=E, stretch=NO, width=130)
                  rp_cl_tree.heading("# 6", text="Fax")
                  # Insert the data in Treeview widget
                  rp_cl_tree.insert('', 'end',text="1",values=('','','','','',''))

                  # Insert the data in Treeview widget
                  for record in rp_cl_tree.get_children():
                      rp_cl_tree.delete(record)
                  count=0
                  trs='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1'
                  fbcursor.execute(trs)
                  thj=fbcursor.fetchall()
                  for i in thj:
                      trf='select * from customer where businessname=%s and category="Default"'
                      vs=(str(i[18]),)
                      
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()

                      for i in thg:
                          rp_cl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[4], i[8], i[10], i[11]))
                          count += 1
                  else:
                      rp_cl_tree.insert('', 'end',text="1",values=('','','','-No Data-','',''))


                  window = drf.create_window(170, 150, anchor="nw",  window=rp_cl_tree)

              else:
                  pass
          else:
                      
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Customer Id")
                  tree.column("# 2", anchor=E, stretch=NO, width=170)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=250)
                  tree.heading("# 3", text="Customer Businnes Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=180)
                  tree.heading("# 4", text="Customer Person")
                  tree.column("# 5", anchor=E, stretch=NO, width=130)
                  tree.heading("# 5", text="Tel")
                  tree.column("# 6", anchor=E, stretch=NO, width=130)
                  tree.heading("# 6", text="Fax")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)

      elif rpcheckvar1_cl.get()==0 and rpcheckvar2_cl.get()==1:
          
          if company_tro is not None:
              if rth=="All Customers ":
                  
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_cl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_cl_tree.heading("# 1", text="Customer Id")
                  rp_cl_tree.column("# 2", anchor=E, stretch=NO, width=170)
                  rp_cl_tree.heading("# 2", text="Category")
                  rp_cl_tree.column("# 3", anchor=E, stretch=NO, width=250)
                  rp_cl_tree.heading("# 3", text="Customer Businnes Name")
                  rp_cl_tree.column("# 4", anchor=E, stretch=NO, width=180)
                  rp_cl_tree.heading("# 4", text="Customer Person")
                  rp_cl_tree.column("# 5", anchor=E, stretch=NO, width=140)
                  rp_cl_tree.heading("# 5", text="Tel")
                  rp_cl_tree.column("# 6", anchor=E, stretch=NO, width=130)
                  rp_cl_tree.heading("# 6", text="Fax")
                  # Insert the data in Treeview widget
                  rp_cl_tree.insert('', 'end',text="1",values=('','','','','',''))

                  # Insert the data in Treeview widget
                  for record in rp_cl_tree.get_children():
                      rp_cl_tree.delete(record)
                  count=0
                  trs='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1'
                  fbcursor.execute(trs)
                  thj=fbcursor.fetchall()
                  for i in thj:
                      trf='select * from customer where businessname=%s'
                      vs=(str(i[18]),)
                      
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()

                      for i in thg:
                          rp_cl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[4], i[8], i[10], i[11]))
                          count += 1
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_cl_tree) 
              

              elif rth=="Default":
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_cl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_cl_tree.heading("# 1", text="Customer Id")
                  rp_cl_tree.column("# 2", anchor=E, stretch=NO, width=170)
                  rp_cl_tree.heading("# 2", text="Category")
                  rp_cl_tree.column("# 3", anchor=E, stretch=NO, width=250)
                  rp_cl_tree.heading("# 3", text="Customer Businnes Name")
                  rp_cl_tree.column("# 4", anchor=E, stretch=NO, width=180)
                  rp_cl_tree.heading("# 4", text="Customer Person")
                  rp_cl_tree.column("# 5", anchor=E, stretch=NO, width=140)
                  rp_cl_tree.heading("# 5", text="Tel")
                  rp_cl_tree.column("# 6", anchor=E, stretch=NO, width=130)
                  rp_cl_tree.heading("# 6", text="Fax")
                  # Insert the data in Treeview widget
                  rp_cl_tree.insert('', 'end',text="1",values=('','','','','',''))

                  # Insert the data in Treeview widget
                  for record in rp_cl_tree.get_children():
                      rp_cl_tree.delete(record)
                  count=0
                  trs='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1'
                  fbcursor.execute(trs)
                  thj=fbcursor.fetchall()
                  for i in thj:
                      trf='select * from customer where businessname=%s and category="Default"'
                      vs=(str(i[18]),)
                      
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()

                      for i in thg:
                          rp_cl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[4], i[8], i[10], i[11]))
                          count += 1
                  else:
                      rp_cl_tree.insert('', 'end',text="1",values=('','','','-No Data-','',''))


                  window = drf.create_window(170, 150, anchor="nw",  window=rp_cl_tree)

              else:
                  pass
          else:
                      
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Customer Id")
                  tree.column("# 2", anchor=E, stretch=NO, width=170)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=250)
                  tree.heading("# 3", text="Customer Businnes Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=180)
                  tree.heading("# 4", text="Customer Person")
                  tree.column("# 5", anchor=E, stretch=NO, width=130)
                  tree.heading("# 5", text="Tel")
                  tree.column("# 6", anchor=E, stretch=NO, width=130)
                  tree.heading("# 6", text="Fax")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)
      elif rpcheckvar1_cl.get()==1 and rpcheckvar2_cl.get()==1:
          if company_tro is not None:
              if rth=="All Customers ":
                  
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_cl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_cl_tree.heading("# 1", text="Customer Id")
                  rp_cl_tree.column("# 2", anchor=E, stretch=NO, width=170)
                  rp_cl_tree.heading("# 2", text="Category")
                  rp_cl_tree.column("# 3", anchor=E, stretch=NO, width=250)
                  rp_cl_tree.heading("# 3", text="Customer Businnes Name")
                  rp_cl_tree.column("# 4", anchor=E, stretch=NO, width=180)
                  rp_cl_tree.heading("# 4", text="Customer Person")
                  rp_cl_tree.column("# 5", anchor=E, stretch=NO, width=140)
                  rp_cl_tree.heading("# 5", text="Tel")
                  rp_cl_tree.column("# 6", anchor=E, stretch=NO, width=130)
                  rp_cl_tree.heading("# 6", text="Fax")
                  # Insert the data in Treeview widget
                  rp_cl_tree.insert('', 'end',text="1",values=('','','','','',''))

                  # Insert the data in Treeview widget
                  for record in rp_cl_tree.get_children():
                      rp_cl_tree.delete(record)
                  count=0
                  trf='select * from customer'
                  
                  fbcursor.execute(trf)
                  thg=fbcursor.fetchall()

                  for i in thg:
                      rp_cl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[4], i[8], i[10], i[11]))
                      count += 1
                  else:
                      rp_cl_tree.insert('', 'end',text="1",values=('','','','-No Data-','',''))
                  window = drf.create_window(170, 150, anchor="nw",  window=rp_cl_tree) 
              

              elif rth=="Default":
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_cl_tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cl_tree.column("# 1", anchor=E, stretch=NO, width=100)
                  rp_cl_tree.heading("# 1", text="Customer Id")
                  rp_cl_tree.column("# 2", anchor=E, stretch=NO, width=170)
                  rp_cl_tree.heading("# 2", text="Category")
                  rp_cl_tree.column("# 3", anchor=E, stretch=NO, width=250)
                  rp_cl_tree.heading("# 3", text="Customer Businnes Name")
                  rp_cl_tree.column("# 4", anchor=E, stretch=NO, width=180)
                  rp_cl_tree.heading("# 4", text="Customer Person")
                  rp_cl_tree.column("# 5", anchor=E, stretch=NO, width=140)
                  rp_cl_tree.heading("# 5", text="Tel")
                  rp_cl_tree.column("# 6", anchor=E, stretch=NO, width=130)
                  rp_cl_tree.heading("# 6", text="Fax")
                  # Insert the data in Treeview widget
                  rp_cl_tree.insert('', 'end',text="1",values=('','','','','',''))

                  # Insert the data in Treeview widget
                  for record in rp_cl_tree.get_children():
                      rp_cl_tree.delete(record)
                  count=0
                  
                  trf='select * from customer where category="Default"'
                  
                  fbcursor.execute(trf)
                  thg=fbcursor.fetchall()

                  for i in thg:
                      rp_cl_tree.insert(parent='', index='end', iid=i, text='hello', values=(i[0], i[2], i[4], i[8], i[10], i[11]))
                      count += 1
                  else:
                      rp_cl_tree.insert('', 'end',text="1",values=('','','','-No Data-','',''))


                  window = drf.create_window(170, 150, anchor="nw",  window=rp_cl_tree)

              else:
                  pass
          else:
                      
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Customer Id")
                  tree.column("# 2", anchor=E, stretch=NO, width=170)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=250)
                  tree.heading("# 3", text="Customer Businnes Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=180)
                  tree.heading("# 4", text="Customer Person")
                  tree.column("# 5", anchor=E, stretch=NO, width=140)
                  tree.heading("# 5", text="Tel")
                  tree.column("# 6", anchor=E, stretch=NO, width=130)
                  tree.heading("# 6", text="Fax")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','','','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)
      elif rpcheckvar1_cl.get()==0 and rpcheckvar2_cl.get()==0:
          if company_tro is not None:
              
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  tree=ttk.Treeview(drf, column=("c1", "c2","c3", "c4", "c5", "c6"), show='headings', height=55, style='mystyle.Treeview')
                  tree.column("# 1", anchor=E, stretch=NO, width=100)
                  tree.heading("# 1", text="Customer Id")
                  tree.column("# 2", anchor=E, stretch=NO, width=170)
                  tree.heading("# 2", text="Category")
                  tree.column("# 3", anchor=E, stretch=NO, width=250)
                  tree.heading("# 3", text="Customer Businnes Name")
                  tree.column("# 4", anchor=E, stretch=NO, width=180)
                  tree.heading("# 4", text="Customer Person")
                  tree.column("# 5", anchor=E, stretch=NO, width=130)
                  tree.heading("# 5", text="Tel")
                  tree.column("# 6", anchor=E, stretch=NO, width=130)
                  tree.heading("# 6", text="Fax")
                  # Insert the data in Treeview widget
                  tree.insert('', 'end',text="1",values=('','',' -=No Data-','','',''))

                  window = drf.create_window(170, 150, anchor="nw", window=tree)
      else:
          pass

  def check_cld():
      rth=cldfilter.get()
      tro_company = "SELECT * from company"
      fbcursor.execute(tro_company)
      company_tro= fbcursor.fetchone()

      if rpcheckvar1_cld.get()==1 and rpcheckvar2_cld.get()==0:
          
          if company_tro is not None:
              
              if rth=="All Customers ":
                  
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_cld_tree=ttk.Treeview(drf, column=("c1", "c2"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cld_tree.column("# 1", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 1", text="")
                  rp_cld_tree.column("# 2", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 2", text="")
                  
                  # Insert the data in Treeview widget
                  rp_cld_tree.insert('', 'end',text="1",values=('',''))

                  # Insert the data in Treeview widget
                  for record in rp_cld_tree.get_children():
                      rp_cld_tree.delete(record)
                  count=0
                  trs='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1'
                  fbcursor.execute(trs)
                  thj=fbcursor.fetchall()
                  for i in thj:
                      trf='select * from customer where businessname=%s'
                      vs=(str(i[18]),)
                      
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()

                      for i in thg:
                          rp_cld_tree.insert("","end", iid=i, text='hello', values=("Billing Information:                      Customer Id:"+str(i[0]),"Shipping Information:                      Tax exempt No.:"+str(i[17])))

                          rp_cld_tree.insert("","end", values=('Name: '+str(i[4]),'Name:'+str(i[6])))

                          rp_cld_tree.insert("","end", values=('Address: '+str(i[5]),'Address:'+str(i[7])))
                          rp_cld_tree.insert("","end", values=('Contact Person: '+str(i[8]),'Contact Person:'+str(i[13])))
                          rp_cld_tree.insert("","end", values=('Tel:'+str(i[10])+'          Fax: '+str(i[11]),'Tel:'+str(i[15])+'          Fax: '+str(i[16])))
                          rp_cld_tree.insert("","end", values=('Email: '+str(i[9]),'Email: '+str(i[14])))
                          rp_cld_tree.insert('', 'end',text="1",values=('____________________________________________________________','____________________________________________________________'))
                          
                          count += 1
                  window = drf.create_window(290, 130, anchor="nw",  window=rp_cld_tree) 
              

              elif rth=="Default":
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_cld_tree=ttk.Treeview(drf, column=("c1", "c2"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cld_tree.column("# 1", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 1", text="")
                  rp_cld_tree.column("# 2", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 2", text="")
              
              # Insert the data in Treeview widget
                  rp_cld_tree.insert('', 'end',text="1",values=('',''))
                  # Insert the data in Treeview widget
                  for record in rp_cld_tree.get_children():
                      rp_cld_tree.delete(record)
                  count=0
                  trs='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)>1'
                  fbcursor.execute(trs)
                  thj=fbcursor.fetchall()
                  for i in thj:
                      trf='select * from customer where businessname=%s and category="Default"'
                      vs=(str(i[18]),)
                      
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()

                      for i in thg:
                          rp_cld_tree.insert("","end", iid=i, text='hello', values=("Billing Information:                      Customer Id:"+str(i[0]),"Shipping Information:                      Tax exempt No.:"+str(i[17])))

                          rp_cld_tree.insert("","end", values=('Name: '+str(i[4]),'Name:'+str(i[6])))

                          rp_cld_tree.insert("","end", values=('Address: '+str(i[5]),'Address:'+str(i[7])))
                          rp_cld_tree.insert("","end", values=('Contact Person: '+str(i[8]),'Contact Person:'+str(i[13])))
                          rp_cld_tree.insert("","end", values=('Tel:'+str(i[10])+'          Fax: '+str(i[11]),'Tel:'+str(i[15])+'          Fax: '+str(i[16])))
                          rp_cld_tree.insert("","end", values=('Email: '+str(i[9]),'Email: '+str(i[14])))
                          rp_cld_tree.insert('', 'end',text="1",values=('____________________________________________________________','____________________________________________________________'))
                          
                          count += 1
                  else:
                      rp_cld_tree.insert('', 'end',text="1",values=('','','','-No Data-','',''))


                  window = drf.create_window(290, 130, anchor="nw",  window=rp_cld_tree)

              else:
                  pass
          else:
                      
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_cld_tree=ttk.Treeview(drf, column=("c1", "c2"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cld_tree.column("# 1", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 1", text="")
                  rp_cld_tree.column("# 2", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 2", text="")
                  
                  # Insert the data in Treeview widget
                  rp_cld_tree.insert('', 'end',text="1",values=('No Data',''))
                  window = drf.create_window(290, 130, anchor="nw", window=rp_cld_tree)

      elif rpcheckvar1_cld.get()==0 and rpcheckvar2_cld.get()==1:
          
          if company_tro is not None:
              if rth=="All Customers ":
                  
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_cld_tree=ttk.Treeview(drf, column=("c1", "c2"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cld_tree.column("# 1", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 1", text="")
                  rp_cld_tree.column("# 2", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 2", text="")
                  
                  # Insert the data in Treeview widget
                  rp_cld_tree.insert('', 'end',text="1",values=('',''))

                  # Insert the data in Treeview widget
                  for record in rp_cld_tree.get_children():
                      rp_cld_tree.delete(record)
                  count=0
                  trs='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1'
                  fbcursor.execute(trs)
                  thj=fbcursor.fetchall()
                  for i in thj:
                      trf='select * from customer where businessname=%s'
                      vs=(str(i[18]),)
                      
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()

                      for i in thg:
                          rp_cld_tree.insert("","end", iid=i, text='hello', values=("Billing Information:                      Customer Id:"+str(i[0]),"Shipping Information:                      Tax exempt No.:"+str(i[17])))

                          rp_cld_tree.insert("","end", values=('Name: '+str(i[4]),'Name:'+str(i[6])))

                          rp_cld_tree.insert("","end", values=('Address: '+str(i[5]),'Address:'+str(i[7])))
                          rp_cld_tree.insert("","end", values=('Contact Person: '+str(i[8]),'Contact Person:'+str(i[13])))
                          rp_cld_tree.insert("","end", values=('Tel:'+str(i[10])+'          Fax: '+str(i[11]),'Tel:'+str(i[15])+'          Fax: '+str(i[16])))
                          rp_cld_tree.insert("","end", values=('Email: '+str(i[9]),'Email: '+str(i[14])))
                          rp_cld_tree.insert('', 'end',text="1",values=('____________________________________________________________','____________________________________________________________'))
                          
                          count += 1
                  window = drf.create_window(290, 130, anchor="nw",  window=rp_cld_tree) 
              

              elif rth=="Default":
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_cld_tree=ttk.Treeview(drf, column=("c1", "c2"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cld_tree.column("# 1", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 1", text="")
                  rp_cld_tree.column("# 2", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 2", text="")
                  
                  # Insert the data in Treeview widget
                  rp_cld_tree.insert('', 'end',text="1",values=('',''))

                  # Insert the data in Treeview widget
                  for record in rp_cld_tree.get_children():
                      rp_cld_tree.delete(record)
                  count=0
                  trs='SELECT * from invoice GROUP by businessname HAVING COUNT(businessname)=1'
                  fbcursor.execute(trs)
                  thj=fbcursor.fetchall()
                  for i in thj:
                      trf='select * from customer where businessname=%s and category="Default"'
                      vs=(str(i[18]),)
                      
                      fbcursor.execute(trf, vs)
                      thg=fbcursor.fetchall()

                      for i in thg:
                          rp_cld_tree.insert("","end", iid=i, text='hello', values=("Billing Information:                      Customer Id:"+str(i[0]),"Shipping Information:                      Tax exempt No.:"+str(i[17])))

                          rp_cld_tree.insert("","end", values=('Name: '+str(i[4]),'Name:'+str(i[6])))

                          rp_cld_tree.insert("","end", values=('Address: '+str(i[5]),'Address:'+str(i[7])))
                          rp_cld_tree.insert("","end", values=('Contact Person: '+str(i[8]),'Contact Person:'+str(i[13])))
                          rp_cld_tree.insert("","end", values=('Tel:'+str(i[10])+'          Fax: '+str(i[11]),'Tel:'+str(i[15])+'          Fax: '+str(i[16])))
                          rp_cld_tree.insert("","end", values=('Email: '+str(i[9]),'Email: '+str(i[14])))
                          rp_cld_tree.insert('', 'end',text="1",values=('____________________________________________________________','____________________________________________________________'))
                          
                          count += 1
                  else:
                      rp_cld_tree.insert('', 'end',text="1",values=('','','','-No Data-','',''))


                  window = drf.create_window(290, 130, anchor="nw",  window=rp_cld_tree)

              else:
                  pass
          else:
                      
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                  rp_cld_tree=ttk.Treeview(drf, column=("c1", "c2"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cld_tree.column("# 1", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 1", text="")
                  rp_cld_tree.column("# 2", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 2", text="")
                  
                  # Insert the data in Treeview widget
                  rp_cld_tree.insert('', 'end',text="1",values=('No Data',''))

                  window = drf.create_window(290, 130, anchor="nw", window=rp_cld_tree)
      elif rpcheckvar1_cld.get()==0 and rpcheckvar2_cld.get()==0:
          if company_tro is not None:
              
                  # Create an instance of Style widget
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13,'bold')) # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_cld_tree=ttk.Treeview(drf, column=("c1", "c2"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cld_tree.column("# 1", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 1", text="")
                  rp_cld_tree.column("# 2", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 2", text="")
                  
                  # Insert the data in Treeview widget
                  rp_cld_tree.insert('', 'end',text="1",values=('-No Data-',''))

                  window = drf.create_window(290, 130, anchor="nw", window=rp_cld_tree)
      elif rpcheckvar1_cld.get()==1 and rpcheckvar2_cld.get()==1:
          if company_tro is not None:
              
              if rth=="All Customers ":
                  
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_cld_tree=ttk.Treeview(drf, column=("c1", "c2"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cld_tree.column("# 1", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 1", text="")
                  rp_cld_tree.column("# 2", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 2", text="")
                  
                  # Insert the data in Treeview widget
                  rp_cld_tree.insert('', 'end',text="1",values=('',''))
                  # Insert the data in Treeview widget
                  for record in rp_cld_tree.get_children():
                      rp_cld_tree.delete(record)
                  count=0
                  trs='select * from customer'
                  fbcursor.execute(trs)
                  thj=fbcursor.fetchall()
                  for i in thj:
                          rp_cld_tree.insert("","end", iid=i, text='hello', values=("Billing Information:                      Customer Id:"+str(i[0]),"Shipping Information:                      Tax exempt No.:"+str(i[17])))

                          rp_cld_tree.insert("","end", values=('Name: '+str(i[4]),'Name:'+str(i[6])))

                          rp_cld_tree.insert("","end", values=('Address: '+str(i[5]),'Address:'+str(i[7])))
                          rp_cld_tree.insert("","end", values=('Contact Person: '+str(i[8]),'Contact Person:'+str(i[13])))
                          rp_cld_tree.insert("","end", values=('Tel:'+str(i[10])+'          Fax: '+str(i[11]),'Tel:'+str(i[15])+'          Fax: '+str(i[16])))
                          rp_cld_tree.insert("","end", values=('Email: '+str(i[9]),'Email: '+str(i[14])))
                          rp_cld_tree.insert('', 'end',text="1",values=('____________________________________________________________','____________________________________________________________'))
                          
                          count += 1
                  window = drf.create_window(290, 130, anchor="nw",  window=rp_cld_tree) 
              

              elif rth=="Default":
                  style=ttk.Style()
                  style.configure("mystyle.Treeview", highlightthickness=0, bd=0, font=('Calibri', 11)) # Modify the font of the body
                  style.configure("mystyle.Treeview.Heading", font=('Calibri', 13), background='white') # Modify the font of the headings
                  style.layout("mystyle.Treeview", [('mystyle.Treeview.treearea', {'sticky': 'nswe'})]) # Remove the borders

                  # Add a Treeview widge
                          
                  rp_cld_tree=ttk.Treeview(drf, column=("c1", "c2"), show='headings', height=55, style='mystyle.Treeview')
                  rp_cld_tree.column("# 1", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 1", text="")
                  rp_cld_tree.column("# 2", anchor="sw", stretch=NO, width=345)
                  rp_cld_tree.heading("# 2", text="")
                  
                  # Insert the data in Treeview widget
                  rp_cld_tree.insert('', 'end',text="1",values=('',''))

                  # Insert the data in Treeview widget
                  for record in rp_cld_tree.get_children():
                      rp_cld_tree.delete(record)
                  count=0
                  trs='select * from customer where category="Default"'
                  fbcursor.execute(trs)
                  thj=fbcursor.fetchall()
                  for i in thj:
                          rp_cld_tree.insert("","end", iid=i, text='hello', values=("Billing Information:                      Customer Id:"+str(i[0]),"Shipping Information:                      Tax exempt No.:"+str(i[17])))

                          rp_cld_tree.insert("","end", values=('Name: '+str(i[4]),'Name:'+str(i[6])))

                          rp_cld_tree.insert("","end", values=('Address: '+str(i[5]),'Address:'+str(i[7])))
                          rp_cld_tree.insert("","end", values=('Contact Person: '+str(i[8]),'Contact Person:'+str(i[13])))
                          rp_cld_tree.insert("","end", values=('Tel:'+str(i[10])+'          Fax: '+str(i[11]),'Tel:'+str(i[15])+'          Fax: '+str(i[16])))
                          rp_cld_tree.insert("","end", values=('Email: '+str(i[9]),'Email: '+str(i[14])))
                          rp_cld_tree.insert('', 'end',text="1",values=('____________________________________________________________','____________________________________________________________'))
                          
                          count += 1
                  else:
                      rp_cld_tree.insert('', 'end',text="1",values=('','','','-No Data-','',''))


                  window = drf.create_window(290, 130, anchor="nw",  window=rp_cld_tree)

              else:
                  pass


      else:
          pass
  #==============================================================================================================
          
      
  #*****************************************Two Checkbox*****************************************************

  ############################################################(Screen Chart)###################################
  lbl_invdtt = Label(lbframe, text="Report Type:  ", bg="#f8f8f2")
  lbl_invdtt.place(x=8, y=10)
  global menu1
  menu1 = StringVar()
  drop=ttk.Combobox(lbframe, textvariable=menu1, width=30)
  drop.grid(row=2, column=0, pady=5, padx=(5, 0))
  drop["values"]=("Screen Charts","Invoice Report","Invoice Report(With Customer)", "Order Report", "Recurring Invoice Report", "Past Due Invoices", "Payment Reports", "Customers List","Customers List(Detailed)","Product/Service List", "Price List", "Products Low Stock Report", "Tax Report(Invoices)", "Tax Report(Orders)", "Sales Report(group by date)", "Invoice Report(Detailed)", "Daily Invoices Report", "Purchase orders Report", "Expenses Report"
  )
  drop.current(0)
  drop.bind("<<ComboboxSelected>>",maindropmenu)



  lbl_invdtt = Label(lbframe, text="Category:", bg="#f8f8f2")
  lbl_invdtt.grid(row=1, column=0, pady=5, padx=(150, 0))

  menu = StringVar()
  drop1=ttk.Combobox(lbframe, textvariable=menu)
  drop1.grid(row=1, column=3, pady=5, padx=(5, 0))
  drop1["values"]=("0")
  drop1.current(0)


  drop2=ttk.Combobox(lbframe, textvariable=scrfilter)
  drop2.grid(row=2, column=3, pady=5, padx=(5, 0))
  drop2["values"]=("Year To Date","Current year","Last 3 Month","Last 6 Month", "Last 12 Month", "Last 18 Month", "Last 24 Month","Previous Year", "Before Previous Year", "Custom Range")
  drop2.current(0)

    
  lbl_invdtt =Label(lbframe, text="From:" , bg="#f8f8f2")
  lbl_invdtt.grid(row=1, column=4, pady=5, padx=(5, 0))
  
  sql='select dateformat from company'
  fbcursor.execute(sql)
  rp_date_for=fbcursor.fetchone()
  if not rp_date_for:
        dtr='yyyy-MM-dd'
    
  elif rp_date_for[0]=="mm-dd-yyyy":
        dtr='mm-dd-yyyy'

  elif rp_date_for[0]=="dd-mm-yyyy":
        dtr='dd-mm-yyyy'
                
    # elif rp_date_for[0]=="yyyy.mm.dd":
    #     ldt='yyyy.mm.dd'
                    
  elif rp_date_for[0]=="mm/dd/yyyy":
        dtr='mm/dd/yyyy'
                    
  elif rp_date_for[0]=="dd/mm/yyyy":
        dtr='dd/mm/yyyy'
                            
  elif rp_date_for[0]=="dd.mm.yyyy":
        dtr='dd.mm.yyyy'
  else:
    dtr='yyyy-MM-dd'
  
                            
    # elif rp_date_for[0]=="yyyy/mm/dd":
    #     ldt='yyyy/mm/dd'
  
  global rp_scr_frm
  global rp_sc_to

  
  rp_scr_frm=DateEntry(lbframe,textvariable=scrfrm, date_pattern=dtr)
  rp_scr_frm.grid(row=1, column=5)

  lbl_invdtt =Label(lbframe, text="To:", bg="#f8f8f2")
  lbl_invdtt.grid(row=2, column=4, pady=5, padx=(5, 0))

  rp_sc_to=DateEntry(lbframe,textvariable=scrto, date_pattern=dtr)
  rp_sc_to.grid(row=2, column=5)

  # checkvar1 = BooleanVar()
  rp_1_chkbtn1 = Checkbutton(lbframe, text = "Invoice", variable = checkvar1, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2",command=chek_function)
  rp_1_chkbtn1.grid(row=0, column=6, rowspan=2, padx=(0,3))
  rp_1_chkbtn1.select()

  # checkvar2 = BooleanVar()
  rp_2_chkbtn2 = Checkbutton(lbframe, text = "Outstanding", variable = checkvar2, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=chek_function)
  rp_2_chkbtn2.grid(row=2, column=6,rowspan=2,padx=(25,0))
  rp_2_chkbtn2.select()

  # checkvar3 = BooleanVar()
  rp_3_chkbtn3 = Checkbutton(lbframe, text = "Paid", variable = checkvar3, onvalue = 1, offvalue = 0, height = 2, width = 8, bg="#f8f8f2", command=chek_function)
  rp_3_chkbtn3.grid(row=1, column=7)
  rp_3_chkbtn3.select()


  # dt_to=rp_sc_to.get_date()
  # dts=2020-01-01
  # print(dt_to-dts)
  ######################################################################################################################


  #########################################(Graph Section)############################################################  #

  sql_paid = "SELECT SUM(invoicetot)from invoice"
  fbcursor.execute(sql_paid)
  invoiced= fbcursor.fetchone()
  sec_paid_y = "SELECT businessname from invoice  GROUP BY businessname  ORDER by COUNT(businessname) DESC LIMIT 1"
  fbcursor.execute(sec_paid_y)
  paidcheck= fbcursor.fetchone()

  sec_paid = "SELECT invoicetot from invoice  GROUP BY businessname ORDER by COUNT(businessname) DESC LIMIT 1"
  fbcursor.execute(sec_paid)
  second= fbcursor.fetchone()

  thrd_paid_y = "select name from productservice where Productserviceid=(SELECT Productserviceid from invoice GROUP BY Productserviceid  ORDER by COUNT(Productserviceid) DESC LIMIT 1)"
  fbcursor.execute(thrd_paid_y)
  third= fbcursor.fetchone()

  thrd_paid = "SELECT invoicetot from invoice GROUP BY Productserviceid ORDER by COUNT(Productserviceid) DESC LIMIT 1"

  fbcursor.execute(thrd_paid)
  third2= fbcursor.fetchone()


  #first graph
  sql_paid = "SELECT SUM(invoicetot)from invoice"
  fbcursor.execute(sql_paid)
  invoice= fbcursor.fetchone()

  x_axis = "SELECT invodate from invoice WHERE invoicetot=(SELECT MAX(invoicetot) from invoice)"
  fbcursor.execute(x_axis)
  axis_x= fbcursor.fetchone()



  sql_company = "SELECT SUM(totpaid)from invoice"
  fbcursor.execute(sql_company)
  paid= fbcursor.fetchone()



  sql_outstanding = "SELECT SUM(balance)from invoice"
  fbcursor.execute(sql_outstanding)
  outstanding= fbcursor.fetchone()



  # print(rp_scr_frm.get_date())
  # x=rp_scr_frm.get_date()
  # # print(x.get_date())
  # invoice=1200
  # outstanding=22
  # paid=14

  #------------------------------------with cursor----------------
  # y=float(invoice)
  # x+=1
  # fig, ax =plt.subplots()
  # plt.bar(x,y, label="Invoice", color="orange")
  # plt.legend()
  # plt.xlabel("x-axis")
  # plt.ylabel("y-label")
  # axes=plt.gca()
  # axes.yaxis.grid()
  # cursor=Cursor(ax, horizOn=True, vertOn=True, color='r', linewidth=1)
  # plt.show()
  #-------------------------------------------------------------------------------


  frame = Frame(
          reportframe,
          width=1380,
          height=1000,
          bg='#b3b3b3',
          )
  frame.pack(expand=True, fill=BOTH,  padx=0, pady=0)
      
  frame.pack()


  x=datetime.today()

  y=invoice

  x=axis_x
  figfirst = plt.figure(figsize=(17, 3.58), dpi=81)
  plt.bar(x,y, label="Invoice", color="orange")
  plt.legend()
  plt.xlabel("Date")
  plt.ylabel("Total Amount")
  axes=plt.gca()
  axes.yaxis.grid()

  # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)




  #**************add dates********

  dates=axis_x[0]+timedelta(days=2)

  y=outstanding
  x=dates
  plt.bar(x,y, label="Outstanding", color="blue")
  plt.legend()
  plt.xlabel("Date")
  plt.ylabel("Total Amount")
  axes=plt.gca()
  axes.yaxis.grid()
  # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)


  dates3=axis_x[0]-timedelta(days=2)
  y=paid
  x=dates3
  plt.bar(x,y, label="Paid", color="green") 
  plt.legend()
  plt.xlabel("Date")
  plt.ylabel("Total Amount")
  axes=plt.gca()
  axes.yaxis.grid()
  # # cursor=Cursor(ax, horizOn=True, vertOn=True, useblit=True, color='r', linewidth=1)

  #used to display chart in our frame
  canvasbar = FigureCanvasTkAgg(figfirst, master=frame)
  canvasbar.draw()
  canvasbar.get_tk_widget().place(x=0, y=0) # show the barchart on the ouput window

  #second graph

  sec_paid = "SELECT invoicetot from invoice  GROUP BY businessname ORDER by COUNT(businessname) DESC LIMIT 1"
  fbcursor.execute(sec_paid)
  paid_sec_x= fbcursor.fetchone()
  print(paid_sec_x)

          
  sec_paid_y = "SELECT businessname from invoice  GROUP BY businessname  ORDER by COUNT(businessname) DESC LIMIT 1"
  fbcursor.execute(sec_paid_y)

  paid_sec_y= fbcursor.fetchone()
  print(paid_sec_y)



  figsecond = plt.figure(figsize=(9, 4), dpi=80)

  x=paid_sec_y
  y=paid_sec_x
  plt.barh(x,y, label="Top Billed Customer", color="orange") 
  plt.legend()
  plt.xlabel("Invoiced Amount")
  plt.ylabel("")
  axes=plt.gca()
  axes.xaxis.grid()


  canvasbar = FigureCanvasTkAgg(figsecond, master=reportframe)
  canvasbar.draw() 
  canvasbar.get_tk_widget().place(x=0, y=372)

  # #second graph

  thrd_paid = "SELECT invoicetot from invoice GROUP BY Productserviceid ORDER by COUNT(Productserviceid) DESC LIMIT 1"

  fbcursor.execute(thrd_paid)
  paid_thrd_x= fbcursor.fetchone()
              


  thrd_paid_y = "select name from productservice where Productserviceid=(SELECT Productserviceid from invoice GROUP BY Productserviceid  ORDER by COUNT(Productserviceid) DESC LIMIT 1)"

  fbcursor.execute(thrd_paid_y)

  paid_thrd_y= fbcursor.fetchone()

  figlast = plt.figure(figsize=(9, 4), dpi=80)

  x=paid_thrd_y
  y=paid_thrd_x   
  plt.barh(x,y, label="Top Product Sales", color="blue") 
  plt.legend()
  plt.xlabel("Total Sales")
  plt.ylabel("")
  axes=plt.gca()
  axes.xaxis.grid()
  

  canvasbar = FigureCanvasTkAgg(figlast, master=reportframe)
  canvasbar.draw()
  canvasbar.get_tk_widget().place(x=650, y=372)  
  lbl_ir = Label(reportframe, text="                                                                                                                                                                                                                                       ", bg="white" , font=("arial", 15))
  lbl_ir.place(x=0,y=692)

  lbl_ir = Label(reportframe, text="Right Click On Each Chart For More Options", bg="white" , font=("arial", 8))
  lbl_ir.place(x=1115,y=85)


  lbl_invdtt2 =Label(reportframe, text="Screen Charts", bg="white" , font=("arial", 16))
  lbl_invdtt2.place(x=2, y=85)

#@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@End Reports@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@


######################## FRONT PAGE OF Settings module #######################################################
  
      
  settingsframe=Frame(tab10, relief=GROOVE, bg="#f8f8f2")
  settingsframe.pack(side="top", fill=BOTH)
  
  settframe=Frame(settingsframe, bg="#f5f3f2", height=60)
  settframe.pack(side="top", fill=X)
  
  pn = Canvas(settframe, width=1, height=65, bg="#b3b3b3", bd=0)
  pn.pack(side="left", padx=(5, 2))
  pn = Canvas(settframe, width=1, height=65, bg="#b3b3b3", bd=0)
  pn.pack(side="left", padx=(0, 5))
  # def upload_filelogo():
  #   global imglogo,filename
  #   f_types =[('Png files','*.png'),('Jpg Files', '*.jpg')]
  #   filena = filedialog.askopenfilename(filetypes=f_types)
  #   shutil.copyfile(filena, os.getcwd()+'/images/'+filena.split('/')[-1])
  #   print(filena.split('/')[-1])
  #   image = Image.open(filena)
  #   resize_image = image.resize((280, 160))
  #   imglogo = ImageTk.PhotoImage(resize_image)
    # b2 = Button(secondtab,image=img)
    # b2.place(x=130, y=80)
  
    # btlogo = Button(secondtab,width=280,height=160,image=imglogo)
    # btlogo.place(x=580,y=280)
  global filename
  filename = ""
  def save_company():
    #save date tab 04,03------------------------------------------------------------------------------
    sql_03_tb='select * from invoice_settings'
    fbcursor.execute(sql_03_tb)
    mt_tb=fbcursor.fetchone()

    if mt_tb is None:
        
        stt_tbl_add="INSERT INTO invoice_settings(invoice_prefix,starting_invoice_number,bgcolour,invoice,invoice2,invoice_date,order_ref,terms,invoice_to,ship_to,id_sku,product_service,quantity,	description,	unit_price,price,subtotal,discount,	discount_rate,tax1,invoice_total,total_paid,balance,	terms_conditions,	tax_exempted,page,of,terms_notes)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)" #adding values into db
        stt_tbl_add_val=(inv_tp_lf.get(),inv_spn_bx.get(),invset_bg_var.get(),inv_lst_bx1.get(1.0,END),inv_lst_bx2.get(1.0,END),inv_lst_bx3.get(1.0,END),inv_lst_bx4.get(1.0,END),inv_lst_bx5.get(1.0,END),inv_lst_bx6.get(1.0,END),inv_lst_bx7.get(1.0,END),inv_lst_bx8.get(1.0,END),inv_lst_bx9.get(1.0,END),inv_lst_bx10.get(1.0,END),inv_lst_bx11.get(1.0,END),inv_lst_bx12.get(1.0,END),inv_lst_bx13.get(1.0,END),inv_lst_bx14.get(1.0,END),inv_lst_bx15.get(1.0,END),inv_lst_bx16.get(1.0,END),inv_lst_bx17.get(1.0,END),inv_lst_bx18.get(1.0,END),inv_lst_bx19.get(1.0,END),inv_lst_bx20.get(1.0,END),inv_lst_bx21.get(1.0,END),inv_lst_bx22.get(1.0,END),inv_lst_bx23.get(1.0,END),inv_lst_bx24.get(1.0,END),inv_txt.get("1.0",END))
        fbcursor.execute(stt_tbl_add,stt_tbl_add_val)
        fbilldb.commit()
    else:
        stt_tbl_updt="update invoice_settings set invoice_prefix=%s,starting_invoice_number=%s,bgcolour=%s,invoice=%s,invoice2=%s,invoice_date=%s,order_ref=%s,terms=%s,invoice_to=%s,ship_to=%s,id_sku=%s,product_service=%s,quantity=%s,	description=%s,	unit_price=%s,price=%s,subtotal=%s,discount=%s,	discount_rate=%s,tax1=%s,invoice_total=%s,total_paid=%s,balance=%s,	terms_conditions=%s,tax_exempted=%s,page=%s,of=%s,terms_notes=%s" #adding values into db
        stt_tbl_updt_val=(inv_tp_lf.get(),inv_spn_bx.get(),invset_bg_var.get(),inv_lst_bx1.get(1.0,END),inv_lst_bx2.get(1.0,END),inv_lst_bx3.get(1.0,END),inv_lst_bx4.get(1.0,END),inv_lst_bx5.get(1.0,END),inv_lst_bx6.get(1.0,END),inv_lst_bx7.get(1.0,END),inv_lst_bx8.get(1.0,END),inv_lst_bx9.get(1.0,END),inv_lst_bx10.get(1.0,END),inv_lst_bx11.get(1.0,END),inv_lst_bx12.get(1.0,END),inv_lst_bx13.get(1.0,END),inv_lst_bx14.get(1.0,END),inv_lst_bx15.get(1.0,END),inv_lst_bx16.get(1.0,END),inv_lst_bx17.get(1.0,END),inv_lst_bx18.get(1.0,END),inv_lst_bx19.get(1.0,END),inv_lst_bx20.get(1.0,END),inv_lst_bx21.get(1.0,END),inv_lst_bx22.get(1.0,END),inv_lst_bx23.get(1.0,END),inv_lst_bx24.get(1.0,END),inv_txt.get("1.0",END))
        fbcursor.execute(stt_tbl_updt,stt_tbl_updt_val)
        fbilldb.commit()
    #------------------------------------------------------------------------------------------order settings
    sq_tab4='select * from order_settings'
    fbcursor.execute(sq_tab4)
    mt_tb=fbcursor.fetchone()
    if mt_tb is None:
        stt_04_add="INSERT INTO order_settings(invoice_prefix,	starting_invoice_number,	bgcolour,	orders,	order2,order_date,	due_date,order_to,order_total,footer_note)VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)" #adding values into db
        stt_04_add_val=(ord_lft_tp.get(),ord_spn_bx.get(),ord_man_var.get(),ord_lft_tp1.get(1.0,END),ord_lft_tp2.get(1.0,END),ord_lft_tp3.get(1.0,END),ord_lft_tp4.get(1.0,END),ord_lft_tp5.get(1.0,END),ord_lft_tp6.get(1.0,END),ord_scrl_txt.get("1.0",END))
        fbcursor.execute(stt_04_add,stt_04_add_val)
        fbilldb.commit()
    else:
        stt_04_updt="update order_settings set invoice_prefix=%s,starting_invoice_number=%s,bgcolour=%s,orders=%s,order2=%s,order_date=%s,due_date=%s,order_to=%s,order_total=%s,footer_note=%s" #adding values into db
        stt_04_updt_val=(ord_lft_tp.get(),ord_spn_bx.get(),ord_man_var.get(),ord_lft_tp1.get(1.0,END),ord_lft_tp2.get(1.0,END),ord_lft_tp3.get(1.0,END),ord_lft_tp4.get(1.0,END),ord_lft_tp5.get(1.0,END),ord_lft_tp6.get(1.0,END),ord_scrl_txt.get("1.0",END))
        fbcursor.execute(stt_04_updt,stt_04_updt_val)
        fbilldb.commit()
        
    company_name = comname.get()
    company_address = caddent.get(1.0,END)
    company_mail = comemail.get()
    company_salestax =comsalestax.get()
    currency = comcur.get()
    currencysign = comcursign.get()
    currencysign_placement = comcursignpla.get()
    decimal_sepator = comdecsep.get()
    currency_example = comex.get()
    date_format = comdaf.get()
    example_dateformat = exd.get_date()
    tax = radtax.get()
    tax1name = tax1namee.get()
    tax1rate = tax1ratee.get()
    printtax1 = comptax1.get()
    tax2name = tax2namee.get()
    tax2rate = tax2ratee.get()
    printtax2 = comptax2.get()
    printimage = compimg.get()
    win_menu_colour = win_menu.get()
    radiobut = radema.get()
    cbut1 = checkb1.get()
    cbut2 = checkb2.get()
    cbut3 = checkb3.get()
    cbut4 = checkb4.get()
    cbut5 = checkb5.get()
    cbut6 = checkb6.get()
    child = exctree.get_children()
    est_prefix = est_str.get()
    est_header = win_menu1.get()
    est_text1 = est_str1.get()
    est_text2 = est_str2.get()
    est_text3 = est_str3.get()
    est_text4 = est_str4.get()
    est_text5 = est_str5.get()
    est_text6 = est_str6.get()
    est_predefined = est_str7.get(1.0,END)
    est_default = win_menu2.get()
    est_spin1 = spin1.get()
    adv_default = adv_win_menu8.get()
    pord_prefix = prefix_str.get()
    pord_spin = pspin2.get()
    pord_header = pwin_menu.get()
    pord_text1 = pord_str1.get()
    pord_text2 = pord_str2.get()
    pord_text3 = pord_str3.get()
    pord_text4 = pord_str4.get()
    pord_text5 = pord_str5.get()
    pord_text6 = pord_str6.get()
    pord_text7 = pord_str7.get()
    pord_predefind = pord_str8.get(1.0,END)
    combo = em_menu.get()
    textfld = memaiframe.get(1.0,END) 

    var = json.dumps(child)
    sql = "select image from company"
    fbcursor.execute(sql)
    im = fbcursor.fetchone()
    sql = "select * from company"
    fbcursor.execute(sql)
    i = fbcursor.fetchall()
    if not i:
      if filename == "":
        
        sql = 'insert into company(name, address, email,salestaxno,currency,currencysign,currsignplace,  decimalseperator,excurrency,dateformat,exdate,taxtype,printimageornot,tax1name,tax1rate,printtax1,  tax2name,tax2rate,printtax2,attachment_file_type,miscellanoustab_cbutton1,miscellanoustab_cbutton2,miscellanoustab_cbutton3,miscellanoustab_cbutton4,miscellanoustab_cbutton5,miscellanoustab_cbutton6,Estimate_prefix,Customizeestimatetextlabels,Customizeestimatetextlabels1,Customizeestimatetextlabels2,Customizeestimatetextlabels3,Customizeestimatetextlabels4,Customizeestimatetextlabels5,Defaultestimatetemplate,Startingestimatenumber,Predefinedtextforestimates,adv_Selectedtemplatepreview,est_Headerboxbackgroundcolor,porder_prefix,headrebox_color,starting_porderno,text_label1,text_label2,text_label3,text_label4,text_label5,text_label6,text_label7,predefindterms_porder,email_template,text_field) values(%s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s,%s, %s,%s,%s,%s,%s,%s,%s,%s,%s)'
        val = (company_name,company_address,company_mail,company_salestax,currency,currencysign,  currencysign_placement,decimal_sepator,currency_example,date_format,example_dateformat,tax,printimage,  tax1name,tax1rate,printtax1,tax2name,tax2rate,printtax2,radiobut,cbut1,cbut2,cbut3,cbut4,cbut5,cbut6,est_prefix,est_text1,est_text2,est_text3,est_text4,est_text5,est_text6,est_default,est_spin1,est_predefined,adv_default,est_header,pord_prefix,pord_spin,pord_header,pord_text1,pord_text2,pord_text3,pord_text4,pord_text5,pord_text6,pord_text7,pord_predefind,combo,textfld)
        fbcursor.execute(sql, val)
        fbilldb.commit()
      else:
        shutil.copyfile(filename, os.getcwd()+'/images/'+filename.split('/')[-1])
        sql = 'insert into company(name, address, email,salestaxno,currency,currencysign,currsignplace,  decimalseperator,excurrency,dateformat,exdate,taxtype,printimageornot,tax1name,tax1rate,printtax1,  tax2name,tax2rate,printtax2,image,attachment_file_type,miscellanoustab_cbutton1,miscellanoustab_cbutton2,miscellanoustab_cbutton3,miscellanoustab_cbutton4,miscellanoustab_cbutton5,miscellanoustab_cbutton6,Estimate_prefix,Customizeestimatetextlabels,Customizeestimatetextlabels1,Customizeestimatetextlabels2,Customizeestimatetextlabels3,Customizeestimatetextlabels4,Customizeestimatetextlabels5,Defaultestimatetemplate,Startingestimatenumber,Predefinedtextforestimates,adv_Selectedtemplatepreview,est_Headerboxbackgroundcolor,porder_prefix,headrebox_color,starting_porderno,text_label1,text_label2,text_label3,text_label4,text_label5,text_label6,text_label7,predefindterms_porder,email_template,text_field) values(%s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)'
        val = (company_name,company_address,company_mail,company_salestax,currency,currencysign,  currencysign_placement,decimal_sepator,currency_example,date_format,example_dateformat,tax,printimage,  tax1name,tax1rate,printtax1,tax2name,tax2rate,printtax2,filename.split('/')[-1],radiobut,cbut1,cbut2,cbut3,cbut4,cbut5,cbut6,est_prefix,est_text1,est_text2,est_text3,est_text4,est_text5,est_text6,est_default,est_spin1,est_predefined,adv_default,est_header,pord_prefix,pord_spin,pord_header,pord_text1,pord_text2,pord_text3,pord_text4,pord_text5,pord_text6,pord_text7,pord_predefind,combo,textfld)
        fbcursor.execute(sql, val)
        fbilldb.commit()
    else:
      if filename == "":
        sql = "update company set name=%s, address=%s, email=%s,salestaxno=%s,currency=%s,currencysign=%s,  currsignplace=%s,decimalseperator=%s,excurrency=%s,dateformat=%s,exdate=%s,taxtype=%s,  printimageornot=%s,tax1name=%s,tax1rate=%s,printtax1=%s,tax2name=%s,tax2rate=%s,printtax2=%s,attachment_file_type=%s,miscellanoustab_cbutton1=%s,miscellanoustab_cbutton2=%s,miscellanoustab_cbutton3=%s,miscellanoustab_cbutton4=%s,miscellanoustab_cbutton5=%s,miscellanoustab_cbutton6=%s,Estimate_prefix=%s,Customizeestimatetextlabels=%s,Customizeestimatetextlabels1=%s,Customizeestimatetextlabels2=%s,Customizeestimatetextlabels3=%s,Customizeestimatetextlabels4=%s,Customizeestimatetextlabels5=%s,Defaultestimatetemplate=%s,Startingestimatenumber=%s,Predefinedtextforestimates=%s,adv_Selectedtemplatepreview=%s,est_Headerboxbackgroundcolor=%s,porder_prefix=%s,headrebox_color=%s,starting_porderno=%s,text_label1=%s,text_label2=%s,text_label3=%s,text_label4=%s,text_label5=%s,text_label6=%s,text_label7=%s,predefindterms_porder=%s,email_template=%s,text_field=%s"
        val = (company_name,company_address,company_mail,company_salestax,currency,currencysign,  currencysign_placement,decimal_sepator,currency_example,date_format,example_dateformat,tax,printimage,  tax1name,tax1rate,printtax1,tax2name,tax2rate,printtax2,radiobut,cbut1,cbut2,cbut3,cbut4,cbut5,cbut6,est_prefix,est_text1,est_text2,est_text3,est_text4,est_text5,est_text6,est_default,est_spin1,est_predefined,adv_default,est_header,pord_prefix,pord_spin,pord_header,pord_text1,pord_text2,pord_text3,pord_text4,pord_text5,pord_text6,pord_text7,pord_predefind,combo,textfld)
        fbcursor.execute(sql, val)
        fbilldb.commit()
      else:
        shutil.copyfile(filename, os.getcwd()+'/images/'+filename.split('/')[-1])
        sql = "update company set name=%s, address=%s, email=%s,salestaxno=%s,currency=%s,currencysign=%s,  currsignplace=%s,decimalseperator=%s,excurrency=%s,dateformat=%s,exdate=%s,taxtype=%s,  printimageornot=%s,tax1name=%s,tax1rate=%s,printtax1=%s,tax2name=%s,tax2rate=%s,printtax2=%s,image=%s,attachment_file_type=%s,miscellanoustab_cbutton1=%s,miscellanoustab_cbutton2=%s,miscellanoustab_cbutton3=%s,miscellanoustab_cbutton4=%s,miscellanoustab_cbutton5=%s,miscellanoustab_cbutton6=%s,Estimate_prefix=%s,Customizeestimatetextlabels=%s,Customizeestimatetextlabels1=%s,Customizeestimatetextlabels2=%s,Customizeestimatetextlabels3=%s,Customizeestimatetextlabels4=%s,Customizeestimatetextlabels5=%s,Defaultestimatetemplate=%s,Startingestimatenumber=%s,Predefinedtextforestimates=%s,adv_Selectedtemplatepreview=%s,est_Headerboxbackgroundcolor=%s,porder_prefix=%s,headrebox_color=%s,starting_porderno=%s,text_label1=%s,text_label2=%s,text_label3=%s,text_label4=%s,text_label5=%s,text_label6=%s,text_label7=%s,predefindterms_porder=%s,email_template=%s,text_field=%s"
        val = (company_name,company_address,company_mail,company_salestax,currency,currencysign,  currencysign_placement,decimal_sepator,currency_example,date_format,example_dateformat,tax,printimage,  tax1name,tax1rate,printtax1,tax2name,tax2rate,printtax2,filename.split('/')[-1],radiobut,cbut1,cbut2,cbut3,cbut4,cbut5,cbut6,est_prefix,est_text1,est_text2,est_text3,est_text4,est_text5,est_text6,est_default,est_spin1,est_predefined,adv_default,est_header,pord_prefix,pord_spin,pord_header,pord_text1,pord_text2,pord_text3,pord_text4,pord_text5,pord_text6,pord_text7,pord_predefind,combo,textfld)
        fbcursor.execute(sql, val)
        fbilldb.commit()
    


  
  save_setting = Button(settframe,compound="top", text="Save\nSettings",relief=RAISED,    command=save_company, image=saves, font=("arial", 8),bg="#f5f3f2", fg="black", height=55, bd=1, width=55)
  save_setting.pack(side="left", pady=3, ipadx=4)
  pn = Canvas(settframe, width=1, height=65, bg="#b3b3b3", bd=0)
  pn.pack(side="left", padx=(0, 5))
  
  def wiz_page():
    global filname
    filname = ""
    def upload_cfilelogo():
      global filname
      f_types =[('Png files','*.png'),('Jpg Files', '*.jpg')]
      filname = filedialog.askopenfilename(filetypes=f_types)
      shutil.copyfile(filname, os.getcwd()+'/images/'+filname.split('/')[-1])
      image = Image.open(filname)
      resize_image = image.resize((280, 140))
      imgclogo = ImageTk.PhotoImage(resize_image)
      btclogo = Button(wiz,width=280,height=140,image=imgclogo)
      btclogo.place(x=30,y=240)
      btclogo.photo = imgclogo
    def csave():
      company_name = company_namee.get()
      company_address = company_addresse.get('1.0', 'end-1c')
      company_email = company_emaile.get()
      salestaxregno = salestaxregnoe.get()
      cprint_logopic = cplogopic.get()
      sql = "select image from company"
      fbcursor.execute(sql)
      im = fbcursor.fetchone()
      sql = "select * from company"
      fbcursor.execute(sql)
      i = fbcursor.fetchall()
      if not i:
        if filname == "":
          sql = 'insert into company(name, address, email,salestaxno,printimageornot) values(%s, %s, %s, %s, %s)'
          val = (company_name,company_address,company_email,salestaxregno,cprint_logopic)
          fbcursor.execute(sql, val)
          fbilldb.commit()
        else:
          shutil.copyfile(filname, os.getcwd()+'/images/'+filname.split('/')[-1])
          sql = 'insert into company(name, address, email,salestaxno,printimageornot,image) values(%s, %s, %s, %s, %s, %s)'
          val = (company_name,company_address,company_email,salestaxregno,cprint_logopic,filname.split('/')[-1],)
          fbcursor.execute(sql, val)
          fbilldb.commit()
      else:
        if filname == "":
          sql = "update company set name=%s, address=%s, email=%s,salestaxno=%s,printimageornot=%s"
          val = (company_name,company_address,company_email,salestaxregno,cprint_logopic)
          fbcursor.execute(sql, val)
          fbilldb.commit()
        else:
          shutil.copyfile(filname, os.getcwd()+'/images/'+filname.split('/')[-1])
          sql = "update company set name=%s, address=%s, email=%s,salestaxno=%s,printimageornot=%s,image=%s"
          val = (company_name,company_address,company_email,salestaxregno,cprint_logopic,filname.split('/')[-1])
          fbcursor.execute(sql, val)
          fbilldb.commit()
      centry.delete(0, END)
      centry.insert(0, company_name)
      caddent.delete('1.0', END)
      caddent.insert('1.0', company_address)
      cemailentry.delete(0, END)
      cemailentry.insert(0, company_email)
      ste.delete(0, END)
      ste.insert(0, salestaxregno)
      if cprint_logopic == 1:
        primage.select()
      else:
        primage.deselect()
      try:
        image = Image.open("images/"+filname.split('/')[-1])
        resize_image = image.resize((280, 160))
        image = ImageTk.PhotoImage(resize_image)
        btlogo = Button(secondtab,width=280,height=160,image=image)
        btlogo.place(x=580,y=280)
        btlogo.photo = image
      except:
        pass
      wiz.destroy()


      
      

    
    wiz = Toplevel()
    wiz.geometry("500x449+400+167")
    wiz.title("Wellcome to Quick Start Wizard")
    sql = "select * from company"
    fbcursor.execute(sql)
    secctab = fbcursor.fetchone()
    comp_infor = Label(wiz,text="Enter Your Company Information",font='arial 13 bold',fg="blue")
    comp_infor.place(x=15,y=15)
    company_da_laframe = LabelFrame(wiz,text="Company data",height=180, width=460)
    company_da_laframe.place(x=15,y=40)
    company_name = Label(wiz,text="Company name")
    company_name.place(x=30,y=60)
    company_namee = Entry(wiz,width=50)
    company_namee.place(x=160,y=60)
    if  not secctab:
      pass
    else:
      company_namee.insert(0, secctab[1])
  
    company_address = Label(wiz,text="Company address")
    company_address.place(x=30,y=90)
    company_addresse = scrolledtext.ScrolledText(wiz,)
    company_addresse.place(x=160,y=90,width=250,height=60)
    if  not secctab:
      pass
    else:
      company_addresse.insert('1.0', secctab[2])

    company_email = Label(wiz,text="Email address")
    company_email.place(x=30,y=160)
    company_emaile = Entry(wiz,width=50)
    company_emaile.place(x=160,y=160)
    if  not secctab:
      pass
    else:
      company_emaile.insert(0, secctab[3])

    salestaxregno = Label(wiz,text="Sales Tax.Reg.No")
    salestaxregno.place(x=30,y=190)
    salestaxregnoe = Entry(wiz,width=50)
    salestaxregnoe.place(x=160,y=190)
    if  not secctab:
      pass
    else:
      salestaxregnoe.insert(0, secctab[4])
    
    
    company_da_laframe = LabelFrame(wiz,text="Company logo",height=190, width=460)
    company_da_laframe.place(x=15,y=220)
    try:
      image_wiz = Image.open("images/"+secctab[13])
      resize_image = image_wiz.resize((280, 140))
      image_wiza = ImageTk.PhotoImage(resize_image)
      btclogo = Button(wiz,width=280,height=140,image=image_wiza)
      btclogo.place(x=30,y=240)
      btclogo.photo = image_wiza
    except:
      pass
    cplogopic = BooleanVar()
    cprint_logopic = Checkbutton(wiz,text='Print logo picture',bg='white',onvalue =1,
                        offvalue = 0,variable=cplogopic)
    cprint_logopic.place(x=320,y=250)
    if  not secctab:
      pass
    else:
      if secctab[14] == 1:
        cprint_logopic.select()
      else:
        cprint_logopic.deselect()
      
    load_img = Button(wiz,text='Load logo image',command=upload_cfilelogo)
    load_img.place(x=320,y=360)
    save_com_wiz = Button(wiz,text='Save',width=10,command=csave)
    save_com_wiz.place(x=370,y=415)

  quick_start_wiz = Button(settframe,compound="top", text="Quick\nStart Wizard ",relief=RAISED,    command=wiz_page, image=photo, font=("arial", 8),bg="#f5f3f2", fg="black", height=55, bd=1, width=55)
  quick_start_wiz.pack(side="left", pady=3, ipadx=4)
  pn = Canvas(settframe, width=1, height=65, bg="#b3b3b3", bd=0)
  pn.pack(side="left", padx=(0, 5))
  
  
  
  invoi1label = Label(settingsframe, text="Settings", font=("arial", 18), bg="#f8f8f2")
  invoi1label.pack(side="left", padx=(20,0))
  
  global tab06
  m = ttk.Style()
  m.theme_use('default')
  m.configure('one.TNotebook.Tab', background="white", width=20, padding=10)
  tabControl = ttk.Notebook(tab10,style='one.TNotebook.Tab')
  tab01 = ttk.Frame(tabControl)
  tab02 = ttk.Frame(tabControl)
  tab03=  ttk.Frame(tabControl)
  tab04 = ttk.Frame(tabControl)
  tab05 = ttk.Frame(tabControl)
  tab06=  ttk.Frame(tabControl)
  tab07 = ttk.Frame(tabControl)
  tab08 = ttk.Frame(tabControl)
  tab09 =  ttk.Frame(tabControl)
  tab010=  ttk.Frame(tabControl)
  tabControl.add(tab01,image=invoices,compound = LEFT, text ='Miscellaneous',)
  tabControl.add(tab02,image=orders,compound = LEFT, text ='Company settings')
  tabControl.add(tab03,image=estimates,compound = LEFT, text ='Invoiced settings')
  tabControl.add(tab04,image=recurring,compound = LEFT, text ='Order settings')
  tabControl.add(tab05,image=purchase,compound = LEFT, text ='Estimate settings') 
  tabControl.add(tab06,image=expenses,compound = LEFT, text ='Administrator panel')
  tabControl.add(tab07,image=customer,compound = LEFT, text ='Advanced settings')
  tabControl.add(tab08,image=product,compound = LEFT, text ='Email templates')
  tabControl.add(tab09,image=reports,compound = LEFT, text ='Payments')
  tabControl.add(tab010,image=setting,compound = LEFT, text ='Purchase Order')
  tabControl.pack(expand = 1, fill ="both")
  
  ################### tab01 ###################################
  sql = "select * from company"
  fbcursor.execute(sql)
  sectab = fbcursor.fetchone()
  
  firsttab1=Frame(tab01, relief=GROOVE, bg="#f8f8f2")
  firsttab1.pack(side="top", fill=BOTH)
  
  firsttab=Frame(firsttab1, bg="#f5f3f2", height=700)
  firsttab.pack(side="top", fill=BOTH)
  
  messagelbframe=LabelFrame(firsttab,text="Menu and Window Color Style", height=60, width=180)
  messagelbframe.place(x=5, y=15)
  
  win_menu = StringVar()
  winstyle = ttk.Combobox(firsttab,textvariable=win_menu)
  winstyle.place(x=22 ,y=40)
  winstyle['values'] = ('whidbey','windows XP','windows 7','windows 8','windows 10')
  winstyle.current(0)
  fbill = Label(firsttab,text="F-Billing Revolution 2022",font="arial 12 bold").place(x=220,y=20)
  
  dbhost=LabelFrame(firsttab,text="Database Server Hostname", height=60, width=415)
  dbhost.place(x=5, y=85)
  
  db = Label(firsttab, text="DESKTOP-2K")
  db.place(x=15,y=110)
  
  exc=LabelFrame(firsttab,text="Extra cost name", height=180, width=415)
  exc.place(x=5, y=155)
  
  
  
  def insert_valueexc():
    i = varexc.get()
    if i == "":
      pass
    else:
      entryexc.delete(0, END)
      sql1 = "select * from company"
      fbcursor.execute(sql1)
      com = fbcursor.fetchone()
      if not com:
        messagebox.showinfo("Alert", "Create Company Settings.")
      else:
        companyid = com[0]
        sql = 'insert into extra_cost_name(companyid,extra_cost_name) values(%s,%s)'
        val = (companyid,i)
        fbcursor.execute(sql,val)
        fbilldb.commit()
        for record in exctree.get_children():
          exctree.delete(record)
        sql = 'select * from extra_cost_name'
        fbcursor.execute(sql)
        setexctree = fbcursor.fetchall()
        countp = 0
        for i in setexctree:
          immm = str(i[2])
          imn = str.replace(immm," ","_")
          exctree.insert(parent='', index='end', iid=countp, text='hello', values=(imn))
          countp += 1
  # new_value = String
        
        
  
  def edit_valueexc(event):
    selected_item = exctree.selection()[0]
    temp = list(exctree.item(selected_item , 'values'))
    entryexc.delete(0, END)
    entryexc.insert(0, temp)
  
  def save_valueexc():
    i = entryexc.get()
    if i == "":
      pass
    else:
      selected0 = exctree.focus()
      valuz1= exctree.item(selected0)["values"]
      idgettingextracnid=valuz1[0]
      print(i,idgettingextracnid)
      sql1 = "select * from company"
      fbcursor.execute(sql1)
      com = fbcursor.fetchone()
      companyid = com[0]
      if not com:
        pass
      else:
        sql = 'update extra_cost_name set extra_cost_name=%s where extra_cost_name=%s'
        val = (i,idgettingextracnid)
        fbcursor.execute(sql,val)
        fbilldb.commit()
        entryexc.delete(0, END)
        for record in exctree.get_children():
            exctree.delete(record)
        fbcursor.execute("select *  from extra_cost_name")
        pandsdata = fbcursor.fetchall()
        countp = 0
        for i in pandsdata:
          immm = str(i[2])
          imn = str.replace(immm," ","_")
          exctree.insert('', index='end', iid=countp, text='', values=(imn))
          countp += 1
    
    
  
  def del_valueexc():
    itemid = exctree.item(exctree.focus())["values"][0]
    sql = "delete from extra_cost_name where extra_cost_name = %s"
    val = (itemid, )
    fbcursor.execute(sql, val)
    fbilldb.commit()
    exctree.delete(exctree.selection()[0])
      
      
  
    
    
    
  
  
  
  scrollbarx = Scrollbar(firsttab, orient=HORIZONTAL)
  scrollbary = Scrollbar(firsttab, orient=VERTICAL)
  exctree = ttk.Treeview(firsttab, columns=("1"),height=40,selectmode='browse', yscrollcommand=scrollbary.set,   xscrollcommand=scrollbarx.set)
  # exctree["show"]='headings'
  scrollbary.config(command=exctree.yview)
  scrollbary.place(x=394,y=200,height=125)
  scrollbarx.config(command=exctree.xview)
  scrollbarx.place(x=15,y=310, width=380)
  exctree.heading('1', text="Extra cost name",)
  # exctree.column('#0', stretch=NO, minwidth=0, width=0)
  exctree.column("#0",width=0,anchor='c', stretch=False)
  exctree.column('1',width=378,anchor='c')
  exctree.place(x=15,y=200,height=115,width=380)
  exctree.bind('<Double-Button-1>' , edit_valueexc)
  sql = 'select * from extra_cost_name'
  fbcursor.execute(sql)
  setexctree = fbcursor.fetchall()
  countp = 0
  for i in setexctree:
      print(i[2])
      immm = str(i[2])
      imn = str.replace(immm," ","_")
      exctree.insert(parent='', index='end', iid=countp, text='', values=(imn))
      countp += 1
  # new_value = StringVar()
  
  # def edit_window_box(val):
      
  #     edit_window = Toplevel(root)
  #     edit_window.title("Edit the value or cancel")
  #     edit_window.geometry("1000x250")
  #     label_edit = Label(edit_window , text='Enter value to edit or press cancel', 
  #     font = ("Times New Roman", 10)).grid(column=0,row=1,padx=0, pady = 2)
  #     #create edit box
  #     edit_box = Entry(edit_window)
  #     edit_box.insert(0,val)
  #     edit_box.grid(column=1,row=1,padx=0,pady=2)
  #     #auto select edit window 
  #     edit_window.focus()
      
  #     def value_assignment(event):
  #         printing = edit_box.get()
  #         new_value.set(printing)
  #         #only destroy will not update the value (perhaps event keeps running in background)
  #         #quit allows event to stop n update value in tree but does not close the window in single click 
  #         #rather on dbl click shuts down entire app 
  #         edit_window.quit()
  #         edit_window.destroy()
      
  #     edit_window.bind('<Return>', value_assignment )
  
  #     B1 = Button(edit_window, text="Okay")
  #     B1.bind('<Button-1>',value_assignment)
  #     B1.grid(column=0,row=10,padx=0, pady = 20)
      
  #     B2 = Button(edit_window, text="Cancel", command = edit_window.destroy).grid(column=1,row=10,padx=10,   pady = 20)
  #     edit_window.mainloop()
      
  # #will explain
  # #variable to hold col value (col clicked)
  # shape1 = IntVar()
  # #tracks both col , row on mouse click
  # def tree_click_handler(event):
  #     cur_item = exctree.item(exctree.focus())
  #     col = exctree.identify_column(event.x)[1:]
  #     rowid = exctree.identify_row(event.y)[1:]
  #     #updates list
  #     shape1.set(col)
  #     try:
  #         x,y,w,h = exctree.bbox('I'+rowid,'#'+col)
  #     except:pass
  #     #tree.tag_configure("highlight", background="yellow")
  #     return(col)
      
  # #code linked to event    
  # exctree.bind('<ButtonRelease-1>', tree_click_handler)
  
  # def edit(event):
  #     try:
  #         selected_item = exctree.selection()[0]
  #         temp = list(exctree.item(selected_item , 'values'))
  #         tree_click_handler
  #         col_selected = int(shape1.get())-1
  #         edit_window_box(temp[col_selected])
  #         #do not run if edit window is open
  #         #use edit_window.mainloop() so value assign after window closes
  #         temp[col_selected] = new_value.get()
  #         exctree.item(selected_item, values= temp)
  #     except: pass
      
      
  # #binding allows to edit on screen double click
  # exctree.bind('<Double-Button-1>' , edit)
  varexc = StringVar()
  entryexc = Entry(firsttab,width=25,textvariable=varexc)
  entryexc.place(x=15,y=173)
  
  btexcadd = Button(firsttab,text="Add new line",command=insert_valueexc)
  btexcadd.place(x=175,y=171)
  
  btexcedit = Button(firsttab,text="Edit line   ",command=save_valueexc)
  btexcedit.place(x=260,y=171)
  btexcadd = Button(firsttab,text=" Delete line  ",command=del_valueexc)
  btexcadd.place(x=330,y=171)
  
  exc=LabelFrame(firsttab,text="Predefined text records for header and footer", height=180, width=415)
  exc.place(x=5, y=350)
  
  def insert_valuepre():
    i = prestr.get()
    if i == "":
      pass
    else:
      entrypre.delete(0, END)
      sql1 = "select * from company"
      fbcursor.execute(sql1)
      com = fbcursor.fetchone()
      if not com:
        messagebox.showinfo("Alert", "Create Company Settings.")
      else:
        companyid = com[0]
        sql = 'insert into header_and_footer(companyid,headerandfooter) values(%s,%s)'
        val = (companyid,i)
        fbcursor.execute(sql,val)
        fbilldb.commit()
        for record in pretree.get_children():
          pretree.delete(record)
        sql = 'select * from header_and_footer'
        fbcursor.execute(sql)
        setexctree = fbcursor.fetchall()
        countp = 0
        for i in setexctree:
          pret = str(i[2])
          pre = str.replace(pret," ","_")
          pretree.insert(parent='', index='end', iid=countp, text='hello', values=(pre))
          countp += 1
  # new_value = String
        
        
  
  def edit_valuepre(event):
    selected_item = pretree.selection()[0]
    temp = list(pretree.item(selected_item , 'values'))
    entrypre.delete(0, END)
    entrypre.insert(0, temp)
  
  def save_valuepre():
    i = prestr.get()
    if i == "":
      pass
    else:
      selected0 = pretree.focus()
      valuz1= pretree.item(selected0)["values"]
      idgettingextracnid=valuz1[0]
      print(i,idgettingextracnid)
      sql1 = "select * from company"
      fbcursor.execute(sql1)
      com = fbcursor.fetchone()
      companyid = com[0]
      if not com:
        pass
      else:
        sql = 'update header_and_footer set headerandfooter=%s where headerandfooter=%s'
        val = (i,idgettingextracnid)
        fbcursor.execute(sql,val)
        fbilldb.commit()
        entryexc.delete(0, END)
        for record in pretree.get_children():
            pretree.delete(record)
        fbcursor.execute("select *  from header_and_footer")
        pandsdata = fbcursor.fetchall()
        countp = 0
        for i in pandsdata:
          pret = str(i[2])
          pre = str.replace(pret," ","_")
          pretree.insert('', index='end', iid=countp, text='', values=(pre))
          countp += 1
    
    
  
  def del_valuepre():
    itemid = pretree.item(pretree.focus())["values"][0]
    print(itemid)
    sql = "delete from header_and_footer where headerandfooter = %s"
    val = (itemid,)
    fbcursor.execute(sql, val)
    fbilldb.commit()
    for record in pretree.get_children():
      pretree.delete(record)
    fbcursor.execute("select *  from header_and_footer")
    pandsdata = fbcursor.fetchall()
    countp = 0
    for i in pandsdata:
      pret = str(i[2])
      pre = str.replace(pret," ","_")
      pretree.insert('', index='end', iid=countp, text='', values=(pre))
      countp += 1
    
      
  
  scrollbarx = Scrollbar(firsttab, orient=HORIZONTAL)
  scrollbary = Scrollbar(firsttab, orient=VERTICAL)
  pretree = ttk.Treeview(firsttab, columns=("1"),height=400,     selectmode="extended",   yscrollcommand=scrollbary.set, xscrollcommand=scrollbarx.set)
  # exctree["show"]='headings'
  scrollbary.config(command=pretree.yview)
  scrollbary.place(x=395,y=400,height=115)
  scrollbarx.config(command=pretree.xview)
  scrollbarx.place(x=15,y=510, width=380)
  pretree.heading('1', text="header and footer",)
  pretree.column('#0', stretch=NO, minwidth=0, width=0)
  pretree.column('1', stretch=NO, width=378)
  pretree.place(x=15,y=400,height=115,width=380)
  pretree.bind('<Double-Button-1>' , edit_valuepre)
  sql = 'select * from header_and_footer'
  fbcursor.execute(sql)
  setexctree = fbcursor.fetchall()
  countp = 0
  for i in setexctree:
    pret = str(i[2])
    pre = str.replace(pret," ","_")
    pretree.insert(parent='', index='end', iid=countp, text='hello', values=(pre))
    countp += 1
  prestr = StringVar()
  entrypre = Entry(firsttab,width=25,textvariable=prestr)
  entrypre.place(x=15,y=370)
  btexcadd = Button(firsttab,text="Add new line",command=insert_valuepre)
  btexcadd.place(x=175,y=370)
  btpredit = Button(firsttab,text="Edit line   ",command=save_valuepre)
  btpredit.place(x=260,y=370)
  btexcadd = Button(firsttab,text=" Delete line   ",command=del_valuepre)
  btexcadd.place(x=330,y=370)
  
  ver = Label(firsttab,text="FREE version.Upgrade PRO version for all features and Ad free invoice")
  ver.place(x=480,y=15)
  
  
  chapass=LabelFrame(firsttab,text="Change Password", height=150, width=500)
  chapass.place(x=480, y=40)
  
  enterold = StringVar()
  lenold = Label(firsttab,text="Enter your old password")
  lenold.place(x=495,y=60)
  enold = Entry(firsttab,textvariable=enterold)
  enold.place(x=640,y=60)
  
  enternew = StringVar()
  ennew = Label(firsttab,text="New password")
  ennew.place(x=495,y=90)
  newpass = Entry(firsttab,textvariable=enternew)
  newpass.place(x=640,y=90)
  
  
  cnewpass = StringVar()
  cnp = Label(firsttab,text="Confirm new password")
  cnp.place(x=495,y=120)
  cnewp = Entry(firsttab,textvariable=cnewpass)
  cnewp.place(x=640,y=120)

  def change_pass():
    old_pass = enterold.get()
    new_pass = enternew.get()
    cnew_pass = cnewpass.get()
    usna = username1.get()
    print(usna)
    sql='SELECT * FROM users WHERE username=%s'
    val=(usna,)
    fbcursor.execute(sql,val)
    chpass = fbcursor.fetchone()
    print(chpass)
    if old_pass == "" or new_pass == "" or cnew_pass == "":
        messagebox.showerror('Password Error','Plz enter password')
    elif old_pass == chpass[4]:
      if new_pass == cnew_pass:
        sqll='UPDATE users SET password=%s,confirm_password=%s WHERE userID=%s'
        vall=(new_pass,cnew_pass,chpass[0])
        fbcursor.execute(sqll,vall,)
        fbilldb.commit()
        messagebox.showinfo('Updated','Password updated successfully')
      else:
        messagebox.showerror('Password Error','password is not match')
    else:
      messagebox.showerror('Password Error','Old Password is Incorrect')
  chabtn = Button(firsttab,text="Change password",command=change_pass)
  chabtn.place(x=840,y=150)
  
  termf=LabelFrame(firsttab,text="Terms of payment", height=150, width=500)
  termf.place(x=480, y=190)


  def insert_valueterm():
    first = entrytopstr.get()
    second = entrydsstr.get()
    if first == "" or second == "":
      pass
    else:
      entrytop.delete(0, END)
      entryds.delete(0, END)
      sql1 = "select * from company"
      fbcursor.execute(sql1)
      com = fbcursor.fetchone()
      if not com:
        messagebox.showinfo("Alert", "Create Company Settings.")
      else:
        companyid = com[0]
        sql = 'insert into terms_of_payment(companyid,terms_of_payment,Date_shift) values(%s,%s,%s)'
        val = (companyid,first,second)
        fbcursor.execute(sql,val)
        fbilldb.commit()
        for record in termtree.get_children():
          termtree.delete(record)
        sql = 'select * from terms_of_payment'
        fbcursor.execute(sql)
        setexctree = fbcursor.fetchall()
        countp = 0
        for i in setexctree:
          
          termtree.insert(parent='', index='end', iid=countp, text='hello', values=(i[2],i[3]))
          countp += 1
  # new_value = String
        
        
  
  def edit_valueterm(event):
    itemid = termtree.item(termtree.focus())["values"][0]
    sql = "select * from terms_of_payment where terms_of_payment = %s"
    val = (itemid,)
    fbcursor.execute(sql,val)
    editterm = fbcursor.fetchone()
    entrytop.delete(0, END)
    entryds.delete(0, END)
    entrytop.insert(0, editterm[2])
    entryds.insert(0, editterm[3])
  
  def save_valueterm():
    first = entrytopstr.get()
    second = entrydsstr.get()
    if first == "" or second == "":
      pass
    else:
      itemid = termtree.item(termtree.focus())["values"][0]
      sql1 = "select * from company"
      fbcursor.execute(sql1)
      com = fbcursor.fetchone()
      if not com:
        pass
      else:
        sql = "select * from terms_of_payment where terms_of_payment=%s"
        val = (itemid,)
        fbcursor.execute(sql,val)
        payt = fbcursor.fetchone()
        sql2 = 'update terms_of_payment set terms_of_payment=%s,Date_shift=%s where terms_of_paymentID=%s'
        val2 = (first,second,payt[0])
        fbcursor.execute(sql2,val2)
        fbilldb.commit()
        entrytop.delete(0, END)
        entryds.delete(0, END)
        for record in termtree.get_children():
          termtree.delete(record)
        fbcursor.execute("select *  from terms_of_payment")
        pandsdata = fbcursor.fetchall()
        countp = 0
        for i in pandsdata:
          
          termtree.insert(parent='', index='end', iid=countp, text='hello', values=(i[2],i[3]))
          countp += 1
    
    
  
  def del_valueterm():
    itemid = termtree.item(termtree.focus())["values"][0]
    print(itemid)
    sql = "delete from terms_of_payment where terms_of_payment = %s"
    val = (itemid,)
    fbcursor.execute(sql, val)
    fbilldb.commit()
    for record in termtree.get_children():
        termtree.delete(record)
    fbcursor.execute("select *  from terms_of_payment")
    pandsdata = fbcursor.fetchall()
    countp = 0
    for i in pandsdata:
      termtree.insert(parent='', index='end', iid=countp, text='hello', values=(i[2],i[3]))
      countp += 1
  
  
  
  scrollbarx = Scrollbar(firsttab, orient=HORIZONTAL)
  scrollbary = Scrollbar(firsttab, orient=VERTICAL)
  termtree = ttk.Treeview(firsttab, columns=("1","2"),height=400,selectmode="extended",   yscrollcommand=scrollbary.set, xscrollcommand=scrollbarx.set)
  # exctree["show"]='headings'
  scrollbary.config(command=termtree.yview)
  scrollbary.place(x=870,y=228,height=100)
  scrollbarx.config(command=termtree.xview)
  scrollbarx.place(x=495,y=313, width=380)
  termtree.heading('1', text="Terms of payment",)
  termtree.heading('2', text="Date shift (days)",)
  termtree.column('#0', stretch=NO, minwidth=0, width=0)
  termtree.column('1', stretch=NO, minwidth=0, width=250)
  termtree.column('2', stretch=NO, minwidth=0, width=128)
  termtree.place(x=495,y=235,height=80,width=380)
  termtree.bind('<Double-Button-1>' , edit_valueterm)

  sql = 'select * from terms_of_payment'
  fbcursor.execute(sql)
  termt = fbcursor.fetchall()
  countp = 0
  for i in termt:
      termtree.insert(parent='', index='end', iid=countp, text='hello', values=(i[2],i[3]))
      countp += 1
  entrytopstr = StringVar()
  entrytop = Entry(firsttab,width=25,textvariable=entrytopstr)
  entrytop.place(x=495,y=208)
  entrydsstr = StringVar()
  entryds = Entry(firsttab,textvariable=entrydsstr)
  entryds.place(x=670,y=208)
  bttermadd = Button(firsttab,text="Add new line",command=insert_valueterm)
  bttermadd.place(x=800,y=205)
  bttermedit = Button(firsttab,text="     Edit line  ",command=save_valueterm)
  bttermedit.place(x=890,y=205)
  bttermdel = Button(firsttab,text="  Delete line  ",command=del_valueterm)
  bttermdel.place(x=890,y=240)
  
  radem=LabelFrame(firsttab,text="Invoice/Oder/Estimate/P.order Email Attachment file type", height=60,   width=500)
  radem.place(x=480, y=340)
  radema = StringVar()
  radpdf = Radiobutton(firsttab,variable=radema,value="PDF",text='PDF')
  radpdf.place(x= 485, y= 360 )
  radhtml = Radiobutton(firsttab,variable=radema,value="HTML",text='HTML')
  radhtml.place(x= 660, y= 360 )
  if  not sectab:
    pass
  else:
    if sectab[22] == 'PDF':
      radpdf.select()
    elif sectab[22] == 'HTML':
      radhtml.select()
    else:
      pass
  
  checkb1 = IntVar()
  check1 = Checkbutton(firsttab,variable = checkb1, 
                        text="PDF attachment with Embedded Fonts (PDF file size will be larger,but readable on   all devices) ", 
                        onvalue =1 ,
                        offvalue = 0,
                        )
  
  check1.place(x=480,y=400)
  if  not sectab:
    pass
  else:
    if sectab[23] == 1:
      check1.select()
    else:
      check1.deselect()
  
  checkb2 = IntVar()
  check2 = Checkbutton(firsttab,variable = checkb2, 
                        text="invoice numbering with leading zero and current year", 
                        onvalue =1 ,
                        offvalue = 0,
                       )
  
  check2.place(x=480,y=420)
  if  not sectab:
    pass
  else:
    if sectab[24] == 1:
      check2.select()
    else:
      check2.deselect()
  
  checkb3 = IntVar()
  check3 = Checkbutton(firsttab,variable = checkb3, 
                        text="Order numbering with leading zero and current year", 
                        onvalue =1 ,
                        offvalue = 0,
                        )
  
  check3.place(x=480,y=440)
  if  not sectab:
    pass
  else:
    if sectab[25] == 1:
      check3.select()
    else:
      check3.deselect()
  
  checkb4 = IntVar()
  check4 = Checkbutton(firsttab,variable = checkb4, 
                        text="Estimate numbering with leading zero and current year", 
                        onvalue =1 ,
                        offvalue = 0,
                       )
  
  check4.place(x=480,y=460)
  if  not sectab:
    pass
  else:
    if sectab[26] == 1:
      check4.select()
    else:
      check4.deselect()
  
  checkb5 = IntVar()
  check5 = Checkbutton(firsttab,variable = checkb5, 
                        text="Purchsae order numbering with leading zero and current year", 
                        onvalue =1 ,
                        offvalue = 0,
                        )
  check5.place(x=480,y=480)
  if  not sectab:
    pass
  else:
    if sectab[27] == 1:
      check5.select()
    else:
      check5.deselect()
  
  checkb6 = IntVar()
  check6 = Checkbutton(firsttab,variable = checkb6, 
                        text="Confirmation before closing F-billing Revolution", 
                        onvalue =1 ,
                        offvalue = 0,
                      )
  
  check6.place(x=480,y=500)
  if  not sectab:
    pass
  else:
    if sectab[28] == 1:
      check6.select()
    else:
      check6.deselect()
  
  ################### tab02 ###################################
  sql = "select * from company"
  fbcursor.execute(sql)
  sectab = fbcursor.fetchone()
  print(sectab)
  
  
  secondtab1=Frame(tab02, relief=GROOVE, bg="#f8f8f2")
  secondtab1.pack(side="top", fill=BOTH)
  
  secondtab=Frame(secondtab1, bg="#f5f3f2", height=700)
  secondtab.pack(side="top", fill=BOTH)
  
  comdata=LabelFrame(secondtab,text="Company data", height=200, width=500)
  comdata.place(x=5, y=15)
  cname = Label(secondtab,text="Company name")
  cname.place(x=20, y =35)
  comname = StringVar()
  centry = Entry(secondtab,textvariable=comname)
  if  not sectab:
    pass
  else:
    centry.insert(0, sectab[1])
  centry.place(x=160,y=35,width=280)
  
  
  cadd = Label(secondtab,text="Company Address")
  cadd.place(x=20, y =65)
  caddent = scrolledtext.ScrolledText(secondtab)
  if  not sectab:
    pass
  else:
    caddent.insert('1.0', sectab[2])
  caddent.place(x=160,y=65,height=80,width=280)
  
  cemail = Label(secondtab,text="E-mail Address")
  cemail.place(x=20, y =160)
  comemail = StringVar()
  cemailentry = Entry(secondtab,textvariable=comemail)
  if  not sectab:
    pass
  else:
    cemailentry.insert(0, sectab[3])
  cemailentry.place(x=160,y=160,width=280)
  
  stl = Label(secondtab,text="sales Tax.Reg.No.")
  stl.place(x=20, y =185)
  comsalestax = StringVar()
  ste = Entry(secondtab,textvariable=comsalestax)
  if  not sectab:
    pass
  else:
    ste.insert(0, sectab[4])
  ste.place(x=160,y=185,width=280)
  
  
  curre=LabelFrame(secondtab,text="Currency", height=125, width=500)
  curre.place(x=5, y=220)
  currl = Label(secondtab,text="Currency")
  currl.place(x=20,y= 240)
  comcur = StringVar()
  currbox = ttk.Combobox(secondtab,width=10,textvariable=comcur)
  currbox['values'] =('ALL','AFN','ARS','AWG','AUD','AZN','BSD','BBD','BYN','BZD','BMD','BOB','BAM','BWP',  'BGN','BRL','BND','KHR','CAD','KYD','CLP','CNY','COP','CRC','HRK','CUP','CZK','DKK','DOP','XCD','EGP','SVC',  'EUR','FKP','FJD','GHS','GIP','GTQ','GGP','GYD','HNL','HKD','HUF','ISK','INR','IDR','IRR','IMP','ILS','JMD',  'JPY','JEP','KZT','KPW','KRW','KGS','LAK','LBP','LRD','MKD','MYR','MUR','MXN','MNT','MNT','MZN','NAD','NPR',  'ANG','NZD','NIO','NGN','NOK','OMR','PKR','PAB','PYG','PEN','PHP','PLN','QAR','RON','RUB','SHP','SAR','RSD',  'SCR','SGD','SBD','SOS','KRW','ZAR','LKR','SEK','CHF','SRD','SYP','TWD','THB','TTD','TRY','TVD','UAH','AED',  'GBP','USD','UYU','UZS','VEF','VND','YER','ZWD',)
  if  not sectab:
    pass
  elif sectab[5]:
    currbox.insert(0, sectab[5])
  currbox.place(x=80,y=240)
  
  def signpl(event):
    amsgpl = comcursignpla.get()
    currsign = comcursign.get()
    if amsgpl == "before amount":
      exbox.delete(0, END)
      exbox.insert(0, currsign+'8347.26')
    elif amsgpl == "after amount":
      exbox.delete(0, END)
      exbox.insert(0, '8347.26'+currsign)
    elif amsgpl == "before amount with space":
      exbox.delete(0, END)
      exbox.insert(0, currsign+'  8347.26')
    elif amsgpl == "after amount with space":
      exbox.delete(0, END)
      exbox.insert(0, '8347.26  '+currsign)
  
  
  currsignl = Label(secondtab,text="Currency sign")
  currsignl.place(x=180,y=240)
  comcursign = StringVar()
  currsignbox = ttk.Combobox(secondtab,width=10,textvariable=comcursign)
  currsignbox.bind("<<ComboboxSelected>>", signpl)
  currsignbox["values"] = ('Lek','؋','$','ƒ','$','₼','$','$','Br','BZ$','$','$b','KM','P','лв','R$','$','៛',  '$','$','$','¥','$','₡','kn','₱','Kč','kr','RD$','$','£','$','€','£','$','¢','£','Q','£','$','L','$','Ft',  'kr','₹','Rp','﷼','£','₪','J$','¥','£','лв','₩','₩','₭','£','$','ден','RM','₨','$','₮',' د.إ','MT','$','₨',  'ƒ','$','C$','₦','kr','﷼','₨','B/.','Gs','S/.','₱','zł','﷼','lei','₽','£','﷼','Дин.','₨','S','₩','R','₨',  'kr','CHF','£','NT$','฿','TT$','₺','$','₴','د.إ','$U','лв','Bs','₫','﷼','Z$')
  if  not sectab:
    pass
  elif sectab[6]:
    currsignbox.insert(0, sectab[6])
  currsignbox.place(x=265,y=240)
  
  cspl = Label(secondtab,text="Currency sign placement")
  cspl.place(x=20,y=270)
  
  def amountsignspace(event):
    amsgpl = comcursignpla.get()
    currsign = comcursign.get()
    if amsgpl == "before amount":
      exbox.delete(0, END)
      exbox.insert(0, currsign+'8347.26')
    elif amsgpl == "after amount":
      exbox.delete(0, END)
      exbox.insert(0, '8347.26'+currsign)
    elif amsgpl == "before amount with space":
      exbox.delete(0, END)
      exbox.insert(0, currsign+'  8347.26')
    elif amsgpl == "after amount with space":
      exbox.delete(0, END)
      exbox.insert(0, '8347.26  '+currsign)
    
      
      
  comcursignpla = StringVar()
  cspe = ttk.Combobox(secondtab,width=24,textvariable=comcursignpla,)
  cspe.bind("<<ComboboxSelected>>", amountsignspace)
  cspe["values"] = ("before amount","after amount",'before amount with space',"after amount with space")
  if  not sectab:
    pass
  elif sectab[7]:
    cspe.insert(0, sectab[7])
  cspe.place(x=180,y=270)
  
  def decpl(event):
    dec = comdecsep.get()
    ex = comex.get()
    if dec == ",":
      var = str.replace(ex,".",",")
      exbox.delete(0, END)
      exbox.insert(0, var)
    elif dec == ".":
      var1 = str.replace(ex,",",".")
      exbox.delete(0, END)
      exbox.insert(0, var1)
  dsl = Label(secondtab,text="Decimal separator")
  dsl.place(x=20,y=300)
  comdecsep = StringVar()
  currbox = ttk.Combobox(secondtab,width=5,textvariable=comdecsep)
  currbox.bind("<<ComboboxSelected>>",decpl)
  currbox['values'] = ('.',',')
  if  not sectab:
    pass
  elif sectab[8]:
    currbox.insert(0, sectab[8])
  currbox.place(x=130,y=300)
  
  exl = Label(secondtab,text="Example")
  exl.place(x=185,y=300)
  comex = StringVar()
  exbox = Entry(secondtab,width=15,textvariable=comex)
  if  not sectab:
    exbox.insert(0, 84367.26)
  elif sectab[9]:
    exbox.insert(0, sectab[9])
  exbox.place(x=245,y=300)
  
  btred = Button(secondtab,text="Restore Default")
  btred.place(x=400,y=270)
  btsc = Button(secondtab,text="SET CURRENCY")
  btsc.place(x=400,y=300)
  
  datef=LabelFrame(secondtab,text="Date format", height=60, width=500)
  datef.place(x=5, y=355)
  
  def daffun(event):
    dafget = daf.get()
    if dafget == "mm-dd-yyyy":
      exd._set_text(exd._date.strftime('%m-%d-%Y'))
    elif dafget == "dd-mm-yyyy":
      exd._set_text(exd._date.strftime('%d-%m-%Y'))
    elif dafget == "yyy.mm.dd":
      exd._set_text(exd._date.strftime('%Y.%m.%d'))
    elif dafget == "mm/dd/yyyy":
      exd._set_text(exd._date.strftime('%m/%d/%Y'))
    elif dafget == "dd/mm/yyy":
      exd._set_text(exd._date.strftime('%d/%m/%Y'))
    elif dafget == "dd.mm.yyyy":
      exd._set_text(exd._date.strftime('%d.%m.%Y'))
    elif dafget == "yyyy/mm/dd":
      exd._set_text(exd._date.strftime('%Y/%m/%d'))
    
  
  comdaf = StringVar()
  daf = ttk.Combobox(secondtab,textvariable=comdaf)
  daf["values"] = ("Default",'mm-dd-yyyy','dd-mm-yyyy','yyy.mm.dd','mm/dd/yyyy','dd/mm/yyy','dd.mm.yyyy','yyyy/  mm/dd')
  daf.bind("<<ComboboxSelected>>",daffun)
  if not sectab:
    pass
  elif sectab[10]:
    daf.insert(0, sectab[10])
  daf.place(x=60,y=380)
  
  
  exd = DateEntry(secondtab,)
  exd.place(x=280,y=380)
  if  not sectab:
    pass
  elif sectab[11]:
    exd.delete(0, END)
    exd.insert(0, sectab[11])
  
  tnr=LabelFrame(secondtab,text="Tax name and rate", height=200, width=500)
  tnr.place(x=560, y=15)
  
  stt=LabelFrame(secondtab,text="Select tax type", height=120, width=180)
  stt.place(x=580, y=30)
  def rtax1():
    ch = radtax.get()
    if ch == 1:
      tax1namel.place_forget()
      tax1namee.place_forget()
      tax1ratel.place_forget()
      tax1ratee.place_forget()
      tax1ratee.place_forget()
      ptax1.place_forget()
  
      tax2namel.place_forget()
      tax2namee.place_forget()
      tax2ratel.place_forget()
      tax2ratee.place_forget()
      ptax2.place_forget()
    elif ch == 2:
      tax1namel.place(x=800, y=40)
      tax1namee.place(x=880,y=40)
      tax1ratel.place(x=800, y=70)
      tax1ratee.place(x=880,y=70)
      ptax1.place(x=580,y=160)
      tax2namel.place_forget()
      tax2namee.place_forget()
      tax2ratel.place_forget()
      tax2ratee.place_forget()
      ptax2.place_forget()
    elif ch == 3:
      tax1namel.place(x=800, y=40)
      tax1namee.place(x=880,y=40)
      tax1ratel.place(x=800, y=70)
      tax1ratee.place(x=880,y=70)
      ptax1.place(x=580,y=160)
      tax2namel.place(x=800, y=110)
      tax2namee.place(x=880,y=110)
      tax2ratel.place(x=800, y=140)
      tax2ratee.place(x=880,y=140)
      ptax2.place(x=580,y=185)
    
  radtax = IntVar()
  rdnotax = Radiobutton(secondtab,text="Do not use TAX",value="1",variable=radtax,command=rtax1)
  rdnotax.place(x=590,y=50)
  
  
  rdtax1 = Radiobutton(secondtab,text="1 level of Tax",value="2",variable=radtax,command=rtax1)
  rdtax1.place(x=590,y=80)
  ptax01 = IntVar()
  tax1namel = Label(secondtab,text="Tax1 name")
  
  
  tax1namee = Entry(secondtab)
  if  not sectab:
    pass
  elif sectab[15]:
    tax1namee.insert(0, sectab[15])
  tax1namee.place(x=60,y=380)
  
  
  tax1ratel = Label(secondtab,text="Tax1 rate")
  
  
  tax1ratee = Entry(secondtab)
  if  not sectab:
    pass
  elif sectab[16]:
    tax1ratee.insert(0, sectab[16])
  
  comptax1 = BooleanVar()
  ptax1 = Checkbutton(secondtab,text="Print TAX1" ,onvalue =1 ,offvalue = 0,variable=comptax1)
  if  not sectab:
    pass
  elif sectab[17] == 1:
    ptax1.select()
  else:
    ptax1.deselect()
  
  rdtax2 = Radiobutton(secondtab,text="2 level of Tax",value="3",variable=radtax,command=rtax1)
  rdtax2.place(x=590,y=110)
  
  
  tax2namel = Label(secondtab,text="Tax2 name")
  
  
  tax2namee = Entry(secondtab)
  if  not sectab:
    pass
  elif sectab[18]:
    tax2namee.insert(0, sectab[18])
  
  tax2ratel = Label(secondtab,text="Tax2 rate")
  
  tax2ratee = Entry(secondtab)
  if  not sectab:
    pass
  elif sectab[19]:
    tax2ratee.insert(0, sectab[19])
  
  comptax2 = BooleanVar()
  ptax2 = Checkbutton(secondtab,text="Print TAX2" ,onvalue =1 ,offvalue = 0,variable=comptax2)
  if  not sectab:
    pass
  else:
    if sectab[20] == 1:
      ptax2.select()
    else:
      ptax2.deselect()
  
  if  not sectab:
    pass
  else:
    if sectab[12] == "1":
      rdnotax.select()
      tax1namel.place_forget()
      tax1namee.place_forget()
      tax1ratel.place_forget()
      tax1ratee.place_forget()
      tax1ratee.place_forget()
      ptax1.place_forget()
  
      tax2namel.place_forget()
      tax2namee.place_forget()
      tax2ratel.place_forget()
      tax2ratee.place_forget()
      ptax2.place_forget()
    elif sectab[12] == "2":
      tax1namel.place(x=800, y=40)
      tax1namee.place(x=880,y=40)
      tax1ratel.place(x=800, y=70)
      tax1ratee.place(x=880,y=70)
      ptax1.place(x=580,y=160)
      tax2namel.place_forget()
      tax2namee.place_forget()
      tax2ratel.place_forget()
      tax2ratee.place_forget()
      ptax2.place_forget()
      rdtax1.select()
    elif sectab[12] == "3":
      rdtax2.select()
      tax1namel.place(x=800, y=40)
      tax1namee.place(x=880,y=40)
      tax1ratel.place(x=800, y=70)
      tax1ratee.place(x=880,y=70)
      ptax1.place(x=580,y=160)
      tax2namel.place(x=800, y=110)
      tax2namee.place(x=880,y=110)
      tax2ratel.place(x=800, y=140)
      tax2ratee.place(x=880,y=140)
      ptax2.place(x=580,y=185)
    else:
      pass
  
  
  comlo=LabelFrame(secondtab,text="Comapny Logo", height=260, width=320)
  comlo.place(x=560, y=240)
  
  def upload_filelogo():
    global imglogo,filename
    f_types =[('Png files','*.png'),('Jpg Files', '*.jpg')]
    filename = filedialog.askopenfilename(filetypes=f_types)
    shutil.copyfile(filename, os.getcwd()+'/images/'+filename.split('/')[-1])
    image = Image.open(filename)
    resize_image = image.resize((280, 160))
    imglogo = ImageTk.PhotoImage(resize_image)
    # b2 = Button(secondtab,image=img)
    # b2.place(x=130, y=80)
  
    btlogo = Button(secondtab,width=280,height=160,image=imglogo)
    btlogo.place(x=580,y=280)
  
  try:
    image = Image.open("images/"+sectab[13])
    resize_image = image.resize((280, 160))
    image = ImageTk.PhotoImage(resize_image)
    btlogo = Button(secondtab,width=280,height=160,image=image)
    btlogo.place(x=580,y=280)
    btlogo.photo = image
  except:
    pass
  
    
  btloadim = Button(secondtab,text="Load logo image",command=upload_filelogo)
  btloadim.place(x=580,y=460)
  
  compimg = BooleanVar()
  primage = Checkbutton(secondtab,text="Print logo image",variable = compimg,onvalue =1 ,offvalue = 0)
  primage.place(x=740,y=460)

  ################### tab03 ###################################################################### ###settings-saiju
  Invoice_setting_frame=Frame(tab03, relief=GROOVE, bg="#f8f8f2")
  Invoice_setting_frame.pack(side="top", fill=BOTH)

  Invoice_setting_frame_cpy=Frame(Invoice_setting_frame, bg="#f5f3f2", height=700)
  Invoice_setting_frame_cpy.pack(side="top", fill=BOTH)
  ver = Label(Invoice_setting_frame_cpy,text="Invoice# prefix")
  ver.place(x=5,y=20)

  sql_tb03_qry="select * from invoice_settings"
  fbcursor.execute(sql_tb03_qry)
  tab03_valzs=fbcursor.fetchone()

  inv_tp_lf =Entry(Invoice_setting_frame)
  if tab03_valzs is None:
    inv_tp_lf.insert(0, "INV")
  else:
    inv_tp_lf.delete(0,'end')
    inv_tp_lf.insert(END,tab03_valzs[0])
  inv_tp_lf.place(x=100,y=20)

  invset_ver = Label(Invoice_setting_frame_cpy,text="Starting Invoice number")
  invset_ver.place(x=25,y=50)

  def spin_valss_tab03(S,d):
    if d=='1':
      if not S in ['.','0','1','2','3','4','5','6','7','8','9']:
        return False
      return True
          
    if d.isdigit():
      return True


  valdity_tab03=(Invoice_setting_frame_cpy.register(spin_valss_tab03), '%S','%d')
  inv_spn_bx = Spinbox(Invoice_setting_frame_cpy,from_=1,to=1000000,width=15,justify=RIGHT)
  
  if tab03_valzs is None:
    pass
  else:
    inv_spn_bx.delete(0,"end")
    inv_spn_bx.insert(0,int(tab03_valzs[1]))
  inv_spn_bx.config(validate='key',validatecommand=(valdity_tab03))
  inv_spn_bx.place(x=50,y=80)

  inv_lbl2 = Label(Invoice_setting_frame_cpy,text="Header box background color")
  inv_lbl2.place(x=5,y=100)
  


  invset_bg_var = StringVar()
  invset_bg_list = ttk.Combobox(Invoice_setting_frame_cpy,textvariable=invset_bg_var)
  
  invset_bg_list['values'] = ('Default','Black','Maroon','Green','Olive','Navy','Purple','Teal','Gray','Silver','Red','Lime','Yellow','Blue','Fuchsia','Aqua','White','ScrollBar','Background','ActiveCaption','InactiveCaption','Menu','Window','WindowFrame','MenuText','WindowText','CaptionText','ActiveBorder','InactiveBorder','AppWorkSpace','Highlight','HighlightText','BtnFace','InactiveCaptionText','BtnHighlight','3DDkShadow','3DLight','InfoText','InfoBk','Custom')
  if tab03_valzs is None:
    invset_bg_list.current(0)
  else:
    invset_bg_list.insert(0,tab03_valzs[2])
  invset_bg_list.place(x=6 ,y=120)

  inv_lb22 = Label(Invoice_setting_frame_cpy,text="Customize Invoice text labels")
  inv_lb22.place(x=5,y=140)

  def lst_bx1(event):
    pass
  def restore_dfilt():
    inv_lst_bx1.delete(1.0,'end')
    inv_lst_bx1.insert(END, "Invoice")
    inv_lst_bx2.delete(1.0,'end')
    inv_lst_bx2.insert(END, "Invoice#")
    inv_lst_bx3.delete(1.0,'end')
    inv_lst_bx3.insert(END, "Invoice date")
    inv_lst_bx4.delete(1.0,'end')
    inv_lst_bx4.insert(END, "Order ref.#")
    inv_lst_bx5.delete(1.0,'end')
    inv_lst_bx5.insert(END, "Terms")
    inv_lst_bx6.delete(1.0,'end')
    inv_lst_bx6.insert(END, "Invoice to")
    inv_lst_bx7.delete(1.0,'end')
    inv_lst_bx7.insert(END, "Ship to")
    inv_lst_bx8.delete(1.0,'end')
    inv_lst_bx8.insert(END, "ID/SKU")
    inv_lst_bx9.delete(1.0,'end')
    inv_lst_bx9.insert(END, "Product/Service")
    inv_lst_bx10.delete(1.0,'end')
    inv_lst_bx10.insert(END, "Quantity")
    inv_lst_bx11.delete(1.0,'end')
    inv_lst_bx11.insert(END, "Description")
    inv_lst_bx12.delete(1.0,'end')
    inv_lst_bx12.insert(END, "Unit Price")
    inv_lst_bx13.delete(1.0,'end')
    inv_lst_bx13.insert(END, "Price")
    inv_lst_bx14.delete(1.0,'end')
    inv_lst_bx14.insert(END, "Subtotal")
    inv_lst_bx15.delete(1.0,'end')
    inv_lst_bx15.insert(END, "Discount")
    inv_lst_bx16.delete(1.0,'end')
    inv_lst_bx16.insert(END, "Discount rate")
    inv_lst_bx17.delete(1.0,'end')
    inv_lst_bx17.insert(END, "TAX1")
    inv_lst_bx18.delete(1.0,'end')
    inv_lst_bx18.insert(END, "Invoice Total")
    inv_lst_bx19.delete(1.0,'end')
 
    inv_lst_bx19.insert(END, "Total Paid")
    inv_lst_bx20.delete(1.0,'end')
    inv_lst_bx20.insert(END, "Balance")
    inv_lst_bx21.delete(1.0,'end')
    inv_lst_bx21.insert(END, "Terms and Conditions")
    inv_lst_bx22.delete(1.0,'end')
    inv_lst_bx22.insert(END, "Tax Exempted")
    inv_lst_bx23.delete(1.0,'end')
    inv_lst_bx23.insert(END, "Page")
    inv_lst_bx24.delete(1.0,'end')
    inv_lst_bx24.insert(END, "of")
 

    
  inv_lst_bx1 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx1.insert(END, "Invoice")
  else:
    inv_lst_bx1.delete(1.0,"end")
    inv_lst_bx1.insert(1.0,tab03_valzs[3])

  inv_lst_bx1.place(x=5,y=160)
  inv_lst_bx2 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx2.insert(END, "Invoice#")
  else:
    inv_lst_bx2.delete(1.0,"end")
    inv_lst_bx2.insert(1.0,tab03_valzs[4])

  
  inv_lst_bx2.place(x=5,y=180)
  inv_lst_bx3 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx3.insert(END, "Invoice date")
  else:
    inv_lst_bx3.delete(1.0,"end")
    inv_lst_bx3.insert(1.0,tab03_valzs[5])
  
  inv_lst_bx3.place(x=5,y=200)
  inv_lst_bx4 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx4.insert(END, "Order ref.#")
  else:
    inv_lst_bx4.delete(1.0,"end")
    inv_lst_bx4.insert(1.0,tab03_valzs[6])
  
  inv_lst_bx4.place(x=5,y=220)
  inv_lst_bx5 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx5.insert(END, "Terms")
  else:
    inv_lst_bx5.delete(1.0,"end")
    inv_lst_bx5.insert(1.0,tab03_valzs[7])
  
  inv_lst_bx5.place(x=5,y=240)
  inv_lst_bx6 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx6.insert(END, "Invoice to")
  else:
    inv_lst_bx6.delete(1.0,"end")
    inv_lst_bx6.insert(1.0,tab03_valzs[8])
  
  inv_lst_bx6.place(x=5,y=260)
  inv_lst_bx7 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx7.insert(END, "Ship to")
  else:
    inv_lst_bx7.delete(1.0,"end")
    inv_lst_bx7.insert(1.0,tab03_valzs[9])
  
  inv_lst_bx7.place(x=5,y=280)
  inv_lst_bx8 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx8.insert(END, "ID/SKU")
  else:
    inv_lst_bx8.delete(1.0,"end")
    inv_lst_bx8.insert(1.0,tab03_valzs[10])
  
  inv_lst_bx8.place(x=5,y=300)
  inv_lst_bx9 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx9.insert(END, "Product/Service")
  else:
    inv_lst_bx9.delete(1.0,"end")
    inv_lst_bx9.insert(1.0,tab03_valzs[11])
  
  inv_lst_bx9.place(x=5,y=320)
  inv_lst_bx10 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx10.insert(END, "Quantity")
  else:
    inv_lst_bx10.delete(1.0,"end")
    inv_lst_bx10.insert(1.0,tab03_valzs[12])
  
  inv_lst_bx10.place(x=5,y=340)
  inv_lst_bx11 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx11.insert(END, "Description")
  else:
    inv_lst_bx11.delete(1.0,"end")
    inv_lst_bx11.insert(1.0,tab03_valzs[13])
  
  inv_lst_bx11.place(x=5,y=360)
  inv_lst_bx12 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx12.insert(END, "Unit Price")
  else:
    inv_lst_bx12.delete(1.0,"end")
    inv_lst_bx12.insert(1.0,tab03_valzs[14])
  
  inv_lst_bx12.place(x=5,y=380)
  inv_lst_bx13 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx13.insert(END, "Price")
  else:
    inv_lst_bx13.delete(1.0,"end")
    inv_lst_bx13.insert(1.0,tab03_valzs[15])
  
  inv_lst_bx13.place(x=5,y=400)
  inv_lst_bx14 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx14.insert(END, "Subtotal")
  else:
    inv_lst_bx14.delete(1.0,"end")
    inv_lst_bx14.insert(1.0,tab03_valzs[16])
  
  inv_lst_bx14.place(x=5,y=420)
  inv_lst_bx15 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx15.insert(END, "Discount")
  else:
    inv_lst_bx15.delete(1.0,"end")
    inv_lst_bx15.insert(1.0,tab03_valzs[17])
  
  inv_lst_bx15.place(x=5,y=440)
  inv_lst_bx16 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx16.insert(END, "Discount rate")
  else:
    inv_lst_bx16.delete(1.0,"end")
    inv_lst_bx16.insert(1.0,tab03_valzs[18])
  
  inv_lst_bx16.place(x=5,y=460)
  inv_lst_bx17 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx17.insert(END, "TAX1")
  else:
    inv_lst_bx17.delete(1.0,"end")
    inv_lst_bx17.insert(1.0,tab03_valzs[19])
  
  inv_lst_bx17.place(x=200,y=520)
  inv_lst_bx18 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx18.insert(END, "Invoice Total")
  else:
    inv_lst_bx18.delete(1.0,"end")
    inv_lst_bx18.insert(1.0,tab03_valzs[20])
  
  inv_lst_bx18.place(x=400,y=520)
  inv_lst_bx19 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx19.insert(END, "Total Paid")
  else:
    inv_lst_bx19.delete(1.0,"end")
    inv_lst_bx19.insert(1.0,tab03_valzs[21])
  
  inv_lst_bx19.place(x=600,y=520)
  inv_lst_bx20 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx20.insert(END, "Balance")
  else:
    inv_lst_bx20.delete(1.0,"end")
    inv_lst_bx20.insert(1.0,tab03_valzs[22])
  
  inv_lst_bx20.place(x=800,y=520)
  inv_lst_bx21 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx21.insert(END, "Terms and Conditions")
  else:
    inv_lst_bx21.delete(1.0,"end")
    inv_lst_bx21.insert(1.0,tab03_valzs[23])
  
  inv_lst_bx21.place(x=1000,y=520)
  inv_lst_bx22 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx22.insert(END, "Tax Exempted")
  else:
    inv_lst_bx22.delete(1.0,"end")
    inv_lst_bx22.insert(1.0,tab03_valzs[24])
  
  inv_lst_bx22.place(x=5,y=480)
  inv_lst_bx23 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx23.insert(END, "Page")
  else:
    inv_lst_bx23.delete(1.0,"end")
    inv_lst_bx23.insert(1.0,tab03_valzs[25])
  
  inv_lst_bx23.place(x=5,y=500)
  inv_lst_bx24 = Text(Invoice_setting_frame, height=1, width=25, font=('Calibri 10'))
  if tab03_valzs is None:
    inv_lst_bx24.insert(END, "of")
  else:
    inv_lst_bx24.delete(1.0,"end")
    inv_lst_bx24.insert(1.0,tab03_valzs[26])
  
  inv_lst_bx24.place(x=5,y=520)

  



  invset_s1 = StringVar(Invoice_setting_frame, "Invoice")


  invset_ver = Label(Invoice_setting_frame_cpy,text="Default Invoice template(example,click on preview for mouse scrolling)")
  invset_ver.place(x=248,y=55 )

  invset_ver = Label(Invoice_setting_frame_cpy,text="Default Invoice template")
  invset_ver.place(x=619,y=40)

  #data=StringVar()

  invset_messagelbframe=LabelFrame(Invoice_setting_frame_cpy,text="Predefined terms and conditions text for Invoice", height=100, width=980)
  invset_messagelbframe.place(x=248, y=400)

  inv_txt = scrolledtext.ScrolledText(Invoice_setting_frame_cpy, undo=True,width=115,height=4)
  if tab03_valzs is None:
    inv_txt.insert(1.0,"Invoices are payable on receipt unless other terms, negotiated and noted on the invoice. By accepting delivery of goods, Buyer agrees to pay the invoiced cost for those goods, and agrees to be bound to these contract terms. No acceptance may vary these terms unless specifically agreed in writing by Seller.")
  else:
    inv_txt.insert(1.0,tab03_valzs[27])
  inv_txt.place(x=260,y=425)

  inv_rst_btn = Button(Invoice_setting_frame_cpy,text="Restore defaults",command=lambda:restore_dfilt())
  inv_rst_btn.place(x=1200,y=515)

  #------------Professional 1 (logo on left side)-------------
  def styl_can_def(event):
      menuvar_lst=logo_just_var.get()
    
      por_sql_st='select * from company'
      fbcursor.execute(por_sql_st)
      cmpy_dtl=fbcursor.fetchone()
      if menuvar_lst == 'Professional 1 (logo on left side)':

        if cmpy_dtl[1] is not None:
          sql='select dateformat from company'
          fbcursor.execute(sql)
          date_frmat=fbcursor.fetchone()
          
          if not date_frmat:
            ft_fr='%Y-%m-%d'
        
          elif date_frmat[0]=="mm-dd-yyyy":
            ft_fr='%m-%d-%Y'

          elif date_frmat[0]=="dd-mm-yyyy":
              ft_fr='%d-%m-%Y'
                      
          elif date_frmat[0]=="yyy.mm.dd":
              ft_fr='%Y.%m.%d'
                          
          elif date_frmat[0]=="mm/dd/yyyy":
              ft_fr='%m/%d/%Y'
                          
          elif date_frmat[0]=="dd/mm/yyyy":
              ft_fr='%d/%m/%Y'
                                  
          elif date_frmat[0]=="dd.mm.yyyy":
              ft_fr='%d.%m.%Y'
                                  
          elif date_frmat[0]=="yyyy/  mm/dd":
              ft_fr='%Y/%m/%d'

          else:
              ft_fr='%Y-%m-%d'
          td_date=date.today()
          date_tdy=td_date.strftime(ft_fr)  
          frame_pro1 = Frame(Invoice_setting_frame_cpy, width=953, height=300)
          frame_pro1.pack(expand=True, fill=BOTH)
          frame_pro1.place(x=247,y=90)
          inv_pro1_canvas=Canvas(frame_pro1, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(frame_pro1, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=inv_pro1_canvas.yview)
          
          inv_pro1_canvas.config(width=953,height=300)
          inv_pro1_canvas.config(yscrollcommand=vertibar.set)
          inv_pro1_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          inv_pro1_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          inv_pro1_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          try:
            inv_image = Image.open("images/"+cmpy_dtl[13])
            inv_resize_image = inv_image.resize((200,75))
            inv_image = ImageTk.PhotoImage(inv_resize_image)
          
            inv_logo = Label(inv_pro1_canvas,width=200,height=75, bg="white",image = inv_image) 
            inv_window_image = inv_pro1_canvas.create_window(150, 50, anchor="nw", window=inv_logo)
            inv_logo.photo = inv_image
          except:
            inv_pro1_canvas.create_text(285, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
          
          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx2.get(1.0, END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Invoice#
          win_inv1 = inv_pro1_canvas.create_window(175, 140, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx3.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1 )#Invoicedate
          win_inv1 = inv_pro1_canvas.create_window(175, 160, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(inv_pro1_canvas,text="Due Date", bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Due date
          win_inv1 = inv_pro1_canvas.create_window(175, 180, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx5.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Terms
          win_inv1 = inv_pro1_canvas.create_window(175, 200, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx4.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = inv_pro1_canvas.create_window(175, 220, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_pro1_canvas,text=str(inv_tp_lf.get())+"1/2022", bg="white",anchor="nw",font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = inv_pro1_canvas.create_window(310, 140, anchor="nw", window=lb_inv1)
          inv_pro1_canvas.create_text(350, 170, text=date_tdy,justify=LEFT, fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(350, 190, text=date_tdy,justify=LEFT, fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(340, 210, text="NET 15",justify=LEFT, fill="black", font=('Helvetica 11'))   
          
          labelcmp=Label(inv_pro1_canvas,text=cmpy_dtl[1], bg="white",anchor="e",font=("Helvetica", 12), width=40, height=1)
          window = inv_pro1_canvas.create_window(430,80, anchor="nw", window=labelcmp)

          labelcmpl=Label(inv_pro1_canvas,text=cmpy_dtl[2],justify=RIGHT, bg="white",font=("Helvetica", 9),anchor="ne", width=50, height=4)
          windowl = inv_pro1_canvas.create_window(440,110, anchor="nw", window=labelcmpl)

          
          inv_pro1_canvas.create_text(745, 185, text=cmpy_dtl[4], fill="black", font=('Helvetica 10'))

          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx1.get(1.0,END), bg="white",anchor="ne",font=('Helvetica 14 bold'),height=1)#invoice
          win_inv1 = inv_pro1_canvas.create_window(800, 200, anchor="ne", window=lb_inv1)

          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx22.get(1.0,END), bg="white",justify=LEFT,font=("Helvetica 10" ),height=2)#TAX EXEMPTED
          win_inv1 = inv_pro1_canvas.create_window(800, 225, anchor="ne", window=lb_inv1)

          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx6.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline" ),height=1)#Invoice to
          win_inv1 = inv_pro1_canvas.create_window(175, 250, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx7.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline"),height=1)#Ship to
          win_inv1 = inv_pro1_canvas.create_window(525, 250, anchor="nw", window=lb_inv1)

          
          # inv_pro1_canvas.create_text(765, 205, text="Invoice", fill="black", font=('Helvetica 14 bold'))
          # inv_pro1_canvas.create_text(746, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
          
          # inv_pro1_canvas.create_text(210, 260, text="Invoice to", fill="black", font=('Helvetica 10 underline'))
          inv_pro1_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          inv_pro1_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
          # inv_pro1_canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          inv_pro1_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          inv_pro1_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
          fgth = ttk.Style()
          fgth.configure('mystyle101.Treeview.Heading', background=''+ invset_bg_var.get(),State='DISABLE')

          tree=ttk.Treeview(inv_pro1_canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle101.Treeview')

          tree.column("# 1", anchor=E, stretch=NO, width=100)
          tree.heading("# 1", text=inv_lst_bx8.get(1.0,END))#"ID/SKU"
          tree.column("# 2", anchor=E, stretch=NO, width=350)
          tree.heading("# 2", text=inv_lst_bx9.get(1.0,END))#Product/Service - Description
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text=inv_lst_bx10.get(1.0,END))#"Quantity"
          tree.column("# 4", anchor=E, stretch=NO, width=90)  
          tree.heading("# 4", text=inv_lst_bx12.get(1.0,END))#"Unit Price"
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text=inv_lst_bx13.get(1.0,END))#"Price"
          
          window = inv_pro1_canvas.create_window(120, 340, anchor="nw", window=tree)
          squl_qry='select * from company'
          fbcursor.execute(squl_qry)
          cmpy_tax=fbcursor.fetchone()

          inv_pro1_canvas.create_line(120, 390, 820, 390 )
          inv_pro1_canvas.create_line(120, 340, 120, 365 )
          inv_pro1_canvas.create_line(120, 365, 120, 390 )
          inv_pro1_canvas.create_line(820, 340, 820, 540 )
          inv_pro1_canvas.create_line(740, 340, 740, 540 )
          inv_pro1_canvas.create_line(570, 340, 570, 540 )
          inv_pro1_canvas.create_line(570, 415, 820, 415 )
          inv_pro1_canvas.create_line(570, 440, 820, 440 )
          inv_pro1_canvas.create_line(570, 465, 820, 465 )
          inv_pro1_canvas.create_line(570, 490, 820, 490 )
          inv_pro1_canvas.create_line(570, 515, 820, 515 )
          inv_pro1_canvas.create_line(650, 340, 650, 390 )
          inv_pro1_canvas.create_line(220, 340, 220, 390 )
          inv_pro1_canvas.create_line(570, 540, 820, 540 )

          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          crcy_type=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          cry_plcy=post_rp[0]
          if cry_plcy=="before amount": 
            inv_pro1_canvas.create_text(710, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 404, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 428, text=str(crcy_type)+"18.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 502, text=str(crcy_type)+"100.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 526, text=str(crcy_type)+"138.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 454, text=str(crcy_type)+"20.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 479, text=str(crcy_type)+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount":
            inv_pro1_canvas.create_text(710, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 404, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 428, text="18.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 502, text="100.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 526, text="138.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 454, text="20.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 479, text="238.00"+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="before amount with space": 
            inv_pro1_canvas.create_text(710, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 404, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 428, text=str(crcy_type)+" "+"18.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 502, text=str(crcy_type)+" "+"100.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 526, text=str(crcy_type)+" "+"138.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 454, text=str(crcy_type)+" "+"20.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 479, text=str(crcy_type)+" "+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount with space":
            inv_pro1_canvas.create_text(710, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 404, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 428, text="18.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 502, text="100.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 526, text="138.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 454, text="20.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 479, text="238.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          else:
            pass

          inv_pro1_canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
          
            

          lbx_inv=Label(inv_pro1_canvas,text=inv_lst_bx14.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10"),height=1)#"Subtotal"
          win_inv2 = inv_pro1_canvas.create_window(630,392, anchor="nw", window=lbx_inv)

          lbx_inv=Label(inv_pro1_canvas,text=inv_lst_bx17.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"TAX1"
          win_inv2 = inv_pro1_canvas.create_window(635,418, anchor="nw", window=lbx_inv)

          lbx_inv=Label(inv_pro1_canvas,text=inv_lst_bx19.get(1.0,END), bg="White",anchor="nw",font=("Helvetica 10 "), height=1)#"Total Paid"
          win_inv2 = inv_pro1_canvas.create_window(630, 492,anchor="nw", window=lbx_inv)

          lbx_inv=Label(inv_pro1_canvas,text=inv_lst_bx20.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"Balance"
          win_inv2 = inv_pro1_canvas.create_window(635, 518, anchor="nw", window=lbx_inv)

          
          lbx_inv=Label(inv_pro1_canvas,text=inv_lst_bx18.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#Order Total"
          win_inv2 = inv_pro1_canvas.create_window(625, 468, anchor="nw", window=lbx_inv)
          lbx_inv=Label(inv_pro1_canvas,text=inv_lst_bx21.get(1.0,END), bg="white",anchor="n",font=("Helvetica 10 "),height=1)#"Terms and Conditions"
          win_inv2 = inv_pro1_canvas.create_window(420, 570, anchor="nw", window=lbx_inv)
        
          inv_pro1_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))

 
      
          # if int(cmpy_tax[12])==3:
          #   inv_pro1_canvas.create_line(120, 390, 820, 390 )
          #   inv_pro1_canvas.create_line(120, 340, 120, 365 )
          #   inv_pro1_canvas.create_line(120, 365, 120, 390 )
          #   inv_pro1_canvas.create_line(820, 360, 820, 565 )
          #   inv_pro1_canvas.create_line(740, 340, 740, 565 )
          #   inv_pro1_canvas.create_line(570, 340, 570, 565 )
          #   inv_pro1_canvas.create_line(570, 415, 820, 415 )
          #   inv_pro1_canvas.create_line(570, 440, 820, 440 )
          #   inv_pro1_canvas.create_line(570, 465, 820, 465 )
          #   inv_pro1_canvas.create_line(570, 490, 820, 490 )
          #   inv_pro1_canvas.create_line(570, 515, 820, 515 )
          #   inv_pro1_canvas.create_line(650, 340, 650, 390 )
          #   inv_pro1_canvas.create_line(220, 340, 220, 390 )
          #   inv_pro1_canvas.create_line(570, 540, 820, 540 )
          #   inv_pro1_canvas.create_line(570, 565, 820, 565 )

          #   inv_pro1_canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
          #   inv_pro1_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          #   inv_pro1_canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
          #   inv_pro1_canvas.create_text(710, 372, text="$200.00", fill="black", font=('Helvetica 10'))
          #   inv_pro1_canvas.create_text(790, 372, text="$200.00", fill="black", font=('Helvetica 10'))
            

          #   lbx_inv=Label(inv_pro1_canvas,text="Subtotal", bg="white",anchor="nw",font=("Helvetica 10"))
          #   win_inv2 = inv_pro1_canvas.create_window(635, 393, anchor="nw", window=lbx_inv)

          #   lbx_inv=Label(inv_pro1_canvas,text="TAX1", bg="white",anchor="nw",font=("Helvetica 10"))
          #   win_inv2 = inv_pro1_canvas.create_window(635, 418, anchor="nw", window=lbx_inv)

          #   lbx_inv=Label(inv_pro1_canvas,text="TAX2", bg="white",anchor="nw",font=("Helvetica 10"))
          #   win_inv2 = inv_pro1_canvas.create_window(635, 443, anchor="nw", window=lbx_inv)

          #   lbx_inv=Label(inv_pro1_canvas,text="Total Paid", bg="white",anchor="nw",font=("Helvetica 10 "))
          #   win_inv2 = inv_pro1_canvas.create_window(630, 518,anchor="nw", window=lbx_inv)

          #   lbx_inv=Label(inv_pro1_canvas,text="Balance", bg="white",anchor="nw",font=("Helvetica 10 "))
          #   win_inv2 = inv_pro1_canvas.create_window(635, 543, anchor="nw", window=lbx_inv)
            
            

          #   # inv_pro1_canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
          #   inv_pro1_canvas.create_text(790, 404, text="$200.00", fill="black", font=('Helvetica 10'))

          #   inv_pro1_canvas.create_text(792, 428, text="$18.00", fill="black", font=('Helvetica 10'))

          #   inv_pro1_canvas.create_text(792, 455, text="$18.00", fill="black", font=('Helvetica 10'))

          #   inv_pro1_canvas.create_text(650, 480, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          #   inv_pro1_canvas.create_text(792, 480, text="$20.00", fill="black", font=('Helvetica 10'))

          #   inv_pro1_canvas.create_text(790, 505, text="$238.00", fill="black", font=('Helvetica 10 bold'))
          #   inv_pro1_canvas.create_text(655, 505, text="Estimate total", fill="black", font=('Helvetica 10 bold'))

          #   inv_pro1_canvas.create_text(790, 530, text="$100.00", fill="black", font=('Helvetica 10'))
        

          #   inv_pro1_canvas.create_text(790, 553, text="$138.00", fill="black", font=('Helvetica 10'))

          # elif int(cmpy_tax[12])==2:
          #   inv_pro1_canvas.create_line(120, 390, 820, 390 )
          #   inv_pro1_canvas.create_line(120, 340, 120, 365 )
          #   inv_pro1_canvas.create_line(120, 365, 120, 390 )
          #   inv_pro1_canvas.create_line(820, 340, 820, 540 )
          #   inv_pro1_canvas.create_line(740, 340, 740, 540 )
          #   inv_pro1_canvas.create_line(570, 340, 570, 540 )
          #   inv_pro1_canvas.create_line(570, 415, 820, 415 )
          #   inv_pro1_canvas.create_line(570, 440, 820, 440 )
          #   inv_pro1_canvas.create_line(570, 465, 820, 465 )
          #   inv_pro1_canvas.create_line(570, 490, 820, 490 )
          #   inv_pro1_canvas.create_line(570, 515, 820, 515 )
          #   inv_pro1_canvas.create_line(650, 340, 650, 390 )
          #   inv_pro1_canvas.create_line(220, 340, 220, 390 )
          #   inv_pro1_canvas.create_line(570, 540, 820, 540 )

          #   inv_pro1_canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
          #   inv_pro1_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          #   inv_pro1_canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
          #   inv_pro1_canvas.create_text(710, 372, text="$200.00", fill="black", font=('Helvetica 10'))
          #   inv_pro1_canvas.create_text(790, 372, text="$200.00", fill="black", font=('Helvetica 10'))
            

          #   lbx_inv=Label(inv_pro1_canvas,text="Subtotal", bg="white",anchor="nw",font=("Helvetica 10"))
          #   win_inv2 = inv_pro1_canvas.create_window(630,392, anchor="nw", window=lbx_inv)

          #   lbx_inv=Label(inv_pro1_canvas,text="TAX1", bg="white",anchor="nw",font=("Helvetica 10 "))
          #   win_inv2 = inv_pro1_canvas.create_window(635,418, anchor="nw", window=lbx_inv)

          #   lbx_inv=Label(inv_pro1_canvas,text="Total Paid", bg="red",anchor="nw",font=("Helvetica 10 "))
          #   win_inv2 = inv_pro1_canvas.create_window(630, 492,anchor="nw", window=lbx_inv)

          #   lbx_inv=Label(inv_pro1_canvas,text="Balance", bg="white",anchor="nw",font=("Helvetica 10 "))
          #   win_inv2 = inv_pro1_canvas.create_window(635, 518, anchor="nw", window=lbx_inv)
            

          #   # inv_pro1_canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
          #   inv_pro1_canvas.create_text(790, 404, text="$200.00", fill="black", font=('Helvetica 10'))


          #   inv_pro1_canvas.create_text(792, 428, text="$18.00", fill="black", font=('Helvetica 10'))

          #   inv_pro1_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          #   inv_pro1_canvas.create_text(792, 454, text="$20.00", fill="black", font=('Helvetica 10'))

          #   inv_pro1_canvas.create_text(790, 479, text="$238.00", fill="black", font=('Helvetica 10 bold'))
          #   inv_pro1_canvas.create_text(650, 479, text="Estimate total", fill="black", font=('Helvetica 10 bold'))

          #   inv_pro1_canvas.create_text(790, 502, text="$100.00", fill="black", font=('Helvetica 10'))


          #   inv_pro1_canvas.create_text(790, 526, text="$138.00", fill="black", font=('Helvetica 10'))

          # elif cmpy_tax[12]==1:
          #   pass
          
          

          inv_pro1_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
        
          inv_pro1_canvas.create_line(150, 600, 795, 600)
          text=inv_txt.get('1.0',END)
          wraped_text="\n".join(wrap(text,130))
    
        
          lbx_inv=Label(inv_pro1_canvas,text=wraped_text, bg="white",anchor="nw",font=("Helvetica 8 "), justify=LEFT, height=3, width=107)
          win_inv2 = inv_pro1_canvas.create_window(150, 603,anchor="nw", window=lbx_inv)

          inv_pro1_canvas.create_text(280, 660, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    

          inv_pro1_canvas.create_text(720, 660, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
        else:
          frame_pro1 = Frame(Invoice_setting_frame_cpy, width=953, height=300)
          frame_pro1.pack(expand=True, fill=BOTH)
          frame_pro1.place(x=247,y=90)
          inv_pro1_canvas=Canvas(frame_pro1, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(frame_pro1, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=inv_pro1_canvas.yview)
          
          inv_pro1_canvas.config(width=953,height=300)
          inv_pro1_canvas.config(yscrollcommand=vertibar.set)
          inv_pro1_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          inv_pro1_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          inv_pro1_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(285, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
          
          inv_pro1_canvas.create_text(195, 150, text="Invoice#", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(205, 170, text="Invoicedate", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(200, 190, text="Due date", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(191, 210, text="Terms", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(205, 230, text="Invoice ref.#", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(350, 150, text="INV1/2022", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(350, 170, text="03-05-2022", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(350, 190, text="18-05-2022", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(340, 210, text="NET 15", fill="black", font=('Helvetica 11'))   
          
          inv_pro1_canvas.create_text(720, 80, text="Your Company Name", fill="black", font=('Helvetica 12 '))

          inv_pro1_canvas.create_text(750, 110, text="Address line 1", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(750, 125, text="Address line 2", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(750, 140, text="Address line 3", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(750, 155, text="Address line 4", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(745, 170, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(745, 185, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(750, 205, text="Invoice", fill="black", font=('Helvetica 14 bold'))
          inv_pro1_canvas.create_text(746, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
          
          inv_pro1_canvas.create_text(210, 260, text="Invoice to", fill="black", font=('Helvetica 10 underline'))
          inv_pro1_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          inv_pro1_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          inv_pro1_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          inv_pro1_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
          s = ttk.Style()
          s.configure('Treeview.Heading', background=''+ invset_bg_var.get(),State='DISABLE')

          tree=ttk.Treeview(inv_pro1_canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle.Treeview')

          tree.column("# 1", anchor=E, stretch=NO, width=100)
          tree.heading("# 1", text="ID/SKU")
          tree.column("# 2", anchor=E, stretch=NO, width=350)
          tree.heading("# 2", text="Product/Service - Description")
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text="Quantity")
          tree.column("# 4", anchor=E, stretch=NO, width=90)
          tree.heading("# 4", text="Unit Price")
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text="Price")
          
          window = inv_pro1_canvas.create_window(120, 340, anchor="nw", window=tree)

          inv_pro1_canvas.create_line(120, 390, 820, 390 )
          inv_pro1_canvas.create_line(120, 340, 120, 365 )
          inv_pro1_canvas.create_line(120, 365, 120, 390 )
          inv_pro1_canvas.create_line(820, 340, 820, 540 )
          inv_pro1_canvas.create_line(740, 340, 740, 540 )
          inv_pro1_canvas.create_line(570, 340, 570, 540 )
          inv_pro1_canvas.create_line(570, 415, 820, 415 )
          inv_pro1_canvas.create_line(570, 440, 820, 440 )
          inv_pro1_canvas.create_line(570, 465, 820, 465 )
          inv_pro1_canvas.create_line(570, 490, 820, 490 )
          inv_pro1_canvas.create_line(570, 515, 820, 515 )
          inv_pro1_canvas.create_line(650, 340, 650, 390 )
          inv_pro1_canvas.create_line(220, 340, 220, 390 )
          inv_pro1_canvas.create_line(570, 540, 820, 540 )

          inv_pro1_canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(610, 372, text="0", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(710, 372, text="0", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(790, 372, text="0", fill="black", font=('Helvetica 10'))

          inv_pro1_canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(790, 404, text="0", fill="black", font=('Helvetica 10'))

          inv_pro1_canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(792, 428, text="0", fill="black", font=('Helvetica 10'))

          inv_pro1_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(792, 454, text="0", fill="black", font=('Helvetica 10'))

          inv_pro1_canvas.create_text(790, 479, text="0", fill="black", font=('Helvetica 10 bold'))
          inv_pro1_canvas.create_text(650, 479, text="Estimate total", fill="black", font=('Helvetica 10 bold'))

          inv_pro1_canvas.create_text(790, 502, text="0", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))

          inv_pro1_canvas.create_text(790, 526, text="0", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

          inv_pro1_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
          inv_pro1_canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_line(150, 620, 795, 620)
          

          inv_pro1_canvas.create_text(280, 640, text= "", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(280, 655, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(720, 655, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
        

    #----------------Professional 2 (logo on right side)------------------
      elif menuvar_lst == 'Professional 2 (logo on right side)':
        if cmpy_dtl[1] is not None:
          sql='select dateformat from company'
          fbcursor.execute(sql)
          date_frmat=fbcursor.fetchone()
          
          if not date_frmat:
            ft_fr='%Y-%m-%d'
        
          elif date_frmat[0]=="mm-dd-yyyy":
            ft_fr='%m-%d-%Y'

          elif date_frmat[0]=="dd-mm-yyyy":
              ft_fr='%d-%m-%Y'
                      
          elif date_frmat[0]=="yyy.mm.dd":
              ft_fr='%Y.%m.%d'
                          
          elif date_frmat[0]=="mm/dd/yyyy":
              ft_fr='%m/%d/%Y'
                          
          elif date_frmat[0]=="dd/mm/yyyy":
              ft_fr='%d/%m/%Y'
                                  
          elif date_frmat[0]=="dd.mm.yyyy":
              ft_fr='%d.%m.%Y'
                                  
          elif date_frmat[0]=="yyyy/  mm/dd":
              ft_fr='%Y/%m/%d'

          else:
              ft_fr='%Y-%m-%d'
          td_date=date.today()
          date_tdy=td_date.strftime(ft_fr)  
          frame_inv_pro2 = Frame(Invoice_setting_frame_cpy, width=953, height=300)
          frame_inv_pro2.pack(expand=True, fill=BOTH)
          frame_inv_pro2.place(x=247,y=90)
          
          canvas_pro2=Canvas(frame_inv_pro2, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(frame_inv_pro2, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas_pro2.yview)
          canvas_pro2.config(width=953,height=300)
          
          canvas_pro2.config(yscrollcommand=vertibar.set)
          canvas_pro2.pack(expand=True,side=LEFT,fill=BOTH)
          canvas_pro2.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          canvas_pro2.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          try:
            inv_image = Image.open("images/"+cmpy_dtl[13])
            inv_resize_image = inv_image.resize((200,75))
            inv_image = ImageTk.PhotoImage(inv_resize_image)
          
            inv_logo = Label(canvas_pro2,width=200,height=75, bg="white",image = inv_image) 
            inv_window_image = canvas_pro2.create_window(800, 60, anchor="ne", window=inv_logo)
            inv_logo.photo = inv_image
          except:
            canvas_pro2.create_text(650, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

          labelcmp=Label(canvas_pro2,text=cmpy_dtl[1],justify=LEFT, bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=1)
          window = canvas_pro2.create_window(150,80, anchor="nw", window=labelcmp)

          labelcmpl=Label(canvas_pro2,text=cmpy_dtl[2],justify=LEFT, bg="white",font=("Helvetica", 9),anchor="nw", width=40, height=4)
          windowl = canvas_pro2.create_window(155 ,110, anchor="nw", window=labelcmpl)
          
          lb_inv1=Label(canvas_pro2,text=inv_lst_bx2.get(1.0, END), bg="white",anchor="ne",font=("Helvetica", 11),height=1)#Invoice#
          win_inv1 = canvas_pro2.create_window(550, 140, anchor="nw", window=lb_inv1)

          lb_inv1=Label(canvas_pro2,text=inv_lst_bx3.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", 11),height=1 )#Invoicedate
          win_inv1 = canvas_pro2.create_window(550, 160, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(canvas_pro2,text="Due Date", bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Due date
          win_inv1 = canvas_pro2.create_window(550, 180, anchor="nw", window=lb_inv1)

          lb_inv1=Label(canvas_pro2,text=inv_lst_bx5.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", 11),height=1)#Terms
          win_inv1 = canvas_pro2.create_window(550, 200, anchor="nw", window=lb_inv1)

          lb_inv1=Label(canvas_pro2,text=inv_lst_bx4.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = canvas_pro2.create_window(550, 220, anchor="nw", window=lb_inv1)

          canvas_pro2.create_text(210, 185, text=cmpy_dtl[4],justify=LEFT, fill="black", font=('Helvetica 9'))
        
          lb_inv1=Label(canvas_pro2,text=str(inv_tp_lf.get())+"1/2022", bg="white",justify=LEFT,font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = canvas_pro2.create_window(790, 140, anchor="ne", window=lb_inv1)
          canvas_pro2.create_text(750, 170, text=date_tdy, fill="black", font=('Helvetica 11'))
          canvas_pro2.create_text(750, 190, text=date_tdy, fill="black", font=('Helvetica 11'))
          canvas_pro2.create_text(740, 210, text="NET 15", fill="black", font=('Helvetica 11'))  
            

          # lb_inv1=Label(canvas_pro2,text=inv_lst_bx1.get(1.0,END), bg="white",anchor="e",font=('Helvetica 14 bold'),height=2)#invoice
          # win_inv1 = canvas_pro2.create_window(155, 200, anchor="nw", window=lb_inv1)
          lb_inv1=Label(canvas_pro2,text=inv_lst_bx1.get(1.0,END), bg="white",anchor="ne",font=('Helvetica 14 bold'),height=1)#invoice
          win_inv1 = canvas_pro2.create_window(155, 200, anchor="nw", window=lb_inv1)


          lb_inv1=Label(canvas_pro2,text=inv_lst_bx6.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline" ),height=1)#Invoice to
          win_inv1 = canvas_pro2.create_window(175, 250, anchor="nw", window=lb_inv1)

          lb_inv1=Label(canvas_pro2,text=inv_lst_bx7.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline"),height=1)#Ship to
          win_inv1 = canvas_pro2.create_window(525, 250, anchor="nw", window=lb_inv1)

        
          canvas_pro2.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          canvas_pro2.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))

          canvas_pro2.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          canvas_pro2.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

          fgth = ttk.Style()
          fgth.configure('mystyle102.Treeview.Heading', background=''+ invset_bg_var.get(),State='DISABLE')

          tree=ttk.Treeview(canvas_pro2, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle102.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=100)
          tree.heading("# 1", text=inv_lst_bx8.get(1.0,END))
          tree.column("# 2", anchor=E, stretch=NO, width=350)
          tree.heading("# 2", text=inv_lst_bx9.get(1.0,END))
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text=inv_lst_bx10.get(1.0,END))
          tree.column("# 4", anchor=E, stretch=NO, width=90)
          tree.heading("# 4", text=inv_lst_bx13.get(1.0,END))
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text="Price")
          
          window = canvas_pro2.create_window(120, 340, anchor="nw", window=tree)

          canvas_pro2.create_line(120, 390, 820, 390 )
          canvas_pro2.create_line(120, 340, 120, 365 )
          canvas_pro2.create_line(120, 365, 120, 390 )
          canvas_pro2.create_line(820, 340, 820, 540 )
          canvas_pro2.create_line(740, 340, 740, 540 )
          canvas_pro2.create_line(570, 340, 570, 540 )
          canvas_pro2.create_line(570, 415, 820, 415 )
          canvas_pro2.create_line(570, 440, 820, 440 )
          canvas_pro2.create_line(570, 465, 820, 465 )
          canvas_pro2.create_line(570, 490, 820, 490 )
          canvas_pro2.create_line(570, 515, 820, 515 )
          canvas_pro2.create_line(650, 340, 650, 390 )
          canvas_pro2.create_line(220, 340, 220, 390 )
          canvas_pro2.create_line(570, 540, 820, 540 )

          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          crcy_type=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          cry_plcy=post_rp[0]
          if cry_plcy=="before amount": 
            canvas_pro2.create_text(710, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 404, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(792, 428, text=str(crcy_type)+"18.00", fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 502, text=str(crcy_type)+"100.00", fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 526, text=str(crcy_type)+"138.00", fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(792, 454, text=str(crcy_type)+"20.00", fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 479, text=str(crcy_type)+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount":
            canvas_pro2.create_text(710, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 404, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(792, 428, text="18.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 502, text="100.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 526, text="138.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(792, 454, text="20.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 479, text="238.00"+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="before amount with space": 
            canvas_pro2.create_text(710, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 404, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(792, 428, text=str(crcy_type)+" "+"18.00", fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 502, text=str(crcy_type)+" "+"100.00", fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 526, text=str(crcy_type)+" "+"138.00", fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(792, 454, text=str(crcy_type)+" "+"20.00", fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 479, text=str(crcy_type)+" "+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount with space":
            canvas_pro2.create_text(710, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 404, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(792, 428, text="18.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 502, text="100.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 526, text="138.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(792, 454, text="20.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            canvas_pro2.create_text(790, 479, text="238.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          else:
            pass


          canvas_pro2.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
          

          lbx_inv=Label(canvas_pro2,text=inv_lst_bx14.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10"),height=1)#"Subtotal"
          win_inv2 = canvas_pro2.create_window(630,392, anchor="nw", window=lbx_inv)

          lbx_inv=Label(canvas_pro2,text=inv_lst_bx17.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"TAX1"
          win_inv2 = canvas_pro2.create_window(635,418, anchor="nw", window=lbx_inv)

          lbx_inv=Label(canvas_pro2,text=inv_lst_bx19.get(1.0,END), bg="White",anchor="nw",font=("Helvetica 10 "), height=1)#"Total Paid"
          win_inv2 = canvas_pro2.create_window(630, 492,anchor="nw", window=lbx_inv)

          lbx_inv=Label(canvas_pro2,text=inv_lst_bx20.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"Balance"
          win_inv2 = canvas_pro2.create_window(635, 518, anchor="nw", window=lbx_inv)
            

        
          canvas_pro2.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))

          lbx_inv=Label(canvas_pro2,text=inv_lst_bx18.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#Order Total"
          win_inv2 = canvas_pro2.create_window(625, 468, anchor="nw", window=lbx_inv)
          lbx_inv=Label(canvas_pro2,text=inv_lst_bx21.get(1.0,END), bg="white",anchor="n",font=("Helvetica 10 "),height=1)#"Terms and Conditions"
          win_inv2 = canvas_pro2.create_window(420, 570, anchor="nw", window=lbx_inv)
        
          canvas_pro2.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
        

          canvas_pro2.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
          
          canvas_pro2.create_line(150, 600, 795, 600)
          text=inv_txt.get('1.0',END)
          wraped_text="\n".join(wrap(text,130))
    
        
          lbx_inv=Label(canvas_pro2,text=wraped_text, bg="white",anchor="nw",font=("Helvetica 8 "), justify=LEFT, height=3, width=107)
          win_inv2 = canvas_pro2.create_window(150, 603,anchor="nw", window=lbx_inv)

          canvas_pro2.create_text(280, 660, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    

          canvas_pro2.create_text(720, 660, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
        else:

          frame_inv_pro2 = Frame(Invoice_setting_frame_cpy, width=953, height=300)
          frame_inv_pro2.pack(expand=True, fill=BOTH)
          frame_inv_pro2.place(x=247,y=90)
          
          canvas_pro2=Canvas(frame_inv_pro2, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(frame_inv_pro2, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas_pro2.yview)
          canvas_pro2.config(width=953,height=300)
          
          canvas_pro2.config(yscrollcommand=vertibar.set)
          canvas_pro2.pack(expand=True,side=LEFT,fill=BOTH)
          canvas_pro2.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          canvas_pro2.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          
          canvas_pro2.create_text(650, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
          
          canvas_pro2.create_text(250, 80, text="Your Company Name", fill="black", font=('Helvetica 12 '))
          canvas_pro2.create_text(225, 110, text="Address line 1", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(225, 125, text="Address line 2", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(225, 140, text="Address line 3", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(225, 155, text="Address line 4", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(234, 170, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(234, 185, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(225, 205, text="Invoice", fill="black", font=('Helvetica 14 bold'))
          canvas_pro2.create_text(232, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
          
          canvas_pro2.create_text(502, 150, text="Invoice#", fill="black", font=('Helvetica 11'))
          canvas_pro2.create_text(515, 170, text="Invoice date", fill="black", font=('Helvetica 11'))
          canvas_pro2.create_text(500, 190, text="Due date", fill="black", font=('Helvetica 11'))
          canvas_pro2.create_text(491, 210, text="Terms", fill="black", font=('Helvetica 11'))
          canvas_pro2.create_text(505, 230, text="Invoice ref.#", fill="black", font=('Helvetica 11'))
          canvas_pro2.create_text(680, 150, text="INV1/2022", fill="black", font=('Helvetica 11'))
          canvas_pro2.create_text(680, 170, text="05-05-2022", fill="black", font=('Helvetica 11'))
          canvas_pro2.create_text(680, 190, text="20-05-2022", fill="black", font=('Helvetica 11'))
          canvas_pro2.create_text(670, 210, text="NET 15", fill="black", font=('Helvetica 11'))  
            
          canvas_pro2.create_text(210, 260, text="Invoice to", fill="black", font=('Helvetica 10 underline'))
          canvas_pro2.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          canvas_pro2.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          canvas_pro2.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          canvas_pro2.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

          tree=ttk.Treeview(canvas_pro2, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=100)
          tree.heading("# 1", text="ID/SKU")
          tree.column("# 2", anchor=E, stretch=NO, width=350)
          tree.heading("# 2", text="Product/Service - Description")
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text="Quantity")
          tree.column("# 4", anchor=E, stretch=NO, width=90)
          tree.heading("# 4", text="Unit Price")
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text="Price")
          
          window = canvas_pro2.create_window(120, 340, anchor="nw", window=tree)

          canvas_pro2.create_line(120, 390, 820, 390 )
          canvas_pro2.create_line(120, 340, 120, 365 )
          canvas_pro2.create_line(120, 365, 120, 390 )
          canvas_pro2.create_line(820, 340, 820, 540 )
          canvas_pro2.create_line(740, 340, 740, 540 )
          canvas_pro2.create_line(570, 340, 570, 540 )
          canvas_pro2.create_line(570, 415, 820, 415 )
          canvas_pro2.create_line(570, 440, 820, 440 )
          canvas_pro2.create_line(570, 465, 820, 465 )
          canvas_pro2.create_line(570, 490, 820, 490 )
          canvas_pro2.create_line(570, 515, 820, 515 )
          canvas_pro2.create_line(650, 340, 650, 390 )
          canvas_pro2.create_line(220, 340, 220, 390 )
          canvas_pro2.create_line(570, 540, 820, 540 )

          canvas_pro2.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(710, 372, text="$200.00", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(790, 372, text="$200.00", fill="black", font=('Helvetica 10'))

          canvas_pro2.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(790, 404, text="$200.00", fill="black", font=('Helvetica 10'))

          canvas_pro2.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(792, 428, text="$18.00", fill="black", font=('Helvetica 10'))

          canvas_pro2.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(792, 454, text="$20.00", fill="black", font=('Helvetica 10'))

          canvas_pro2.create_text(790, 479, text="$238.00", fill="black", font=('Helvetica 10 bold'))
          canvas_pro2.create_text(650, 479, text="Estimate total", fill="black", font=('Helvetica 10 bold'))

          canvas_pro2.create_text(790, 502, text="$100.00", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))

          canvas_pro2.create_text(790, 526, text="$138.00", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

          canvas_pro2.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))

          canvas_pro2.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_line(150, 620, 795, 620)
          canvas_pro2.create_text(280, 655, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          canvas_pro2.create_text(720, 655, text="Page 1 of 1", fill="black", font=('Helvetica 10'))


    #----------------Simplified 1 (logo on left side)------------------ 
      elif menuvar_lst == 'Simplified 1 (logo on left side)':
        if cmpy_dtl[1] is not None:
          sql='select dateformat from company'
          fbcursor.execute(sql)
          date_frmat=fbcursor.fetchone()
          
          if not date_frmat:
            ft_fr='%Y-%m-%d'
        
          elif date_frmat[0]=="mm-dd-yyyy":
            ft_fr='%m-%d-%Y'

          elif date_frmat[0]=="dd-mm-yyyy":
              ft_fr='%d-%m-%Y'
                      
          elif date_frmat[0]=="yyy.mm.dd":
              ft_fr='%Y.%m.%d'
                          
          elif date_frmat[0]=="mm/dd/yyyy":
              ft_fr='%m/%d/%Y'
                          
          elif date_frmat[0]=="dd/mm/yyyy":
              ft_fr='%d/%m/%Y'
                                  
          elif date_frmat[0]=="dd.mm.yyyy":
              ft_fr='%d.%m.%Y'
                                  
          elif date_frmat[0]=="yyyy/  mm/dd":
              ft_fr='%Y/%m/%d'

          else:
              ft_fr='%Y-%m-%d'
          td_date=date.today()
          date_tdy=td_date.strftime(ft_fr)
          smply_frame = Frame(Invoice_setting_frame_cpy, width=953, height=300)
          smply_frame.pack(expand=True, fill=BOTH)
          smply_frame.place(x=247,y=90)
          inv_smply_canvas=Canvas(smply_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))

          vertibar=Scrollbar(smply_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=inv_smply_canvas.yview)
          inv_smply_canvas.config(width=953,height=300)

          inv_smply_canvas.config(yscrollcommand=vertibar.set)
          inv_smply_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          inv_smply_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          inv_smply_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          try:
            inv_image = Image.open("images/"+cmpy_dtl[13])
            inv_resize_image = inv_image.resize((200,75))
            inv_image = ImageTk.PhotoImage(inv_resize_image)
          
            inv_logo = Label(inv_smply_canvas,width=200,height=75, bg="white",image = inv_image) 
            inv_window_image = inv_smply_canvas.create_window(150, 50, anchor="nw", window=inv_logo)
            inv_logo.photo = inv_image
          except:
            inv_smply_canvas.create_text(285, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

          lb_inv1=Label(inv_smply_canvas,text=inv_lst_bx2.get(1.0, END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Invoice#
          win_inv1 = inv_smply_canvas.create_window(175, 140, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_smply_canvas,text=inv_lst_bx3.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1 )#Invoicedate
          win_inv1 = inv_smply_canvas.create_window(175, 160, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(inv_smply_canvas,text="Due Date", bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Due date
          win_inv1 = inv_smply_canvas.create_window(175, 180, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_smply_canvas,text=inv_lst_bx5.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Terms
          win_inv1 = inv_smply_canvas.create_window(175, 200, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_smply_canvas,text=inv_lst_bx4.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = inv_smply_canvas.create_window(175, 220, anchor="nw", window=lb_inv1)

          win_inv1 = inv_smply_canvas.create_window(175, 220, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_smply_canvas,text=str(inv_tp_lf.get())+"1/2022", bg="white",anchor="nw",font=("Helvetica", ),height=1)
          win_inv1 = inv_smply_canvas.create_window(310, 140, anchor="nw", window=lb_inv1)
          inv_smply_canvas.create_text(350, 170, text=date_tdy, fill="black", font=('Helvetica 11'))
          inv_smply_canvas.create_text(350, 190, text=date_tdy, fill="black", font=('Helvetica 11'))
          inv_smply_canvas.create_text(340, 210, text="NET 15", fill="black", font=('Helvetica 11'))      

          labelcmp=Label(inv_smply_canvas,text=cmpy_dtl[1], bg="white",anchor="e",font=("Helvetica", 12), width=40, height=1)
          window = inv_smply_canvas.create_window(430,80, anchor="nw", window=labelcmp)

          labelcmpl=Label(inv_smply_canvas,text=cmpy_dtl[2],justify=RIGHT, bg="white",font=("Helvetica", 9),anchor="ne", width=50, height=4)
          windowl = inv_smply_canvas.create_window(440,110, anchor="nw", window=labelcmpl)

          
          inv_smply_canvas.create_text(745, 185, text=cmpy_dtl[4], fill="black", font=('Helvetica 9'))

          lb_inv1=Label(inv_smply_canvas,text=inv_lst_bx1.get(1.0,END), bg="white",anchor="ne",font=('Helvetica 14 bold'),height=1)#invoice
          win_inv1 = inv_smply_canvas.create_window(800, 200, anchor="ne", window=lb_inv1)

          

          lb_inv1=Label(inv_smply_canvas,text=inv_lst_bx6.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline" ),height=1)#Invoice to
          win_inv1 = inv_smply_canvas.create_window(175, 250, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_smply_canvas,text=inv_lst_bx7.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline"),height=1)#Ship to
          win_inv1 = inv_smply_canvas.create_window(525, 250, anchor="nw", window=lb_inv1)

          # inv_smply_canvas.create_text(765, 205, text="Invoice", fill="black", font=('Helvetica 14 bold'))

          
          # inv_smply_canvas.create_text(210, 260, text="Invoice to", fill="black", font=('Helvetica 10 underline'))
          inv_smply_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          inv_smply_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
          # inv_smply_canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          inv_smply_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          inv_smply_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
          fgth = ttk.Style()
          fgth.configure('mystyle103.Treeview.Heading', background=''+ invset_bg_var.get(),State='DISABLE')
          tree=ttk.Treeview(inv_smply_canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle103.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=530)
          tree.heading("# 1", text=inv_lst_bx9.get(1.0,END))
          tree.column("# 2", anchor=E, stretch=NO, width=90)
          tree.heading("# 2", text=inv_lst_bx10.get(1.0,END))
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text=inv_lst_bx13.get(1.0,END))
          
          window = inv_smply_canvas.create_window(120, 340, anchor="nw", window=tree)

          inv_smply_canvas.create_line(120, 390, 820, 390 )
          inv_smply_canvas.create_line(120, 340, 120, 365 )
          inv_smply_canvas.create_line(120, 365, 120, 390 )
          inv_smply_canvas.create_line(820, 340, 820, 540 )
          inv_smply_canvas.create_line(740, 340, 740, 540 )
          inv_smply_canvas.create_line(570, 390, 570, 540 )
          inv_smply_canvas.create_line(570, 415, 820, 415 )
          inv_smply_canvas.create_line(570, 440, 820, 440 )
          inv_smply_canvas.create_line(570, 465, 820, 465 )
          inv_smply_canvas.create_line(570, 490, 820, 490 )
          inv_smply_canvas.create_line(570, 515, 820, 515 )
          inv_smply_canvas.create_line(650, 340, 650, 390 )
          inv_smply_canvas.create_line(570, 540, 820, 540 )
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          crcy_type=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          cry_plcy=post_rp[0]
          if cry_plcy=="before amount": 
            inv_smply_canvas.create_text(710, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 404, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(792, 428, text=str(crcy_type)+"18.00", fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 502, text=str(crcy_type)+"100.00", fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 526, text=str(crcy_type)+"138.00", fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(792, 454, text=str(crcy_type)+"20.00", fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 479, text=str(crcy_type)+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount":
            inv_smply_canvas.create_text(710, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 404, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(792, 428, text="18.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 502, text="100.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 526, text="138.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(792, 454, text="20.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 479, text="238.00"+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="before amount with space": 
            inv_smply_canvas.create_text(710, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 404, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(792, 428, text=str(crcy_type)+" "+"18.00", fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 502, text=str(crcy_type)+" "+"100.00", fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 526, text=str(crcy_type)+" "+"138.00", fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(792, 454, text=str(crcy_type)+" "+"20.00", fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 479, text=str(crcy_type)+" "+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount with space":
            inv_smply_canvas.create_text(710, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 404, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(792, 428, text="18.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 502, text="100.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 526, text="138.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(792, 454, text="20.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_smply_canvas.create_text(790, 479, text="238.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          else:
            pass
            

          
          inv_smply_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(710, 372, text="1", fill="black", font=('Helvetica 10'))


          lbx_inv=Label(inv_smply_canvas,text=inv_lst_bx14.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10"),height=1)#"Subtotal"
          win_inv2 = inv_smply_canvas.create_window(630,392, anchor="nw", window=lbx_inv)

          lbx_inv=Label(inv_smply_canvas,text=inv_lst_bx17.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"TAX1"
          win_inv2 = inv_smply_canvas.create_window(635,418, anchor="nw", window=lbx_inv)

          lbx_inv=Label(inv_smply_canvas,text=inv_lst_bx19.get(1.0,END), bg="White",anchor="nw",font=("Helvetica 10 "), height=1)#"Total Paid"
          win_inv2 = inv_smply_canvas.create_window(630, 492,anchor="nw", window=lbx_inv)

          lbx_inv=Label(inv_smply_canvas,text=inv_lst_bx20.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"Balance"
          win_inv2 = inv_smply_canvas.create_window(635, 518, anchor="nw", window=lbx_inv)
            

        
        
          inv_smply_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))

          lbx_inv=Label(inv_smply_canvas,text=inv_lst_bx18.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#Order Total"
          win_inv2 = inv_smply_canvas.create_window(625, 468, anchor="nw", window=lbx_inv)
          lbx_inv=Label(inv_smply_canvas,text=inv_lst_bx21.get(1.0,END), bg="white",anchor="n",font=("Helvetica 10 "),height=1)#"Terms and Conditions"
          win_inv2 = inv_smply_canvas.create_window(420, 570, anchor="nw", window=lbx_inv)

          inv_smply_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
    
          inv_smply_canvas.create_line(150, 600, 795, 600)
          text=inv_txt.get('1.0',END)
          wraped_text="\n".join(wrap(text,130))
    
        
          lbx_inv=Label(inv_smply_canvas,text=wraped_text, bg="white",anchor="nw",font=("Helvetica 8 "), justify=LEFT, height=3, width=107)
          win_inv2 = inv_smply_canvas.create_window(150, 603,anchor="nw", window=lbx_inv)

          inv_smply_canvas.create_text(280, 660, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    

          inv_smply_canvas.create_text(720, 660, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
        else:
          smply_frame = Frame(Invoice_setting_frame_cpy, width=953, height=300)
          smply_frame.pack(expand=True, fill=BOTH)
          smply_frame.place(x=247,y=90)
          inv_smply_canvas=Canvas(smply_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))

          vertibar=Scrollbar(smply_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=inv_smply_canvas.yview)
          inv_smply_canvas.config(width=953,height=300)

          inv_smply_canvas.config(yscrollcommand=vertibar.set)
          inv_smply_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          inv_smply_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          inv_smply_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(285, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

          inv_smply_canvas.create_text(202, 150, text="Invoice#", fill="black", font=('Helvetica 11'))
          inv_smply_canvas.create_text(215, 170, text="Invoice date", fill="black", font=('Helvetica 11'))
          inv_smply_canvas.create_text(200, 190, text="Due date", fill="black", font=('Helvetica 11'))
          inv_smply_canvas.create_text(191, 210, text="Terms", fill="black", font=('Helvetica 11'))
          inv_smply_canvas.create_text(205, 230, text="Invoice ref.#", fill="black", font=('Helvetica 11'))
          inv_smply_canvas.create_text(350, 150, text="INV1/2022", fill="black", font=('Helvetica 11'))
          inv_smply_canvas.create_text(350, 170, text="05-05-2022", fill="black", font=('Helvetica 11'))
          inv_smply_canvas.create_text(350, 190, text="20-05-2022", fill="black", font=('Helvetica 11'))
          inv_smply_canvas.create_text(340, 210, text="NET 15", fill="black", font=('Helvetica 11'))      

          inv_smply_canvas.create_text(720, 80, text="Your Company Name", fill="black", font=('Helvetica 12 '))
          inv_smply_canvas.create_text(750, 110, text="Address line 1", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(750, 125, text="Address line 2", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(750, 140, text="Address line 3", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(750, 155, text="Address line 4", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(745, 170, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(745, 185, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(750, 205, text="Invoice", fill="black", font=('Helvetica 14 bold'))
          
          inv_smply_canvas.create_text(210, 260, text="Invoice to", fill="black", font=('Helvetica 10 underline'))
          inv_smply_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          inv_smply_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          inv_smply_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          inv_smply_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

          tree=ttk.Treeview(inv_smply_canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=530)
          tree.heading("# 1", text="Product/Service - Description")
          tree.column("# 2", anchor=E, stretch=NO, width=90)
          tree.heading("# 2", text="Quantity")
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text="Price")
          
          window = inv_smply_canvas.create_window(120, 340, anchor="nw", window=tree)

          inv_smply_canvas.create_line(120, 390, 820, 390 )
          inv_smply_canvas.create_line(120, 340, 120, 365 )
          inv_smply_canvas.create_line(120, 365, 120, 390 )
          inv_smply_canvas.create_line(820, 340, 820, 540 )
          inv_smply_canvas.create_line(740, 340, 740, 540 )
          inv_smply_canvas.create_line(570, 390, 570, 540 )
          inv_smply_canvas.create_line(570, 415, 820, 415 )
          inv_smply_canvas.create_line(570, 440, 820, 440 )
          inv_smply_canvas.create_line(570, 465, 820, 465 )
          inv_smply_canvas.create_line(570, 490, 820, 490 )
          inv_smply_canvas.create_line(570, 515, 820, 515 )
          inv_smply_canvas.create_line(650, 340, 650, 390 )
          inv_smply_canvas.create_line(570, 540, 820, 540 )

          
          inv_smply_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(710, 372, text="1", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(790, 372, text="$200.00", fill="black", font=('Helvetica 10'))

          inv_smply_canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(790, 404, text="$200.00", fill="black", font=('Helvetica 10'))

          inv_smply_canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(792, 428, text="$18.00", fill="black", font=('Helvetica 10'))

          inv_smply_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(792, 454, text="$20.00", fill="black", font=('Helvetica 10'))

          inv_smply_canvas.create_text(790, 479, text="$238.00", fill="black", font=('Helvetica 10 bold'))
          inv_smply_canvas.create_text(650, 479, text="Estimate total", fill="black", font=('Helvetica 10 bold'))

          inv_smply_canvas.create_text(790, 502, text="$100.00", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))

          inv_smply_canvas.create_text(790, 526, text="$138.00", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

          inv_smply_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))

          inv_smply_canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_line(150, 620, 795, 620)
          inv_smply_canvas.create_text(280, 655, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          inv_smply_canvas.create_text(720, 655, text="Page 1 of 1", fill="black", font=('Helvetica 10'))

    #----------------Simplified 2 (logo on right side)------------------ 
      elif menuvar_lst == 'Simplified 2 (logo on right side)': 
        if cmpy_dtl[1] is not None:
          sql='select dateformat from company'
          fbcursor.execute(sql)
          date_frmat=fbcursor.fetchone()
          
          if not date_frmat:
            ft_fr='%Y-%m-%d'
        
          elif date_frmat[0]=="mm-dd-yyyy":
            ft_fr='%m-%d-%Y'

          elif date_frmat[0]=="dd-mm-yyyy":
              ft_fr='%d-%m-%Y'
                      
          elif date_frmat[0]=="yyy.mm.dd":
              ft_fr='%Y.%m.%d'
                          
          elif date_frmat[0]=="mm/dd/yyyy":
              ft_fr='%m/%d/%Y'
                          
          elif date_frmat[0]=="dd/mm/yyyy":
              ft_fr='%d/%m/%Y'
                                  
          elif date_frmat[0]=="dd.mm.yyyy":
              ft_fr='%d.%m.%Y'
                                  
          elif date_frmat[0]=="yyyy/  mm/dd":
              ft_fr='%Y/%m/%d'

          else:
              ft_fr='%Y-%m-%d'
          td_date=date.today()
          date_tdy=td_date.strftime(ft_fr)
          smply2_frame = Frame(Invoice_setting_frame_cpy, width=953, height=300)
          smply2_frame.pack(expand=True, fill=BOTH)
          smply2_frame.place(x=247,y=90)

          smply2_canvas=Canvas(smply2_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))

          vertibar=Scrollbar(smply2_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=smply2_canvas.yview)
          smply2_canvas.config(width=953,height=300)

          smply2_canvas.config(yscrollcommand=vertibar.set)
          smply2_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          smply2_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          smply2_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          try:
            inv_image = Image.open("images/"+cmpy_dtl[13])
            inv_resize_image = inv_image.resize((200,75))
            inv_image = ImageTk.PhotoImage(inv_resize_image)
          
            inv_logo = Label(smply2_canvas,width=200,height=75, bg="white",image = inv_image) 
            inv_window_image = smply2_canvas.create_window(800, 60, anchor="ne", window=inv_logo)
            inv_logo.photo = inv_image
          except:
            smply2_canvas.create_text(650, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

          labelcmp=Label(smply2_canvas,text=cmpy_dtl[1],justify=LEFT, bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=1)
          window = smply2_canvas.create_window(150,80, anchor="nw", window=labelcmp)

          labelcmpl=Label(smply2_canvas,text=cmpy_dtl[2],justify=LEFT, bg="white",font=("Helvetica", 9),anchor="nw", width=40, height=4)
          windowl = smply2_canvas.create_window(155 ,110, anchor="nw", window=labelcmpl)
          
          lb_inv1=Label(smply2_canvas,text=inv_lst_bx2.get(1.0, END), bg="white",anchor="ne",font=("Helvetica", 11),height=1)#Invoice#
          win_inv1 = smply2_canvas.create_window(550, 140, anchor="nw", window=lb_inv1)

          lb_inv1=Label(smply2_canvas,text=inv_lst_bx3.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", 11),height=1 )#Invoicedate
          win_inv1 = smply2_canvas.create_window(550, 160, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(smply2_canvas,text="Due Date", bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Due date
          win_inv1 = smply2_canvas.create_window(550, 180, anchor="nw", window=lb_inv1)

          lb_inv1=Label(smply2_canvas,text=inv_lst_bx5.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", 11),height=1)#Terms
          win_inv1 = smply2_canvas.create_window(550, 200, anchor="nw", window=lb_inv1)

          lb_inv1=Label(smply2_canvas,text=inv_lst_bx4.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = smply2_canvas.create_window(550, 220, anchor="nw", window=lb_inv1)

          smply2_canvas.create_text(210, 185, text=cmpy_dtl[4],justify=LEFT, fill="black", font=('Helvetica 9'))
          lb_inv1=Label(smply2_canvas,text=inv_lst_bx1.get(1.0,END), bg="white",anchor="ne",font=('Helvetica 14 bold'),height=1)#invoice
          win_inv1 = smply2_canvas.create_window(155, 200, anchor="nw", window=lb_inv1)


          lb_inv1=Label(smply2_canvas,text=inv_lst_bx6.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline" ),height=1)#Invoice to
          win_inv1 = smply2_canvas.create_window(175, 250, anchor="nw", window=lb_inv1)

          lb_inv1=Label(smply2_canvas,text=inv_lst_bx7.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline"),height=1)#Ship to
          win_inv1 = smply2_canvas.create_window(525, 250, anchor="nw", window=lb_inv1)
    
          lb_inv1=Label(smply2_canvas,text=str(inv_tp_lf.get())+"1/2022", bg="white",justify=LEFT,font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = smply2_canvas.create_window(790, 140, anchor="ne", window=lb_inv1)

          smply2_canvas.create_text(750, 170, text=date_tdy, fill="black", font=('Helvetica 11'))
          smply2_canvas.create_text(750, 190, text=date_tdy, fill="black", font=('Helvetica 11'))
          smply2_canvas.create_text(740, 210, text="NET 15", fill="black", font=('Helvetica 11'))      

        
          smply2_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          smply2_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))

          smply2_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          smply2_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

          fgth = ttk.Style()
          fgth.configure('mystyle104.Treeview.Heading', background=''+ invset_bg_var.get(),State='DISABLE')
          tree=ttk.Treeview(smply2_canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle104.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=530)
          tree.heading("# 1", text=inv_lst_bx9.get(1.0,END))
          tree.column("# 2", anchor=E, stretch=NO, width=90)
          tree.heading("# 2", text=inv_lst_bx10.get(1.0,END))
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text=inv_lst_bx13.get(1.0,END))
          
          window = smply2_canvas.create_window(120, 340, anchor="nw", window=tree)

          smply2_canvas.create_line(120, 390, 820, 390 )
          smply2_canvas.create_line(120, 340, 120, 365 )
          smply2_canvas.create_line(120, 365, 120, 390 )
          smply2_canvas.create_line(820, 340, 820, 540 )
          smply2_canvas.create_line(740, 340, 740, 540 )
          smply2_canvas.create_line(570, 390, 570, 540 )
          smply2_canvas.create_line(570, 415, 820, 415 )
          smply2_canvas.create_line(570, 440, 820, 440 )
          smply2_canvas.create_line(570, 465, 820, 465 )
          smply2_canvas.create_line(570, 490, 820, 490 )
          smply2_canvas.create_line(570, 515, 820, 515 )
          smply2_canvas.create_line(650, 340, 650, 390 )
          smply2_canvas.create_line(570, 540, 820, 540 )

          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          crcy_type=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          cry_plcy=post_rp[0]
          if cry_plcy=="before amount": 
            smply2_canvas.create_text(710, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 404, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(792, 428, text=str(crcy_type)+"18.00", fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 502, text=str(crcy_type)+"100.00", fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 526, text=str(crcy_type)+"138.00", fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(792, 454, text=str(crcy_type)+"20.00", fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 479, text=str(crcy_type)+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount":
            smply2_canvas.create_text(710, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 404, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(792, 428, text="18.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 502, text="100.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 526, text="138.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(792, 454, text="20.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 479, text="238.00"+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="before amount with space": 
            smply2_canvas.create_text(710, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 404, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(792, 428, text=str(crcy_type)+" "+"18.00", fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 502, text=str(crcy_type)+" "+"100.00", fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 526, text=str(crcy_type)+" "+"138.00", fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(792, 454, text=str(crcy_type)+" "+"20.00", fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 479, text=str(crcy_type)+" "+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount with space":
            smply2_canvas.create_text(710, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 404, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(792, 428, text="18.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 502, text="100.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 526, text="138.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(792, 454, text="20.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            smply2_canvas.create_text(790, 479, text="238.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          else:
            pass
          
          smply2_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(710, 372, text="1", fill="black", font=('Helvetica 10'))
          

          lbx_inv=Label(smply2_canvas,text=inv_lst_bx14.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10"),height=1)#"Subtotal"
          win_inv2 = smply2_canvas.create_window(630,392, anchor="nw", window=lbx_inv)

          lbx_inv=Label(smply2_canvas,text=inv_lst_bx17.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"TAX1"
          win_inv2 = smply2_canvas.create_window(635,418, anchor="nw", window=lbx_inv)

          lbx_inv=Label(smply2_canvas,text=inv_lst_bx19.get(1.0,END), bg="White",anchor="nw",font=("Helvetica 10 "), height=1)#"Total Paid"
          win_inv2 = smply2_canvas.create_window(630, 492,anchor="nw", window=lbx_inv)

          lbx_inv=Label(smply2_canvas,text=inv_lst_bx20.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"Balance"
          win_inv2 = smply2_canvas.create_window(635, 518, anchor="nw", window=lbx_inv)
            

        

          smply2_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
        
          lbx_inv=Label(smply2_canvas,text=inv_lst_bx18.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#Order Total"
          win_inv2 = smply2_canvas.create_window(625, 468, anchor="nw", window=lbx_inv)
          lbx_inv=Label(smply2_canvas,text=inv_lst_bx21.get(1.0,END), bg="white",anchor="n",font=("Helvetica 10 "),height=1)#"Terms and Conditions"
          win_inv2 = smply2_canvas.create_window(420, 570, anchor="nw", window=lbx_inv)


          smply2_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
      
          smply2_canvas.create_line(150, 600, 795, 600)
          text=inv_txt.get('1.0',END)
          wraped_text="\n".join(wrap(text,130))
    
        
          lbx_inv=Label(smply2_canvas,text=wraped_text, bg="white",anchor="nw",font=("Helvetica 8 "), justify=LEFT, height=3, width=107)
          win_inv2 = smply2_canvas.create_window(150, 603,anchor="nw", window=lbx_inv)

          smply2_canvas.create_text(280, 660, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    

          smply2_canvas.create_text(720, 660, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
        else:
          smply2_frame = Frame(Invoice_setting_frame_cpy, width=953, height=300)
          smply2_frame.pack(expand=True, fill=BOTH)
          smply2_frame.place(x=247,y=90)

          smply2_canvas=Canvas(smply2_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))

          vertibar=Scrollbar(smply2_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=smply2_canvas.yview)
          smply2_canvas.config(width=953,height=300)

          smply2_canvas.config(yscrollcommand=vertibar.set)
          smply2_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          smply2_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          smply2_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(650, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

          smply2_canvas.create_text(250, 80, text="Your Company Name", fill="black", font=('Helvetica 12 '))
          smply2_canvas.create_text(225, 110, text="Address line 1", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(225, 125, text="Address line 2", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(225, 140, text="Address line 3", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(225, 155, text="Address line 4", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(234, 170, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(234, 185, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(225, 205, text="Invoice", fill="black", font=('Helvetica 14 bold'))

          smply2_canvas.create_text(502, 150, text="Invoice#", fill="black", font=('Helvetica 11'))
          smply2_canvas.create_text(515, 170, text="Invoice date", fill="black", font=('Helvetica 11'))
          smply2_canvas.create_text(500, 190, text="Due date", fill="black", font=('Helvetica 11'))
          smply2_canvas.create_text(491, 210, text="Terms", fill="black", font=('Helvetica 11'))
          smply2_canvas.create_text(505, 230, text="Invoice ref.#", fill="black", font=('Helvetica 11'))
          smply2_canvas.create_text(680, 150, text="INV1/2022", fill="black", font=('Helvetica 11'))
          smply2_canvas.create_text(680, 170, text="05-05-2022", fill="black", font=('Helvetica 11'))
          smply2_canvas.create_text(680, 190, text="20-05-2022", fill="black", font=('Helvetica 11'))
          smply2_canvas.create_text(670, 210, text="NET 15", fill="black", font=('Helvetica 11'))      

          smply2_canvas.create_text(210, 260, text="Invoice to", fill="black", font=('Helvetica 10 underline'))
          smply2_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          smply2_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          smply2_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          smply2_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

          tree=ttk.Treeview(smply2_canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=530)
          tree.heading("# 1", text="Product/Service - Description")
          tree.column("# 2", anchor=E, stretch=NO, width=90)
          tree.heading("# 2", text="Quantity")
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text="Price")
          
          window = smply2_canvas.create_window(120, 340, anchor="nw", window=tree)

          smply2_canvas.create_line(120, 390, 820, 390 )
          smply2_canvas.create_line(120, 340, 120, 365 )
          smply2_canvas.create_line(120, 365, 120, 390 )
          smply2_canvas.create_line(820, 340, 820, 540 )
          smply2_canvas.create_line(740, 340, 740, 540 )
          smply2_canvas.create_line(570, 390, 570, 540 )
          smply2_canvas.create_line(570, 415, 820, 415 )
          smply2_canvas.create_line(570, 440, 820, 440 )
          smply2_canvas.create_line(570, 465, 820, 465 )
          smply2_canvas.create_line(570, 490, 820, 490 )
          smply2_canvas.create_line(570, 515, 820, 515 )
          smply2_canvas.create_line(650, 340, 650, 390 )
          smply2_canvas.create_line(570, 540, 820, 540 )

          
          smply2_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(710, 372, text="1", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(790, 372, text="$200.00", fill="black", font=('Helvetica 10'))

          smply2_canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(790, 404, text="$200.00", fill="black", font=('Helvetica 10'))

          smply2_canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(792, 428, text="$18.00", fill="black", font=('Helvetica 10'))

          smply2_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(792, 454, text="$20.00", fill="black", font=('Helvetica 10'))

          smply2_canvas.create_text(790, 479, text="$238.00", fill="black", font=('Helvetica 10 bold'))
          smply2_canvas.create_text(650, 479, text="Estimate total", fill="black", font=('Helvetica 10 bold'))

          smply2_canvas.create_text(790, 502, text="$100.00", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))

          smply2_canvas.create_text(790, 526, text="$138.00", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

          smply2_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))

          smply2_canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_line(150, 620, 795, 620)
          smply2_canvas.create_text(280, 655, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          smply2_canvas.create_text(720, 655, text="Page 1 of 1", fill="black", font=('Helvetica 10'))

    #----------------Business Classic------------------ 
      elif menuvar_lst == 'Business Classic':
        if cmpy_dtl[1] is not None:
          sql='select dateformat from company'
          fbcursor.execute(sql)
          date_frmat=fbcursor.fetchone()
          
          if not date_frmat:
            ft_fr='%Y-%m-%d'
        
          elif date_frmat[0]=="mm-dd-yyyy":
            ft_fr='%m-%d-%Y'

          elif date_frmat[0]=="dd-mm-yyyy":
              ft_fr='%d-%m-%Y'
                      
          elif date_frmat[0]=="yyy.mm.dd":
              ft_fr='%Y.%m.%d'
                          
          elif date_frmat[0]=="mm/dd/yyyy":
              ft_fr='%m/%d/%Y'
                          
          elif date_frmat[0]=="dd/mm/yyyy":
              ft_fr='%d/%m/%Y'
                                  
          elif date_frmat[0]=="dd.mm.yyyy":
              ft_fr='%d.%m.%Y'
                                  
          elif date_frmat[0]=="yyyy/  mm/dd":
              ft_fr='%Y/%m/%d'

          else:
              ft_fr='%Y-%m-%d'
          td_date=date.today()
          date_tdy=td_date.strftime(ft_fr)
          bsn_frame = Frame(Invoice_setting_frame_cpy, width=953, height=300)
          bsn_frame.pack(expand=True, fill=BOTH)
          bsn_frame.place(x=247,y=90)
          
          bsn_canvas=Canvas(bsn_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(bsn_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=bsn_canvas.yview)
          bsn_canvas.config(width=953,height=300)
          
          bsn_canvas.config(yscrollcommand=vertibar.set)
          bsn_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          bsn_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          bsn_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_line(150, 70, 800, 70, fill='orange')
          try:
            inv_image = Image.open("images/"+cmpy_dtl[13])
            inv_resize_image = inv_image.resize((200,75))
            inv_image = ImageTk.PhotoImage(inv_resize_image)
          
            inv_logo = Label(bsn_canvas,width=200,height=75, bg="white",image = inv_image) 
            inv_window_image = bsn_canvas.create_window(140, 125, anchor="nw", window=inv_logo)
            inv_logo.photo = inv_image
          except:
            bsn_canvas.create_text(300, 150, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
          labelcmp=Label(bsn_canvas,text=cmpy_dtl[1],justify=LEFT, bg="white",anchor="nw",font=("Helvetica", 12), width=30, height=1)
          window = bsn_canvas.create_window(345,100, anchor="nw", window=labelcmp)

          labelcmpl=Label(bsn_canvas,text=cmpy_dtl[2],justify=LEFT, bg="white",font=("Helvetica", 9),anchor="nw", width=40, height=4)
          windowl = bsn_canvas.create_window(350 ,130, anchor="nw", window=labelcmpl)
          
          bsn_canvas.create_text(405, 210, text=cmpy_dtl[4],justify=LEFT, fill="black", font=('Helvetica 9'))

          # bsn_canvas.create_text(500, 115, text="Your Company Name", fill="black", font=('Helvetica 12 '))
          # bsn_canvas.create_text(525, 140, text="Address line 1", fill="black", font=('Helvetica 10'))
          # bsn_canvas.create_text(525, 155, text="Address line 2", fill="black", font=('Helvetica 10'))
          # bsn_canvas.create_text(525, 170, text="Address line 3", fill="black", font=('Helvetica 10'))
          # bsn_canvas.create_text(525, 185, text="Address line 4", fill="black", font=('Helvetica 10'))
          # bsn_canvas.create_text(534, 200, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          # bsn_canvas.create_text(534, 215, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))

          
          
          bsn_canvas.create_text(720, 130, text="John Doe\n381 South Beadford Road\nBedford Corner,NY10549\nUnited States", fill="black", font=('Helvetica 11'))

          lb_inv1=Label(bsn_canvas,text=inv_lst_bx1.get(1.0, END), bg="white",anchor="ne",font=("Helvetica", 11),height=1)#Invoice#
          win_inv1 = bsn_canvas.create_window(575, 170, anchor="nw", window=lb_inv1)

          lb_inv1=Label(bsn_canvas,text=inv_lst_bx3.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", 11),height=1 )#Invoicedate
          win_inv1 = bsn_canvas.create_window(575, 200, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(bsn_canvas,text="Due Date", bg="white",anchor="ne",font=("Helvetica", 11),height=1)#Due date
          win_inv1 = bsn_canvas.create_window(575, 230, anchor="nw", window=lb_inv1)

          lb_inv1=Label(bsn_canvas,text=str(inv_tp_lf.get())+"1/2022", bg="white",justify=LEFT,font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = bsn_canvas.create_window(815, 170, anchor="ne", window=lb_inv1)

          # bsn_canvas.create_text(776, 180, text="INV1/2022", fill="black", font=('Helvetica 11'))
          bsn_canvas.create_text(776, 210, text=date_tdy, fill="black", font=('Helvetica 11'))
          bsn_canvas.create_text(776, 240, text=date_tdy, fill="black", font=('Helvetica 11'))

          fgth = ttk.Style()
          fgth.configure('mystyle105.Treeview.Heading', background=''+ invset_bg_var.get(),State='DISABLE')

          tree=ttk.Treeview(bsn_canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle105.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=200)
          tree.heading("# 1", text=inv_lst_bx9.get(1.0,END))
          tree.column("# 2", anchor=E, stretch=NO, width=250)
          tree.heading("# 2", text=inv_lst_bx11.get(1.0,END))
          tree.column("# 3", anchor=E, stretch=NO, width=90)
          tree.heading("# 3", text=inv_lst_bx12.get(1.0,END))
          tree.column("# 4", anchor=E, stretch=NO, width=80)
          tree.heading("# 4", text=inv_lst_bx10.get(1.0,END))
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text=inv_lst_bx13.get(1.0,END))
          
          window = bsn_canvas.create_window(120, 255, anchor="nw", window=tree)
          
          bsn_canvas.create_line(120, 295, 820, 295 )
          bsn_canvas.create_line(120, 255, 120, 295 )
          bsn_canvas.create_line(320, 255, 320, 295 )
          
          bsn_canvas.create_line(740, 255, 740, 445 )
          bsn_canvas.create_line(570, 255, 570, 445 )
          bsn_canvas.create_line(570, 255, 570, 295 )
          bsn_canvas.create_line(660, 255, 660, 295 )
          bsn_canvas.create_line(740, 255, 740, 295 )
          bsn_canvas.create_line(820, 255, 820, 445 )
          bsn_canvas.create_line(570, 320, 820, 320 )
          bsn_canvas.create_line(570, 345, 820, 345 )
          bsn_canvas.create_line(570, 370, 820, 370 )
          bsn_canvas.create_line(570, 395, 820, 395 )
          bsn_canvas.create_line(570, 420, 820, 420 )
          bsn_canvas.create_line(570, 445, 820, 445 )
          
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          crcy_type=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          cry_plcy=post_rp[0]
          if cry_plcy=="before amount": 
            bsn_canvas.create_text(630, 285, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 285, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 310, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(795, 335, text=str(crcy_type)+"18.00", fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(795, 360, text=str(crcy_type)+"20.00", fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 385, text=str(crcy_type)+"238.00", fill="black", font=('Helvetica 10 bold'))
            bsn_canvas.create_text(790, 410, text=str(crcy_type)+"100.00", fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 435, text=str(crcy_type)+"138.00", fill="black", font=('Helvetica 10'))
          elif cry_plcy=="after amount":
            bsn_canvas.create_text(630, 285, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 285, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 310, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(795, 335, text="18.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(795, 360, text="20.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 385, text="238.00"+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
            bsn_canvas.create_text(790, 410, text="100.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 435, text="138.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
          elif cry_plcy=="before amount with space":
            bsn_canvas.create_text(630, 285, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 285, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 310, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(795, 335, text=str(crcy_type)+" "+"18.00", fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(795, 360, text=str(crcy_type)+" "+"20.00", fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 385, text=str(crcy_type)+" "+"238.00", fill="black", font=('Helvetica 10 bold'))
            bsn_canvas.create_text(790, 410, text=str(crcy_type)+" "+"100.00", fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 435, text=str(crcy_type)+" "+"138.00", fill="black", font=('Helvetica 10')) 
          elif cry_plcy=="after amount with space":
            bsn_canvas.create_text(630, 285, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 285, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 310, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(795, 335, text="18.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(795, 360, text="20.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 385, text="238.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
            bsn_canvas.create_text(790, 410, text="100.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            bsn_canvas.create_text(790, 435, text="138.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
          else:
            pass
          bsn_canvas.create_text(160, 285, text="PROD-0001", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(450, 285, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
      
          bsn_canvas.create_text(700, 285, text="1", fill="black", font=('Helvetica 10'))
          

          

          lbx_inv=Label(bsn_canvas,text=inv_lst_bx14.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10"),height=1)#"Subtotal"
          win_inv2 = bsn_canvas.create_window(630,298, anchor="nw", window=lbx_inv)

          lbx_inv=Label(bsn_canvas,text=inv_lst_bx17.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"TAX1"
          win_inv2 = bsn_canvas.create_window(635,323, anchor="nw", window=lbx_inv)

          lbx_inv=Label(bsn_canvas,text=inv_lst_bx19.get(1.0,END), bg="White",anchor="nw",font=("Helvetica 10 "), height=1)#"Total Paid"
          win_inv2 = bsn_canvas.create_window(630, 398,anchor="nw", window=lbx_inv)

          lbx_inv=Label(bsn_canvas,text=inv_lst_bx20.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"Balance"
          win_inv2 = bsn_canvas.create_window(635, 423, anchor="nw", window=lbx_inv)

      
          bsn_canvas.create_text(655, 360, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          lbx_inv=Label(bsn_canvas,text=inv_lst_bx18.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#Order Total"
          win_inv2 = bsn_canvas.create_window(630, 373, anchor="nw", window=lbx_inv)
          lbx_inv=Label(bsn_canvas,text=inv_lst_bx21.get(1.0,END), bg="white",anchor="n",font=("Helvetica 10 "),height=1)#"Terms and Conditions"
          win_inv2 = bsn_canvas.create_window(420, 570, anchor="nw", window=lbx_inv)
      

          bsn_canvas.create_line(150, 470, 800, 470, fill='orange')
          bsn_canvas.create_text(275, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(182, 510, text="...", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(182, 520, text="...", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(182, 530, text="...", fill="black", font=('Helvetica 10'))
          


          bsn_canvas.create_line(150, 600, 795, 600)
          text=inv_txt.get('1.0',END)
          wraped_text="\n".join(wrap(text,130))
    
        
          lbx_inv=Label(bsn_canvas,text=wraped_text, bg="white",anchor="nw",font=("Helvetica 8 "), justify=LEFT, height=3, width=107)
          win_inv2 = bsn_canvas.create_window(150, 603,anchor="nw", window=lbx_inv)

          bsn_canvas.create_text(280, 660, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    

          bsn_canvas.create_text(720, 660, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
        else:

          bsn_frame = Frame(Invoice_setting_frame_cpy, width=953, height=300)
          bsn_frame.pack(expand=True, fill=BOTH)
          bsn_frame.place(x=247,y=90)
          
          bsn_canvas=Canvas(bsn_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(bsn_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=bsn_canvas.yview)
          bsn_canvas.config(width=953,height=300)
          
          bsn_canvas.config(yscrollcommand=vertibar.set)
          bsn_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          bsn_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          bsn_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_line(150, 70, 800, 70, fill='orange')
          bsn_canvas.create_text(300, 150, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

          bsn_canvas.create_text(500, 115, text="Your Company Name", fill="black", font=('Helvetica 12 '))
          bsn_canvas.create_text(525, 140, text="Address line 1", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(525, 155, text="Address line 2", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(525, 170, text="Address line 3", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(525, 185, text="Address line 4", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(534, 200, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(534, 215, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))

          
          

          bsn_canvas.create_text(659, 180, text="Invoice", fill="black", font=('Helvetica 11'))
          bsn_canvas.create_text(675, 210, text="Invoice date", fill="black", font=('Helvetica 11'))
          bsn_canvas.create_text(659, 240, text="Due date", fill="black", font=('Helvetica 11'))

          bsn_canvas.create_text(776, 180, text="INV1/2022", fill="black", font=('Helvetica 11'))
          bsn_canvas.create_text(776, 210, text="05 May 2022", fill="black", font=('Helvetica 11'))
          bsn_canvas.create_text(776, 240, text="20-05-2022", fill="black", font=('Helvetica 11'))
          tree=ttk.Treeview(bsn_canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=200)
          tree.heading("# 1", text="Product/Service")
          tree.column("# 2", anchor=E, stretch=NO, width=250)
          tree.heading("# 2", text="Description")
          tree.column("# 3", anchor=E, stretch=NO, width=90)
          tree.heading("# 3", text="Unit Price")
          tree.column("# 4", anchor=E, stretch=NO, width=80)
          tree.heading("# 4", text="Quantity")
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text="Price")
          
          window = bsn_canvas.create_window(120, 255, anchor="nw", window=tree)

          bsn_canvas.create_line(120, 295, 820, 295 )
          bsn_canvas.create_line(120, 255, 120, 295 )
          bsn_canvas.create_line(320, 255, 320, 295 )
          bsn_canvas.create_line(570, 255, 570, 295 )
          bsn_canvas.create_line(660, 255, 660, 295 )
          bsn_canvas.create_line(740, 255, 740, 295 )
          bsn_canvas.create_line(820, 255, 820, 445 )
          bsn_canvas.create_line(570, 320, 820, 320 )
          bsn_canvas.create_line(570, 345, 820, 345 )
          bsn_canvas.create_line(570, 370, 820, 370 )
          bsn_canvas.create_line(570, 395, 820, 395 )
          bsn_canvas.create_line(570, 420, 820, 420 )
          bsn_canvas.create_line(570, 445, 820, 445 )
          
          bsn_canvas.create_text(160, 285, text="PROD-0001", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(450, 285, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(630, 285, text="$200.00", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(700, 285, text="1", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(790, 285, text="$200.00", fill="black", font=('Helvetica 10'))

          bsn_canvas.create_text(790, 310, text="$200.00", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(795, 335, text="$18.00", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(795, 360, text="$20.00", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(790, 385, text="$238.00", fill="black", font=('Helvetica 10 bold'))
          bsn_canvas.create_text(790, 410, text="$100.00", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(790, 435, text="$138.00", fill="black", font=('Helvetica 10'))

          bsn_canvas.create_text(595, 310, text="Subtotal", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(585, 335, text="TAX1", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(635, 360, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(615, 385, text="Estimate total", fill="black", font=('Helvetica 10 bold'))
          bsn_canvas.create_text(600, 410, text="Total Paid", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(595, 435, text="Balance", fill="black", font=('Helvetica 10'))

          bsn_canvas.create_line(150, 470, 800, 470, fill='orange')
          bsn_canvas.create_text(275, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(182, 510, text="...", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(182, 520, text="...", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(182, 530, text="...", fill="black", font=('Helvetica 10'))
          
          bsn_canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_line(150, 620, 795, 620, fill='orange')
          bsn_canvas.create_text(280, 655, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          bsn_canvas.create_text(720, 655, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
      
  logo_just_var = StringVar()
  inv_cn_stl = ttk.Combobox(Invoice_setting_frame_cpy,textvariable=logo_just_var)
  inv_cn_stl.place(x=770 ,y=40, width=220)
  inv_cn_stl.bind("<<ComboboxSelected>>", styl_can_def)
  inv_cn_stl["values"] = ("Professional 1 (logo on left side)","Professional 2 (logo on right side)","Simplified 1 (logo on left side)","Simplified 2 (logo on right side)","Business Classic")
  inv_cn_stl.current(0)
  por_sql_st='select * from company'
  fbcursor.execute(por_sql_st)
  cmpy_dtl=fbcursor.fetchone()
  if  cmpy_dtl[1] is not None:   
          sql='select dateformat from company'
          fbcursor.execute(sql)
          date_frmat=fbcursor.fetchone()
          
          if not date_frmat:
            ft_fr='%Y-%m-%d'
        
          elif date_frmat[0]=="mm-dd-yyyy":
            ft_fr='%m-%d-%Y'

          elif date_frmat[0]=="dd-mm-yyyy":
              ft_fr='%d-%m-%Y'
                      
          elif date_frmat[0]=="yyy.mm.dd":
              ft_fr='%Y.%m.%d'
                          
          elif date_frmat[0]=="mm/dd/yyyy":
              ft_fr='%m/%d/%Y'
                          
          elif date_frmat[0]=="dd/mm/yyyy":
              ft_fr='%d/%m/%Y'
                                  
          elif date_frmat[0]=="dd.mm.yyyy":
              ft_fr='%d.%m.%Y'
                                  
          elif date_frmat[0]=="yyyy/  mm/dd":
              ft_fr='%Y/%m/%d'

          else:
              ft_fr='%Y-%m-%d'
          td_date=date.today()
          date_tdy=td_date.strftime(ft_fr)   
          frame_pro1 = Frame(Invoice_setting_frame_cpy, width=953, height=300)
          frame_pro1.pack(expand=True, fill=BOTH)
          frame_pro1.place(x=247,y=90)
          inv_pro1_canvas=Canvas(frame_pro1, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(frame_pro1, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=inv_pro1_canvas.yview)
          
          inv_pro1_canvas.config(width=953,height=300)
          inv_pro1_canvas.config(yscrollcommand=vertibar.set)
          inv_pro1_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          inv_pro1_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          inv_pro1_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          try:
            inv_image = Image.open("images/"+cmpy_dtl[13])
            inv_resize_image = inv_image.resize((200,75))
            inv_image = ImageTk.PhotoImage(inv_resize_image)
          
            inv_logo = Label(inv_pro1_canvas,width=200,height=75, bg="white",image = inv_image) 
            inv_window_image = inv_pro1_canvas.create_window(150, 50, anchor="nw", window=inv_logo)
            inv_logo.photo = inv_image
          except:
            inv_pro1_canvas.create_text(285, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
          
          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx2.get(1.0, END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Invoice#
          win_inv1 = inv_pro1_canvas.create_window(175, 140, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx3.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1 )#Invoicedate
          win_inv1 = inv_pro1_canvas.create_window(175, 160, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(inv_pro1_canvas,text="Due date", bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Due date
          win_inv1 = inv_pro1_canvas.create_window(175, 180, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx5.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Terms
          win_inv1 = inv_pro1_canvas.create_window(175, 200, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx4.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = inv_pro1_canvas.create_window(175, 220, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_pro1_canvas,text=str(inv_tp_lf.get())+"1/2022", bg="white",anchor="nw",font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = inv_pro1_canvas.create_window(310, 140, anchor="nw", window=lb_inv1)

          inv_pro1_canvas.create_text(350, 150, text="INV1/2022",justify=LEFT, fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(350, 170, text=date_tdy,justify=LEFT, fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(350, 190, text=date_tdy,justify=LEFT, fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(340, 210, text="NET 15",justify=LEFT, fill="black", font=('Helvetica 11'))   
          
          labelcmp=Label(inv_pro1_canvas,text=cmpy_dtl[1], bg="white",anchor="e",font=("Helvetica", 12), width=40, height=1)
          window = inv_pro1_canvas.create_window(430,80, anchor="nw", window=labelcmp)

          labelcmpl=Label(inv_pro1_canvas,text=cmpy_dtl[2],justify=RIGHT, bg="white",font=("Helvetica", 9),anchor="ne", width=50, height=4)
          windowl = inv_pro1_canvas.create_window(440,110, anchor="nw", window=labelcmpl)

          
          inv_pro1_canvas.create_text(745, 185, text=cmpy_dtl[4], fill="black", font=('Helvetica 10'))

          # lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx1.get(1.0,END), bg="white",anchor="ne",font=('Helvetica 14 bold'),height=1)#invoice
          # win_inv1 = inv_pro1_canvas.create_window(725, 200, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx1.get(1.0,END), bg="white",anchor="ne",font=('Helvetica 14 bold'),height=1)#invoice
          win_inv1 = inv_pro1_canvas.create_window(800, 200, anchor="ne", window=lb_inv1)


          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx22.get(1.0,END), bg="white",anchor="ne",font=("Helvetica 10" ),height=1)#TAX EXEMPTED
          win_inv1 = inv_pro1_canvas.create_window(705, 225, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx6.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline" ),height=1)#Invoice to
          win_inv1 = inv_pro1_canvas.create_window(175, 250, anchor="nw", window=lb_inv1)

          lb_inv1=Label(inv_pro1_canvas,text=inv_lst_bx7.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline"),height=1)#Ship to
          win_inv1 = inv_pro1_canvas.create_window(525, 250, anchor="nw", window=lb_inv1)

          
          # inv_pro1_canvas.create_text(765, 205, text="Invoice", fill="black", font=('Helvetica 14 bold'))
          # inv_pro1_canvas.create_text(746, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
          
          # inv_pro1_canvas.create_text(210, 260, text="Invoice to", fill="black", font=('Helvetica 10 underline'))
          inv_pro1_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          inv_pro1_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
          # inv_pro1_canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          inv_pro1_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          inv_pro1_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
          fgth = ttk.Style()
          fgth.configure('mystyle106.Treeview.Heading', background=''+ invset_bg_var.get(),State='DISABLE')

          tree=ttk.Treeview(inv_pro1_canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle106.Treeview')

          tree.column("# 1", anchor=E, stretch=NO, width=100)
          tree.heading("# 1", text=inv_lst_bx8.get(1.0,END))#"ID/SKU"
          tree.column("# 2", anchor=E, stretch=NO, width=350)
          tree.heading("# 2", text=inv_lst_bx9.get(1.0,END))#Product/Service - Description
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text=inv_lst_bx10.get(1.0,END))#"Quantity"
          tree.column("# 4", anchor=E, stretch=NO, width=90)
          tree.heading("# 4", text=inv_lst_bx12.get(1.0,END))#"Unit Price"
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text=inv_lst_bx13.get(1.0,END))#"Price"
          
          window = inv_pro1_canvas.create_window(120, 340, anchor="nw", window=tree)
          squl_qry='select * from company'
          fbcursor.execute(squl_qry)
          cmpy_tax=fbcursor.fetchone()

          inv_pro1_canvas.create_line(120, 390, 820, 390 )
          inv_pro1_canvas.create_line(120, 340, 120, 365 )
          inv_pro1_canvas.create_line(120, 365, 120, 390 )
          inv_pro1_canvas.create_line(820, 340, 820, 540 )
          inv_pro1_canvas.create_line(740, 340, 740, 540 )
          inv_pro1_canvas.create_line(570, 340, 570, 540 )
          inv_pro1_canvas.create_line(570, 415, 820, 415 )
          inv_pro1_canvas.create_line(570, 440, 820, 440 )
          inv_pro1_canvas.create_line(570, 465, 820, 465 )
          inv_pro1_canvas.create_line(570, 490, 820, 490 )
          inv_pro1_canvas.create_line(570, 515, 820, 515 )
          inv_pro1_canvas.create_line(650, 340, 650, 390 )
          inv_pro1_canvas.create_line(220, 340, 220, 390 )
          inv_pro1_canvas.create_line(570, 540, 820, 540 )

          inv_pro1_canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
          
            

          lbx_inv=Label(inv_pro1_canvas,text=inv_lst_bx14.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10"),height=1)#"Subtotal"
          win_inv2 = inv_pro1_canvas.create_window(630,392, anchor="nw", window=lbx_inv)

          lbx_inv=Label(inv_pro1_canvas,text=inv_lst_bx17.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"TAX1"
          win_inv2 = inv_pro1_canvas.create_window(635,418, anchor="nw", window=lbx_inv)

          lbx_inv=Label(inv_pro1_canvas,text=inv_lst_bx19.get(1.0,END), bg="White",anchor="nw",font=("Helvetica 10 "), height=1)#"Total Paid"
          win_inv2 = inv_pro1_canvas.create_window(630, 492,anchor="nw", window=lbx_inv)

          lbx_inv=Label(inv_pro1_canvas,text=inv_lst_bx20.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"Balance"
          win_inv2 = inv_pro1_canvas.create_window(635, 518, anchor="nw", window=lbx_inv)
            
          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          crcy_type=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          cry_plcy=post_rp[0]
          if cry_plcy=="before amount": 
            inv_pro1_canvas.create_text(710, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 404, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 428, text=str(crcy_type)+"18.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 502, text=str(crcy_type)+"100.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 526, text=str(crcy_type)+"138.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 454, text=str(crcy_type)+"20.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 479, text=str(crcy_type)+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount":
            inv_pro1_canvas.create_text(710, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 404, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 428, text="18.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 502, text="100.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 526, text="138.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 454, text="20.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 479, text="238.00"+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="before amount with space": 
            inv_pro1_canvas.create_text(710, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 404, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 428, text=str(crcy_type)+" "+"18.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 502, text=str(crcy_type)+" "+"100.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 526, text=str(crcy_type)+" "+"138.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 454, text=str(crcy_type)+" "+"20.00", fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 479, text=str(crcy_type)+" "+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount with space":
            inv_pro1_canvas.create_text(710, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 404, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 428, text="18.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 502, text="100.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 526, text="138.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(792, 454, text="20.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            inv_pro1_canvas.create_text(790, 479, text="238.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          else:
            pass
          
          inv_pro1_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          
          lbx_inv=Label(inv_pro1_canvas,text=inv_lst_bx18.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#Order Total"
          win_inv2 = inv_pro1_canvas.create_window(625, 468, anchor="nw", window=lbx_inv)
          
        
          inv_pro1_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
          lbx_inv=Label(inv_pro1_canvas,text=inv_lst_bx21.get(1.0,END), bg="white",anchor="n",font=("Helvetica 10 "),height=1)#"Terms and Conditions"
          win_inv2 = inv_pro1_canvas.create_window(420, 570, anchor="nw", window=lbx_inv)

          # inv_pro1_canvas.create_text(500, 620, text=inv_lst_bx21.get(1.0,END), fill="black", font=('Helvetica 10'))#"Terms and Conditions"
          inv_pro1_canvas.create_line(150, 600, 795, 600)
          text=inv_txt.get('1.0',END)
          wraped_text="\n".join(wrap(text,130))
    
        
          lbx_inv=Label(inv_pro1_canvas,text=wraped_text, bg="white",anchor="nw",font=("Helvetica 8 "), justify=LEFT, height=3, width=107)
          win_inv2 = inv_pro1_canvas.create_window(150, 603,anchor="nw", window=lbx_inv)

          inv_pro1_canvas.create_text(280, 660, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    

          inv_pro1_canvas.create_text(720, 660, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
  else:
          frame_pro1 = Frame(Invoice_setting_frame_cpy, width=953, height=300)
          frame_pro1.pack(expand=True, fill=BOTH)
          frame_pro1.place(x=247,y=90)
          inv_pro1_canvas=Canvas(frame_pro1, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(frame_pro1, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=inv_pro1_canvas.yview)
          
          inv_pro1_canvas.config(width=953,height=300)
          inv_pro1_canvas.config(yscrollcommand=vertibar.set)
          inv_pro1_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          inv_pro1_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          inv_pro1_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(285, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
          
          inv_pro1_canvas.create_text(195, 150, text="Invoice#", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(205, 170, text="Invoicedate", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(200, 190, text="Due date", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(191, 210, text="Terms", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(205, 230, text="Invoice ref.#", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(350, 150, text="INV1/2022", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(350, 170, text="03-05-2022", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(350, 190, text="18-05-2022", fill="black", font=('Helvetica 11'))
          inv_pro1_canvas.create_text(340, 210, text="NET 15", fill="black", font=('Helvetica 11'))   
          
          inv_pro1_canvas.create_text(720, 80, text="Your Company Name", fill="black", font=('Helvetica 12 '))

          inv_pro1_canvas.create_text(750, 110, text="Address line 1", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(750, 125, text="Address line 2", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(750, 140, text="Address line 3", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(750, 155, text="Address line 4", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(745, 170, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(745, 185, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(750, 205, text="Invoice", fill="black", font=('Helvetica 14 bold'))
          inv_pro1_canvas.create_text(746, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
          
          inv_pro1_canvas.create_text(210, 260, text="Invoice to", fill="black", font=('Helvetica 10 underline'))
          inv_pro1_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          inv_pro1_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          inv_pro1_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          inv_pro1_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
          s = ttk.Style()
          s.configure('Treeview.Heading', background=''+ invset_bg_var.get(),State='DISABLE')

          tree=ttk.Treeview(inv_pro1_canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle.Treeview')

          tree.column("# 1", anchor=E, stretch=NO, width=100)
          tree.heading("# 1", text="ID/SKU")
          tree.column("# 2", anchor=E, stretch=NO, width=350)
          tree.heading("# 2", text="Product/Service - Description")
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text="Quantity")
          tree.column("# 4", anchor=E, stretch=NO, width=90)
          tree.heading("# 4", text="Unit Price")
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text="Price")
          
          window = inv_pro1_canvas.create_window(120, 340, anchor="nw", window=tree)

          inv_pro1_canvas.create_line(120, 390, 820, 390 )
          inv_pro1_canvas.create_line(120, 340, 120, 365 )
          inv_pro1_canvas.create_line(120, 365, 120, 390 )
          inv_pro1_canvas.create_line(820, 340, 820, 540 )
          inv_pro1_canvas.create_line(740, 340, 740, 540 )
          inv_pro1_canvas.create_line(570, 340, 570, 540 )
          inv_pro1_canvas.create_line(570, 415, 820, 415 )
          inv_pro1_canvas.create_line(570, 440, 820, 440 )
          inv_pro1_canvas.create_line(570, 465, 820, 465 )
          inv_pro1_canvas.create_line(570, 490, 820, 490 )
          inv_pro1_canvas.create_line(570, 515, 820, 515 )
          inv_pro1_canvas.create_line(650, 340, 650, 390 )
          inv_pro1_canvas.create_line(220, 340, 220, 390 )
          inv_pro1_canvas.create_line(570, 540, 820, 540 )

          inv_pro1_canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(610, 372, text="0", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(710, 372, text="0", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(790, 372, text="0", fill="black", font=('Helvetica 10'))

          inv_pro1_canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(790, 404, text="0", fill="black", font=('Helvetica 10'))

          inv_pro1_canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(792, 428, text="0", fill="black", font=('Helvetica 10'))

          inv_pro1_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(792, 454, text="0", fill="black", font=('Helvetica 10'))

          inv_pro1_canvas.create_text(790, 479, text="0", fill="black", font=('Helvetica 10 bold'))
          inv_pro1_canvas.create_text(650, 479, text="Estimate total", fill="black", font=('Helvetica 10 bold'))

          inv_pro1_canvas.create_text(790, 502, text="0", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))

          inv_pro1_canvas.create_text(790, 526, text="0", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

          inv_pro1_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
          inv_pro1_canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_line(150, 620, 795, 620)
          

          inv_pro1_canvas.create_text(280, 640, text= "", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(280, 655, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          inv_pro1_canvas.create_text(720, 655, text="Page 1 of 1", fill="black", font=('Helvetica 10'))


  ######################################################################################tab 04 Orders
  ord_set_frm=Frame(tab04, relief=GROOVE, bg="#f8f8f2")
  ord_set_frm.pack(side="top", fill=BOTH)

  ord_set_frm_cpy=Frame(ord_set_frm, bg="#f5f3f2", height=700)
  ord_set_frm_cpy.pack(side="top", fill=BOTH)
  ord_ver = Label(ord_set_frm_cpy,text="Order# prefix")
  ord_ver.place(x=5,y=40)

  sql_ord_ist="select * from order_settings"
  fbcursor.execute(sql_ord_ist)
  inst_dtl_ord=fbcursor.fetchone()


  ord_lft_tp = Entry(ord_set_frm)
  if inst_dtl_ord is None:
    ord_lft_tp.insert(0, "ORD")
  else:
    ord_lft_tp.delete(0,'end')
    ord_lft_tp.insert(0, inst_dtl_ord[0])
  
  ord_lft_tp.place(x=100,y=40)

  ordset_ver = Label(ord_set_frm_cpy,text="Starting estimate number")
  ordset_ver.place(x=25,y=80)
  my_var_sprn= StringVar(ord_set_frm_cpy)
  
  

  def spin_valss(S,d):
    if d=='1':
      if not S in ['.','0','1','2','3','4','5','6','7','8','9']:
        return False
      return True
          
    if d.isdigit():
      return True


  valditysss=(ord_set_frm_cpy.register(spin_valss), '%S','%d')
  ord_spn_bx = Spinbox(ord_set_frm_cpy,from_=1,to=1000000,width=15,justify=RIGHT)

  if inst_dtl_ord is None:
    pass
  else:
    ord_spn_bx.delete(0,"end")
    ord_spn_bx.insert(0,int(inst_dtl_ord[1]))
  ord_spn_bx.config(validate='key',validatecommand=(valditysss))
  ord_spn_bx.place(x=50,y=100)

  ordset_ver = Label(ord_set_frm_cpy,text="Header box background color")
  ordset_ver.place(x=5,y=140)



  ord_man_var = StringVar()
  ord_cmb_bx = ttk.Combobox(ord_set_frm_cpy,textvariable=ord_man_var)
  
  ord_cmb_bx['values'] = ('Default','Black','Maroon','Green','Olive','Navy','Purple','Teal','Gray','Silver','Red','Lime','Yellow','Blue','Fuchsia','Aqua','White','ScrollBar','Background','ActiveCaption','InactiveCaption','Menu','Window','WindowFrame','MenuText','WindowText','CaptionText','ActiveBorder','InactiveBorder','AppWorkSpace','Highlight','HighlightText','BtnFace','InactiveCaptionText','BtnHighlight','3DDkShadow','3DLight','InfoText','InfoBk','Custom')
  if inst_dtl_ord is None:
    ord_cmb_bx.current(0)
  else:
    ord_cmb_bx.insert(0, inst_dtl_ord[2])
  ord_cmb_bx.place(x=6 ,y=160)

  

  ordset_ver = Label(ord_set_frm_cpy,text="Customize Estimate text labels")
  ordset_ver.place(x=5,y=190)

  def rstr_ord_tab04():
    ord_lft_tp1.delete(1.0,'end')
    ord_lft_tp1.insert(END, "Order")
    ord_lft_tp2.delete(1.0,'end')
    ord_lft_tp2.insert(1.0, "Order#")
    ord_lft_tp3.delete(1.0,'end')
    ord_lft_tp3.insert(1.0, "Order date")
    ord_lft_tp4.delete(1.0,'end')
    ord_lft_tp4.insert(END, "Due date")
    ord_lft_tp5.delete(1.0,'end')
    ord_lft_tp5.insert(END, "Order to")
    ord_lft_tp6.delete(1.0,'end')
    ord_lft_tp6.insert(1.0, "Order total")

  ord_lft_tp1 = Text(ord_set_frm, height=1, width=25, font=('Calibri 10'))
  if inst_dtl_ord is None:
    ord_lft_tp1.delete(1.0,'end')
    ord_lft_tp1.insert(END, "Order")
  else:
    ord_lft_tp1.delete(1.0,'end')
    ord_lft_tp1.insert(1.0, inst_dtl_ord[3])
  ord_lft_tp1.place(x=5,y=220)
  ord_lft_tp2 = Text(ord_set_frm,height=1, width=25, font=('Calibri 10'))
  if inst_dtl_ord is None:
    ord_lft_tp2.delete(1.0,'end')
    ord_lft_tp2.insert(1.0, "Order#")
  else:
    ord_lft_tp2.delete(1.0,'end')
    ord_lft_tp2.insert(1.0, inst_dtl_ord[4])
  
  ord_lft_tp2.place(x=5,y=240)
  ord_lft_tp3 = Text(ord_set_frm,height=1, width=25, font=('Calibri 10'))
  if inst_dtl_ord is None:
    ord_lft_tp3.delete(1.0,'end')
    ord_lft_tp3.insert(1.0, "Order date")
  else:
    ord_lft_tp3.delete(1.0,'end')
    ord_lft_tp3.insert(1.0, inst_dtl_ord[5])
  
  ord_lft_tp3.place(x=5,y=260) 

  
  ord_lft_tp4 = Text(ord_set_frm,height=1, width=25, font=('Calibri 10'))
  if inst_dtl_ord is None:
    ord_lft_tp4.delete(1.0,'end')
    ord_lft_tp4.insert(END, "Due date")
  else:
    ord_lft_tp4.delete(1.0,'end')
    ord_lft_tp4.insert(1.0, inst_dtl_ord[6])

  ord_lft_tp4.place(x=5,y=280)
  # vght=ord_lft_tp4
  ord_lft_tp5 = Text(ord_set_frm,height=1, width=25, font=('Calibri 10'))
  if inst_dtl_ord is None:
    ord_lft_tp5.delete(1.0,'end')
    ord_lft_tp5.insert(END, "Order to")
  else:
    ord_lft_tp5.delete(1.0,'end')
    ord_lft_tp5.insert(1.0, inst_dtl_ord[7])
  
  ord_lft_tp5.place(x=5,y=300)
  ord_lft_tp6 = Text(ord_set_frm, height=1,width=25, font=('Calibri 10'))
  if inst_dtl_ord is None:
    ord_lft_tp6.delete(1.0,'end')
    ord_lft_tp6.insert(1.0, "Order total")
  else:
    ord_lft_tp6.delete(1.0,'end')
    ord_lft_tp6.insert(1.0, inst_dtl_ord[8])
  
  ord_lft_tp6.place(x=5,y=320)



  ord_s1 = StringVar(ord_set_frm, "Order")


  ordset_ver = Label(ord_set_frm_cpy,text="Default Order template(example,click on preview for mouse scrolling)")
  ordset_ver.place(x=248,y=55 )

  ordset_ver = Label(ord_set_frm_cpy,text="Default Order template")
  ordset_ver.place(x=619,y=40)



  ordset_messagelbframe=LabelFrame(ord_set_frm_cpy,text="Predefined terms and conditions text for estimates", height=100, width=980)
  ordset_messagelbframe.place(x=248, y=400)

  ord_scrl_txt = scrolledtext.ScrolledText(ord_set_frm_cpy, undo=True,width=115,height=4)
  if inst_dtl_ord is None:
    ord_scrl_txt.insert(1.0,"Invoices are payable on receipt unless other terms, negotiated and noted on the invoice. By accepting delivery of goods, Buyer agrees to pay the invoiced cost for those goods, and agrees to be bound to these contract terms. No acceptance may vary these terms unless specifically agreed in writing by Seller.")
  else:
    ord_scrl_txt.insert(1.0, inst_dtl_ord[9])

  
  ord_scrl_txt.place(x=260,y=425)



  ordset_bttermadd = Button(ord_set_frm_cpy,text="Restore defaults", command=lambda:rstr_ord_tab04())
  ordset_bttermadd.place(x=32,y=450)
  #~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~order drop
  def ord_main_mn(event):
      cmp_mn_var=ord_main_var.get()
      por_sql_st='select * from company'
      fbcursor.execute(por_sql_st)
      cmpy_dtls=fbcursor.fetchone()

      if cmp_mn_var == 'Professional 1 (logo on left side)':
        if cmpy_dtls[1] is not None:
          sql='select dateformat from company'
          fbcursor.execute(sql)
          date_frmat=fbcursor.fetchone()
          
          if not date_frmat:
            ft_fr='%Y-%m-%d'
        
          elif date_frmat[0]=="mm-dd-yyyy":
            ft_fr='%m-%d-%Y'

          elif date_frmat[0]=="dd-mm-yyyy":
              ft_fr='%d-%m-%Y'
                      
          elif date_frmat[0]=="yyy.mm.dd":
              ft_fr='%Y.%m.%d'
                          
          elif date_frmat[0]=="mm/dd/yyyy":
              ft_fr='%m/%d/%Y'
                          
          elif date_frmat[0]=="dd/mm/yyyy":
              ft_fr='%d/%m/%Y'
                                  
          elif date_frmat[0]=="dd.mm.yyyy":
              ft_fr='%d.%m.%Y'
                                  
          elif date_frmat[0]=="yyyy/  mm/dd":
              ft_fr='%Y/%m/%d'

          else:
              ft_fr='%Y-%m-%d'
          td_date=date.today()
          date_tdy=td_date.strftime(ft_fr)
          ord_pro1_frame = Frame(ord_set_frm_cpy, width=953, height=300)
          ord_pro1_frame.pack(expand=True, fill=BOTH)
          ord_pro1_frame.place(x=247,y=90)
          ord_pro1_canvas=Canvas(ord_pro1_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(ord_pro1_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=ord_pro1_canvas.yview)
          
          ord_pro1_canvas.config(width=953,height=300)
          ord_pro1_canvas.config(yscrollcommand=vertibar.set)
          ord_pro1_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          ord_pro1_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          ord_pro1_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          try:
            inv_image = Image.open("images/"+cmpy_dtl[13])
            inv_resize_image = inv_image.resize((200,75))
            inv_image = ImageTk.PhotoImage(inv_resize_image)
          
            inv_logo = Label(ord_pro1_canvas,width=200,height=75, bg="white",image = inv_image) 
            inv_window_image = ord_pro1_canvas.create_window(150, 50, anchor="nw", window=inv_logo)
            inv_logo.photo = inv_image
          except:
            ord_pro1_canvas.create_text(285, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
          
          lb_inv1=Label(ord_pro1_canvas,text=ord_lft_tp2.get(1.0, END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Order#"
          win_inv1 = ord_pro1_canvas.create_window(175, 140, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_pro1_canvas,text=ord_lft_tp3.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1 )#Order date
          win_inv1 = ord_pro1_canvas.create_window(175, 160, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(ord_pro1_canvas,text=ord_lft_tp4.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Due date
          win_inv1 = ord_pro1_canvas.create_window(175, 180, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_pro1_canvas,text=inv_lst_bx5.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Terms
          win_inv1 = ord_pro1_canvas.create_window(175, 200, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_pro1_canvas,text=inv_lst_bx4.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", ),height=1)#Order ref.#
          win_inv1 = ord_pro1_canvas.create_window(175, 220, anchor="nw", window=lb_inv1)

          # ord_pro1_canvas.create_text(195, 150, text="Order#", fill="black", font=('Helvetica 11'))
          # ord_pro1_canvas.create_text(205, 170, text="Order date", fill="black", font=('Helvetica 11'))
          # ord_pro1_canvas.create_text(200, 190, text="Due date", fill="black", font=('Helvetica 11'))
          # ord_pro1_canvas.create_text(191, 210, text="Terms", fill="black", font=('Helvetica 11'))
          # ord_pro1_canvas.create_text(205, 230, text="Order ref.#", fill="black", font=('Helvetica 11'))
          lb_inv1=Label(ord_pro1_canvas,text=str(ord_lft_tp.get())+"1/2022", bg="white",anchor="nw",font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = ord_pro1_canvas.create_window(310, 140, anchor="nw", window=lb_inv1)
          ord_pro1_canvas.create_text(350, 170, text=date_tdy, fill="black", font=('Helvetica 11'))
          ord_pro1_canvas.create_text(350, 190, text=date_tdy, fill="black", font=('Helvetica 11'))
          ord_pro1_canvas.create_text(340, 210, text="NET 15", fill="black", font=('Helvetica 11'))      

          labelcmp=Label(ord_pro1_canvas,text=cmpy_dtl[1], bg="white",anchor="e",font=("Helvetica", 12), width=40, height=1)
          window = ord_pro1_canvas.create_window(430,80, anchor="nw", window=labelcmp)

          labelcmpl=Label(ord_pro1_canvas,text=cmpy_dtl[2],justify=RIGHT, bg="white",font=("Helvetica", 9),anchor="ne", width=50, height=4)
          windowl = ord_pro1_canvas.create_window(440,110, anchor="nw", window=labelcmpl)

          
          ord_pro1_canvas.create_text(745, 185, text=cmpy_dtl[4], fill="black", font=('Helvetica 10'))
          lb_inv1=Label(ord_pro1_canvas,text=ord_lft_tp1.get(1.0,END), bg="white",anchor="ne",font=('Helvetica 14 bold'),height=1)#Order
          win_inv1 = ord_pro1_canvas.create_window(800, 200, anchor="ne", window=lb_inv1)

          lb_inv1=Label(ord_pro1_canvas,text=inv_lst_bx22.get(1.0,END), bg="white",justify=LEFT,font=("Helvetica 10" ),height=2)#TAX EXEMPTED
          win_inv1 = ord_pro1_canvas.create_window(800, 225, anchor="ne", window=lb_inv1)

          lb_inv1=Label(ord_pro1_canvas,text=ord_lft_tp5.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline" ),height=1)#Order to
          win_inv1 = ord_pro1_canvas.create_window(175, 250, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_pro1_canvas,text=inv_lst_bx7.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline"),height=1)#Ship to
          win_inv1 = ord_pro1_canvas.create_window(525, 250, anchor="nw", window=lb_inv1)

          # ord_pro1_canvas.create_text(770, 205, text="Order", fill="black", font=('Helvetica 14 bold'))
      
          # ord_pro1_canvas.create_text(746, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
            
          # ord_pro1_canvas.create_text(210, 260, text="Order to", fill="black", font=('Helvetica 10 underline'))
          ord_pro1_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_pro1_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
          # ord_pro1_canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          ord_pro1_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_pro1_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
          phf = ttk.Style()
          phf.configure('mystyle122.Treeview.Heading', background=''+ ord_man_var.get(),State='DISABLE')

          tree=ttk.Treeview(ord_pro1_canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle122.Treeview')

          tree.column("# 1", anchor=E, stretch=NO, width=100)
          tree.heading("# 1", text=inv_lst_bx8.get(1.0,END))
          tree.column("# 2", anchor=E, stretch=NO, width=350)
          tree.heading("# 2", text=inv_lst_bx9.get(1.0,END))
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text=inv_lst_bx10.get(1.0,END))
          tree.column("# 4", anchor=E, stretch=NO, width=90)
          tree.heading("# 4", text=inv_lst_bx12.get(1.0,END))
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text=inv_lst_bx13.get(1.0,END))
          
          window = ord_pro1_canvas.create_window(120, 340, anchor="nw", window=tree)

          ord_pro1_canvas.create_line(120, 390, 820, 390 )
          ord_pro1_canvas.create_line(120, 340, 120, 365 )
          ord_pro1_canvas.create_line(120, 365, 120, 390 )
          ord_pro1_canvas.create_line(820, 340, 820, 540 )
          ord_pro1_canvas.create_line(740, 340, 740, 540 )
          ord_pro1_canvas.create_line(570, 340, 570, 540 )
          ord_pro1_canvas.create_line(570, 415, 820, 415 )
          ord_pro1_canvas.create_line(570, 440, 820, 440 )
          ord_pro1_canvas.create_line(570, 465, 820, 465 )
          ord_pro1_canvas.create_line(570, 490, 820, 490 )
          ord_pro1_canvas.create_line(570, 515, 820, 515 )
          ord_pro1_canvas.create_line(650, 340, 650, 390 )
          ord_pro1_canvas.create_line(220, 340, 220, 390 )
          ord_pro1_canvas.create_line(570, 540, 820, 540 )

          lbx_inv=Label(ord_pro1_canvas,text=inv_lst_bx14.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10"),height=1)#"Subtotal"
          win_inv2 = ord_pro1_canvas.create_window(630,392, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_pro1_canvas,text=inv_lst_bx17.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"TAX1"
          win_inv2 = ord_pro1_canvas.create_window(635,418, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_pro1_canvas,text=inv_lst_bx19.get(1.0,END), bg="White",anchor="nw",font=("Helvetica 10 "), height=1)#"Total Paid"
          win_inv2 = ord_pro1_canvas.create_window(630, 492,anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_pro1_canvas,text=inv_lst_bx20.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"Balance"
          win_inv2 = ord_pro1_canvas.create_window(635, 518, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_pro1_canvas,text=ord_lft_tp6.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#Order Total"
          win_inv2 = ord_pro1_canvas.create_window(630, 468, anchor="nw", window=lbx_inv)
          

          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          crcy_type=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          cry_plcy=post_rp[0]
          if cry_plcy=="before amount": 
            ord_pro1_canvas.create_text(710, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 404, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 428, text=str(crcy_type)+"18.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 502, text=str(crcy_type)+"100.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 526, text=str(crcy_type)+"138.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 454, text=str(crcy_type)+"20.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 479, text=str(crcy_type)+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount":
            ord_pro1_canvas.create_text(710, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 404, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 428, text="18.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 502, text="100.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 526, text="138.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 454, text="20.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 479, text="238.00"+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="before amount with space": 
            ord_pro1_canvas.create_text(710, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 404, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 428, text=str(crcy_type)+" "+"18.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 502, text=str(crcy_type)+" "+"100.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 526, text=str(crcy_type)+" "+"138.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 454, text=str(crcy_type)+" "+"20.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 479, text=str(crcy_type)+" "+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount with space":
            ord_pro1_canvas.create_text(710, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 404, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 428, text="18.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 502, text="100.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 526, text="138.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 454, text="20.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 479, text="238.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          else:
            pass


          ord_pro1_canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
  
          ord_pro1_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10')) 
          ord_pro1_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
          lbx_inv=Label(ord_pro1_canvas,text=inv_lst_bx21.get(1.0,END), bg="white",anchor="n",font=("Helvetica 10 "),height=1)#"Terms and Conditions"
          win_inv2 = ord_pro1_canvas.create_window(420, 570, anchor="nw", window=lbx_inv)
          ord_pro1_canvas.create_line(150, 600, 795, 600)
          text=ord_scrl_txt.get('1.0',END)
          wraped_text="\n".join(wrap(text,130))
    
        
          lbx_inv=Label(ord_pro1_canvas,text=wraped_text, bg="white",anchor="nw",font=("Helvetica 8 "), justify=LEFT, height=3, width=107)
          win_inv2 = ord_pro1_canvas.create_window(150, 603,anchor="nw", window=lbx_inv)

          ord_pro1_canvas.create_text(280, 660, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    

          ord_pro1_canvas.create_text(720, 660, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
        else:
          ord_pro1_frame = Frame(ord_set_frm_cpy, width=953, height=300)
          ord_pro1_frame.pack(expand=True, fill=BOTH)
          ord_pro1_frame.place(x=247,y=90)
          ord_pro1_canvas=Canvas(ord_pro1_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(ord_pro1_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=ord_pro1_canvas.yview)
          
          ord_pro1_canvas.config(width=953,height=300)
          ord_pro1_canvas.config(yscrollcommand=vertibar.set)
          ord_pro1_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          ord_pro1_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          ord_pro1_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(285, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
          
          ord_pro1_canvas.create_text(195, 150, text="Order#", fill="black", font=('Helvetica 11'))
          ord_pro1_canvas.create_text(205, 170, text="Order date", fill="black", font=('Helvetica 11'))
          ord_pro1_canvas.create_text(200, 190, text="Due date", fill="black", font=('Helvetica 11'))
          ord_pro1_canvas.create_text(191, 210, text="Terms", fill="black", font=('Helvetica 11'))
          ord_pro1_canvas.create_text(205, 230, text="Order ref.#", fill="black", font=('Helvetica 11'))
          ord_pro1_canvas.create_text(350, 150, text="ORD1/2022", fill="black", font=('Helvetica 11'))
          ord_pro1_canvas.create_text(350, 170, text="03-05-2022", fill="black", font=('Helvetica 11'))
          ord_pro1_canvas.create_text(350, 190, text="18-05-2022", fill="black", font=('Helvetica 11'))
          ord_pro1_canvas.create_text(340, 210, text="NET 15", fill="black", font=('Helvetica 11'))      

          ord_pro1_canvas.create_text(720, 80, text="Your Company Name", fill="black", font=('Helvetica 12 '))
          ord_pro1_canvas.create_text(750, 110, text="Address line 1", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(750, 125, text="Address line 2", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(750, 140, text="Address line 3", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(750, 155, text="Address line 4", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(745, 170, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(745, 185, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(750, 205, text="Order", fill="black", font=('Helvetica 14 bold'))
          ord_pro1_canvas.create_text(746, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
            
          ord_pro1_canvas.create_text(210, 260, text="Order to", fill="black", font=('Helvetica 10 underline'))
          ord_pro1_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_pro1_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          ord_pro1_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_pro1_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
          s = ttk.Style()
          s.configure('Treeview.Heading', background=''+ ordset_win_menu1.get(),State='DISABLE')

          tree=ttk.Treeview(ord_pro1_canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle.Treeview')

          tree.column("# 1", anchor=E, stretch=NO, width=100)
          tree.heading("# 1", text="ID/SKU")
          tree.column("# 2", anchor=E, stretch=NO, width=350)
          tree.heading("# 2", text="Product/Service - Description")
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text="Quantity")
          tree.column("# 4", anchor=E, stretch=NO, width=90)
          tree.heading("# 4", text="Unit Price")
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text="Price")
          
          window = ord_pro1_canvas.create_window(120, 340, anchor="nw", window=tree)

          ord_pro1_canvas.create_line(120, 390, 820, 390 )
          ord_pro1_canvas.create_line(120, 340, 120, 365 )
          ord_pro1_canvas.create_line(120, 365, 120, 390 )
          ord_pro1_canvas.create_line(820, 340, 820, 540 )
          ord_pro1_canvas.create_line(740, 340, 740, 540 )
          ord_pro1_canvas.create_line(570, 340, 570, 540 )
          ord_pro1_canvas.create_line(570, 415, 820, 415 )
          ord_pro1_canvas.create_line(570, 440, 820, 440 )
          ord_pro1_canvas.create_line(570, 465, 820, 465 )
          ord_pro1_canvas.create_line(570, 490, 820, 490 )
          ord_pro1_canvas.create_line(570, 515, 820, 515 )
          ord_pro1_canvas.create_line(650, 340, 650, 390 )
          ord_pro1_canvas.create_line(220, 340, 220, 390 )
          ord_pro1_canvas.create_line(570, 540, 820, 540 )

          ord_pro1_canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(710, 372, text="$200.00", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(790, 372, text="$200.00", fill="black", font=('Helvetica 10'))

          ord_pro1_canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(790, 404, text="$200.00", fill="black", font=('Helvetica 10'))

          ord_pro1_canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(792, 428, text="$18.00", fill="black", font=('Helvetica 10'))

          ord_pro1_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(792, 454, text="$20.00", fill="black", font=('Helvetica 10'))

          ord_pro1_canvas.create_text(790, 479, text="$238.00", fill="black", font=('Helvetica 10 bold'))
          ord_pro1_canvas.create_text(650, 479, text="Estimate total", fill="black", font=('Helvetica 10 bold'))

          ord_pro1_canvas.create_text(790, 502, text="$100.00", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))

          ord_pro1_canvas.create_text(790, 526, text="$138.00", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

          ord_pro1_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
          ord_pro1_canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_line(150, 620, 795, 620)
          

          ord_pro1_canvas.create_text(280, 640, text= "", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(280, 655, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(720, 655, text="Page 1 of 1", fill="black", font=('Helvetica 10'))


    #-----------------------------------------------------------------------Professional 2 (logo on right side)
      elif cmp_mn_var == 'Professional 2 (logo on right side)':
        if cmpy_dtls[1] is not None:
          sql='select dateformat from company'
          fbcursor.execute(sql)
          date_frmat=fbcursor.fetchone()
          
          if not date_frmat:
            ft_fr='%Y-%m-%d'
        
          elif date_frmat[0]=="mm-dd-yyyy":
            ft_fr='%m-%d-%Y'

          elif date_frmat[0]=="dd-mm-yyyy":
              ft_fr='%d-%m-%Y'
                      
          elif date_frmat[0]=="yyy.mm.dd":
              ft_fr='%Y.%m.%d'
                          
          elif date_frmat[0]=="mm/dd/yyyy":
              ft_fr='%m/%d/%Y'
                          
          elif date_frmat[0]=="dd/mm/yyyy":
              ft_fr='%d/%m/%Y'
                                  
          elif date_frmat[0]=="dd.mm.yyyy":
              ft_fr='%d.%m.%Y'
                                  
          elif date_frmat[0]=="yyyy/  mm/dd":
              ft_fr='%Y/%m/%d'

          else:
              ft_fr='%Y-%m-%d'
          td_date=date.today()
          date_tdy=td_date.strftime(ft_fr)
          ord_pro2_frame = Frame(ord_set_frm_cpy, width=953, height=300)
          ord_pro2_frame.pack(expand=True, fill=BOTH)
          ord_pro2_frame.place(x=247,y=90)
          
          ord_pro2_canvas=Canvas(ord_pro2_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(ord_pro2_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=ord_pro2_canvas.yview)
          ord_pro2_canvas.config(width=953,height=300)
          
          ord_pro2_canvas.config(yscrollcommand=vertibar.set)
          ord_pro2_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          ord_pro2_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          ord_pro2_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          try:
            inv_image = Image.open("images/"+cmpy_dtl[13])
            inv_resize_image = inv_image.resize((200,75))
            inv_image = ImageTk.PhotoImage(inv_resize_image)
          
            inv_logo = Label(ord_pro2_canvas,width=200,height=75, bg="white",image = inv_image) 
            inv_window_image = ord_pro2_canvas.create_window(800, 60, anchor="ne", window=inv_logo)
            inv_logo.photo = inv_image
          except:
            ord_pro2_canvas.create_text(650, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
          labelcmp=Label(ord_pro2_canvas,text=cmpy_dtl[1],justify=LEFT, bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=1)
          window = ord_pro2_canvas.create_window(150,80, anchor="nw", window=labelcmp)

          labelcmpl=Label(ord_pro2_canvas,text=cmpy_dtl[2],justify=LEFT, bg="white",font=("Helvetica", 9),anchor="nw", width=40, height=4)
          windowl = ord_pro2_canvas.create_window(155 ,110, anchor="nw", window=labelcmpl)
          
          ord_pro2_canvas.create_text(210, 185, text=cmpy_dtl[4],justify=LEFT, fill="black", font=('Helvetica 9'))

          lb_inv1=Label(ord_pro2_canvas,text=ord_lft_tp2.get(1.0, END), bg="white",anchor="ne",font=("Helvetica", 11),height=1)#Order#"
          win_inv1 = ord_pro2_canvas.create_window(550, 140, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_pro2_canvas,text=ord_lft_tp3.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", 11),height=1 )#Invoicedate
          win_inv1 = ord_pro2_canvas.create_window(550, 160, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(ord_pro2_canvas,text=ord_lft_tp4.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Due date
          win_inv1 = ord_pro2_canvas.create_window(550, 180, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_pro2_canvas,text=inv_lst_bx5.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", 11),height=1)#Terms
          win_inv1 = ord_pro2_canvas.create_window(550, 200, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_pro2_canvas,text=inv_lst_bx4.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = ord_pro2_canvas.create_window(550, 220, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(ord_pro2_canvas,text=ord_lft_tp1.get(1.0,END), bg="white",anchor="ne",font=('Helvetica 14 bold'),height=1)#invoice
          win_inv1 = ord_pro2_canvas.create_window(155, 200, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_pro2_canvas,text=ord_lft_tp5.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline" ),height=1)#Order to
          win_inv1 = ord_pro2_canvas.create_window(175, 250, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_pro2_canvas,text=inv_lst_bx7.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline"),height=1)#Ship to
          win_inv1 = ord_pro2_canvas.create_window(525, 250, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_pro2_canvas,text=str(ord_lft_tp.get())+"1/2022", bg="white",justify=LEFT,font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = ord_pro2_canvas.create_window(790, 140, anchor="ne", window=lb_inv1)

          
          ord_pro2_canvas.create_text(750, 170, text=date_tdy, fill="black", font=('Helvetica 11'))
          ord_pro2_canvas.create_text(750, 190, text=date_tdy, fill="black", font=('Helvetica 11'))
          ord_pro2_canvas.create_text(740, 210, text="NET 15", fill="black", font=('Helvetica 11'))  
            
        
          ord_pro2_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_pro2_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))

          ord_pro2_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_pro2_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

          phf = ttk.Style()
          phf.configure('mystyle123.Treeview.Heading', background=''+ ord_man_var.get(),State='DISABLE')
          tree=ttk.Treeview(ord_pro2_canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle123.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=100)
          tree.heading("# 1", text=inv_lst_bx8.get(1.0,END))
          tree.column("# 2", anchor=E, stretch=NO, width=350)
          tree.heading("# 2", text=inv_lst_bx9.get(1.0,END))
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text=inv_lst_bx10.get(1.0,END))
          tree.column("# 4", anchor=E, stretch=NO, width=90)
          tree.heading("# 4", text=inv_lst_bx12.get(1.0,END))
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text=inv_lst_bx13.get(1.0,END))
          
          window = ord_pro2_canvas.create_window(120, 340, anchor="nw", window=tree)

          ord_pro2_canvas.create_line(120, 390, 820, 390 )
          ord_pro2_canvas.create_line(120, 340, 120, 365 )
          ord_pro2_canvas.create_line(120, 365, 120, 390 )
          ord_pro2_canvas.create_line(820, 340, 820, 540 )
          ord_pro2_canvas.create_line(740, 340, 740, 540 )
          ord_pro2_canvas.create_line(570, 340, 570, 540 )
          ord_pro2_canvas.create_line(570, 415, 820, 415 )
          ord_pro2_canvas.create_line(570, 440, 820, 440 )
          ord_pro2_canvas.create_line(570, 465, 820, 465 )
          ord_pro2_canvas.create_line(570, 490, 820, 490 )
          ord_pro2_canvas.create_line(570, 515, 820, 515 )
          ord_pro2_canvas.create_line(650, 340, 650, 390 )
          ord_pro2_canvas.create_line(220, 340, 220, 390 )
          ord_pro2_canvas.create_line(570, 540, 820, 540 )

          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          crcy_type=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          cry_plcy=post_rp[0]
          if cry_plcy=="before amount": 
            ord_pro2_canvas.create_text(710, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 404, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(792, 428, text=str(crcy_type)+"18.00", fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 502, text=str(crcy_type)+"100.00", fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 526, text=str(crcy_type)+"138.00", fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(792, 454, text=str(crcy_type)+"20.00", fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 479, text=str(crcy_type)+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount":
            ord_pro2_canvas.create_text(710, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 404, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(792, 428, text="18.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 502, text="100.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 526, text="138.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(792, 454, text="20.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 479, text="238.00"+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="before amount with space": 
            ord_pro2_canvas.create_text(710, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 404, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(792, 428, text=str(crcy_type)+" "+"18.00", fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 502, text=str(crcy_type)+" "+"100.00", fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 526, text=str(crcy_type)+" "+"138.00", fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(792, 454, text=str(crcy_type)+" "+"20.00", fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 479, text=str(crcy_type)+" "+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount with space":
            ord_pro2_canvas.create_text(710, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 404, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(792, 428, text="18.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 502, text="100.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 526, text="138.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(792, 454, text="20.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro2_canvas.create_text(790, 479, text="238.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          else:
            pass

          ord_pro2_canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
      
          ord_pro2_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
      
        

          lbx_inv=Label(ord_pro2_canvas,text=inv_lst_bx14.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10"),height=1)#"Subtotal"
          win_inv2 = ord_pro2_canvas.create_window(630,392, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_pro2_canvas,text=inv_lst_bx17.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"TAX1"
          win_inv2 = ord_pro2_canvas.create_window(635,418, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_pro2_canvas,text=inv_lst_bx19.get(1.0,END), bg="White",anchor="nw",font=("Helvetica 10 "), height=1)#"Total Paid"
          win_inv2 = ord_pro2_canvas.create_window(630, 492,anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_pro2_canvas,text=inv_lst_bx20.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"Balance"
          win_inv2 = ord_pro2_canvas.create_window(635, 518, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_pro2_canvas,text=ord_lft_tp6.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#Order Total"
          win_inv2 = ord_pro2_canvas.create_window(630, 468, anchor="nw", window=lbx_inv)
          
          ord_pro2_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
          lbx_inv=Label(ord_pro2_canvas,text=inv_lst_bx21.get(1.0,END), bg="white",anchor="n",font=("Helvetica 10 "),height=1)#"Terms and Conditions"
          win_inv2 = ord_pro2_canvas.create_window(420, 570, anchor="nw", window=lbx_inv)
          ord_pro2_canvas.create_line(150, 600, 795, 600)
          text=ord_scrl_txt.get('1.0',END)
          wraped_text="\n".join(wrap(text,130))
    
        
          lbx_inv=Label(ord_pro2_canvas,text=wraped_text, bg="white",anchor="nw",font=("Helvetica 8 "), justify=LEFT, height=3, width=107)
          win_inv2 = ord_pro2_canvas.create_window(150, 603,anchor="nw", window=lbx_inv)

          ord_pro2_canvas.create_text(280, 660, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    

          ord_pro2_canvas.create_text(720, 660, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
        else:
          ord_pro2_frame = Frame(ord_set_frm_cpy, width=953, height=300)
          ord_pro2_frame.pack(expand=True, fill=BOTH)
          ord_pro2_frame.place(x=247,y=90)
          
          ord_pro2_canvas=Canvas(ord_pro2_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(ord_pro2_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=ord_pro2_canvas.yview)
          ord_pro2_canvas.config(width=953,height=300)
          
          ord_pro2_canvas.config(yscrollcommand=vertibar.set)
          ord_pro2_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          ord_pro2_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          ord_pro2_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(650, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
          
          ord_pro2_canvas.create_text(250, 80, text="Your Company Name", fill="black", font=('Helvetica 12 '))
          ord_pro2_canvas.create_text(225, 110, text="Address line 1", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(225, 125, text="Address line 2", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(225, 140, text="Address line 3", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(225, 155, text="Address line 4", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(234, 170, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(234, 185, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(225, 205, text="Order", fill="black", font=('Helvetica 14 bold'))
          ord_pro2_canvas.create_text(232, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
          
          ord_pro2_canvas.create_text(502, 150, text="Order#", fill="black", font=('Helvetica 11'))
          ord_pro2_canvas.create_text(515, 170, text="Order date", fill="black", font=('Helvetica 11'))
          ord_pro2_canvas.create_text(500, 190, text="Due date", fill="black", font=('Helvetica 11'))
          ord_pro2_canvas.create_text(491, 210, text="Terms", fill="black", font=('Helvetica 11'))
          ord_pro2_canvas.create_text(505, 230, text="Order ref.#", fill="black", font=('Helvetica 11'))
          ord_pro2_canvas.create_text(680, 150, text="ORD1/2022", fill="black", font=('Helvetica 11'))
          ord_pro2_canvas.create_text(680, 170, text="05-05-2022", fill="black", font=('Helvetica 11'))
          ord_pro2_canvas.create_text(680, 190, text="20-05-2022", fill="black", font=('Helvetica 11'))
          ord_pro2_canvas.create_text(670, 210, text="NET 15", fill="black", font=('Helvetica 11'))  
            
          ord_pro2_canvas.create_text(210, 260, text="Order to", fill="black", font=('Helvetica 10 underline'))
          ord_pro2_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_pro2_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          ord_pro2_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_pro2_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

          tree=ttk.Treeview(ord_pro2_canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=100)
          tree.heading("# 1", text="ID/SKU")
          tree.column("# 2", anchor=E, stretch=NO, width=350)
          tree.heading("# 2", text="Product/Service - Description")
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text="Quantity")
          tree.column("# 4", anchor=E, stretch=NO, width=90)
          tree.heading("# 4", text="Unit Price")
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text="Price")
          
          window = ord_pro2_canvas.create_window(120, 340, anchor="nw", window=tree)

          ord_pro2_canvas.create_line(120, 390, 820, 390 )
          ord_pro2_canvas.create_line(120, 340, 120, 365 )
          ord_pro2_canvas.create_line(120, 365, 120, 390 )
          ord_pro2_canvas.create_line(820, 340, 820, 540 )
          ord_pro2_canvas.create_line(740, 340, 740, 540 )
          ord_pro2_canvas.create_line(570, 340, 570, 540 )
          ord_pro2_canvas.create_line(570, 415, 820, 415 )
          ord_pro2_canvas.create_line(570, 440, 820, 440 )
          ord_pro2_canvas.create_line(570, 465, 820, 465 )
          ord_pro2_canvas.create_line(570, 490, 820, 490 )
          ord_pro2_canvas.create_line(570, 515, 820, 515 )
          ord_pro2_canvas.create_line(650, 340, 650, 390 )
          ord_pro2_canvas.create_line(220, 340, 220, 390 )
          ord_pro2_canvas.create_line(570, 540, 820, 540 )

          ord_pro2_canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(710, 372, text="$200.00", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(790, 372, text="$200.00", fill="black", font=('Helvetica 10'))

          ord_pro2_canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(790, 404, text="$200.00", fill="black", font=('Helvetica 10'))

          ord_pro2_canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(792, 428, text="$18.00", fill="black", font=('Helvetica 10'))

          ord_pro2_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(792, 454, text="$20.00", fill="black", font=('Helvetica 10'))

          ord_pro2_canvas.create_text(790, 479, text="$238.00", fill="black", font=('Helvetica 10 bold'))
          ord_pro2_canvas.create_text(650, 479, text="Estimate total", fill="black", font=('Helvetica 10 bold'))

          ord_pro2_canvas.create_text(790, 502, text="$100.00", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))

          ord_pro2_canvas.create_text(790, 526, text="$138.00", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

          ord_pro2_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))

          ord_pro2_canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_line(150, 620, 795, 620)
          ord_pro2_canvas.create_text(280, 655, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          ord_pro2_canvas.create_text(720, 655, text="Page 1 of 1", fill="black", font=('Helvetica 10'))


    #----------------------------------------------------------------------Simplified 1 (logo on left side)
      elif cmp_mn_var == 'Simplified 1 (logo on left side)':
        if cmpy_dtls[1] is not None:
          sql='select dateformat from company'
          fbcursor.execute(sql)
          date_frmat=fbcursor.fetchone()
          
          if not date_frmat:
            ft_fr='%Y-%m-%d'
        
          elif date_frmat[0]=="mm-dd-yyyy":
            ft_fr='%m-%d-%Y'

          elif date_frmat[0]=="dd-mm-yyyy":
              ft_fr='%d-%m-%Y'
                      
          elif date_frmat[0]=="yyy.mm.dd":
              ft_fr='%Y.%m.%d'
                          
          elif date_frmat[0]=="mm/dd/yyyy":
              ft_fr='%m/%d/%Y'
                          
          elif date_frmat[0]=="dd/mm/yyyy":
              ft_fr='%d/%m/%Y'
                                  
          elif date_frmat[0]=="dd.mm.yyyy":
              ft_fr='%d.%m.%Y'
                                  
          elif date_frmat[0]=="yyyy/  mm/dd":
              ft_fr='%Y/%m/%d'

          else:
              ft_fr='%Y-%m-%d'
          td_date=date.today()
          date_tdy=td_date.strftime(ft_fr)
          ord_smply_frame = Frame(ord_set_frm_cpy, width=953, height=300)
          ord_smply_frame.pack(expand=True, fill=BOTH)
          ord_smply_frame.place(x=247,y=90)
          ord_smply_canvas=Canvas(ord_smply_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))

          vertibar=Scrollbar(ord_smply_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=ord_smply_canvas.yview)
          ord_smply_canvas.config(width=953,height=300)

          ord_smply_canvas.config(yscrollcommand=vertibar.set)
          ord_smply_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          ord_smply_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          ord_smply_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          try:
            inv_image = Image.open("images/"+cmpy_dtl[13])
            inv_resize_image = inv_image.resize((200,75))
            inv_image = ImageTk.PhotoImage(inv_resize_image)
          
            inv_logo = Label(ord_smply_canvas,width=200,height=75, bg="white",image = inv_image) 
            inv_window_image = ord_smply_canvas.create_window(150, 50, anchor="nw", window=inv_logo)
            inv_logo.photo = inv_image
          except:
            ord_smply_canvas.create_text(285, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
          
          lb_inv1=Label(ord_smply_canvas,text=ord_lft_tp1.get(1.0,END), bg="white",anchor="ne",font=('Helvetica 14 bold'),height=1)#Order
          win_inv1 = ord_smply_canvas.create_window(800, 200, anchor="ne", window=lb_inv1)

    

          lb_inv1=Label(ord_smply_canvas,text=ord_lft_tp5.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline" ),height=1)#Order to
          win_inv1 = ord_smply_canvas.create_window(175, 250, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_smply_canvas,text=inv_lst_bx7.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline"),height=1)#Ship to
          win_inv1 = ord_smply_canvas.create_window(525, 250, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_smply_canvas,text=ord_lft_tp2.get(1.0, END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Order#"
          win_inv1 = ord_smply_canvas.create_window(175, 140, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_smply_canvas,text=ord_lft_tp3.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1 )#Order date
          win_inv1 = ord_smply_canvas.create_window(175, 160, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(ord_smply_canvas,text=ord_lft_tp4.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Due date
          win_inv1 = ord_smply_canvas.create_window(175, 180, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_smply_canvas,text=inv_lst_bx5.get(1.0,END), bg="white",justify=LEFT,font=("Helvetica", 11),height=2)#Terms
          win_inv1 = ord_smply_canvas.create_window(175, 200, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_smply_canvas,text=inv_lst_bx4.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", ),height=1)#Order ref.#
          win_inv1 = ord_smply_canvas.create_window(175, 220, anchor="nw", window=lb_inv1)


        

        
          lb_inv1=Label(ord_smply_canvas,text=str(ord_lft_tp.get())+"1/2022", bg="white",anchor="nw",font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = ord_smply_canvas.create_window(310, 140, anchor="nw", window=lb_inv1)

          ord_smply_canvas.create_text(350, 170, text=date_tdy, fill="black", font=('Helvetica 11'))
          ord_smply_canvas.create_text(350, 190, text=date_tdy, fill="black", font=('Helvetica 11'))
          ord_smply_canvas.create_text(340, 210, text="NET 15", fill="black", font=('Helvetica 11'))      

          labelcmp=Label(ord_smply_canvas,text=cmpy_dtl[1], bg="white",anchor="e",font=("Helvetica", 12), width=40, height=1)
          window = ord_smply_canvas.create_window(430,80, anchor="nw", window=labelcmp)

          labelcmpl=Label(ord_smply_canvas,text=cmpy_dtl[2],justify=RIGHT, bg="white",font=("Helvetica", 9),anchor="ne", width=50, height=4)
          windowl = ord_smply_canvas.create_window(440,110, anchor="nw", window=labelcmpl)

          
          ord_smply_canvas.create_text(740, 185, text=cmpy_dtl[4], fill="black", font=('Helvetica 9'))
        

          
    
          ord_smply_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_smply_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
    
          ord_smply_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_smply_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
          phf = ttk.Style()
          phf.configure('mystyle124.Treeview.Heading', background=''+ ord_man_var.get(),State='DISABLE')
          tree=ttk.Treeview(ord_smply_canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle124.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=530)
          tree.heading("# 1", text=inv_lst_bx9.get(1.0,END))
          tree.column("# 2", anchor=E, stretch=NO, width=90)
          tree.heading("# 2", text=inv_lst_bx10.get(1.0,END))
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text=inv_lst_bx13.get(1.0,END))
          
          window = ord_smply_canvas.create_window(120, 340, anchor="nw", window=tree)

          ord_smply_canvas.create_line(120, 390, 820, 390 )
          ord_smply_canvas.create_line(120, 340, 120, 365 )
          ord_smply_canvas.create_line(120, 365, 120, 390 )
          ord_smply_canvas.create_line(820, 340, 820, 540 )
          ord_smply_canvas.create_line(740, 340, 740, 540 )
          ord_smply_canvas.create_line(570, 390, 570, 540 )
          ord_smply_canvas.create_line(570, 415, 820, 415 )
          ord_smply_canvas.create_line(570, 440, 820, 440 )
          ord_smply_canvas.create_line(570, 465, 820, 465 )
          ord_smply_canvas.create_line(570, 490, 820, 490 )
          ord_smply_canvas.create_line(570, 515, 820, 515 )
          ord_smply_canvas.create_line(650, 340, 650, 390 )
          ord_smply_canvas.create_line(570, 540, 820, 540 )

          lbx_inv=Label(ord_smply_canvas,text=inv_lst_bx14.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10"),height=1)#"Subtotal"
          win_inv2 = ord_smply_canvas.create_window(630,392, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_smply_canvas,text=inv_lst_bx17.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"TAX1"
          win_inv2 = ord_smply_canvas.create_window(635,418, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_smply_canvas,text=inv_lst_bx19.get(1.0,END), bg="White",anchor="nw",font=("Helvetica 10 "), height=1)#"Total Paid"
          win_inv2 = ord_smply_canvas.create_window(630, 492,anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_smply_canvas,text=inv_lst_bx20.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"Balance"
          win_inv2 = ord_smply_canvas.create_window(635, 518, anchor="nw", window=lbx_inv)

          lb_inv1=Label(ord_smply_canvas,text=ord_lft_tp5.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline" ),height=1)#Order to
          win_inv1 = ord_smply_canvas.create_window(175, 250, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_smply_canvas,text=inv_lst_bx7.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline"),height=1)#Ship to
          win_inv1 = ord_smply_canvas.create_window(525, 250, anchor="nw", window=lb_inv1)

          lbx_inv=Label(ord_smply_canvas,text=ord_lft_tp6.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#Order Total"
          win_inv2 = ord_smply_canvas.create_window(630, 468, anchor="nw", window=lbx_inv)

          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          crcy_type=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          cry_plcy=post_rp[0]
          if cry_plcy=="before amount": 
            ord_smply_canvas.create_text(710, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 404, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(792, 428, text=str(crcy_type)+"18.00", fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 502, text=str(crcy_type)+"100.00", fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 526, text=str(crcy_type)+"138.00", fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(792, 454, text=str(crcy_type)+"20.00", fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 479, text=str(crcy_type)+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount":
            ord_smply_canvas.create_text(710, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 404, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(792, 428, text="18.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 502, text="100.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 526, text="138.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(792, 454, text="20.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 479, text="238.00"+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="before amount with space": 
            ord_smply_canvas.create_text(710, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 404, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(792, 428, text=str(crcy_type)+" "+"18.00", fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 502, text=str(crcy_type)+" "+"100.00", fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 526, text=str(crcy_type)+" "+"138.00", fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(792, 454, text=str(crcy_type)+" "+"20.00", fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 479, text=str(crcy_type)+" "+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount with space":
            ord_smply_canvas.create_text(710, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 404, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(792, 428, text="18.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 502, text="100.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 526, text="138.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(792, 454, text="20.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply_canvas.create_text(790, 479, text="238.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          else:
            pass



          ord_smply_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(710, 372, text="1", fill="black", font=('Helvetica 10'))

          

          ord_smply_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
        

          ord_smply_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
          lbx_inv=Label(ord_smply_canvas,text=inv_lst_bx21.get(1.0,END), bg="white",anchor="n",font=("Helvetica 10 "),height=1)#"Terms and Conditions"
          win_inv2 = ord_smply_canvas.create_window(420, 570, anchor="nw", window=lbx_inv)
          ord_smply_canvas.create_line(150, 600, 795, 600)
          text=ord_scrl_txt.get('1.0',END)
          wraped_text="\n".join(wrap(text,130))
    
        
          lbx_inv=Label(ord_smply_canvas,text=wraped_text, bg="white",anchor="nw",font=("Helvetica 8 "), justify=LEFT, height=3, width=107)
          win_inv2 = ord_smply_canvas.create_window(150, 603,anchor="nw", window=lbx_inv)

          ord_smply_canvas.create_text(280, 660, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    

          ord_smply_canvas.create_text(720, 660, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
        else:

          ord_smply_frame = Frame(ord_set_frm_cpy, width=953, height=300)
          ord_smply_frame.pack(expand=True, fill=BOTH)
          ord_smply_frame.place(x=247,y=90)
          ord_smply_canvas=Canvas(ord_smply_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))

          vertibar=Scrollbar(ord_smply_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=ord_smply_canvas.yview)
          ord_smply_canvas.config(width=953,height=300)

          ord_smply_canvas.config(yscrollcommand=vertibar.set)
          ord_smply_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          ord_smply_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          ord_smply_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(285, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

          ord_smply_canvas.create_text(202, 150, text="Order#", fill="black", font=('Helvetica 11'))
          ord_smply_canvas.create_text(215, 170, text="Order date", fill="black", font=('Helvetica 11'))
          ord_smply_canvas.create_text(200, 190, text="Due date", fill="black", font=('Helvetica 11'))
          ord_smply_canvas.create_text(191, 210, text="Terms", fill="black", font=('Helvetica 11'))
          ord_smply_canvas.create_text(205, 230, text="Order ref.#", fill="black", font=('Helvetica 11'))
          ord_smply_canvas.create_text(350, 150, text="EST1/2022", fill="black", font=('Helvetica 11'))
          ord_smply_canvas.create_text(350, 170, text="05-05-2022", fill="black", font=('Helvetica 11'))
          ord_smply_canvas.create_text(350, 190, text="20-05-2022", fill="black", font=('Helvetica 11'))
          ord_smply_canvas.create_text(340, 210, text="NET 15", fill="black", font=('Helvetica 11'))      

          ord_smply_canvas.create_text(720, 80, text="Your Company Name", fill="black", font=('Helvetica 12 '))
          ord_smply_canvas.create_text(750, 110, text="Address line 1", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(750, 125, text="Address line 2", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(750, 140, text="Address line 3", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(750, 155, text="Address line 4", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(745, 170, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(745, 185, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(750, 205, text="Order", fill="black", font=('Helvetica 14 bold'))
          
          ord_smply_canvas.create_text(210, 260, text="Order to", fill="black", font=('Helvetica 10 underline'))
          ord_smply_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_smply_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          ord_smply_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_smply_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

          tree=ttk.Treeview(ord_smply_canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=530)
          tree.heading("# 1", text="Product/Service - Description")
          tree.column("# 2", anchor=E, stretch=NO, width=90)
          tree.heading("# 2", text="Quantity")
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text="Price")
          
          window = ord_smply_canvas.create_window(120, 340, anchor="nw", window=tree)

          ord_smply_canvas.create_line(120, 390, 820, 390 )
          ord_smply_canvas.create_line(120, 340, 120, 365 )
          ord_smply_canvas.create_line(120, 365, 120, 390 )
          ord_smply_canvas.create_line(820, 340, 820, 540 )
          ord_smply_canvas.create_line(740, 340, 740, 540 )
          ord_smply_canvas.create_line(570, 390, 570, 540 )
          ord_smply_canvas.create_line(570, 415, 820, 415 )
          ord_smply_canvas.create_line(570, 440, 820, 440 )
          ord_smply_canvas.create_line(570, 465, 820, 465 )
          ord_smply_canvas.create_line(570, 490, 820, 490 )
          ord_smply_canvas.create_line(570, 515, 820, 515 )
          ord_smply_canvas.create_line(650, 340, 650, 390 )
          ord_smply_canvas.create_line(570, 540, 820, 540 )

          
          ord_smply_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(710, 372, text="1", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(790, 372, text="$200.00", fill="black", font=('Helvetica 10'))

          ord_smply_canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(790, 404, text="$200.00", fill="black", font=('Helvetica 10'))

          ord_smply_canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(792, 428, text="$18.00", fill="black", font=('Helvetica 10'))

          ord_smply_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(792, 454, text="$20.00", fill="black", font=('Helvetica 10'))

          ord_smply_canvas.create_text(790, 479, text="$238.00", fill="black", font=('Helvetica 10 bold'))
          ord_smply_canvas.create_text(650, 479, text="Estimate total", fill="black", font=('Helvetica 10 bold'))

          ord_smply_canvas.create_text(790, 502, text="$100.00", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))

          ord_smply_canvas.create_text(790, 526, text="$138.00", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

          ord_smply_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))

          ord_smply_canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_line(150, 620, 795, 620)
          ord_smply_canvas.create_text(280, 655, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          ord_smply_canvas.create_text(720, 655, text="Page 1 of 1", fill="black", font=('Helvetica 10'))

    #-------------------------------------------------------------------------------Simplified 2 (logo on right side)
      elif cmp_mn_var == 'Simplified 2 (logo on right side)':
        if cmpy_dtls[1] is not None:
          sql='select dateformat from company'
          fbcursor.execute(sql)
          date_frmat=fbcursor.fetchone()
          
          if not date_frmat:
            ft_fr='%Y-%m-%d'
        
          elif date_frmat[0]=="mm-dd-yyyy":
            ft_fr='%m-%d-%Y'

          elif date_frmat[0]=="dd-mm-yyyy":
              ft_fr='%d-%m-%Y'
                      
          elif date_frmat[0]=="yyy.mm.dd":
              ft_fr='%Y.%m.%d'
                          
          elif date_frmat[0]=="mm/dd/yyyy":
              ft_fr='%m/%d/%Y'
                          
          elif date_frmat[0]=="dd/mm/yyyy":
              ft_fr='%d/%m/%Y'
                                  
          elif date_frmat[0]=="dd.mm.yyyy":
              ft_fr='%d.%m.%Y'
                                  
          elif date_frmat[0]=="yyyy/  mm/dd":
              ft_fr='%Y/%m/%d'

          else:
              ft_fr='%Y-%m-%d'
          td_date=date.today()
          date_tdy=td_date.strftime(ft_fr)
          ord_smply2_frame = Frame(ord_set_frm_cpy, width=953, height=300)
          ord_smply2_frame.pack(expand=True, fill=BOTH)
          ord_smply2_frame.place(x=247,y=90)

          ord_smply2_canvas=Canvas(ord_smply2_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))

          vertibar=Scrollbar(ord_smply2_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=ord_smply2_canvas.yview)
          ord_smply2_canvas.config(width=953,height=300)

          ord_smply2_canvas.config(yscrollcommand=vertibar.set)
          ord_smply2_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          ord_smply2_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          ord_smply2_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          try:
            inv_image = Image.open("images/"+cmpy_dtl[13])
            inv_resize_image = inv_image.resize((200,75))
            inv_image = ImageTk.PhotoImage(inv_resize_image)
          
            inv_logo = Label(ord_smply2_canvas,width=200,height=75, bg="white",image = inv_image) 
            inv_window_image = ord_smply2_canvas.create_window(800, 60, anchor="ne", window=inv_logo)
            inv_logo.photo = inv_image
          except:
            ord_smply2_canvas.create_text(650, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

          labelcmp=Label(ord_smply2_canvas,text=cmpy_dtl[1],justify=LEFT, bg="white",anchor="nw",font=("Helvetica", 12), width=40, height=1)
          window = ord_smply2_canvas.create_window(150,80, anchor="nw", window=labelcmp)

          labelcmpl=Label(ord_smply2_canvas,text=cmpy_dtl[2],justify=LEFT, bg="white",font=("Helvetica", 9),anchor="nw", width=40, height=4)
          windowl = ord_smply2_canvas.create_window(155 ,110, anchor="nw", window=labelcmpl)
          
          ord_smply2_canvas.create_text(210, 185, text=cmpy_dtl[4],justify=LEFT, fill="black", font=('Helvetica 9'))
          lb_inv1=Label(ord_smply2_canvas,text=ord_lft_tp2.get(1.0, END), bg="white",anchor="ne",font=("Helvetica", 11),height=1)#Order#"
          win_inv1 = ord_smply2_canvas.create_window(550, 140, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_smply2_canvas,text=ord_lft_tp3.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", 11),height=1 )#Invoicedate
          win_inv1 = ord_smply2_canvas.create_window(550, 160, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(ord_smply2_canvas,text=ord_lft_tp4.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Due date
          win_inv1 = ord_smply2_canvas.create_window(550, 180, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_smply2_canvas,text=inv_lst_bx5.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", 11),height=1)#Terms
          win_inv1 = ord_smply2_canvas.create_window(550, 200, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_smply2_canvas,text=inv_lst_bx4.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = ord_smply2_canvas.create_window(550, 220, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(ord_smply2_canvas,text=ord_lft_tp1.get(1.0,END), bg="white",anchor="ne",font=('Helvetica 14 bold'),height=1)#invoice
          win_inv1 = ord_smply2_canvas.create_window(155, 200, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_smply2_canvas,text=ord_lft_tp5.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline" ),height=1)#Order to
          win_inv1 = ord_smply2_canvas.create_window(175, 250, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_smply2_canvas,text=inv_lst_bx7.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline"),height=1)#Ship to
          win_inv1 = ord_smply2_canvas.create_window(525, 250, anchor="nw", window=lb_inv1)


          lb_inv1=Label(ord_smply2_canvas,text=str(ord_lft_tp.get())+"1/2022", bg="white",anchor="nw",font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = ord_smply2_canvas.create_window(640, 140, anchor="nw", window=lb_inv1)
          ord_smply2_canvas.create_text(680, 170, text=date_tdy, fill="black", font=('Helvetica 11'))
          ord_smply2_canvas.create_text(680, 190, text=date_tdy, fill="black", font=('Helvetica 11'))
          ord_smply2_canvas.create_text(670, 210, text="NET 15", fill="black", font=('Helvetica 11'))      

          
          ord_smply2_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_smply2_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))

          ord_smply2_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_smply2_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

          phf = ttk.Style()
          phf.configure('mystyle125.Treeview.Heading', background=''+ ord_man_var.get(),State='DISABLE')

          tree=ttk.Treeview(ord_smply2_canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle125.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=530)
          tree.heading("# 1", text=inv_lst_bx9.get(1.0,END))
          tree.column("# 2", anchor=E, stretch=NO, width=90)
          tree.heading("# 2", text=inv_lst_bx10.get(1.0,END))
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text=inv_lst_bx13.get(1.0,END))
          
          window = ord_smply2_canvas.create_window(120, 340, anchor="nw", window=tree)

          ord_smply2_canvas.create_line(120, 390, 820, 390 )
          ord_smply2_canvas.create_line(120, 340, 120, 365 )
          ord_smply2_canvas.create_line(120, 365, 120, 390 )
          ord_smply2_canvas.create_line(820, 340, 820, 540 )
          ord_smply2_canvas.create_line(740, 340, 740, 540 )
          ord_smply2_canvas.create_line(570, 390, 570, 540 )
          ord_smply2_canvas.create_line(570, 415, 820, 415 )
          ord_smply2_canvas.create_line(570, 440, 820, 440 )
          ord_smply2_canvas.create_line(570, 465, 820, 465 )
          ord_smply2_canvas.create_line(570, 490, 820, 490 )
          ord_smply2_canvas.create_line(570, 515, 820, 515 )
          ord_smply2_canvas.create_line(650, 340, 650, 390 )
          ord_smply2_canvas.create_line(570, 540, 820, 540 )

          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          crcy_type=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          cry_plcy=post_rp[0]
          if cry_plcy=="before amount": 
            ord_smply2_canvas.create_text(710, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 404, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(792, 428, text=str(crcy_type)+"18.00", fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 502, text=str(crcy_type)+"100.00", fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 526, text=str(crcy_type)+"138.00", fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(792, 454, text=str(crcy_type)+"20.00", fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 479, text=str(crcy_type)+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount":
            ord_smply2_canvas.create_text(710, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 404, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(792, 428, text="18.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 502, text="100.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 526, text="138.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(792, 454, text="20.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 479, text="238.00"+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="before amount with space": 
            ord_smply2_canvas.create_text(710, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 404, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(792, 428, text=str(crcy_type)+" "+"18.00", fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 502, text=str(crcy_type)+" "+"100.00", fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 526, text=str(crcy_type)+" "+"138.00", fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(792, 454, text=str(crcy_type)+" "+"20.00", fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 479, text=str(crcy_type)+" "+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount with space":
            ord_smply2_canvas.create_text(710, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 404, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(792, 428, text="18.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 502, text="100.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 526, text="138.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(792, 454, text="20.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_smply2_canvas.create_text(790, 479, text="238.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          else:
            pass


          
          ord_smply2_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(710, 372, text="1", fill="black", font=('Helvetica 10'))


          ord_smply2_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
      

          lbx_inv=Label(ord_smply2_canvas,text=inv_lst_bx14.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10"),height=1)#"Subtotal"
          win_inv2 = ord_smply2_canvas.create_window(630,392, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_smply2_canvas,text=inv_lst_bx17.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"TAX1"
          win_inv2 = ord_smply2_canvas.create_window(635,418, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_smply2_canvas,text=inv_lst_bx19.get(1.0,END), bg="White",anchor="nw",font=("Helvetica 10 "), height=1)#"Total Paid"
          win_inv2 = ord_smply2_canvas.create_window(630, 492,anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_smply2_canvas,text=inv_lst_bx20.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"Balance"
          win_inv2 = ord_smply2_canvas.create_window(635, 518, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_smply2_canvas,text=ord_lft_tp6.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#Order Total"
          win_inv2 = ord_smply2_canvas.create_window(630, 468, anchor="nw", window=lbx_inv)
          
          ord_smply2_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
          lbx_inv=Label(ord_smply2_canvas,text=inv_lst_bx21.get(1.0,END), bg="white",anchor="n",font=("Helvetica 10 "),height=1)#"Terms and Conditions"
          win_inv2 = ord_smply2_canvas.create_window(420, 570, anchor="nw", window=lbx_inv)
          ord_smply2_canvas.create_line(150, 600, 795, 600)
          text=ord_scrl_txt.get('1.0',END)
          wraped_text="\n".join(wrap(text,130))
    
        
          lbx_inv=Label(ord_smply2_canvas,text=wraped_text, bg="white",anchor="nw",font=("Helvetica 8 "), justify=LEFT, height=3, width=107)
          win_inv2 = ord_smply2_canvas.create_window(150, 603,anchor="nw", window=lbx_inv)

          ord_smply2_canvas.create_text(280, 660, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    

          ord_smply2_canvas.create_text(720, 660, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
        else:
          ord_smply2_frame = Frame(ord_set_frm_cpy, width=953, height=300)
          ord_smply2_frame.pack(expand=True, fill=BOTH)
          ord_smply2_frame.place(x=247,y=90)

          ord_smply2_canvas=Canvas(ord_smply2_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))

          vertibar=Scrollbar(ord_smply2_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=ord_smply2_canvas.yview)
          ord_smply2_canvas.config(width=953,height=300)

          ord_smply2_canvas.config(yscrollcommand=vertibar.set)
          ord_smply2_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          ord_smply2_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          ord_smply2_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(650, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

          ord_smply2_canvas.create_text(250, 80, text="Your Company Name", fill="black", font=('Helvetica 12 '))
          ord_smply2_canvas.create_text(225, 110, text="Address line 1", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(225, 125, text="Address line 2", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(225, 140, text="Address line 3", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(225, 155, text="Address line 4", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(234, 170, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(234, 185, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(225, 205, text="Order", fill="black", font=('Helvetica 14 bold'))

          ord_smply2_canvas.create_text(502, 150, text="Order#", fill="black", font=('Helvetica 11'))
          ord_smply2_canvas.create_text(515, 170, text="Order date", fill="black", font=('Helvetica 11'))
          ord_smply2_canvas.create_text(500, 190, text="Due date", fill="black", font=('Helvetica 11'))
          ord_smply2_canvas.create_text(491, 210, text="Terms", fill="black", font=('Helvetica 11'))
          ord_smply2_canvas.create_text(505, 230, text="Order ref.#", fill="black", font=('Helvetica 11'))
          ord_smply2_canvas.create_text(680, 150, text="EST1/2022", fill="black", font=('Helvetica 11'))
          ord_smply2_canvas.create_text(680, 170, text="05-05-2022", fill="black", font=('Helvetica 11'))
          ord_smply2_canvas.create_text(680, 190, text="20-05-2022", fill="black", font=('Helvetica 11'))
          ord_smply2_canvas.create_text(670, 210, text="NET 15", fill="black", font=('Helvetica 11'))      

          ord_smply2_canvas.create_text(210, 260, text="Order to", fill="black", font=('Helvetica 10 underline'))
          ord_smply2_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_smply2_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          ord_smply2_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_smply2_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

          tree=ttk.Treeview(ord_smply2_canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=530)
          tree.heading("# 1", text="Product/Service - Description")
          tree.column("# 2", anchor=E, stretch=NO, width=90)
          tree.heading("# 2", text="Quantity")
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text="Price")
          
          window = ord_smply2_canvas.create_window(120, 340, anchor="nw", window=tree)

          ord_smply2_canvas.create_line(120, 390, 820, 390 )
          ord_smply2_canvas.create_line(120, 340, 120, 365 )
          ord_smply2_canvas.create_line(120, 365, 120, 390 )
          ord_smply2_canvas.create_line(820, 340, 820, 540 )
          ord_smply2_canvas.create_line(740, 340, 740, 540 )
          ord_smply2_canvas.create_line(570, 390, 570, 540 )
          ord_smply2_canvas.create_line(570, 415, 820, 415 )
          ord_smply2_canvas.create_line(570, 440, 820, 440 )
          ord_smply2_canvas.create_line(570, 465, 820, 465 )
          ord_smply2_canvas.create_line(570, 490, 820, 490 )
          ord_smply2_canvas.create_line(570, 515, 820, 515 )
          ord_smply2_canvas.create_line(650, 340, 650, 390 )
          ord_smply2_canvas.create_line(570, 540, 820, 540 )

          
          ord_smply2_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(710, 372, text="1", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(790, 372, text="$200.00", fill="black", font=('Helvetica 10'))

          ord_smply2_canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(790, 404, text="$200.00", fill="black", font=('Helvetica 10'))

          ord_smply2_canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(792, 428, text="$18.00", fill="black", font=('Helvetica 10'))

          ord_smply2_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(792, 454, text="$20.00", fill="black", font=('Helvetica 10'))

          ord_smply2_canvas.create_text(790, 479, text="$238.00", fill="black", font=('Helvetica 10 bold'))
          ord_smply2_canvas.create_text(650, 479, text="Estimate total", fill="black", font=('Helvetica 10 bold'))

          ord_smply2_canvas.create_text(790, 502, text="$100.00", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))

          ord_smply2_canvas.create_text(790, 526, text="$138.00", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

          ord_smply2_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))

          ord_smply2_canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_line(150, 620, 795, 620)
          ord_smply2_canvas.create_text(280, 655, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          ord_smply2_canvas.create_text(720, 655, text="Page 1 of 1", fill="black", font=('Helvetica 10'))

    #-----------------------------------------------------------------------------------------------Business Classic-
      elif cmp_mn_var == 'Business Classic':
        if cmpy_dtls[1] is not None:
          sql='select dateformat from company'
          fbcursor.execute(sql)
          date_frmat=fbcursor.fetchone()
          
          if not date_frmat:
            ft_fr='%Y-%m-%d'
        
          elif date_frmat[0]=="mm-dd-yyyy":
            ft_fr='%m-%d-%Y'

          elif date_frmat[0]=="dd-mm-yyyy":
              ft_fr='%d-%m-%Y'
                      
          elif date_frmat[0]=="yyy.mm.dd":
              ft_fr='%Y.%m.%d'
                          
          elif date_frmat[0]=="mm/dd/yyyy":
              ft_fr='%m/%d/%Y'
                          
          elif date_frmat[0]=="dd/mm/yyyy":
              ft_fr='%d/%m/%Y'
                                  
          elif date_frmat[0]=="dd.mm.yyyy":
              ft_fr='%d.%m.%Y'
                                  
          elif date_frmat[0]=="yyyy/  mm/dd":
              ft_fr='%Y/%m/%d'

          else:
              ft_fr='%Y-%m-%d'
          td_date=date.today()
          date_tdy=td_date.strftime(ft_fr)
          ord_bs_frame = Frame(ord_set_frm_cpy, width=953, height=300)
          ord_bs_frame.pack(expand=True, fill=BOTH)
          ord_bs_frame.place(x=247,y=90)
          
          ord_bs_canvas=Canvas(ord_bs_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(ord_bs_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=ord_bs_canvas.yview)
          ord_bs_canvas.config(width=953,height=300)
          
          ord_bs_canvas.config(yscrollcommand=vertibar.set)
          ord_bs_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          ord_bs_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          ord_bs_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_line(150, 70, 800, 70, fill='orange')
          try:
            inv_image = Image.open("images/"+cmpy_dtl[13])
            inv_resize_image = inv_image.resize((200,75))
            inv_image = ImageTk.PhotoImage(inv_resize_image)
          
            inv_logo = Label(ord_bs_canvas,width=200,height=75, bg="white",image = inv_image) 
            inv_window_image = ord_bs_canvas.create_window(140, 125, anchor="nw", window=inv_logo)
            inv_logo.photo = inv_image
          except:
            ord_bs_canvas.create_text(300, 150, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
          labelcmp=Label(ord_bs_canvas,text=cmpy_dtl[1],justify=LEFT, bg="white",anchor="nw",font=("Helvetica", 12), width=30, height=1)
          window = ord_bs_canvas.create_window(345,100, anchor="nw", window=labelcmp)

          labelcmpl=Label(ord_bs_canvas,text=cmpy_dtl[2],justify=LEFT, bg="white",font=("Helvetica", 9),anchor="nw", width=40, height=4)
          windowl = ord_bs_canvas.create_window(350 ,130, anchor="nw", window=labelcmpl)
          
          ord_bs_canvas.create_text(405, 210, text=cmpy_dtl[4],justify=LEFT, fill="black", font=('Helvetica 9'))
          
          ord_bs_canvas.create_text(720, 130, text="John Doe\n381 South Beadford Road\nBedford Corner,NY10549\nUnited States", fill="black", font=('Helvetica 11'))

          lb_inv1=Label(ord_bs_canvas,text=ord_lft_tp2.get(1.0, END), bg="white",anchor="ne",font=("Helvetica", 11),height=1)#Invoice#
          win_inv1 = ord_bs_canvas.create_window(575, 170, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_bs_canvas,text=ord_lft_tp3.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", 11),height=1 )#Invoicedate
          win_inv1 = ord_bs_canvas.create_window(575, 200, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(ord_bs_canvas,text=ord_lft_tp4.get(1.0,END), bg="white",anchor="ne",font=("Helvetica", 11),height=1)#Due date
          win_inv1 = ord_bs_canvas.create_window(575, 230, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(ord_bs_canvas,text=str(ord_lft_tp.get())+"1/2022", bg="white",justify=LEFT,font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = ord_bs_canvas.create_window(815, 170, anchor="ne", window=lb_inv1)
          ord_bs_canvas.create_text(776, 210, text=date_tdy, fill="black", font=('Helvetica 11'))
          ord_bs_canvas.create_text(776, 240, text=date_tdy, fill="black", font=('Helvetica 11'))
          phf = ttk.Style()
          phf.configure('mystyle126.Treeview.Heading', background=''+ ord_man_var.get(),State='DISABLE')
          
          tree=ttk.Treeview(ord_bs_canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle126.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=200)
          tree.heading("# 1", text=inv_lst_bx9.get(1.0,END))
          tree.column("# 2", anchor=E, stretch=NO, width=250)
          tree.heading("# 2", text=inv_lst_bx11.get(1.0,END))
          tree.column("# 3", anchor=E, stretch=NO, width=90)
          tree.heading("# 3", text=inv_lst_bx12.get(1.0,END))
          tree.column("# 4", anchor=E, stretch=NO, width=80)
          tree.heading("# 4", text=inv_lst_bx10.get(1.0,END))
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text=inv_lst_bx13.get(1.0,END))
          
          window = ord_bs_canvas.create_window(120, 255, anchor="nw", window=tree)

          ord_bs_canvas.create_line(120, 295, 820, 295 )
          ord_bs_canvas.create_line(120, 255, 120, 295 )
          ord_bs_canvas.create_line(320, 255, 320, 295 )
          
          ord_bs_canvas.create_line(740, 255, 740, 445 )
          ord_bs_canvas.create_line(570, 255, 570, 445 )
          ord_bs_canvas.create_line(570, 255, 570, 295 )
          ord_bs_canvas.create_line(660, 255, 660, 295 )
          ord_bs_canvas.create_line(740, 255, 740, 295 )
          ord_bs_canvas.create_line(820, 255, 820, 445 )
          ord_bs_canvas.create_line(570, 320, 820, 320 )
          ord_bs_canvas.create_line(570, 345, 820, 345 )
          ord_bs_canvas.create_line(570, 370, 820, 370 )
          ord_bs_canvas.create_line(570, 395, 820, 395 )
          ord_bs_canvas.create_line(570, 420, 820, 420 )
          ord_bs_canvas.create_line(570, 445, 820, 445 )
          
          
          lbx_inv=Label(ord_bs_canvas,text=inv_lst_bx14.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10"),height=1)#"Subtotal"
          win_inv2 = ord_bs_canvas.create_window(630,298, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_bs_canvas,text=inv_lst_bx17.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"TAX1"
          win_inv2 = ord_bs_canvas.create_window(635,323, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_bs_canvas,text=inv_lst_bx19.get(1.0,END), bg="White",anchor="nw",font=("Helvetica 10 "), height=1)#"Total Paid"
          win_inv2 = ord_bs_canvas.create_window(630, 398,anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_bs_canvas,text=inv_lst_bx20.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"Balance"
          win_inv2 = ord_bs_canvas.create_window(635, 423, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_bs_canvas,text=ord_lft_tp6.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#Order Total"
          win_inv2 = ord_bs_canvas.create_window(630, 373, anchor="nw", window=lbx_inv)

          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          crcy_type=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          cry_plcy=post_rp[0]
          if cry_plcy=="before amount": 
            ord_bs_canvas.create_text(630, 285, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 285, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 310, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(795, 335, text=str(crcy_type)+"18.00", fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(795, 360, text=str(crcy_type)+"20.00", fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 385, text=str(crcy_type)+"238.00", fill="black", font=('Helvetica 10 bold'))
            ord_bs_canvas.create_text(790, 410, text=str(crcy_type)+"100.00", fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 435, text=str(crcy_type)+"138.00", fill="black", font=('Helvetica 10'))
          elif cry_plcy=="after amount":
            ord_bs_canvas.create_text(630, 285, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 285, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 310, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(795, 335, text="18.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(795, 360, text="20.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 385, text="238.00"+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
            ord_bs_canvas.create_text(790, 410, text="100.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 435, text="138.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
          elif cry_plcy=="before amount with space":
            ord_bs_canvas.create_text(630, 285, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 285, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 310, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(795, 335, text=str(crcy_type)+" "+"18.00", fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(795, 360, text=str(crcy_type)+" "+"20.00", fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 385, text=str(crcy_type)+" "+"238.00", fill="black", font=('Helvetica 10 bold'))
            ord_bs_canvas.create_text(790, 410, text=str(crcy_type)+" "+"100.00", fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 435, text=str(crcy_type)+" "+"138.00", fill="black", font=('Helvetica 10')) 
          elif cry_plcy=="after amount with space":
            ord_bs_canvas.create_text(630, 285, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 285, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 310, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(795, 335, text="18.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(795, 360, text="20.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 385, text="238.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
            ord_bs_canvas.create_text(790, 410, text="100.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_bs_canvas.create_text(790, 435, text="138.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
          else:
            pass


          ord_bs_canvas.create_text(160, 285, text="PROD-0001", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(450, 285, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
    
          ord_bs_canvas.create_text(700, 285, text="1", fill="black", font=('Helvetica 10'))
      

          ord_bs_canvas.create_text(635, 360, text="Shipping and handling", fill="black", font=('Helvetica 10'))

          ord_bs_canvas.create_line(150, 470, 800, 470, fill='orange')

          ord_bs_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
          lbx_inv=Label(ord_bs_canvas,text=inv_lst_bx21.get(1.0,END), bg="white",anchor="n",font=("Helvetica 10 "),height=1)#"Terms and Conditions"
          win_inv2 = ord_bs_canvas.create_window(420, 570, anchor="nw", window=lbx_inv)
          ord_bs_canvas.create_line(150, 600, 795, 600)
          text=ord_scrl_txt.get('1.0',END)
          wraped_text="\n".join(wrap(text,130))
    
        
          lbx_inv=Label(ord_bs_canvas,text=wraped_text, bg="white",anchor="nw",font=("Helvetica 8 "), justify=LEFT, height=3, width=107)
          win_inv2 = ord_bs_canvas.create_window(150, 603,anchor="nw", window=lbx_inv)

          ord_bs_canvas.create_text(280, 660, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    

          ord_bs_canvas.create_text(720, 660, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
        else:
          ord_bs_frame = Frame(ord_set_frm_cpy, width=953, height=300)
          ord_bs_frame.pack(expand=True, fill=BOTH)
          ord_bs_frame.place(x=247,y=90)
          
          ord_bs_canvas=Canvas(ord_bs_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(ord_bs_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=ord_bs_canvas.yview)
          ord_bs_canvas.config(width=953,height=300)
          
          ord_bs_canvas.config(yscrollcommand=vertibar.set)
          ord_bs_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          ord_bs_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          ord_bs_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_line(150, 70, 800, 70, fill='orange')
          ord_bs_canvas.create_text(300, 150, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

          ord_bs_canvas.create_text(500, 115, text="Your Company Name", fill="black", font=('Helvetica 12 '))
          ord_bs_canvas.create_text(525, 140, text="Address line 1", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(525, 155, text="Address line 2", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(525, 170, text="Address line 3", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(525, 185, text="Address line 4", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(534, 200, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(534, 215, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))

          

          ord_bs_canvas.create_text(659, 180, text="Order", fill="black", font=('Helvetica 11'))
          ord_bs_canvas.create_text(675, 210, text="Order date", fill="black", font=('Helvetica 11'))
          ord_bs_canvas.create_text(659, 240, text="Due date", fill="black", font=('Helvetica 11'))

          

          

          ord_bs_canvas.create_text(776, 180, text="ORD1/2022", fill="black", font=('Helvetica 11'))
          ord_bs_canvas.create_text(776, 210, text="05 May 2022", fill="black", font=('Helvetica 11'))
          ord_bs_canvas.create_text(776, 240, text="20-05-2022", fill="black", font=('Helvetica 11'))
          tree=ttk.Treeview(ord_bs_canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle.Treeview')
          
          tree.column("# 1", anchor=E, stretch=NO, width=200)
          tree.heading("# 1", text="Product/Service")
          tree.column("# 2", anchor=E, stretch=NO, width=250)
          tree.heading("# 2", text="Description")
          tree.column("# 3", anchor=E, stretch=NO, width=90)
          tree.heading("# 3", text="Unit Price")
          tree.column("# 4", anchor=E, stretch=NO, width=80)
          tree.heading("# 4", text="Quantity")
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text="Price")
          
          window = ord_bs_canvas.create_window(120, 255, anchor="nw", window=tree)

          ord_bs_canvas.create_line(120, 295, 820, 295 )
          ord_bs_canvas.create_line(120, 255, 120, 295 )
          ord_bs_canvas.create_line(320, 255, 320, 295 )
          ord_bs_canvas.create_line(570, 255, 570, 295 )
          ord_bs_canvas.create_line(660, 255, 660, 295 )
          ord_bs_canvas.create_line(740, 255, 740, 295 )
          ord_bs_canvas.create_line(820, 255, 820, 445 )
          ord_bs_canvas.create_line(570, 320, 820, 320 )
          ord_bs_canvas.create_line(570, 345, 820, 345 )
          ord_bs_canvas.create_line(570, 370, 820, 370 )
          ord_bs_canvas.create_line(570, 395, 820, 395 )
          ord_bs_canvas.create_line(570, 420, 820, 420 )
          ord_bs_canvas.create_line(570, 445, 820, 445 )
          
          ord_bs_canvas.create_text(160, 285, text="PROD-0001", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(450, 285, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(630, 285, text="$200.00", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(700, 285, text="1", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(790, 285, text="$200.00", fill="black", font=('Helvetica 10'))

          ord_bs_canvas.create_text(790, 310, text="$200.00", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(795, 335, text="$18.00", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(795, 360, text="$20.00", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(790, 385, text="$238.00", fill="black", font=('Helvetica 10 bold'))
          ord_bs_canvas.create_text(790, 410, text="$100.00", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(790, 435, text="$138.00", fill="black", font=('Helvetica 10'))

          ord_bs_canvas.create_text(595, 310, text="Subtotal", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(585, 335, text="TAX1", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(635, 360, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(615, 385, text="Estimate total", fill="black", font=('Helvetica 10 bold'))
          ord_bs_canvas.create_text(600, 410, text="Total Paid", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(595, 435, text="Balance", fill="black", font=('Helvetica 10'))

          ord_bs_canvas.create_line(150, 470, 800, 470, fill='orange')
          ord_bs_canvas.create_text(275, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(182, 510, text="...", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(182, 520, text="...", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(182, 530, text="...", fill="black", font=('Helvetica 10'))
          
          ord_bs_canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_line(150, 620, 795, 620, fill='orange')
          ord_bs_canvas.create_text(280, 655, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          ord_bs_canvas.create_text(720, 655, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
      else:
          pass

  por_sql_st='select * from company'
  fbcursor.execute(por_sql_st)
  cmpy_dtls=fbcursor.fetchone()
  if cmpy_dtls[1] is not None:
          sql='select dateformat from company'
          fbcursor.execute(sql)
          date_frmat=fbcursor.fetchone()
          
          if not date_frmat:
            ft_fr='%Y-%m-%d'
        
          elif date_frmat[0]=="mm-dd-yyyy":
            ft_fr='%m-%d-%Y'

          elif date_frmat[0]=="dd-mm-yyyy":
              ft_fr='%d-%m-%Y'
                      
          elif date_frmat[0]=="yyy.mm.dd":
              ft_fr='%Y.%m.%d'
                          
          elif date_frmat[0]=="mm/dd/yyyy":
              ft_fr='%m/%d/%Y'
                          
          elif date_frmat[0]=="dd/mm/yyyy":
              ft_fr='%d/%m/%Y'
                                  
          elif date_frmat[0]=="dd.mm.yyyy":
              ft_fr='%d.%m.%Y'
                                  
          elif date_frmat[0]=="yyyy/  mm/dd":
              ft_fr='%Y/%m/%d'

          else:
              ft_fr='%Y-%m-%d'
          td_date=date.today()
          date_tdy=td_date.strftime(ft_fr)
          ord_pro1_frame = Frame(ord_set_frm_cpy, width=953, height=300)
          ord_pro1_frame = Frame(ord_set_frm_cpy, width=953, height=300)
          ord_pro1_frame.pack(expand=True, fill=BOTH)
          ord_pro1_frame.place(x=247,y=90)
          ord_pro1_canvas=Canvas(ord_pro1_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
          vertibar=Scrollbar(ord_pro1_frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=ord_pro1_canvas.yview)
          
          ord_pro1_canvas.config(width=953,height=300)
          ord_pro1_canvas.config(yscrollcommand=vertibar.set)
          ord_pro1_canvas.pack(expand=True,side=LEFT,fill=BOTH)
          ord_pro1_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
          ord_pro1_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          try:
            inv_image = Image.open("images/"+cmpy_dtl[13])
            inv_resize_image = inv_image.resize((200,75))
            inv_image = ImageTk.PhotoImage(inv_resize_image)
          
            inv_logo = Label(ord_pro1_canvas,width=200,height=75, bg="white",image = inv_image) 
            inv_window_image = ord_pro1_canvas.create_window(150, 50, anchor="nw", window=inv_logo)
            inv_logo.photo = inv_image
          except:
            ord_pro1_canvas.create_text(285, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
          
          lb_inv1=Label(ord_pro1_canvas,text=ord_lft_tp2.get(1.0, END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Order#"
          win_inv1 = ord_pro1_canvas.create_window(175, 140, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_pro1_canvas,text=ord_lft_tp3.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1 )#Order date
          win_inv1 = ord_pro1_canvas.create_window(175, 160, anchor="nw", window=lb_inv1)
          
          lb_inv1=Label(ord_pro1_canvas,text=ord_lft_tp4.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Due date
          win_inv1 = ord_pro1_canvas.create_window(175, 180, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_pro1_canvas,text=inv_lst_bx5.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", 11),height=1)#Terms
          win_inv1 = ord_pro1_canvas.create_window(175, 200, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_pro1_canvas,text=inv_lst_bx4.get(1.0,END), bg="white",anchor="nw",font=("Helvetica", ),height=1)#Order ref.#
          win_inv1 = ord_pro1_canvas.create_window(175, 220, anchor="nw", window=lb_inv1)

          # ord_pro1_canvas.create_text(195, 150, text="Order#", fill="black", font=('Helvetica 11'))
          # ord_pro1_canvas.create_text(205, 170, text="Order date", fill="black", font=('Helvetica 11'))
          # ord_pro1_canvas.create_text(200, 190, text="Due date", fill="black", font=('Helvetica 11'))
          # ord_pro1_canvas.create_text(191, 210, text="Terms", fill="black", font=('Helvetica 11'))
          # ord_pro1_canvas.create_text(205, 230, text="Order ref.#", fill="black", font=('Helvetica 11'))
          lb_inv1=Label(ord_pro1_canvas,text=str(ord_lft_tp.get())+"1/2022", bg="white",anchor="nw",font=("Helvetica", ),height=1)#Invoice ref.#
          win_inv1 = ord_pro1_canvas.create_window(310, 140, anchor="nw", window=lb_inv1)
          ord_pro1_canvas.create_text(350, 170, text=date_tdy, fill="black", font=('Helvetica 11'))
          ord_pro1_canvas.create_text(350, 190, text=date_tdy, fill="black", font=('Helvetica 11'))
          ord_pro1_canvas.create_text(340, 210, text="NET 15", fill="black", font=('Helvetica 11'))      

          labelcmp=Label(ord_pro1_canvas,text=cmpy_dtl[1], bg="white",anchor="e",font=("Helvetica", 12), width=40, height=1)
          window = ord_pro1_canvas.create_window(430,80, anchor="nw", window=labelcmp)

          labelcmpl=Label(ord_pro1_canvas,text=cmpy_dtl[2],justify=RIGHT, bg="white",font=("Helvetica", 9),anchor="ne", width=50, height=4)
          windowl = ord_pro1_canvas.create_window(440,110, anchor="nw", window=labelcmpl)

          
          ord_pro1_canvas.create_text(745, 195, text=cmpy_dtl[4], fill="black", font=('Helvetica 10'))
          # lb_inv1=Label(ord_pro1_canvas,text=ord_lft_tp1.get(1.0,END), bg="white",justify=LEFT,font=('Helvetica 14 bold'),height=2)#Order
          # win_inv1 = ord_pro1_canvas.create_window(800, 250, anchor="ne", window=lb_inv1)

          lb_inv1=Label(ord_pro1_canvas,text=ord_lft_tp1.get(1.0,END), bg="white",anchor="ne",font=('Helvetica 14 bold'),height=1)#invoice
          win_inv1 = ord_pro1_canvas.create_window(800, 200, anchor="ne", window=lb_inv1)

          lb_inv1=Label(ord_pro1_canvas,text=inv_lst_bx22.get(1.0,END), bg="white",justify=LEFT,font=("Helvetica 10" ),height=2)#TAX EXEMPTED
          win_inv1 = ord_pro1_canvas.create_window(800, 225, anchor="ne", window=lb_inv1)

          lb_inv1=Label(ord_pro1_canvas,text=ord_lft_tp5.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline" ),height=1)#Order to
          win_inv1 = ord_pro1_canvas.create_window(175, 250, anchor="nw", window=lb_inv1)

          lb_inv1=Label(ord_pro1_canvas,text=inv_lst_bx7.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 underline"),height=1)#Ship to
          win_inv1 = ord_pro1_canvas.create_window(525, 250, anchor="nw", window=lb_inv1)

          # ord_pro1_canvas.create_text(770, 205, text="Order", fill="black", font=('Helvetica 14 bold'))
      
          # ord_pro1_canvas.create_text(746, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
            
          # ord_pro1_canvas.create_text(210, 260, text="Order to", fill="black", font=('Helvetica 10 underline'))
          ord_pro1_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_pro1_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
          # ord_pro1_canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          ord_pro1_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
          ord_pro1_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
          phf = ttk.Style()
          phf.configure('mystyle126.Treeview.Heading', background=''+ ord_man_var.get(),State='DISABLE')

          tree=ttk.Treeview(ord_pro1_canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle126.Treeview')

          tree.column("# 1", anchor=E, stretch=NO, width=100)
          tree.heading("# 1", text=inv_lst_bx8.get(1.0,END))
          tree.column("# 2", anchor=E, stretch=NO, width=350)
          tree.heading("# 2", text=inv_lst_bx9.get(1.0,END))
          tree.column("# 3", anchor=E, stretch=NO, width=80)
          tree.heading("# 3", text=inv_lst_bx10.get(1.0,END))
          tree.column("# 4", anchor=E, stretch=NO, width=90)
          tree.heading("# 4", text=inv_lst_bx12.get(1.0,END))
          tree.column("# 5", anchor=E, stretch=NO, width=80)
          tree.heading("# 5", text=inv_lst_bx13.get(1.0,END))
          
          window = ord_pro1_canvas.create_window(120, 340, anchor="nw", window=tree)

          ord_pro1_canvas.create_line(120, 390, 820, 390 )
          ord_pro1_canvas.create_line(120, 340, 120, 365 )
          ord_pro1_canvas.create_line(120, 365, 120, 390 )
          ord_pro1_canvas.create_line(820, 340, 820, 540 )
          ord_pro1_canvas.create_line(740, 340, 740, 540 )
          ord_pro1_canvas.create_line(570, 340, 570, 540 )
          ord_pro1_canvas.create_line(570, 415, 820, 415 )
          ord_pro1_canvas.create_line(570, 440, 820, 440 )
          ord_pro1_canvas.create_line(570, 465, 820, 465 )
          ord_pro1_canvas.create_line(570, 490, 820, 490 )
          ord_pro1_canvas.create_line(570, 515, 820, 515 )
          ord_pro1_canvas.create_line(650, 340, 650, 390 )
          ord_pro1_canvas.create_line(220, 340, 220, 390 )
          ord_pro1_canvas.create_line(570, 540, 820, 540 )

          lbx_inv=Label(ord_pro1_canvas,text=inv_lst_bx14.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10"),height=1)#"Subtotal"
          win_inv2 = ord_pro1_canvas.create_window(630,392, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_pro1_canvas,text=inv_lst_bx17.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"TAX1"
          win_inv2 = ord_pro1_canvas.create_window(635,418, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_pro1_canvas,text=inv_lst_bx19.get(1.0,END), bg="White",anchor="nw",font=("Helvetica 10 "), height=1)#"Total Paid"
          win_inv2 = ord_pro1_canvas.create_window(630, 492,anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_pro1_canvas,text=inv_lst_bx20.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#"Balance"
          win_inv2 = ord_pro1_canvas.create_window(635, 518, anchor="nw", window=lbx_inv)

          lbx_inv=Label(ord_pro1_canvas,text=ord_lft_tp6.get(1.0,END), bg="white",anchor="nw",font=("Helvetica 10 "),height=1)#Order Total"
          win_inv2 = ord_pro1_canvas.create_window(630, 468, anchor="nw", window=lbx_inv)

          sqlr= 'select currencysign from company'
          fbcursor.execute(sqlr)
          crncy=fbcursor.fetchone()
          crcy_type=crncy[0]
          sqlrt= 'select currsignplace from company'
          fbcursor.execute(sqlrt)
          post_rp=fbcursor.fetchone()
          cry_plcy=post_rp[0]
          if cry_plcy=="before amount": 
            ord_pro1_canvas.create_text(710, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 372, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 404, text=str(crcy_type)+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 428, text=str(crcy_type)+"18.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 502, text=str(crcy_type)+"100.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 526, text=str(crcy_type)+"138.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 454, text=str(crcy_type)+"20.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 479, text=str(crcy_type)+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount":
            ord_pro1_canvas.create_text(710, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 372, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 404, text="200.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 428, text="18.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 502, text="100.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 526, text="138.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 454, text="20.00"+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 479, text="238.00"+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="before amount with space": 
            ord_pro1_canvas.create_text(710, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 372, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 404, text=str(crcy_type)+" "+"200.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 428, text=str(crcy_type)+" "+"18.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 502, text=str(crcy_type)+" "+"100.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 526, text=str(crcy_type)+" "+"138.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 454, text=str(crcy_type)+" "+"20.00", fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 479, text=str(crcy_type)+" "+"238.00", fill="black", font=('Helvetica 10 bold'))
          elif cry_plcy=="after amount with space":
            ord_pro1_canvas.create_text(710, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 372, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 404, text="200.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 428, text="18.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 502, text="100.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 526, text="138.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(792, 454, text="20.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10'))
            ord_pro1_canvas.create_text(790, 479, text="238.00"+" "+str(crcy_type), fill="black", font=('Helvetica 10 bold'))
          else:
            pass

          

          ord_pro1_canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
    
    

        

          ord_pro1_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
  

          
          ord_pro1_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
          ord_pro1_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
          lbx_inv=Label(ord_pro1_canvas,text=inv_lst_bx21.get(1.0,END), bg="white",anchor="n",font=("Helvetica 10 "),height=1)#"Terms and Conditions"
          win_inv2 = ord_pro1_canvas.create_window(420, 570, anchor="nw", window=lbx_inv)

          ord_pro1_canvas.create_line(150, 600, 795, 600)
          text=ord_scrl_txt.get('1.0',END)
          wraped_text="\n".join(wrap(text,130))
    
        
          lbx_inv=Label(ord_pro1_canvas,text=wraped_text, bg="white",anchor="nw",font=("Helvetica 8 "), justify=LEFT, height=3, width=107)
          win_inv2 = ord_pro1_canvas.create_window(150, 603,anchor="nw", window=lbx_inv)

          ord_pro1_canvas.create_text(280, 660, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    

          ord_pro1_canvas.create_text(720, 660, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
  else:
    ord_pro1_frame = Frame(ord_set_frm_cpy, width=953, height=300)
    ord_pro1_frame.pack(expand=True, fill=BOTH)
    ord_pro1_frame.place(x=247,y=90)
    ord_pro1_canvas=Canvas(ord_pro1_frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
    vertibar=Scrollbar(ord_pro1_frame, orient=VERTICAL)
    vertibar.pack(side=RIGHT,fill=Y)
    vertibar.config(command=ord_pro1_canvas.yview)
          
    ord_pro1_canvas.config(width=953,height=300)
    ord_pro1_canvas.config(yscrollcommand=vertibar.set)
    ord_pro1_canvas.pack(expand=True,side=LEFT,fill=BOTH)
    ord_pro1_canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
    ord_pro1_canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(285, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
          
    ord_pro1_canvas.create_text(195, 150, text="Order#", fill="black", font=('Helvetica 11'))
    ord_pro1_canvas.create_text(205, 170, text="Order date", fill="black", font=('Helvetica 11'))
    ord_pro1_canvas.create_text(200, 190, text="Due date", fill="black", font=('Helvetica 11'))
    ord_pro1_canvas.create_text(191, 210, text="Terms", fill="black", font=('Helvetica 11'))
    ord_pro1_canvas.create_text(205, 230, text="Order ref.#", fill="black", font=('Helvetica 11'))
    ord_pro1_canvas.create_text(350, 150, text="ORD1/2022", fill="black", font=('Helvetica 11'))
    ord_pro1_canvas.create_text(350, 170, text="03-05-2022", fill="black", font=('Helvetica 11'))
    ord_pro1_canvas.create_text(350, 190, text="18-05-2022", fill="black", font=('Helvetica 11'))
    ord_pro1_canvas.create_text(340, 210, text="NET 15", fill="black", font=('Helvetica 11'))      

    ord_pro1_canvas.create_text(720, 80, text="Your Company Name", fill="black", font=('Helvetica 12 '))
    ord_pro1_canvas.create_text(750, 110, text="Address line 1", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(750, 125, text="Address line 2", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(750, 140, text="Address line 3", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(750, 155, text="Address line 4", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(745, 170, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(745, 185, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(750, 205, text="Order", fill="black", font=('Helvetica 14 bold'))
    ord_pro1_canvas.create_text(746, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
            
    ord_pro1_canvas.create_text(210, 260, text="Order to", fill="black", font=('Helvetica 10 underline'))
    ord_pro1_canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
    ord_pro1_canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
    ord_pro1_canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
    ord_pro1_canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
    s = ttk.Style()
    s.configure('Treeview.Heading', background=''+ ord_man_var.get(),State='DISABLE')

    tree=ttk.Treeview(ord_pro1_canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle.Treeview')

    tree.column("# 1", anchor=E, stretch=NO, width=100)
    tree.heading("# 1", text="ID/SKU")
    tree.column("# 2", anchor=E, stretch=NO, width=350)
    tree.heading("# 2", text="Product/Service - Description")
    tree.column("# 3", anchor=E, stretch=NO, width=80)
    tree.heading("# 3", text="Quantity")
    tree.column("# 4", anchor=E, stretch=NO, width=90)
    tree.heading("# 4", text="Unit Price")
    tree.column("# 5", anchor=E, stretch=NO, width=80)
    tree.heading("# 5", text="Price")
          
    window = ord_pro1_canvas.create_window(120, 340, anchor="nw", window=tree)

    ord_pro1_canvas.create_line(120, 390, 820, 390 )
    ord_pro1_canvas.create_line(120, 340, 120, 365 )
    ord_pro1_canvas.create_line(120, 365, 120, 390 )
    ord_pro1_canvas.create_line(820, 340, 820, 540 )
    ord_pro1_canvas.create_line(740, 340, 740, 540 )
    ord_pro1_canvas.create_line(570, 340, 570, 540 )
    ord_pro1_canvas.create_line(570, 415, 820, 415 )
    ord_pro1_canvas.create_line(570, 440, 820, 440 )
    ord_pro1_canvas.create_line(570, 465, 820, 465 )
    ord_pro1_canvas.create_line(570, 490, 820, 490 )
    ord_pro1_canvas.create_line(570, 515, 820, 515 )
    ord_pro1_canvas.create_line(650, 340, 650, 390 )
    ord_pro1_canvas.create_line(220, 340, 220, 390 )
    ord_pro1_canvas.create_line(570, 540, 820, 540 )

    ord_pro1_canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(710, 372, text="$200.00", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(790, 372, text="$200.00", fill="black", font=('Helvetica 10'))

    ord_pro1_canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(790, 404, text="$200.00", fill="black", font=('Helvetica 10'))

    ord_pro1_canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(792, 428, text="$18.00", fill="black", font=('Helvetica 10'))

    ord_pro1_canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(792, 454, text="$20.00", fill="black", font=('Helvetica 10'))

    ord_pro1_canvas.create_text(790, 479, text="$238.00", fill="black", font=('Helvetica 10 bold'))
    ord_pro1_canvas.create_text(650, 479, text="Estimate total", fill="black", font=('Helvetica 10 bold'))

    ord_pro1_canvas.create_text(790, 502, text="$100.00", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))

    ord_pro1_canvas.create_text(790, 526, text="$138.00", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

    ord_pro1_canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
    ord_pro1_canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_line(150, 620, 795, 620)
          

    ord_pro1_canvas.create_text(280, 640, text= "", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(280, 655, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    ord_pro1_canvas.create_text(720, 655, text="Page 1 of 1", fill="black", font=('Helvetica 10'))

  ord_main_var = StringVar()
  ord_cmb_bx_mn = ttk.Combobox(ord_set_frm_cpy,textvariable=ord_main_var)
  ord_cmb_bx_mn.place(x=770 ,y=40, width=220)
  ord_cmb_bx_mn.bind("<<ComboboxSelected>>", ord_main_mn)
  ord_cmb_bx_mn["values"] = ("Professional 1 (logo on left side)","Professional 2 (logo on right side)","Simplified 1 (logo on left side)","Simplified 2 (logo on right side)","Business Classic")
  ord_cmb_bx_mn.current(0)
  
  ################### tab06 ###################################
  
  def user():
    display = displaystart.get()
    user_name = usernae.get()
    password = userpase.get()
    conformpassword = usercpase.get()
   
    create_inv = creinvbol.get()
    delete_inv = delinvbol.get()
    void_inv = voinvbol.get()
    mark_inv_as_paid = markinvbol.get()
    
    create_ord = creordbol.get()
    delete_ord = delordbol.get()
    turn_inv_ord = turninvbol.get()
    smsnofi = smsinvbol.get()
    
    create_est = creestimatebol.get()
    delete_est = delestimatebol.get()
    turn_est = turnestiinvbol.get()
  
    create_exp = creexpensebol.get()
    delete_exp = delexpensebol.get()
    rebill_exp = rebillexpebol.get()
    
    create_cus = crecusbol.get()
    delete_cus = delcusbol.get()
    imp_cus = impcusbol.get()
  
    create_pros = creprosbol.get()
    delete_pros = delprosbol.get()
    import_pros = impprosbol.get()
  
    runrep = runrepbol.get()
    gen_rec = genrecinvbol.get()
  
    create_pur = crepurbol.get()
    delete_pur = delpurbol.get()
  
    modify_inv = modifyinvbol.get()
    modify_ord = modifyordbol.get()
    modify_est = modifyestibol.get()
  
    if user_name=="" or password=="":
      messagebox.showerror('',"Please complete the form")
    else:
      sql='SELECT * FROM users WHERE username=%s'# selecting entire table from db,taking username , nd check   the existance
      val=(user_name,)
      fbcursor.execute(sql,val)
      if fbcursor.fetchone()is not None:
        sql='SELECT * FROM users WHERE username=%s'
        val=(user_name,)
        fbcursor.execute(sql,val)
        whuser = fbcursor.fetchone()
        print(whuser[0])
        if password == conformpassword:
          if user_name == "adminstator":
            sqll= 'UPDATE users SET displayloginscreen=%s,username=%s,password=%s,confirm_password=%s WHERE userID=%s'
            vall=(display,user_name,password,conformpassword,whuser[0])
            fbcursor.execute(sqll,vall)
            fbilldb.commit()
          else:
            sqll= 'UPDATE users SET displayloginscreen=%s,username=%s,password=%s,confirm_password=%s,create_invoice=%s,delete_invoice=%s,void_invoice=%s,mark_invoice_as_paid=%s,create_order=%s,delete_order=%s,turn_order_into_invoice=%s,send_sms_nofitication=%s,create_estimate=%s,delete_estimate=%s,turn_oestimate_into_invoice=%s,create_expense=%s,delete_expense=%s,rebill_exprense=%s,create_customer=%s,delete_customer=%s,import_customer=%s,	create_product_service=%s,delete_product_service=%s,import_product_service=%s,run_reports=%s,generate_recurring_invoice=%s,create_purchase_order=%s,delete_purchase_order=%s,modify_invoice_settings=%s,modify_order_settings=%s,modify_estimate_settings=%s WHERE userID=%s'
            vall=(display,user_name,password,conformpassword,create_inv,delete_inv,void_inv,mark_inv_as_paid,  create_ord,delete_ord,turn_inv_ord,smsnofi,create_est,delete_est,turn_est,create_exp,delete_exp,  rebill_exp,create_cus,delete_cus,imp_cus,create_pros,delete_pros,import_pros,runrep,gen_rec,create_pur,  delete_pur,modify_inv,modify_ord,modify_est,whuser[0])
            fbcursor.execute(sqll,vall)
            fbilldb.commit()
        else:
          messagebox.showerror('Warming','Password not match!!')
      else:
        if password == conformpassword:
          if user_name == "adminstator":
            sql="INSERT INTO users(displayloginscreen,username,password,confirm_password,create_invoice,  delete_invoice,void_invoice,mark_invoice_as_paid,create_order,delete_order,turn_order_into_invoice,  send_sms_nofitication,create_estimate,delete_estimate,turn_oestimate_into_invoice,	create_expense,	  delete_expense,rebill_exprense,create_customer,delete_customer,import_customer,	create_product_service,  delete_product_service,	import_product_service,run_reports,generate_recurring_invoice,  create_purchase_order,delete_purchase_order,modify_invoice_settings,modify_order_settings,  modify_estimate_settings) VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,  %s,%s,%s,%s,%s,%s,%s,%s)" #adding values into db
            val=(display,user_name,password,conformpassword,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1)
            fbcursor.execute(sql,val)
            fbilldb.commit()
            for record in uactree.get_children():
              uactree.delete(record)
            sql = "select * from users"
            fbcursor.execute(sql)
            sixuactree = fbcursor.fetchall()
            coutset = 0
            for i in sixuactree:
             uactree.insert(parent='', index='end', iid=coutset, text='hello', values=(i[3]))
             coutset += 1
          else:
            sql="INSERT INTO users(displayloginscreen,username,password,confirm_password,create_invoice,  delete_invoice,void_invoice,mark_invoice_as_paid,create_order,delete_order,turn_order_into_invoice,  send_sms_nofitication,create_estimate,delete_estimate,turn_oestimate_into_invoice,	create_expense,	  delete_expense,rebill_exprense,create_customer,delete_customer,import_customer,	create_product_service,  delete_product_service,	import_product_service,run_reports,generate_recurring_invoice,  create_purchase_order,delete_purchase_order,modify_invoice_settings,modify_order_settings,  modify_estimate_settings) VALUES(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,  %s,%s,%s,%s,%s,%s,%s,%s)" #adding values into db
            val=(display,user_name,password,conformpassword,create_inv,delete_inv,void_inv,mark_inv_as_paid,  create_ord,delete_ord,turn_inv_ord,smsnofi,create_est,delete_est,turn_est,create_exp,delete_exp,  rebill_exp,create_cus,delete_cus,imp_cus,create_pros,delete_pros,import_pros,runrep,gen_rec,create_pur,  delete_pur,modify_inv,modify_ord,modify_est)
            fbcursor.execute(sql,val)
            fbilldb.commit()
            for record in uactree.get_children():
              uactree.delete(record)
            sql = "select * from users"
            fbcursor.execute(sql)
            sixuactree = fbcursor.fetchall()
            coutset = 0
            for i in sixuactree:
             uactree.insert(parent='', index='end', iid=coutset, text='hello', values=(i[3]))
             coutset += 1
        else:
          messagebox.showerror('Warming','Password not match!!')
        

   
    
  
  
  
  
    
  
    
  sixtab1=Frame(tab06, relief=GROOVE, bg="#f8f8f2")
  sixtab1.pack(side="top", fill=BOTH)
  
  sixtab=Frame(sixtab1, bg="#f5f3f2", height=700)
  sixtab.pack(side="top", fill=BOTH)
  
  displaystart = BooleanVar()
  displaylocsc = Checkbutton(sixtab,text="Display Login screen startup",onvalue =1 ,offvalue = 0,  variable=displaystart)
  displaylocsc.place(x=20,y=30)
  
  userac=LabelFrame(sixtab,text="User Acounts", height=400, width=260)
  userac.place(x=20, y=55)
  
  
  selper = Label(sixtab,text="Select username to modify permissions")
  selper.place(x=30,y=75)
  
  def focususer(event):
    itemid = uactree.item(uactree.focus())["values"][0]
    sql = "select * from users where username = %s"
    val = (itemid,)
    fbcursor.execute(sql,val)
    sixtabdataback = fbcursor.fetchone()
    print(sixtabdataback)
    usernae.delete(0,END)
    usernae.insert(0,itemid)
    if itemid == "adminstator":
        usernae.delete(0,END)
        usernae.insert(0,itemid)
        usernae["state"] = DISABLED
        creinv["state"] = DISABLED
        delinv["state"] = DISABLED
        voinv["state"] = DISABLED
        markinv["state"] = DISABLED
        creord["state"] = DISABLED
        delord["state"] = DISABLED
        turninv["state"] = DISABLED
        smsinv["state"] = DISABLED
        creestimate["state"] = DISABLED
        delestimate["state"] = DISABLED
        turnestiinv["state"] = DISABLED
        creexpense["state"] = DISABLED
        delexpense["state"] = DISABLED
        rebillexpe["state"] = DISABLED
        crecus["state"] = DISABLED
        delcus["state"] = DISABLED
        impcus["state"] = DISABLED
        crepros["state"] = DISABLED
        delpros["state"] = DISABLED
        imppros["state"] = DISABLED
        runrep["state"] = DISABLED
        genrecinv["state"] = DISABLED
        crepur["state"] = DISABLED
        delpur["state"] = DISABLED
        modifyinv["state"] = DISABLED
        modifyord["state"] = DISABLED
        modifyesti["state"] = DISABLED
    else:
        userpase.delete(0, END)
        usercpase.delete(0, END)
        usernae.delete(0,END)
        usernae.insert(0,itemid)
        usernae["state"] = NORMAL
        creinv["state"] = NORMAL
        delinv["state"] = NORMAL
        voinv["state"] = NORMAL
        markinv["state"] = NORMAL
        creord["state"] = NORMAL
        delord["state"] = NORMAL
        turninv["state"] = NORMAL
        smsinv["state"] = NORMAL
        creestimate["state"] = NORMAL
        delestimate["state"] = NORMAL
        turnestiinv["state"] = NORMAL
        creexpense["state"] = NORMAL
        delexpense["state"] = NORMAL
        rebillexpe["state"] = NORMAL
        crecus["state"] = NORMAL
        delcus["state"] = NORMAL
        impcus["state"] = NORMAL
        crepros["state"] = NORMAL
        delpros["state"] = NORMAL
        imppros["state"] = NORMAL
        runrep["state"] = NORMAL
        genrecinv["state"] = NORMAL
        crepur["state"] = NORMAL
        delpur["state"] = NORMAL
        modifyinv["state"] = NORMAL
        modifyord["state"] = NORMAL
        modifyesti["state"] = NORMAL
    if not sixtabdataback:
      userpase.delete(0, END)
      usercpase.delete(0, END)
      creinv.deselect()
      delinv.deselect()
      voinv.deselect()
      markinv.deselect()
      creord.deselect()
      delord.deselect()
      turninv.deselect()
      smsinv.deselect()
      creestimate.deselect()
      delestimate.deselect()
      turnestiinv.deselect()
      creexpense.deselect()
      delexpense.deselect()
      rebillexpe.deselect()
      crecus.deselect()
      delcus.deselect()
      impcus.deselect()
      crepros.deselect()
      delpros.deselect()
      imppros.deselect()
      runrep.deselect()
      genrecinv.deselect()
      crepur.deselect()
      delpur.deselect()
      modifyinv.deselect()
      modifyord.deselect()
      modifyesti.deselect()
      if itemid == "adminstator":
        usernae.delete(0,END)
        usernae.insert(0,itemid)
        usernae["state"] = DISABLED
        creinv["state"] = DISABLED
        delinv["state"] = DISABLED
        voinv["state"] = DISABLED
        markinv["state"] = DISABLED
        creord["state"] = DISABLED
        delord["state"] = DISABLED
        turninv["state"] = DISABLED
        smsinv["state"] = DISABLED
        creestimate["state"] = DISABLED
        delestimate["state"] = DISABLED
        turnestiinv["state"] = DISABLED
        creexpense["state"] = DISABLED
        delexpense["state"] = DISABLED
        rebillexpe["state"] = DISABLED
        crecus["state"] = DISABLED
        delcus["state"] = DISABLED
        impcus["state"] = DISABLED
        crepros["state"] = DISABLED
        delpros["state"] = DISABLED
        imppros["state"] = DISABLED
        runrep["state"] = DISABLED
        genrecinv["state"] = DISABLED
        crepur["state"] = DISABLED
        delpur["state"] = DISABLED
        modifyinv["state"] = DISABLED
        modifyord["state"] = DISABLED
        modifyesti["state"] = DISABLED
      else:
        userpase.delete(0, END)
        usercpase.delete(0, END)
        usernae.delete(0,END)
        usernae.insert(0,itemid)
        usernae["state"] = NORMAL
        creinv["state"] = NORMAL
        delinv["state"] = NORMAL
        voinv["state"] = NORMAL
        markinv["state"] = NORMAL
        creord["state"] = NORMAL
        delord["state"] = NORMAL
        turninv["state"] = NORMAL
        smsinv["state"] = NORMAL
        creestimate["state"] = NORMAL
        delestimate["state"] = NORMAL
        turnestiinv["state"] = NORMAL
        creexpense["state"] = NORMAL
        delexpense["state"] = NORMAL
        rebillexpe["state"] = NORMAL
        crecus["state"] = NORMAL
        delcus["state"] = NORMAL
        impcus["state"] = NORMAL
        crepros["state"] = NORMAL
        delpros["state"] = NORMAL
        imppros["state"] = NORMAL
        runrep["state"] = NORMAL
        genrecinv["state"] = NORMAL
        crepur["state"] = NORMAL
        delpur["state"] = NORMAL
        modifyinv["state"] = NORMAL
        modifyord["state"] = NORMAL
        modifyesti["state"] = NORMAL
    else:
      userpase.delete(0, END)
      usercpase.delete(0, END)
      userpase.insert(0, sixtabdataback[4])
      usercpase.insert(0, sixtabdataback[5])
      if sixtabdataback[6] == 1:
        creinv.select()
      else:
        creinv.deselect()
      if sixtabdataback[7] == 1:
        delinv.select()
      else:
        delinv.deselect()
      if sixtabdataback[8] == 1:
        voinv.select()
      else:
        voinv.deselect()
      if sixtabdataback[9] == 1:
        markinv.select()
      else:
        markinv.deselect()
      if sixtabdataback[10] == 1:
        creord.select()
      else:
        creord.deselect()
      if sixtabdataback[11] == 1:
        delord.select()
      else:
        delord.deselect()
      if sixtabdataback[12] == 1:
        turninv.select()
      else:
        turninv.deselect()
      if sixtabdataback[13] == 1:
        smsinv.select()
      else:
        smsinv.deselect()
      if sixtabdataback[14] == 1:
        creestimate.select()
      else:
        creestimate.deselect()
      if sixtabdataback[15] == 1:
        delestimate.select()
      else:
        delestimate.deselect()
      if sixtabdataback[16] == 1:
        turnestiinv.select()
      else:
        turnestiinv.deselect()
      if sixtabdataback[17] == 1:
        creexpense.select()
      else:
        creexpense.deselect()
      if sixtabdataback[18] == 1:
        delexpense.select()
      else:
        delexpense.deselect()
      if sixtabdataback[19] == 1:
        rebillexpe.select()
      else:
        rebillexpe.deselect()
      if sixtabdataback[20] == 1:
        crecus.select()
      else:
        crecus.deselect()
      if sixtabdataback[21] == 1:
        delcus.select()
      else:
        delcus.deselect()
      if sixtabdataback[22] == 1:
        impcus.select()
      else:
        impcus.deselect()
      if sixtabdataback[23] == 1:
        crepros.select()
      else:
        crepros.deselect()
      if sixtabdataback[24] == 1:
        delpros.select()
      else:
        delpros.deselect()
      if sixtabdataback[25] == 1:
        imppros.select()
      else:
        imppros.deselect()
      if sixtabdataback[26] == 1:
        runrep.select()
      else:
        runrep.deselect()
      if sixtabdataback[27] == 1:
        genrecinv.select()
      else:
        genrecinv.deselect()
      if sixtabdataback[28] == 1:
        crepur.select()
      else:
        crepur.deselect()
      if sixtabdataback[29] == 1:
        delpur.select()
      else:
        delpur.deselect()
      if sixtabdataback[30] == 1:
        modifyinv.select()
      else:
        modifyinv.deselect()
      if sixtabdataback[31] == 1:
        modifyord.select()
      else:
        modifyord.deselect()
      if sixtabdataback[32] == 1:
        modifyesti.select()
      else:
        modifyesti.deselect()
         
  
  scrollbarx = Scrollbar(sixtab, orient=HORIZONTAL)
  scrollbary = Scrollbar(sixtab, orient=VERTICAL)
  uactree = ttk.Treeview(sixtab, columns=("1"),height=400,selectmode="extended", yscrollcommand=scrollbary.  set, xscrollcommand=scrollbarx.set)
  scrollbary.config(command=uactree.yview)
  scrollbary.place(x=245,y=100,height=300)
  uactree.heading('1', text="Username",)
  uactree.column('#0', stretch=NO, minwidth=0, width=0)
  uactree.column('1', stretch=NO, minwidth=0, width=218)
  uactree.place(x=30,y=100,height=300,width=220)
  uactree.bind('<Double-Button-1>' , focususer)
  sql = "select * from users"
  fbcursor.execute(sql)
  sixuactree = fbcursor.fetchall()
  coutset = 0
  if not sixuactree:
    uactree.insert('', index='end', text='hello', values=("adminstator"))
  else:
    for i in sixuactree:
      uactree.insert(parent='', index='end', iid=coutset, text='hello', values=(i[3]))
      coutset += 1
  
  def adduser():
    uactree.insert('', index='end', text='hello', values=("Rename User"))
  
  btadd = Button(sixtab,text="Add new User",command=adduser)
  btadd.place(x=30,y=415)
  
  def users():
    itemid = uactree.item(uactree.focus())["values"][0]
    if itemid == "adminstator":
      messagebox.showerror('F-Billing Revolution', 'Cannot delete adminstator user.')
    else:
      delusermess = messagebox.askyesno("Delete user", "Are you sure to delete this user?")
      if delusermess == True:
        sql = "delete from users where username = %s"
        val = (itemid, )
        fbcursor.execute(sql, val)
        fbilldb.commit()
        for record in uactree.get_children():
          uactree.delete(record)
        sql = "select * from users"
        fbcursor.execute(sql)
        sixuactree = fbcursor.fetchall()
        coutset = 0
        for i in sixuactree:
          uactree.insert(parent='', index='end', iid=coutset, text='hello', values=(i[3]))
          coutset += 1
      else:
        pass
        
  
  btdus = Button(sixtab,text="Delete User",command=users)
  btdus.place(x=180,y=415)
  
  userpro=LabelFrame(sixtab,text="User Profile", height=400, width=750)
  userpro.place(x=300, y=55)
  
  
  userna = Label(sixtab,text="Username")
  userna.place(x=340,y=90)
  usernae = Entry(sixtab,)
  usernae.place(x=460,y=90)
  
  userpas = Label(sixtab,text="Password")
  userpas.place(x=340,y=120)
  userpase = Entry(sixtab,)
  userpase.place(x=460,y=120)
  
  usercpas = Label(sixtab,text="Confirm Password")
  usercpas.place(x=340,y=150)
  usercpase = Entry(sixtab,)
  usercpase.place(x=460,y=150)
  
  saveuserprofile = Button(sixtab,text="save user profile",command=user)
  saveuserprofile.place(x=650,y=120)
  
  creinvbol = BooleanVar()
  creinv = Checkbutton(sixtab,text="Create invoice",onvalue= 1 ,offvalue= 0,variable=creinvbol)
  creinv.place(x=340,y=200)
  delinvbol = BooleanVar()
  delinv = Checkbutton(sixtab,text="Delete invoice",onvalue= 1 ,offvalue= 0,variable=delinvbol)
  delinv.place(x=340,y=225)
  voinvbol = BooleanVar()
  voinv = Checkbutton(sixtab,text="Void invoice",onvalue= 1 ,offvalue= 0,variable=voinvbol)
  voinv.place(x=340,y=250)
  markinvbol = BooleanVar()
  markinv = Checkbutton(sixtab,text="Mark invoice as Paid",onvalue= 1 ,offvalue= 0,variable=markinvbol)
  markinv.place(x=340,y=275)
  
  creordbol = BooleanVar()
  creord = Checkbutton(sixtab,text="Create Order",onvalue= 1 ,offvalue= 0,variable=creordbol)
  creord.place(x=500,y=200)
  delordbol = BooleanVar()
  delord = Checkbutton(sixtab,text="Delete Order",onvalue= 1 ,offvalue= 0,variable=delordbol)
  delord.place(x=500,y=225)
  turninvbol = BooleanVar()
  turninv = Checkbutton(sixtab,text="Turn order into invoice",onvalue= 1 ,offvalue= 0,variable=turninvbol)
  turninv.place(x=500,y=250)
  smsinvbol = BooleanVar()
  smsinv = Checkbutton(sixtab,text="Send sms nofitication",onvalue= 1 ,offvalue= 0,variable=smsinvbol)
  smsinv.place(x=500,y=275)
  
  creestimatebol = BooleanVar()
  creestimate = Checkbutton(sixtab,text="Create estimate",onvalue= 1 ,offvalue= 0,variable=creestimatebol)
  creestimate.place(x=680,y=200)
  delestimatebol = BooleanVar()
  delestimate = Checkbutton(sixtab,text="Delete estimate",onvalue= 1 ,offvalue= 0,variable=delestimatebol)
  delestimate.place(x=680,y=225)
  turnestiinvbol = BooleanVar()
  turnestiinv = Checkbutton(sixtab,text="Turn estimates into invoice",onvalue= 1 ,offvalue= 0,  variable=turnestiinvbol)
  turnestiinv.place(x=680,y=250)
  
  creexpensebol = BooleanVar()
  creexpense = Checkbutton(sixtab,text="Create expenses",onvalue= 1 ,offvalue= 0,variable=creexpensebol)
  creexpense.place(x=880,y=200)
  delexpensebol = BooleanVar()
  delexpense = Checkbutton(sixtab,text="Delete expenses",onvalue= 1 ,offvalue= 0,variable=delexpensebol)
  delexpense.place(x=880,y=225)
  rebillexpebol = BooleanVar()
  rebillexpe = Checkbutton(sixtab,text="Rebill expenses",onvalue= 1 ,offvalue= 0,variable=rebillexpebol)
  rebillexpe.place(x=880,y=250)
  
  crecusbol = BooleanVar()
  crecus = Checkbutton(sixtab,text="Create customer",onvalue= 1 ,offvalue= 0,variable=crecusbol)
  crecus.place(x=340,y=320)
  delcusbol = BooleanVar()
  delcus = Checkbutton(sixtab,text="Delete customer",onvalue= 1 ,offvalue= 0,variable=delcusbol)
  delcus.place(x=340,y=340)
  impcusbol = BooleanVar()
  impcus = Checkbutton(sixtab,text="Import customer",onvalue= 1 ,offvalue= 0,variable=impcusbol)
  impcus.place(x=340,y=360)
  
  creprosbol = BooleanVar()
  crepros = Checkbutton(sixtab,text="Create product\services",onvalue= 1 ,offvalue= 0,variable=creprosbol)
  crepros.place(x=500,y=320)
  delprosbol = BooleanVar()
  delpros = Checkbutton(sixtab,text="Delete product\services",onvalue= 1 ,offvalue= 0,variable=delprosbol)
  delpros.place(x=500,y=340)
  impprosbol = BooleanVar()
  imppros = Checkbutton(sixtab,text="Import product\services",onvalue= 1 ,offvalue= 0,variable=impprosbol)
  imppros.place(x=500,y=360)
  
  runrepbol = BooleanVar()
  runrep = Checkbutton(sixtab,text="Run reports",onvalue= 1 ,offvalue= 0,variable=runrepbol)
  runrep.place(x=680,y=320)
  genrecinvbol = BooleanVar()
  genrecinv = Checkbutton(sixtab,text="Generate recurring invoices",onvalue= 1 ,offvalue= 0,  variable=genrecinvbol)
  genrecinv.place(x=680,y=340)
  
  crepurbol = BooleanVar()
  crepur = Checkbutton(sixtab,text="Create Purchase order",onvalue =1 ,offvalue = 0,variable=crepurbol)
  crepur.place(x=880,y=320)
  delpurbol = BooleanVar()
  delpur = Checkbutton(sixtab,text="Delete Purchase order",onvalue =1 ,offvalue = 0,variable=delpurbol)
  delpur.place(x=880,y=340)
  
  undersetlab = Label(sixtab,text="Under Settings menu tab")
  undersetlab.place(x=340,y=400)
  
  modifyinvbol = BooleanVar()
  modifyinv = Checkbutton(sixtab,text="Modify invoice settings",onvalue =1 ,offvalue = 0,variable=modifyinvbol)
  modifyinv.place(x=340,y=425)
  
  modifyordbol = BooleanVar()
  modifyord = Checkbutton(sixtab,text="Modify order settings",onvalue =1 ,offvalue = 0,variable=modifyordbol)
  modifyord.place(x=500,y=425)
  
  modifyestibol = BooleanVar()
  modifyesti = Checkbutton(sixtab,text="Modify estimate settings",onvalue =1 ,offvalue = 0,  variable=modifyestibol)
  modifyesti.place(x=680,y=425)

  ################### tab05 ###################################
  fifthtab1=Frame(tab05, relief=GROOVE, bg="#f8f8f2")
  fifthtab1.pack(side="top", fill=BOTH)

  fifthtab=Frame(fifthtab1, bg="#f5f3f2", height=700)
  fifthtab.pack(side="top", fill=BOTH)

  sql = "select * from company"
  fbcursor.execute(sql)
  estdata = fbcursor.fetchone()
  print(estdata)



  ver = Label(fifthtab,text="Estimate# prefix")
  ver.place(x=5,y=40)

  est_str = StringVar() 
  est_entry = Entry(fifthtab, textvariable=est_str)
  est_entry.place(x=100,y=40)
  if not estdata:
    est_str.set('EST')
  else:
    est_entry.insert(0, estdata[29])

  ver = Label(fifthtab,text="Starting estimate number")
  ver.place(x=25,y=80)

  def callback(input):
      
    if input.isdigit():
        print(input)
        return True
                          
    elif input is "":
        print(input)
        return True
  
    else:
        print(input)
        return False

  spin1 = Spinbox(fifthtab,from_=0,to=1000000,width=15)
  reg = fifthtab.register(callback)
  
  spin1.config(validate ="key", 
         validatecommand =(reg, '%S'))
  if not estdata:
    pass
  else:
    spin1.delete(0, END)
    spin1.insert(0,estdata[38])
  spin1.place(x=50,y=100)

  ver = Label(fifthtab,text="Header box background color")
  ver.place(x=5,y=140)

  win_menu1 = StringVar()
  winstyle1 = ttk.Combobox(fifthtab,textvariable=win_menu1)
  #est_win1 = win_menu1.get()
  winstyle1['values'] = ('Default','Black','Maroon','Green','Olive','Navy','Purple','Teal','Gray','Silver','Red','Lime','Yellow','Blue','Fuchsia','Aqua','White','ScrollBar','Background','ActiveCaption','InactiveCaption','Menu','Window','WindowFrame','MenuText','WindowText','CaptionText','ActiveBorder','InactiveBorder','AppWorkSpace','Highlight','HighlightText','BtnFace','InactiveCaptionText','BtnHighlight','3DDkShadow','3DLight','InfoText','InfoBk','Custom')
  if not estdata:
    winstyle1.current(0)
  else:
    winstyle1.insert(0, estdata[30])
  winstyle1.place(x=6 ,y=160)
  #winstyle1.current(0)

  ver = Label(fifthtab,text="Customize Estimate text labels")
  ver.place(x=5,y=190)
  
  est_str1 = StringVar() 
  est_lbx1 = Entry(fifthtab, width=30,textvariable=est_str1)
  # est_str1.set('Estimate')
  if not estdata:
    est_str1.set('Estimate')
  else:
    est_lbx1.insert(0, estdata[31])
  est_lbx1.place(x=5,y=220)
  
  est_str2 = StringVar() 
  est_lbx2 = Entry(fifthtab, width=30,textvariable=est_str2)
  if not estdata:
    est_str2.set('Estimate#')
  else:
    est_lbx2.insert(0,estdata[33])
  est_lbx2.place(x=5,y=240)
  
  
  est_str3 = StringVar() 
  est_lbx3 = Entry(fifthtab,width=30,textvariable=est_str3)
  if not estdata:
    est_str3.set('Estimate date')
  else:
    est_lbx3.insert(0, estdata[34])
  est_lbx3.place(x=5,y=260) 

  est_str4 = StringVar() 
  est_lbx4 = Entry(fifthtab,width=30,textvariable=est_str4)
  if not estdata:
    est_str4.set('Due date')
  else:
    est_lbx4.insert(0, estdata[35])
  est_lbx4.place(x=5,y=280)

  est_str5 = StringVar() 
  est_lbx5 = Entry(fifthtab,width=30,textvariable=est_str5)
  if not estdata:
    est_str5.set('Estimate to')
  else:
    est_lbx5.insert(0, estdata[36])
  est_lbx5.place(x=5,y=300)

  est_str6 = StringVar() 
  est_lbx6 = Entry(fifthtab, width=30,textvariable=est_str6)
  if not estdata:
    est_str6.set('Estimate total')
  else:
    est_lbx6.insert(0, estdata[37])
  est_lbx6.place(x=5,y=320)


  ver = Label(fifthtab,text="Default Estimate template(example,click on preview for mouse scrolling)")
  ver.place(x=248,y=55 )

  ver = Label(fifthtab,text="Default Estimate template")
  ver.place(x=619,y=40)



  messagelbframe=LabelFrame(fifthtab,text="Predefined terms and conditions text for estimates", height=70, width=980)
  messagelbframe.place(x=248, y=396)

  
  # est_str7 = StringVar() 
  # entry1=Entry(fifthtab, width=155,textvariable=est_str7)
  # if not estdata:
  #   pass
  # else:
  #   entry1.insert(0, estdata[39])
  # entry1.place(x=260, y=415, height=36)
  
  est_str7 = scrolledtext.ScrolledText(fifthtab)
  if  not estdata:
    pass
  else:
    est_str7.insert('1.0', estdata[39])
  est_str7.place(x=260,y=415,height=38,width=950)


  def restore_defaulttt1():
        est_lbx1.delete(0, 'end')
        est_lbx1.insert(0, 'Estimate')
        est_lbx2.delete(0, 'end')
        est_lbx2.insert(0,'Estimate#')
        est_lbx3.delete(0, 'end')
        est_lbx3.insert(0, 'Estimate date')
        est_lbx4.delete(0, 'end')
        est_lbx4.insert(0, 'Due date')
        est_lbx5.delete(0, 'end')
        est_lbx5.insert(0, 'Estimate to')
        est_lbx6.delete(0, 'end')
        est_lbx6.insert(0, 'Estimate total')

  bttermadd_01 = Button(fifthtab,text="Restore defaults", command=restore_defaulttt1)
  bttermadd_01.place(x=32,y=430)


#------------Professional 1 (logo on left side)-------------
  def maindropmenu(event):
      menuvar=win_menu2.get()
      print(menuvar,"hello")
      sql = "select * from company"
      fbcursor.execute(sql)
      estdata1 = fbcursor.fetchone()

      if menuvar == 'Professional 1 (logo on left side)':
        frame = Frame(fifthtab, width=953, height=300)
        frame.pack(expand=True, fill=BOTH)
        frame.place(x=247,y=90)
        canvas=Canvas(frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
              
        vertibar=Scrollbar(frame, orient=VERTICAL)
        vertibar.pack(side=RIGHT,fill=Y)
        vertibar.config(command=canvas.yview)
          
        canvas.config(width=953,height=300)
        canvas.config(yscrollcommand=vertibar.set)
        canvas.pack(expand=True,side=LEFT,fill=BOTH)
        canvas.create_rectangle(100, 8, 850, 687 , outline='yellow',fill='white')
        canvas.create_text(500, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
        try:
          est_image = Image.open("images/"+estdata1[13])
          est_resize_image = est_image.resize((200,100))
          est_image = ImageTk.PhotoImage(est_resize_image)

          est_btlogo = Label(canvas,width=200,height=100,image = est_image) 
          window_image = canvas.create_window(175, 45, anchor="nw", window=est_btlogo)
          est_btlogo.photo = est_image
        except:
          pass  
        canvas.create_text(202, 160, text=""+est_str2.get(), fill="black", font=('Helvetica 11'))
        canvas.create_text(215, 180, text=""+est_str3.get(), fill="black", font=('Helvetica 11'))
        canvas.create_text(200, 200, text=""+est_str4.get(), fill="black", font=('Helvetica 11'))
        canvas.create_text(191, 220, text="Terms", fill="black", font=('Helvetica 11'))
        canvas.create_text(205, 240, text="Order ref.#", fill="black", font=('Helvetica 11'))
        canvas.create_text(350, 160, text="EST1/2022", fill="black", font=('Helvetica 11'))
        canvas.create_text(350, 180, text="05-05-2022", fill="black", font=('Helvetica 11'))
        canvas.create_text(350, 200, text="20-05-2022", fill="black", font=('Helvetica 11'))
        canvas.create_text(340, 220, text="NET 15", fill="black", font=('Helvetica 11'))
          
        canvas.create_text(720, 60, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
        # canvas.create_text(700, 200, text=""+caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'), width=125)
        T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
        T_address.tag_configure('tag_name',justify='right')
        T_address.insert('1.0', estdata1[2])
        T_address.tag_add('tag_name','1.0', 'end')
        T_address_window = canvas.create_window(520, 80, anchor="nw", window=T_address)
        canvas.create_text(695, 180, text=" "+comsalestax.get(), fill="black", font=('Helvetica 10'))
        canvas.create_text(700, 205, text=" "+est_str1.get(), fill="black", font=('Helvetica 14 bold'))
        canvas.create_text(706, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
          
        canvas.create_text(210, 260, text=""+est_str5.get(), fill="black", font=('Helvetica 10 underline'))
        canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
        canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
        canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
        canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
        canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
        canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
        canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
        canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
        canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
      
        s = ttk.Style()
        s.configure('mystyle_1.Treeview.Heading', background=''+win_menu1.get(),State='DISABLE')

        tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_1.Treeview')

        tree.column("# 1", anchor=E, stretch=NO, width=100)
        tree.heading("# 1", text="ID/SKU")
        tree.column("# 2", anchor=E, stretch=NO, width=350)
        tree.heading("# 2", text="Product/Service - Description")
        tree.column("# 3", anchor=E, stretch=NO, width=80)
        tree.heading("# 3", text="Quantity")
        tree.column("# 4", anchor=E, stretch=NO, width=90)
        tree.heading("# 4", text="Unit Price")
        tree.column("# 5", anchor=E, stretch=NO, width=80)
        tree.heading("# 5", text="Price")
          
        window = canvas.create_window(120, 340, anchor="nw", window=tree)

        canvas.create_line(120, 390, 820, 390 )
        canvas.create_line(120, 340, 120, 365 )
        canvas.create_line(120, 365, 120, 390 )
        canvas.create_line(820, 340, 820, 540 )
        canvas.create_line(740, 340, 740, 540 )
        canvas.create_line(570, 340, 570, 540 )
        canvas.create_line(570, 415, 820, 415 )
        canvas.create_line(570, 440, 820, 440 )
        canvas.create_line(570, 465, 820, 465 )
        canvas.create_line(570, 490, 820, 490 )
        canvas.create_line(570, 515, 820, 515 )
        canvas.create_line(650, 340, 650, 390 )
        canvas.create_line(220, 340, 220, 390 )
        canvas.create_line(570, 540, 820, 540 )

        canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
        canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
        canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
    
        if comcursignpla.get() == "before amount":
          canvas.create_text(704, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        elif comcursignpla.get() == "after amount":
          canvas.create_text(704, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(704, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(704, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))

        else:
          pass
        # canvas.create_text(704, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass
        # canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 404, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass
        # canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(786, 428, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass
        # canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
        
        if comcursignpla.get() == "before amount":
          canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(786, 454, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10 bold'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 479, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10 bold'))
        else:
          pass

        # canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
        canvas.create_text(650, 479, text=""+est_str6.get(), fill="black", font=('Helvetica 10 bold'))
        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 502, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))
        
        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 526, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass
        # canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

        canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
          
        canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
        canvas.create_line(150, 608, 795, 608)
        # canvas.create_text(280, 640, text= ""+est_str7.get(), fill="black", font=('Helvetica 10')) 
        T = Text(canvas, height=3, width=90, font=('Helvetica 10'),borderwidth=0)
        T.insert(END, estdata1[39])
        T_window = canvas.create_window(155, 612, anchor="nw", window=T)

        canvas.create_text(280, 670, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
        canvas.create_text(720, 670, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
          

#----------------Professional 2 (logo on right side)------------------
      elif menuvar == 'Professional 2 (logo on right side)':
        frame = Frame(fifthtab, width=953, height=300)
        frame.pack(expand=True, fill=BOTH)
        frame.place(x=247,y=90)
      
        canvas=Canvas(frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
        vertibar=Scrollbar(frame, orient=VERTICAL)
        vertibar.pack(side=RIGHT,fill=Y)
        vertibar.config(command=canvas.yview)
        canvas.config(width=953,height=300)
          
        canvas.config(yscrollcommand=vertibar.set)
        canvas.pack(expand=True,side=LEFT,fill=BOTH)
        canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
        canvas.create_text(500, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
        try:
          est_image = Image.open("images/"+estdata1[13])
          est_resize_image = est_image.resize((200,100))
          est_image = ImageTk.PhotoImage(est_resize_image)

          est_btlogo = Label(canvas,width=200,height=100,image = est_image) 
          window_image = canvas.create_window(500, 45, anchor="nw", window=est_btlogo)
          est_btlogo.photo = est_image
        except:
          pass  
        canvas.create_text(250, 60, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
        # canvas.create_text(215, 200, text=""+caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'))
        T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
        T_address.tag_configure('tag_name',justify='right')
        T_address.insert('1.0', estdata1[2])
        T_address.tag_add('tag_name','1.0', 'end')
        T_address_window = canvas.create_window(100, 80, anchor="nw", window=T_address)
        #T_address_window = canvas.create_window(175, 80, anchor="nw", window=T_address)

        canvas.create_text(215, 180, text=" "+comsalestax.get(), fill="black", font=('Helvetica 10'))
        canvas.create_text(225, 205, text=""+est_str1.get(), fill="black", font=('Helvetica 14 bold'))
        canvas.create_text(232, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
          
        canvas.create_text(502, 160, text=""+est_str2.get(), fill="black", font=('Helvetica 11'))
        canvas.create_text(515, 180, text=""+est_str3.get(), fill="black", font=('Helvetica 11'))
        canvas.create_text(500, 200, text=""+est_str4.get(), fill="black", font=('Helvetica 11'))
        canvas.create_text(491, 220, text="Terms", fill="black", font=('Helvetica 11'))
        canvas.create_text(505, 240, text="Order ref.#", fill="black", font=('Helvetica 11'))
        canvas.create_text(690, 160, text="EST1/2022", fill="black", font=('Helvetica 11'))
        canvas.create_text(690, 180, text="05-05-2022", fill="black", font=('Helvetica 11'))
        canvas.create_text(690, 200, text="20-05-2022", fill="black", font=('Helvetica 11'))
        canvas.create_text(680, 220, text="NET 15", fill="black", font=('Helvetica 11'))      
          
        canvas.create_text(210, 260, text=""+est_str5.get(), fill="black", font=('Helvetica 10 underline'))
        canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
        canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
        canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
        canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
        canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
        canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
        canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
        canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
        canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

        s = ttk.Style()
        s.configure('mystyle_1.Treeview.Heading', background=''+win_menu1.get(),State='DISABLE')

        tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_1.Treeview')
          
        tree.column("# 1", anchor=E, stretch=NO, width=100)
        tree.heading("# 1", text="ID/SKU")
        tree.column("# 2", anchor=E, stretch=NO, width=350)
        tree.heading("# 2", text="Product/Service - Description")
        tree.column("# 3", anchor=E, stretch=NO, width=80)
        tree.heading("# 3", text="Quantity")
        tree.column("# 4", anchor=E, stretch=NO, width=90)
        tree.heading("# 4", text="Unit Price")
        tree.column("# 5", anchor=E, stretch=NO, width=80)
        tree.heading("# 5", text="Price")
          
        window = canvas.create_window(120, 340, anchor="nw", window=tree)

        canvas.create_line(120, 390, 820, 390 )
        canvas.create_line(120, 340, 120, 365 )
        canvas.create_line(120, 365, 120, 390 )
        canvas.create_line(820, 340, 820, 540 )
        canvas.create_line(740, 340, 740, 540 )
        canvas.create_line(570, 340, 570, 540 )
        canvas.create_line(570, 415, 820, 415 )
        canvas.create_line(570, 440, 820, 440 )
        canvas.create_line(570, 465, 820, 465 )
        canvas.create_line(570, 490, 820, 490 )
        canvas.create_line(570, 515, 820, 515 )
        canvas.create_line(650, 340, 650, 390 )
        canvas.create_line(220, 340, 220, 390 )
        canvas.create_line(570, 540, 820, 540 )

        canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
        canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
        canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(704, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(704, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(704, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(704, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(704, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 404, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(786, 428, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(786, 454, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10 bold'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 479, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10 bold'))
        else:
          pass

        # canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
        canvas.create_text(650, 479, text=""+est_str6.get(), fill="black", font=('Helvetica 10 bold'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 502, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))
        
        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 526, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

        canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))

        canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
        canvas.create_line(150, 608, 795, 608)
        # canvas.create_text(280, 640, text= ""+est_str7.get(), fill="black", font=('Helvetica 10'))
        T = Text(canvas, height=3, width=90, font=('Helvetica 10'),borderwidth=0)
        T.insert(END, estdata1[39])
        T_window = canvas.create_window(155, 612, anchor="nw", window=T)
        canvas.create_text(280, 670, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
        canvas.create_text(720, 670, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
#----------------Simplified 1 (logo on left side)------------------ 
      elif menuvar == 'Simplified 1 (logo on left side)':
        print('hello')
        frame = Frame(fifthtab, width=953, height=300)
        frame.pack(expand=True, fill=BOTH)
        frame.place(x=247,y=90)
        canvas=Canvas(frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))

        vertibar=Scrollbar(frame, orient=VERTICAL)
        vertibar.pack(side=RIGHT,fill=Y)
        vertibar.config(command=canvas.yview)
        canvas.config(width=953,height=300)

        canvas.config(yscrollcommand=vertibar.set)
        canvas.pack(expand=True,side=LEFT,fill=BOTH)
        canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
        canvas.create_text(500, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
        try:
          est_image = Image.open("images/"+estdata1[13])
          est_resize_image = est_image.resize((200,100))
          est_image = ImageTk.PhotoImage(est_resize_image)

          est_btlogo = Label(canvas,width=200,height=100,image = est_image) 
          window_image = canvas.create_window(175, 45, anchor="nw", window=est_btlogo)
          est_btlogo.photo = est_image
        except:
          pass  
        canvas.create_text(202, 160, text=""+est_str2.get(), fill="black", font=('Helvetica 11'))
        canvas.create_text(215, 180, text=""+est_str3.get(), fill="black", font=('Helvetica 11'))
        canvas.create_text(200, 200, text=""+est_str4.get(), fill="black", font=('Helvetica 11'))
        canvas.create_text(191, 220, text="Terms", fill="black", font=('Helvetica 11'))
        canvas.create_text(205, 240, text="Order ref.#", fill="black", font=('Helvetica 11'))
        canvas.create_text(350, 160, text="EST1/2022", fill="black", font=('Helvetica 11'))
        canvas.create_text(350, 180, text="05-05-2022", fill="black", font=('Helvetica 11'))
        canvas.create_text(350, 200, text="20-05-2022", fill="black", font=('Helvetica 11'))
        canvas.create_text(340, 220, text="NET 15", fill="black", font=('Helvetica 11'))      

        canvas.create_text(720, 60, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
        #canvas.create_text(710, 200, text=caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'))
        T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
        T_address.tag_configure('tag_name',justify='right')
        T_address.insert('1.0', estdata1[2])
        T_address.tag_add('tag_name','1.0', 'end')
        T_address_window = canvas.create_window(520, 80, anchor="nw", window=T_address)

        canvas.create_text(708, 180, text=" "+comsalestax.get(), fill="black", font=('Helvetica 10'))
        canvas.create_text(710, 205, text=""+est_str1.get(), fill="black", font=('Helvetica 14 bold'))
          
        canvas.create_text(210, 260, text=""+est_str5.get(), fill="black", font=('Helvetica 10 underline'))
        canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
        canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
        canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
        canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
        canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
        canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
        canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
        canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
        canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

        s = ttk.Style()
        s.configure('mystyle_1.Treeview.Heading', background=''+win_menu1.get(),State='DISABLE')

        tree=ttk.Treeview(canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle_1.Treeview')
          
        tree.column("# 1", anchor=E, stretch=NO, width=530)
        tree.heading("# 1", text="Product/Service - Description")
        tree.column("# 2", anchor=E, stretch=NO, width=90)
        tree.heading("# 2", text="Quantity")
        tree.column("# 3", anchor=E, stretch=NO, width=80)
        tree.heading("# 3", text="Price")
          
        window = canvas.create_window(120, 340, anchor="nw", window=tree)

        canvas.create_line(120, 390, 820, 390 )
        canvas.create_line(120, 340, 120, 365 )
        canvas.create_line(120, 365, 120, 390 )
        canvas.create_line(820, 340, 820, 540 )
        canvas.create_line(740, 340, 740, 540 )
        canvas.create_line(570, 390, 570, 540 )
        canvas.create_line(570, 415, 820, 415 )
        canvas.create_line(570, 440, 820, 440 )
        canvas.create_line(570, 465, 820, 465 )
        canvas.create_line(570, 490, 820, 490 )
        canvas.create_line(570, 515, 820, 515 )
        canvas.create_line(650, 340, 650, 390 )
        canvas.create_line(570, 540, 820, 540 )

      
        canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
        canvas.create_text(710, 372, text="1", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 404, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(786, 428, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(786, 454, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 479, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
        canvas.create_text(650, 479, text=""+est_str6.get(), fill="black", font=('Helvetica 10 bold'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 502, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 526, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

        canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))

        canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
        canvas.create_line(150, 608, 795, 608)
        # canvas.create_text(280, 640, text= ""+est_str7.get(), fill="black", font=('Helvetica 10'))
        T = Text(canvas, height=3, width=90, font=('Helvetica 10'),borderwidth=0)
        T.insert(END, estdata1[39])
        T_window = canvas.create_window(155, 612, anchor="nw", window=T)
        canvas.create_text(280, 670, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
        canvas.create_text(720, 670, text="Page 1 of 1", fill="black", font=('Helvetica 10'))

#----------------Simplified 2 (logo on right side)------------------ 
      elif menuvar == 'Simplified 2 (logo on right side)':
        frame = Frame(fifthtab, width=953, height=300)
        frame.pack(expand=True, fill=BOTH)
        frame.place(x=247,y=90)

        canvas=Canvas(frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))

        vertibar=Scrollbar(frame, orient=VERTICAL)
        vertibar.pack(side=RIGHT,fill=Y)
        vertibar.config(command=canvas.yview)
        canvas.config(width=953,height=300)

        canvas.config(yscrollcommand=vertibar.set)
        canvas.pack(expand=True,side=LEFT,fill=BOTH)
        canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
        canvas.create_text(500, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
        try:
          est_image = Image.open("images/"+estdata1[13])
          est_resize_image = est_image.resize((200,100))
          est_image = ImageTk.PhotoImage(est_resize_image)

          est_btlogo = Label(canvas,width=200,height=100,image = est_image) 
          window_image = canvas.create_window(500, 45, anchor="nw", window=est_btlogo)
          est_btlogo.photo = est_image
        except:
          pass  
        canvas.create_text(250, 60, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
        # canvas.create_text(224, 200, text=""+caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'))
        T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
        T_address.tag_configure('tag_name',justify='right')
        T_address.insert('1.0', estdata1[2])
        T_address.tag_add('tag_name','1.0', 'end')
        T_address_window = canvas.create_window(100, 80, anchor="nw", window=T_address)

        canvas.create_text(224, 180, text=" "+comsalestax.get(), fill="black", font=('Helvetica 10'))
        canvas.create_text(225, 205, text=""+est_str1.get(), fill="black", font=('Helvetica 14 bold'))

        canvas.create_text(502, 160, text=""+est_str2.get(), fill="black", font=('Helvetica 11'))
        canvas.create_text(515, 180, text=""+est_str3.get(), fill="black", font=('Helvetica 11'))
        canvas.create_text(500, 200, text=""+est_str4.get(), fill="black", font=('Helvetica 11'))
        canvas.create_text(491, 220, text="Terms", fill="black", font=('Helvetica 11'))
        canvas.create_text(505, 240, text="Order ref.#", fill="black", font=('Helvetica 11'))
        canvas.create_text(680, 160, text="EST1/2022", fill="black", font=('Helvetica 11'))
        canvas.create_text(680, 180, text="05-05-2022", fill="black", font=('Helvetica 11'))
        canvas.create_text(680, 200, text="20-05-2022", fill="black", font=('Helvetica 11'))
        canvas.create_text(670, 220, text="NET 15", fill="black", font=('Helvetica 11'))      

        canvas.create_text(210, 260, text=""+est_str5.get(), fill="black", font=('Helvetica 10 underline'))
        canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
        canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
        canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
        canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
        canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
        canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
        canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
        canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
        canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

        s = ttk.Style()
        s.configure('mystyle_1.Treeview.Heading', background=''+win_menu1.get(),State='DISABLE')

        tree=ttk.Treeview(canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle_1.Treeview')
          
        tree.column("# 1", anchor=E, stretch=NO, width=530)
        tree.heading("# 1", text="Product/Service - Description")
        tree.column("# 2", anchor=E, stretch=NO, width=90)
        tree.heading("# 2", text="Quantity")
        tree.column("# 3", anchor=E, stretch=NO, width=80)
        tree.heading("# 3", text="Price")
          
        window = canvas.create_window(120, 340, anchor="nw", window=tree)

        canvas.create_line(120, 390, 820, 390 )
        canvas.create_line(120, 340, 120, 365 )
        canvas.create_line(120, 365, 120, 390 )
        canvas.create_line(820, 340, 820, 540 )
        canvas.create_line(740, 340, 740, 540 )
        canvas.create_line(570, 390, 570, 540 )
        canvas.create_line(570, 415, 820, 415 )
        canvas.create_line(570, 440, 820, 440 )
        canvas.create_line(570, 465, 820, 465 )
        canvas.create_line(570, 490, 820, 490 )
        canvas.create_line(570, 515, 820, 515 )
        canvas.create_line(650, 340, 650, 390 )
        canvas.create_line(570, 540, 820, 540 )

          
        canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
        canvas.create_text(710, 372, text="1", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 404, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(786, 428, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(786, 454, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 479, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
        canvas.create_text(650, 479, text=""+est_str6.get(), fill="black", font=('Helvetica 10 bold'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 502, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 526, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass

        # canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

        canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))

        canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
        canvas.create_line(150, 608, 795, 608)
        # canvas.create_text(280, 640, text= ""+est_str7.get(), fill="black", font=('Helvetica 10'))
        T = Text(canvas, height=3, width=90, font=('Helvetica 10'),borderwidth=0)
        T.insert(END, estdata1[39])
        T_window = canvas.create_window(155, 612, anchor="nw", window=T)
        canvas.create_text(280, 670, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
        canvas.create_text(720, 670, text="Page 1 of 1", fill="black", font=('Helvetica 10'))

#----------------Business Classic------------------ 
      elif menuvar == 'Business Classic':
        frame = Frame(fifthtab, width=953, height=300)
        frame.pack(expand=True, fill=BOTH)
        frame.place(x=247,y=90)
          
        canvas=Canvas(frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
        vertibar=Scrollbar(frame, orient=VERTICAL)
        vertibar.pack(side=RIGHT,fill=Y)
        vertibar.config(command=canvas.yview)
        canvas.config(width=953,height=300)
          
        canvas.config(yscrollcommand=vertibar.set)
        canvas.pack(expand=True,side=LEFT,fill=BOTH)
        canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
        canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
        canvas.create_line(150, 70, 800, 70, fill='orange')
        
        try:
          est_image = Image.open("images/"+estdata1[13])
          est_resize_image = est_image.resize((200,100))
          est_image = ImageTk.PhotoImage(est_resize_image)

          est_btlogo = Label(canvas,width=200,height=100,image = est_image) 
          window_image = canvas.create_window(140, 120, anchor="nw", window=est_btlogo)
          est_btlogo.photo = est_image
        except:
          pass  

        canvas.create_text(500, 90, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
        # canvas.create_text(485, 220, text=""+caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'))
        T_address = Text(canvas, height=5, width=35, font=('Helvetica 10'),borderwidth=0)
        T_address.tag_configure('tag_name',justify='right')
        T_address.insert('1.0', estdata1[2])
        T_address.tag_add('tag_name','1.0', 'end')
        T_address_window = canvas.create_window(350, 100, anchor="nw", window=T_address)
        
        canvas.create_text(480, 210, text=" "+comsalestax.get(), fill="black", font=('Helvetica 10'))

        canvas.create_text(655, 100, text="John Doe", fill="black", font=('Helvetica 10 '))
        canvas.create_text(696, 120, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
        canvas.create_text(706, 135, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
        canvas.create_text(665, 150, text="United States", fill="black", font=('Helvetica 10'))

        canvas.create_text(659, 180, text=""+est_str1.get(), fill="black", font=('Helvetica 11'))
        canvas.create_text(675, 210, text=""+est_str3.get(), fill="black", font=('Helvetica 11'))
        canvas.create_text(659, 240, text=""+est_str4.get(), fill="black", font=('Helvetica 11'))

        canvas.create_text(776, 180, text="EST1/2022", fill="black", font=('Helvetica 11'))
        canvas.create_text(776, 210, text="05 May 2022", fill="black", font=('Helvetica 11'))
        canvas.create_text(776, 240, text="20-05-2022", fill="black", font=('Helvetica 11'))

        s = ttk.Style()
        s.configure('mystyle_1.Treeview.Heading', background=''+win_menu1.get(),State='DISABLE')

        tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_1.Treeview')
          
        tree.column("# 1", anchor=E, stretch=NO, width=200)
        tree.heading("# 1", text="Product/Service")
        tree.column("# 2", anchor=E, stretch=NO, width=250)
        tree.heading("# 2", text="Description")
        tree.column("# 3", anchor=E, stretch=NO, width=90)
        tree.heading("# 3", text="Unit Price")
        tree.column("# 4", anchor=E, stretch=NO, width=80)
        tree.heading("# 4", text="Quantity")
        tree.column("# 5", anchor=E, stretch=NO, width=80)
        tree.heading("# 5", text="Price")
      
        window = canvas.create_window(120, 255, anchor="nw", window=tree)

        canvas.create_line(120, 295, 820, 295 )
        canvas.create_line(120, 255, 120, 295 )
        canvas.create_line(320, 255, 320, 295 )
        canvas.create_line(570, 255, 570, 295 )
        canvas.create_line(660, 255, 660, 295 )
        canvas.create_line(740, 255, 740, 295 )
        canvas.create_line(820, 255, 820, 445 )
        canvas.create_line(570, 320, 820, 320 )
        canvas.create_line(570, 345, 820, 345 )
        canvas.create_line(570, 370, 820, 370 )
        canvas.create_line(570, 395, 820, 395 )
        canvas.create_line(570, 420, 820, 420 )
        canvas.create_line(570, 445, 820, 445 )
      
        canvas.create_text(160, 285, text="PROD-0001", fill="black", font=('Helvetica 10'))
        canvas.create_text(450, 285, text="Example product - Description text...", fill="black", font=('Helvetica 10'))

        if comcursignpla.get() == "before amount":
          canvas.create_text(624, 285, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(624, 285, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(624, 285, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(624, 285, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass
        # canvas.create_text(624, 285, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        canvas.create_text(700, 285, text="1", fill="black", font=('Helvetica 10'))
        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 285, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 285, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 285, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 285, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass
        # canvas.create_text(784, 285, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 310, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 310, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 310, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 310, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass
        # canvas.create_text(784, 310, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        if comcursignpla.get() == "before amount":
          canvas.create_text(789, 335, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(789, 335, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(789, 335, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(789, 335, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass
        # canvas.create_text(789, 335, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        if comcursignpla.get() == "before amount":
          canvas.create_text(789, 360, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(789, 360, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(789, 360, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(789, 360, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass
        # canvas.create_text(789, 360, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 385, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 385, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 385, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 385, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass
        # canvas.create_text(784, 385, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 410, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 410, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 410, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 410, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass
        # canvas.create_text(784, 410, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        if comcursignpla.get() == "before amount":
          canvas.create_text(784, 435, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount":
          canvas.create_text(784, 435, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "before amount with space":
          canvas.create_text(784, 435, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
        elif comcursignpla.get() == "after amount with space":
          canvas.create_text(784, 435, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
        else:
          pass
        # canvas.create_text(784, 435, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

        canvas.create_text(595, 310, text="Subtotal", fill="black", font=('Helvetica 10'))
        canvas.create_text(585, 335, text="TAX1", fill="black", font=('Helvetica 10'))
        canvas.create_text(635, 360, text="Shipping and handling", fill="black", font=('Helvetica 10'))
        canvas.create_text(615, 385, text=""+est_str6.get(), fill="black", font=('Helvetica 10 bold'))
        canvas.create_text(600, 410, text="Total Paid", fill="black", font=('Helvetica 10'))
        canvas.create_text(595, 435, text="Balance", fill="black", font=('Helvetica 10'))

        canvas.create_line(150, 470, 800, 470, fill='orange')
        canvas.create_text(275, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 510, text="...", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 520, text="...", fill="black", font=('Helvetica 10'))
        canvas.create_text(182, 530, text="...", fill="black", font=('Helvetica 10'))
          
        canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
        canvas.create_line(150, 608, 795, 608, fill='orange')
        # canvas.create_text(280, 640, text= ""+est_str7.get(), fill="black", font=('Helvetica 10'))
        T = Text(canvas, height=3, width=90, font=('Helvetica 10'),borderwidth=0)
        T.insert(END, estdata1[39])
        T_window = canvas.create_window(155, 612, anchor="nw", window=T)
        canvas.create_text(280, 670, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
        canvas.create_text(720, 670, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
      else:
        pass

  win_menu2 = StringVar()
  winstyle2 = ttk.Combobox(fifthtab,textvariable=win_menu2)
  winstyle2.bind("<<ComboboxSelected>>", maindropmenu)
  winstyle2["values"] = ("Professional 1 (logo on left side)","Professional 2 (logo on right side)","Simplified 1 (logo on left side)","Simplified 2 (logo on right side)","Business Classic")
  if not estdata:
    winstyle2.current(0)
    frame = Frame(fifthtab, width=953, height=300)
    frame.pack(expand=True, fill=BOTH)
    frame.place(x=247,y=90)
    canvas=Canvas(frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
    vertibar=Scrollbar(frame, orient=VERTICAL)
    vertibar.pack(side=RIGHT,fill=Y)
    vertibar.config(command=canvas.yview)
      
    canvas.config(width=953,height=300)
    canvas.config(yscrollcommand=vertibar.set)
    canvas.pack(expand=True,side=LEFT,fill=BOTH)
    canvas.create_rectangle(100, 8, 850, 687 , outline='yellow',fill='white')
    canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
  
    #canvas.create_image(120,0, anchor=NW, image=est_logo)  
    canvas.create_text(285, 110, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))
      
    canvas.create_text(202, 160, text=""+est_str2.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(215, 180, text=""+est_str3.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(200, 200, text=""+est_str4.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(191, 220, text="Terms", fill="black", font=('Helvetica 11'))
    canvas.create_text(205, 240, text="Order ref.#", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 160, text="EST1/2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 180, text="05-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 200, text="20-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(340, 220, text="NET 15", fill="black", font=('Helvetica 11'))
      
    canvas.create_text(720, 60, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
    # canvas.create_text(700, 200, text=""+caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'), width=125)
    # T_address = Text(canvas, height=5, width=20 , font=('Helvetica 10'))
    # T_address.insert(END, estdata[2])
    # T_address_window = canvas.create_window(645, 80, anchor="nw", window=T_address)
    canvas.create_text(700, 180, text=" "+comsalestax.get(), fill="black", font=('Helvetica 10'))
    canvas.create_text(700, 205, text=" "+est_str1.get(), fill="black", font=('Helvetica 14 bold'))
    canvas.create_text(706, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
      
    canvas.create_text(210, 260, text=""+est_str5.get(), fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
    canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
      
    s = ttk.Style()
    s.configure('mystyle_1.Treeview.Heading', background=''+win_menu1.get(),State='DISABLE')

    tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_1.Treeview')

    tree.column("# 1", anchor=E, stretch=NO, width=100)
    tree.heading("# 1", text="ID/SKU")
    tree.column("# 2", anchor=E, stretch=NO, width=350)
    tree.heading("# 2", text="Product/Service - Description")
    tree.column("# 3", anchor=E, stretch=NO, width=80)
    tree.heading("# 3", text="Quantity")
    tree.column("# 4", anchor=E, stretch=NO, width=90)
    tree.heading("# 4", text="Unit Price")
    tree.column("# 5", anchor=E, stretch=NO, width=80)
    tree.heading("# 5", text="Price")
      
    window = canvas.create_window(120, 340, anchor="nw", window=tree)

    canvas.create_line(120, 390, 820, 390 )
    canvas.create_line(120, 340, 120, 365 )
    canvas.create_line(120, 365, 120, 390 )
    canvas.create_line(820, 340, 820, 540 )
    canvas.create_line(740, 340, 740, 540 )
    canvas.create_line(570, 340, 570, 540 )
    canvas.create_line(570, 415, 820, 415 )
    canvas.create_line(570, 440, 820, 440 )
    canvas.create_line(570, 465, 820, 465 )
    canvas.create_line(570, 490, 820, 490 )
    canvas.create_line(570, 515, 820, 515 )
    canvas.create_line(650, 340, 650, 390 )
    canvas.create_line(220, 340, 220, 390 )
    canvas.create_line(570, 540, 820, 540 )

    canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
    canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
    canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
    
    if comcursignpla.get() == "before amount":
      canvas.create_text(704, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "after amount":
      canvas.create_text(704, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(704, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(704, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))

    else:
      pass
    # canvas.create_text(704, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 404, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(786, 428, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
    
    if comcursignpla.get() == "before amount":
      canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(786, 454, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10 bold'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 479, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10 bold'))
    else:
      pass

    # canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    canvas.create_text(650, 479, text=""+est_str6.get(), fill="black", font=('Helvetica 10 bold'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 502, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))
    
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 526, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

    canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
      
    canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
    canvas.create_line(150, 608, 795, 608)
    # canvas.create_text(280, 640, text= ""+est_str7.get(), fill="black", font=('Helvetica 10')) 
    # T = Text(canvas, height=3, width=105, font=('Helvetica 10'))
    # T.insert(END, estdata[39])
    # T_window = canvas.create_window(105, 612, anchor="nw", window=T)


    canvas.create_text(280, 670, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_text(720, 670, text="Page 1 of 1", fill="black", font=('Helvetica 10')) 
  elif estdata[32] == 'Professional 1 (logo on left side)':
    winstyle2.insert(0, estdata[32])
    frame = Frame(fifthtab, width=953, height=300)
    frame.pack(expand=True, fill=BOTH)
    frame.place(x=247,y=90)
    canvas=Canvas(frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
          
    vertibar=Scrollbar(frame, orient=VERTICAL)
    vertibar.pack(side=RIGHT,fill=Y)
    vertibar.config(command=canvas.yview)
      
    canvas.config(width=953,height=300)
    canvas.config(yscrollcommand=vertibar.set)
    canvas.pack(expand=True,side=LEFT,fill=BOTH)
    canvas.create_rectangle(100, 8, 850, 687 , outline='yellow',fill='white')
    canvas.create_text(500, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
    try:
      est_image = Image.open("images/"+estdata[13])
      est_resize_image = est_image.resize((200,100))
      est_image = ImageTk.PhotoImage(est_resize_image)

      est_btlogo = Label(canvas,width=200,height=100,image = est_image) 
      window_image = canvas.create_window(175, 45, anchor="nw", window=est_btlogo)
      est_btlogo.photo = est_image
    except:
      pass  
    canvas.create_text(202, 160, text=""+est_str2.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(215, 180, text=""+est_str3.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(200, 200, text=""+est_str4.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(191, 220, text="Terms", fill="black", font=('Helvetica 11'))
    canvas.create_text(205, 240, text="Order ref.#", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 160, text="EST1/2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 180, text="05-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 200, text="20-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(340, 220, text="NET 15", fill="black", font=('Helvetica 11'))
      
    canvas.create_text(720, 60, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
    # canvas.create_text(700, 200, text=""+caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'), width=125)
    T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
    T_address.tag_configure('tag_name',justify='right')
    T_address.insert('1.0', estdata[2])
    T_address.tag_add('tag_name','1.0', 'end')
    T_address_window = canvas.create_window(520, 80, anchor="nw", window=T_address)
    canvas.create_text(695, 180, text=" "+comsalestax.get(), fill="black", font=('Helvetica 10'))
    canvas.create_text(700, 205, text=" "+est_str1.get(), fill="black", font=('Helvetica 14 bold'))
    canvas.create_text(706, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
      
    canvas.create_text(210, 260, text=""+est_str5.get(), fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
    canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
      
    s = ttk.Style()
    s.configure('mystyle_1.Treeview.Heading', background=''+win_menu1.get(),State='DISABLE')

    tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_1.Treeview')

    tree.column("# 1", anchor=E, stretch=NO, width=100)
    tree.heading("# 1", text="ID/SKU")
    tree.column("# 2", anchor=E, stretch=NO, width=350)
    tree.heading("# 2", text="Product/Service - Description")
    tree.column("# 3", anchor=E, stretch=NO, width=80)
    tree.heading("# 3", text="Quantity")
    tree.column("# 4", anchor=E, stretch=NO, width=90)
    tree.heading("# 4", text="Unit Price")
    tree.column("# 5", anchor=E, stretch=NO, width=80)
    tree.heading("# 5", text="Price")
      
    window = canvas.create_window(120, 340, anchor="nw", window=tree)

    canvas.create_line(120, 390, 820, 390 )
    canvas.create_line(120, 340, 120, 365 )
    canvas.create_line(120, 365, 120, 390 )
    canvas.create_line(820, 340, 820, 540 )
    canvas.create_line(740, 340, 740, 540 )
    canvas.create_line(570, 340, 570, 540 )
    canvas.create_line(570, 415, 820, 415 )
    canvas.create_line(570, 440, 820, 440 )
    canvas.create_line(570, 465, 820, 465 )
    canvas.create_line(570, 490, 820, 490 )
    canvas.create_line(570, 515, 820, 515 )
    canvas.create_line(650, 340, 650, 390 )
    canvas.create_line(220, 340, 220, 390 )
    canvas.create_line(570, 540, 820, 540 )

    canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
    canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
    canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
    
    if comcursignpla.get() == "before amount":
      canvas.create_text(704, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "after amount":
      canvas.create_text(704, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(704, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(704, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))

    else:
      pass
    # canvas.create_text(704, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 404, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(786, 428, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
    
    if comcursignpla.get() == "before amount":
      canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(786, 454, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10 bold'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 479, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10 bold'))
    else:
      pass

    # canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    canvas.create_text(650, 479, text=""+est_str6.get(), fill="black", font=('Helvetica 10 bold'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 502, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))
    
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 526, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

    canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
      
    canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
    canvas.create_line(150, 608, 795, 608)
    # canvas.create_text(280, 640, text= ""+est_str7.get(), fill="black", font=('Helvetica 10')) 
    T = Text(canvas, height=3, width=90, font=('Helvetica 10'),borderwidth=0)
    T.insert(END, estdata[39])
    T_window = canvas.create_window(155, 612, anchor="nw", window=T)

    canvas.create_text(280, 670, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_text(720, 670, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
  elif estdata[32] == 'Professional 2 (logo on right side)':
    winstyle2.insert(0, estdata[32])
    frame = Frame(fifthtab, width=953, height=300)
    frame.pack(expand=True, fill=BOTH)
    frame.place(x=247,y=90)
      
    canvas=Canvas(frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
      
    vertibar=Scrollbar(frame, orient=VERTICAL)
    vertibar.pack(side=RIGHT,fill=Y)
    vertibar.config(command=canvas.yview)
    canvas.config(width=953,height=300)
      
    canvas.config(yscrollcommand=vertibar.set)
    canvas.pack(expand=True,side=LEFT,fill=BOTH)
    canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
    canvas.create_text(500, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
    try:
      est_image = Image.open("images/"+estdata[13])
      est_resize_image = est_image.resize((200,100))
      est_image = ImageTk.PhotoImage(est_resize_image)

      est_btlogo = Label(canvas,width=200,height=100,image = est_image) 
      window_image = canvas.create_window(500, 45, anchor="nw", window=est_btlogo)
      est_btlogo.photo = est_image
    except:
      pass  
    canvas.create_text(250, 60, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
    # canvas.create_text(225, 200, text=""+caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'))
    T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
    T_address.tag_configure('tag_name',justify='right')
    T_address.insert('1.0', estdata[2])
    T_address.tag_add('tag_name','1.0', 'end')
    T_address_window = canvas.create_window(100, 80, anchor="nw", window=T_address)
    canvas.create_text(225, 180, text=" "+comsalestax.get(), fill="black", font=('Helvetica 10'))
    canvas.create_text(225, 205, text=""+est_str1.get(), fill="black", font=('Helvetica 14 bold'))
    canvas.create_text(232, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
      
    canvas.create_text(502, 160, text=""+est_str2.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(515, 180, text=""+est_str3.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(500, 200, text=""+est_str4.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(491, 220, text="Terms", fill="black", font=('Helvetica 11'))
    canvas.create_text(505, 240, text="Order ref.#", fill="black", font=('Helvetica 11'))
    canvas.create_text(690, 160, text="EST1/2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(690, 180, text="05-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(690, 200, text="20-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(680, 220, text="NET 15", fill="black", font=('Helvetica 11'))      
      
    canvas.create_text(210, 260, text=""+est_str5.get(), fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
    canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

    s = ttk.Style()
    s.configure('mystyle_1.Treeview.Heading', background=''+win_menu1.get(),State='DISABLE')

    tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_1.Treeview')
      
    tree.column("# 1", anchor=E, stretch=NO, width=100)
    tree.heading("# 1", text="ID/SKU")
    tree.column("# 2", anchor=E, stretch=NO, width=350)
    tree.heading("# 2", text="Product/Service - Description")
    tree.column("# 3", anchor=E, stretch=NO, width=80)
    tree.heading("# 3", text="Quantity")
    tree.column("# 4", anchor=E, stretch=NO, width=90)
    tree.heading("# 4", text="Unit Price")
    tree.column("# 5", anchor=E, stretch=NO, width=80)
    tree.heading("# 5", text="Price")
      
    window = canvas.create_window(120, 340, anchor="nw", window=tree)

    canvas.create_line(120, 390, 820, 390 )
    canvas.create_line(120, 340, 120, 365 )
    canvas.create_line(120, 365, 120, 390 )
    canvas.create_line(820, 340, 820, 540 )
    canvas.create_line(740, 340, 740, 540 )
    canvas.create_line(570, 340, 570, 540 )
    canvas.create_line(570, 415, 820, 415 )
    canvas.create_line(570, 440, 820, 440 )
    canvas.create_line(570, 465, 820, 465 )
    canvas.create_line(570, 490, 820, 490 )
    canvas.create_line(570, 515, 820, 515 )
    canvas.create_line(650, 340, 650, 390 )
    canvas.create_line(220, 340, 220, 390 )
    canvas.create_line(570, 540, 820, 540 )

    canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
    canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
    canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(704, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(704, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(704, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(704, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(704, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 404, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(786, 428, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(786, 454, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10 bold'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 479, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10 bold'))
    else:
      pass

    # canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    canvas.create_text(650, 479, text=""+est_str6.get(), fill="black", font=('Helvetica 10 bold'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 502, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))
    
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 526, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

    canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))

    canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
    canvas.create_line(150, 608, 795, 608)
    # canvas.create_text(280, 640, text= ""+est_str7.get(), fill="black", font=('Helvetica 10'))
    T = Text(canvas, height=3, width=90, font=('Helvetica 10'),borderwidth=0)
    T.insert(END, estdata[39])
    T_window = canvas.create_window(155, 612, anchor="nw", window=T)
    canvas.create_text(280, 670, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_text(720, 670, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
  elif estdata[32] == 'Simplified 1 (logo on left side)':
    winstyle2.insert(0, estdata[32])
    frame = Frame(fifthtab, width=953, height=300)
    frame.pack(expand=True, fill=BOTH)
    frame.place(x=247,y=90)
    canvas=Canvas(frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))

    vertibar=Scrollbar(frame, orient=VERTICAL)
    vertibar.pack(side=RIGHT,fill=Y)
    vertibar.config(command=canvas.yview)
    canvas.config(width=953,height=300)

    canvas.config(yscrollcommand=vertibar.set)
    canvas.pack(expand=True,side=LEFT,fill=BOTH)
    canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
    canvas.create_text(500, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
    try:
      est_image = Image.open("images/"+estdata[13])
      est_resize_image = est_image.resize((200,100))
      est_image = ImageTk.PhotoImage(est_resize_image)

      est_btlogo = Label(canvas,width=200,height=100,image = est_image) 
      window_image = canvas.create_window(175, 45, anchor="nw", window=est_btlogo)
      est_btlogo.photo = est_image
    except:
      pass  
    canvas.create_text(202, 160, text=""+est_str2.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(215, 180, text=""+est_str3.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(200, 200, text=""+est_str4.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(191, 220, text="Terms", fill="black", font=('Helvetica 11'))
    canvas.create_text(205, 240, text="Order ref.#", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 160, text="EST1/2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 180, text="05-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 200, text="20-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(340, 220, text="NET 15", fill="black", font=('Helvetica 11'))      

    canvas.create_text(720, 60, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
    # canvas.create_text(710, 200, text=caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'))
    T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
    T_address.tag_configure('tag_name',justify='right')
    T_address.insert('1.0', estdata[2])
    T_address.tag_add('tag_name','1.0', 'end')
    T_address_window = canvas.create_window(520, 80, anchor="nw", window=T_address)

    canvas.create_text(708, 170, text=" "+comsalestax.get(), fill="black", font=('Helvetica 10'))
    canvas.create_text(710, 205, text=""+est_str1.get(), fill="black", font=('Helvetica 14 bold'))
      
    canvas.create_text(210, 260, text=""+est_str5.get(), fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
    canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

    s = ttk.Style()
    s.configure('mystyle_1.Treeview.Heading', background=''+win_menu1.get(),State='DISABLE')

    tree=ttk.Treeview(canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle_1.Treeview')
      
    tree.column("# 1", anchor=E, stretch=NO, width=530)
    tree.heading("# 1", text="Product/Service - Description")
    tree.column("# 2", anchor=E, stretch=NO, width=90)
    tree.heading("# 2", text="Quantity")
    tree.column("# 3", anchor=E, stretch=NO, width=80)
    tree.heading("# 3", text="Price")
      
    window = canvas.create_window(120, 340, anchor="nw", window=tree)

    canvas.create_line(120, 390, 820, 390 )
    canvas.create_line(120, 340, 120, 365 )
    canvas.create_line(120, 365, 120, 390 )
    canvas.create_line(820, 340, 820, 540 )
    canvas.create_line(740, 340, 740, 540 )
    canvas.create_line(570, 390, 570, 540 )
    canvas.create_line(570, 415, 820, 415 )
    canvas.create_line(570, 440, 820, 440 )
    canvas.create_line(570, 465, 820, 465 )
    canvas.create_line(570, 490, 820, 490 )
    canvas.create_line(570, 515, 820, 515 )
    canvas.create_line(650, 340, 650, 390 )
    canvas.create_line(570, 540, 820, 540 )

      
    canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
    canvas.create_text(710, 372, text="1", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 404, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(786, 428, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(786, 454, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 479, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    canvas.create_text(650, 479, text=""+est_str6.get(), fill="black", font=('Helvetica 10 bold'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 502, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 526, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

    canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))

    canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
    canvas.create_line(150, 608, 795, 608)
    # canvas.create_text(280, 640, text= ""+est_str7.get(), fill="black", font=('Helvetica 10'))
    T = Text(canvas, height=3, width=90, font=('Helvetica 10'),borderwidth=0)
    T.insert(END, estdata[39])
    T_window = canvas.create_window(155, 612, anchor="nw", window=T)
    canvas.create_text(280, 670, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_text(720, 670, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
  elif estdata[32] == 'Simplified 2 (logo on right side)':
    winstyle2.insert(0, estdata[32])
    frame = Frame(fifthtab, width=953, height=300)
    frame.pack(expand=True, fill=BOTH)
    frame.place(x=247,y=90)

    canvas=Canvas(frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))

    vertibar=Scrollbar(frame, orient=VERTICAL)
    vertibar.pack(side=RIGHT,fill=Y)
    vertibar.config(command=canvas.yview)
    canvas.config(width=953,height=300)

    canvas.config(yscrollcommand=vertibar.set)
    canvas.pack(expand=True,side=LEFT,fill=BOTH)
    canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
    canvas.create_text(500, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
    try:
      est_image = Image.open("images/"+estdata[13])
      est_resize_image = est_image.resize((200,100))
      est_image = ImageTk.PhotoImage(est_resize_image)

      est_btlogo = Label(canvas,width=200,height=100,image = est_image) 
      window_image = canvas.create_window(500, 45, anchor="nw", window=est_btlogo)
      est_btlogo.photo = est_image
    except:
      pass  
    canvas.create_text(250, 60, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
    # canvas.create_text(224, 200, text=""+caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'))
    T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
    T_address.tag_configure('tag_name',justify='right')
    T_address.insert('1.0', estdata[2])
    T_address.tag_add('tag_name','1.0', 'end')
    T_address_window = canvas.create_window(100, 80, anchor="nw", window=T_address)
    canvas.create_text(224, 180, text=" "+comsalestax.get(), fill="black", font=('Helvetica 10'))
    canvas.create_text(225, 205, text=""+est_str1.get(), fill="black", font=('Helvetica 14 bold'))

    canvas.create_text(502, 160, text=""+est_str2.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(515, 180, text=""+est_str3.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(500, 200, text=""+est_str4.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(491, 220, text="Terms", fill="black", font=('Helvetica 11'))
    canvas.create_text(505, 240, text="Order ref.#", fill="black", font=('Helvetica 11'))
    canvas.create_text(680, 160, text="EST1/2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(680, 180, text="05-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(680, 200, text="20-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(670, 220, text="NET 15", fill="black", font=('Helvetica 11'))      

    canvas.create_text(210, 260, text=""+est_str5.get(), fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
    canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))

    s = ttk.Style()
    s.configure('mystyle_1.Treeview.Heading', background=''+win_menu1.get(),State='DISABLE')

    tree=ttk.Treeview(canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle_1.Treeview')
      
    tree.column("# 1", anchor=E, stretch=NO, width=530)
    tree.heading("# 1", text="Product/Service - Description")
    tree.column("# 2", anchor=E, stretch=NO, width=90)
    tree.heading("# 2", text="Quantity")
    tree.column("# 3", anchor=E, stretch=NO, width=80)
    tree.heading("# 3", text="Price")
      
    window = canvas.create_window(120, 340, anchor="nw", window=tree)

    canvas.create_line(120, 390, 820, 390 )
    canvas.create_line(120, 340, 120, 365 )
    canvas.create_line(120, 365, 120, 390 )
    canvas.create_line(820, 340, 820, 540 )
    canvas.create_line(740, 340, 740, 540 )
    canvas.create_line(570, 390, 570, 540 )
    canvas.create_line(570, 415, 820, 415 )
    canvas.create_line(570, 440, 820, 440 )
    canvas.create_line(570, 465, 820, 465 )
    canvas.create_line(570, 490, 820, 490 )
    canvas.create_line(570, 515, 820, 515 )
    canvas.create_line(650, 340, 650, 390 )
    canvas.create_line(570, 540, 820, 540 )

      
    canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
    canvas.create_text(710, 372, text="1", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 404, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(786, 428, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(786, 454, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 479, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    canvas.create_text(650, 479, text=""+est_str6.get(), fill="black", font=('Helvetica 10 bold'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 502, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 526, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

    # canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

    canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))

    canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
    canvas.create_line(150, 608, 795, 608)
    # canvas.create_text(280, 640, text= ""+est_str7.get(), fill="black", font=('Helvetica 10'))
    T = Text(canvas, height=3, width=90, font=('Helvetica 10'),borderwidth=0)
    T.insert(END, estdata[39])
    T_window = canvas.create_window(155, 612, anchor="nw", window=T)
    canvas.create_text(280, 670, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_text(720, 670, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
  elif estdata[32] == 'Business Classic':
    winstyle2.insert(0, estdata[32])
    frame = Frame(fifthtab, width=953, height=300)
    frame.pack(expand=True, fill=BOTH)
    frame.place(x=247,y=90)
      
    canvas=Canvas(frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
      
    vertibar=Scrollbar(frame, orient=VERTICAL)
    vertibar.pack(side=RIGHT,fill=Y)
    vertibar.config(command=canvas.yview)
    canvas.config(width=953,height=300)
      
    canvas.config(yscrollcommand=vertibar.set)
    canvas.pack(expand=True,side=LEFT,fill=BOTH)
    canvas.create_rectangle(100, 10, 850, 687 , outline='yellow',fill='white')
    canvas.create_text(500, 50, text="Title text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_line(150, 70, 800, 70, fill='orange')
    
    try:
      est_image = Image.open("images/"+estdata[13])
      est_resize_image = est_image.resize((200,100))
      est_image = ImageTk.PhotoImage(est_resize_image)

      est_btlogo = Label(canvas,width=200,height=100,image = est_image) 
      window_image = canvas.create_window(140, 120, anchor="nw", window=est_btlogo)
      est_btlogo.photo = est_image
    except:
      pass  

    canvas.create_text(500, 90, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
    # canvas.create_text(480, 200, text=""+caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'))
    T_address = Text(canvas, height=5, width=35, font=('Helvetica 10'),borderwidth=0)
    T_address.tag_configure('tag_name',justify='right')
    T_address.insert('1.0', estdata[2])
    T_address.tag_add('tag_name','1.0', 'end')
    T_address_window = canvas.create_window(350, 100, anchor="nw", window=T_address)
        
        
    canvas.create_text(480, 210, text=" "+comsalestax.get(), fill="black", font=('Helvetica 10'))

    canvas.create_text(655, 100, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(696, 120, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(706, 135, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(665, 150, text="United States", fill="black", font=('Helvetica 10'))

    canvas.create_text(659, 180, text=""+est_str1.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(675, 210, text=""+est_str3.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(659, 240, text=""+est_str4.get(), fill="black", font=('Helvetica 11'))

    canvas.create_text(776, 180, text="EST1/2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(776, 210, text="05 May 2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(776, 240, text="20-05-2022", fill="black", font=('Helvetica 11'))

    s = ttk.Style()
    s.configure('mystyle_1.Treeview.Heading', background=''+win_menu1.get(),State='DISABLE')

    tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_1.Treeview')
      
    tree.column("# 1", anchor=E, stretch=NO, width=200)
    tree.heading("# 1", text="Product/Service")
    tree.column("# 2", anchor=E, stretch=NO, width=250)
    tree.heading("# 2", text="Description")
    tree.column("# 3", anchor=E, stretch=NO, width=90)
    tree.heading("# 3", text="Unit Price")
    tree.column("# 4", anchor=E, stretch=NO, width=80)
    tree.heading("# 4", text="Quantity")
    tree.column("# 5", anchor=E, stretch=NO, width=80)
    tree.heading("# 5", text="Price")
      
    window = canvas.create_window(120, 255, anchor="nw", window=tree)

    canvas.create_line(120, 295, 820, 295 )
    canvas.create_line(120, 255, 120, 295 )
    canvas.create_line(320, 255, 320, 295 )
    canvas.create_line(570, 255, 570, 295 )
    canvas.create_line(660, 255, 660, 295 )
    canvas.create_line(740, 255, 740, 295 )
    canvas.create_line(820, 255, 820, 445 )
    canvas.create_line(570, 320, 820, 320 )
    canvas.create_line(570, 345, 820, 345 )
    canvas.create_line(570, 370, 820, 370 )
    canvas.create_line(570, 395, 820, 395 )
    canvas.create_line(570, 420, 820, 420 )
    canvas.create_line(570, 445, 820, 445 )
      
    canvas.create_text(160, 285, text="PROD-0001", fill="black", font=('Helvetica 10'))
    canvas.create_text(450, 285, text="Example product - Description text...", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(624, 285, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(624, 285, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(624, 285, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(624, 285, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(624, 285, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(700, 285, text="1", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 285, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 285, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 285, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 285, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(784, 285, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 310, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 310, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 310, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 310, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(784, 310, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(789, 335, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(789, 335, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(789, 335, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(789, 335, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(789, 335, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(789, 360, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(789, 360, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(789, 360, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(789, 360, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(789, 360, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 385, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 385, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 385, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 385, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(784, 385, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 410, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 410, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 410, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 410, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(784, 410, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 435, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 435, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 435, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(784, 435, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(784, 435, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(595, 310, text="Subtotal", fill="black", font=('Helvetica 10'))
    canvas.create_text(585, 335, text="TAX1", fill="black", font=('Helvetica 10'))
    canvas.create_text(635, 360, text="Shipping and handling", fill="black", font=('Helvetica 10'))
    canvas.create_text(615, 385, text=""+est_str6.get(), fill="black", font=('Helvetica 10 bold'))
    canvas.create_text(600, 410, text="Total Paid", fill="black", font=('Helvetica 10'))
    canvas.create_text(595, 435, text="Balance", fill="black", font=('Helvetica 10'))

    canvas.create_line(150, 470, 800, 470, fill='orange')
    canvas.create_text(275, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 510, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 520, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 530, text="...", fill="black", font=('Helvetica 10'))
      
    canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
    canvas.create_line(150, 608, 795, 608, fill='orange')
    # canvas.create_text(280, 640, text= ""+est_str7.get(), fill="black", font=('Helvetica 10'))
    T = Text(canvas, height=3, width=90, font=('Helvetica 10'),borderwidth=0)
    T.insert(END, estdata[39])
    T_window = canvas.create_window(155, 612, anchor="nw", window=T)
    canvas.create_text(280, 670, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_text(720, 670, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
  else:
    pass
  winstyle2.place(x=770 ,y=40, width=220)
  #winstyle2.current(0)



################### tab07 ###################################
  seventhtab1=Frame(tab07, relief=GROOVE, bg="#f8f8f2")
  seventhtab1.pack(side="top", fill=BOTH)

  sql = "select * from company"
  fbcursor.execute(sql)
  advdata = fbcursor.fetchone()
  #print(estdata)


  seventhtab=Frame(seventhtab1, bg="#f5f3f2", height=700)
  seventhtab.pack(side="top", fill=BOTH)

  adv_messagelbframe=LabelFrame(seventhtab,text="Template advanced settings", height=250, width=1150)
  adv_messagelbframe.place(x=2, y=10)

  adv_fbill = Label(seventhtab,text="Template",font="arial 10 bold").place(x=20,y=30)

  adv_ver = Label(seventhtab,text="Professional 1 (logo on left side)")
  adv_ver.place(x=20,y=60)

  adv_ver = Label(seventhtab,text="Professional 2 (logo on right side)")
  adv_ver.place(x=20,y=90)

  adv_ver = Label(seventhtab,text="Simplified 1 (logo on left side)")
  adv_ver.place(x=20,y=120)

  adv_ver = Label(seventhtab,text="Simplified 2 (logo on right side)")
  adv_ver.place(x=20,y=150)

  adv_ver = Label(seventhtab,text="Business Classic")
  adv_ver.place(x=20,y=180)

  adv_fbill = Label(seventhtab,text="Page size",font="arial 10 bold").place(x=255,y=30)

  adv_win_menu3 = StringVar()
  adv_winstyle3 = ttk.Combobox(seventhtab,textvariable=adv_win_menu3)
  adv_winstyle3['values'] = ('Letter','A4')
  adv_win_menu3.set('Letter')
  #adv_winstyle3.current(0)
  adv_winstyle3.place(x=225 ,y=60)
    
  
  adv_win_menu4 = StringVar()
  adv_winstyle4 = ttk.Combobox(seventhtab,textvariable=adv_win_menu4)
  adv_winstyle4.place(x=225,y=90)
  adv_winstyle4['values'] = ("Letter","A4")
  adv_winstyle4.set("Letter")
  adv_winstyle4.current(0)

  adv_win_menu5 = StringVar()
  adv_winstyle5 = ttk.Combobox(seventhtab,textvariable=adv_win_menu5)
  adv_winstyle5.place(x=225,y=120)
  adv_winstyle5['values'] = ("Letter","A4")
  adv_winstyle5.set("Letter")
  adv_winstyle5.current(0)

  adv_win_menu6 = StringVar()
  adv_winstyle6 = ttk.Combobox(seventhtab,textvariable=adv_win_menu6)
  adv_winstyle6.place(x=225,y=150)
  adv_winstyle6['values'] = ("Letter","A4")
  adv_winstyle6.set("Letter")
  adv_winstyle6.current(0)

  adv_win_menu7 = StringVar()
  adv_winstyle7 = ttk.Combobox(seventhtab,textvariable=adv_win_menu7)
  adv_winstyle7.place(x=225,y=180)
  adv_winstyle7['values'] = ("Letter","A4")
  adv_winstyle7.set("Letter")
  adv_winstyle7.current(0)

  adv_fbill = Label(seventhtab,text="Right Margin(mm)",font="arial 10 bold").place(x=450,y=30)

  adv_spin00 = Spinbox(seventhtab,from_=5,to=20,width=10)
  adv_spin00.place(x=465,y=60)

  adv_spin01 = Spinbox(seventhtab,from_=5,to=20,width=10)
  adv_spin01.place(x=465,y=90)

  adv_spin02 = Spinbox(seventhtab,from_=5,to=20,width=10)
  adv_spin02.place(x=465,y=120)

  adv_spin03 = Spinbox(seventhtab,from_=5,to=20,width=10)
  adv_spin03.place(x=465,y=150)

  adv_spin04 = Spinbox(seventhtab,from_=5,to=20,width=10)
  adv_spin04.place(x=465,y=180)


  adv_fbill = Label(seventhtab,text="'Invoice to'block position shift(mm)",font="arial 10 bold").place(x=650,y=30)

  adv_lbl1 = Label(seventhtab, text="Left : ").place(x=651,y=60)
  adv_lbl1 = Label(seventhtab, text="Left : ").place(x=651,y=90)
  adv_lbl1 = Label(seventhtab, text="Left : ").place(x=651,y=120)
  adv_lbl1 = Label(seventhtab, text="Left : ").place(x=651,y=150)

  adv_spin10 = Spinbox(seventhtab,from_=-10,to=100,width=10)
  adv_spin10.place(x=685,y=60)

  adv_spin11 = Spinbox(seventhtab,from_=-10,to=100,width=10)
  adv_spin11.place(x=685,y=90)

  adv_spin12 = Spinbox(seventhtab,from_=-10,to=100,width=10)
  adv_spin12.place(x=685,y=120)

  adv_spin13 = Spinbox(seventhtab,from_=-10,to=100,width=10)
  adv_spin13.place(x=685,y=150)

  adv_lbl1 = Label(seventhtab, text="Top : ").place(x=785,y=60)
  adv_lbl1 = Label(seventhtab, text="Top : ").place(x=785,y=90)
  adv_lbl1 = Label(seventhtab, text="Top : ").place(x=785,y=120)
  adv_lbl1 = Label(seventhtab, text="Top : ").place(x=785,y=150)

  adv_spin20 = Spinbox(seventhtab,from_=0,to=100,width=10)
  adv_spin20.place(x=820,y=60)

  adv_spin21 = Spinbox(seventhtab,from_=0,to=100,width=10)
  adv_spin21.place(x=820,y=90)

  adv_spin22 = Spinbox(seventhtab,from_=0,to=100,width=10)
  adv_spin22.place(x=820,y=120)

  adv_spin23 = Spinbox(seventhtab,from_=0,to=100,width=10)
  adv_spin23.place(x=820,y=150)

  adv_bttermadd = Button(seventhtab,image=photo8,compound = LEFT,text="Refresh preview",width=115)
  adv_bttermadd.place(x=1000,y=50)

  adv_bttermadd = Button(seventhtab,image=saves,compound = LEFT,text="Save Settings",width=115)
  adv_bttermadd.place(x=1000,y=140)

  def adv_restore():
    adv_spin10.delete(0,'end')
    adv_spin10.insert(0,"0")
    adv_spin11.delete(0,'end')
    adv_spin11.insert(0,"0")
    adv_spin12.delete(0,'end')
    adv_spin12.insert(0,"0")
    adv_spin13.delete(0,'end')
    adv_spin13.insert(0,"0")
    adv_spin20.delete(0,'end')
    adv_spin20.insert(0,"0")
    adv_spin21.delete(0,'end')
    adv_spin21.insert(0,"0")
    adv_spin22.delete(0,'end')
    adv_spin22.insert(0,"0")
    adv_spin23.delete(0,'end')
    adv_spin23.insert(0,"0")
    adv_spin00.delete(0,'end')
    adv_spin00.insert(0,"10")
    adv_spin01.delete(0,'end')
    adv_spin01.insert(0,"10")
    adv_spin02.delete(0,'end')
    adv_spin02.insert(0,"10")
    adv_spin03.delete(0,'end')
    adv_spin03.insert(0,"10")
    adv_spin04.delete(0,'end')
    adv_spin04.insert(0,"10")
    adv_winstyle3.delete(0,'end')
    adv_winstyle3.insert(0,"Letter")
    adv_winstyle4.delete(0,'end')
    adv_winstyle4.insert(0,"Letter")
    adv_winstyle5.delete(0,'end')
    adv_winstyle5.insert(0,"Letter")
    adv_winstyle6.delete(0,'end')
    adv_winstyle6.insert(0,"Letter")
    adv_winstyle7.delete(0,'end')
    adv_winstyle7.insert(0,"Letter")

  adv_bttermadd = Button(seventhtab,text="Restore defaults",width=16, command=adv_restore)
  adv_bttermadd.place(x=1000,y=180)

  adv_ver = Label(seventhtab,text="By positioning 'Invoice to'block,the customer name/address can be displayed in right place in the windowed envelope. If you networking, you need to setup this on all computer.\nExample:(Left:20 and Top:10 means that shift 'Invoice to'block to right 20mm and shift down 10mm) Original position Left:0 Top:0")
  adv_ver.place(x=50,y=210)

  adv_ver = Label(seventhtab,text="Selected template preview (example, click on preview for mouse scrolling)")
  adv_ver.place(x=230,y=270)

#------------Professional 1 (logo on left side)------------- 
  def adv_maindropmenu(event):
      menuvar=adv_win_menu8.get()
      print(menuvar)
      sql = "select * from company"
      fbcursor.execute(sql)
      advdata1 = fbcursor.fetchone()

      if menuvar == 'Professional 1 (logo on left side)':
          frame = Frame(seventhtab, width=1200, height=155)
          frame.pack(expand=True, fill=BOTH)
          frame.place(x=2,y=309)
          canvas=Canvas(frame, bg='grey', width=1200, height=155, scrollregion=(0,0,700,700))

          vertibar=Scrollbar(frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1200,height=155)

          canvas.config(yscrollcommand=vertibar.set)
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(10, 10, 1190, 690 , outline='yellow',fill='white')

          canvas.create_text(600, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))

          try:
            adv_image = Image.open("images/"+advdata1[13])
            adv_resize_image = adv_image.resize((200,75))
            adv_image = ImageTk.PhotoImage(adv_resize_image)

            adv_btlogo = Label(canvas,width=200,height=75,image = adv_image) 
            adv_window_image = canvas.create_window(150, 30, anchor="nw", window=adv_btlogo)
            adv_btlogo.photo = adv_image
          except:
            pass  

          canvas.create_text(130, 120, text="Invoice#", fill="black", font=('Helvetica 11'))
          canvas.create_text(141, 140, text="Invoice date", fill="black", font=('Helvetica 11'))
          canvas.create_text(130, 160, text="Due date", fill="black", font=('Helvetica 11'))
          canvas.create_text(120, 180, text="Terms", fill="black", font=('Helvetica 11'))
          canvas.create_text(134, 200, text="Order ref.#", fill="black", font=('Helvetica 11'))
          canvas.create_text(347, 120, text="INV1/2022", fill="black", font=('Helvetica 11'))
          canvas.create_text(350, 140, text="03-05-2022", fill="black", font=('Helvetica 11'))
          canvas.create_text(350, 160, text="18-05-2022", fill="black", font=('Helvetica 11'))
          canvas.create_text(340, 180, text="NET 15", fill="black", font=('Helvetica 11'))

          canvas.create_text(1050, 65, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
          # canvas.create_text(1080, 200, text=""+caddent.get('1.0','end-1c'), fill="black", font=('Helvetica 10'))
          T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
          T_address.tag_configure('tag_name',justify='right')
          T_address.insert('1.0', advdata[2])
          T_address.tag_add('tag_name','1.0', 'end')
          T_address_window = canvas.create_window(850, 80, anchor="nw", window=T_address)
          canvas.create_text(1050, 170, text=""+comsalestax.get(), fill="black", font=('Helvetica 10'))
          # canvas.create_text(1085, 125, text="Address line 3", fill="black", font=('Helvetica 10'))
          # canvas.create_text(1085, 140, text="Address line 4", fill="black", font=('Helvetica 10'))
          # canvas.create_text(1080, 155, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          # canvas.create_text(1080, 170, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
          canvas.create_text(1050, 190, text="Invoice", fill="black", font=('Helvetica 14 bold'))
          canvas.create_text(1050, 210, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))

          canvas.create_text(140, 215, text="Bill to", fill="black", font=('Helvetica 10 underline'))
          canvas.create_text(149, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
          canvas.create_text(191, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          canvas.create_text(200, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          canvas.create_text(160, 275, text="United States", fill="black", font=('Helvetica 10'))
          canvas.create_text(550, 215, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          canvas.create_text(556, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
          canvas.create_text(598, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          canvas.create_text(608, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          canvas.create_text(568, 275, text="United States", fill="black", font=('Helvetica 10'))

          s = ttk.Style()
          s.configure('mystyle_2.Treeview.Heading', background='orange',State='DISABLE')
              
          tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_2.Treeview')
            
          tree.column("# 1", anchor=E, stretch=NO, width=150)
          tree.heading("# 1", text="ID/SKU")
          tree.column("# 2", anchor=E, stretch=NO, width=400)
          tree.heading("# 2", text="Product/Service - Description")
          tree.column("# 3", anchor=E, stretch=NO, width=150)
          tree.heading("# 3", text="Quantity")
          tree.column("# 4", anchor=E, stretch=NO, width=150)
          tree.heading("# 4", text="Unit Price")
          tree.column("# 5", anchor=E, stretch=NO, width=150)
          tree.heading("# 5", text="Price")
            
          window = canvas.create_window(120, 290, anchor="nw", window=tree)

          canvas.create_line(120, 330, 1120, 330 )
          canvas.create_line(120, 290, 120, 330 )
          canvas.create_line(270, 290, 270, 330 )
          canvas.create_line(670, 290, 670, 330 )
          canvas.create_line(820, 290, 820, 330 )
          canvas.create_line(970, 290, 970, 330 )
          canvas.create_line(1120, 290, 1120, 330 )
          canvas.create_line(670, 330, 670, 480)
          canvas.create_line(970, 330, 970, 480)
          canvas.create_line(1120, 330, 1120, 480)
          canvas.create_line(670, 355, 1120, 355)
          canvas.create_line(670, 380, 1120, 380)
          canvas.create_line(670, 405, 1120, 405)
          canvas.create_line(670, 430, 1120, 430)
          canvas.create_line(670, 455, 1120, 455)
          canvas.create_line(670, 480, 1120, 480)

          canvas.create_text(165, 320, text="PROD-0001", fill="black", font=('Helvetica 10'))
          canvas.create_text(400, 320, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          canvas.create_text(740, 320, text="1", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(884, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(884, 320, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(884, 320, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(884, 320, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(884, 320, text="$200.00", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 320, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1080, 320, text="$200.00", fill="black", font=('Helvetica 10'))

          canvas.create_text(820, 345, text="Subtotal", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 345, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 345, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1080, 345, text="$200.00", fill="black", font=('Helvetica 10'))

          canvas.create_text(820, 370, text="TAX1", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1085, 370, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1085, 370, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1085, 370, text="$18.00", fill="black", font=('Helvetica 10'))

          canvas.create_text(820, 395, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1085, 395, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1085, 395, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1085, 395, text="$20.00", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 420, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 420, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1080, 420, text="$238.00", fill="black", font=('Helvetica 10 bold'))
          canvas.create_text(820, 420, text="Invoice total", fill="black", font=('Helvetica 10 bold'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 445, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 445, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1080, 445, text="$100.00", fill="black", font=('Helvetica 10'))
          canvas.create_text(820, 445, text="Total Paid", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 465, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 465, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1080, 465, text="$138.00", fill="black", font=('Helvetica 10'))
          canvas.create_text(820, 465, text="Balance", fill="black", font=('Helvetica 10'))


          canvas.create_text(200, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 510, text="...", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 520, text="...", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 530, text="...", fill="black", font=('Helvetica 10'))

          canvas.create_text(600, 580, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          canvas.create_line(110, 600, 1120, 600)
          canvas.create_text(620, 620, text="Invoices are payable on receipt unless other terms, negotiated and noted on the invoice. By accepting delivery of goods, Buyer agrees to pay the invoiced cost for those goods,\nand agrees to be bound to thses contract terms. No acceptance may vary these terms unless specifically agreed in writing by Seller ", fill="black", font=('Helvetica 10'))
          canvas.create_text(196, 650, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          canvas.create_text(1090, 650, text="Page 1 of 1", fill="black", font=('Helvetica 10'))

#------------Professional 2 (logo on right side)------------- 

      elif menuvar == 'Professional 2 (logo on right side)':
          frame = Frame(seventhtab, width=1200, height=155)
          frame.pack(expand=True, fill=BOTH)
          frame.place(x=2,y=309)
          canvas=Canvas(frame, bg='grey', width=1200, height=155, scrollregion=(0,0,700,700))

          vertibar=Scrollbar(frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1200,height=155)

          canvas.config(yscrollcommand=vertibar.set)
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(10, 10, 1190, 690 , outline='yellow',fill='white')
          canvas.create_text(600, 45, text="Title text goes here...", fill="black", font=('Helvetica 10'))

          try:
            adv_image = Image.open("images/"+advdata1[13])
            adv_resize_image = adv_image.resize((200,75))
            adv_image = ImageTk.PhotoImage(adv_resize_image)

            adv_btlogo = Label(canvas,width=200,height=75,image = adv_image) 
            adv_window_image = canvas.create_window(850, 25, anchor="nw", window=adv_btlogo)
            adv_btlogo.photo = adv_image
          except:
            pass  

          # canvas.create_text(1000, 70, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

          canvas.create_text(829, 110, text="Invoice#", fill="black", font=('Helvetica 11'))
          canvas.create_text(841, 130, text="Invoice date", fill="black", font=('Helvetica 11'))
          canvas.create_text(830, 150, text="Due date", fill="black", font=('Helvetica 11'))
          canvas.create_text(820, 170, text="Terms", fill="black", font=('Helvetica 11'))
          canvas.create_text(834, 190, text="Order ref.#", fill="black", font=('Helvetica 11'))
          canvas.create_text(1047, 110, text="INV1/2022", fill="black", font=('Helvetica 11'))
          canvas.create_text(1050, 130, text="06-05-2022", fill="black", font=('Helvetica 11'))
          canvas.create_text(1050, 150, text="21-05-2022", fill="black", font=('Helvetica 11'))
          canvas.create_text(1040, 170, text="NET 15", fill="black", font=('Helvetica 11'))

          canvas.create_text(170, 65, text=""+comname.get(), fill="black", font=('Helvetica 12 '))
          # canvas.create_text(130, 200, text=""+caddent.get('1.0','end-1c'), fill="black", font=('Helvetica 10'))
          T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
          T_address.tag_configure('tag_name',justify='right')
          T_address.insert('1.0', advdata[2])
          T_address.tag_add('tag_name','1.0', 'end')
          T_address_window = canvas.create_window(10, 80, anchor="nw", window=T_address)
          #T_address_window = canvas.create_window(95, 80, anchor="nw", window=T_address)
          canvas.create_text(130, 170, text=""+comsalestax.get(), fill="black", font=('Helvetica 10'))
          # canvas.create_text(130, 125, text="Address line 3", fill="black", font=('Helvetica 10'))
          # canvas.create_text(130, 140, text="Address line 4", fill="black", font=('Helvetica 10'))
          # canvas.create_text(136, 155, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          # canvas.create_text(136, 170, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
          canvas.create_text(124, 190, text="Invoice", fill="black", font=('Helvetica 14 bold'))

          canvas.create_text(140, 215, text="Bill to", fill="black", font=('Helvetica 10 underline'))
          canvas.create_text(149, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
          canvas.create_text(191, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          canvas.create_text(200, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          canvas.create_text(160, 275, text="United States", fill="black", font=('Helvetica 10'))
          canvas.create_text(550, 215, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          canvas.create_text(556, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
          canvas.create_text(598, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          canvas.create_text(608, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          canvas.create_text(568, 275, text="United States", fill="black", font=('Helvetica 10'))

          tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_2.Treeview')
      
          tree.column("# 1", anchor=E, stretch=NO, width=150)
          tree.heading("# 1", text="ID/SKU")
          tree.column("# 2", anchor=E, stretch=NO, width=400)
          tree.heading("# 2", text="Product/Service - Description")
          tree.column("# 3", anchor=E, stretch=NO, width=150)
          tree.heading("# 3", text="Quantity")
          tree.column("# 4", anchor=E, stretch=NO, width=150)
          tree.heading("# 4", text="Unit Price")
          tree.column("# 5", anchor=E, stretch=NO, width=150)
          tree.heading("# 5", text="Price")
      
          window = canvas.create_window(120, 290, anchor="nw", window=tree)

          canvas.create_line(120, 330, 1120, 330 )
          canvas.create_line(120, 290, 120, 330 )
          canvas.create_line(270, 290, 270, 330 )
          canvas.create_line(670, 290, 670, 330 )
          canvas.create_line(820, 290, 820, 330 )
          canvas.create_line(970, 290, 970, 330 )
          canvas.create_line(1120, 290, 1120, 330 )
          canvas.create_line(670, 330, 670, 480)
          canvas.create_line(970, 330, 970, 480)
          canvas.create_line(1120, 330, 1120, 480)
          canvas.create_line(670, 355, 1120, 355)
          canvas.create_line(670, 380, 1120, 380)
          canvas.create_line(670, 405, 1120, 405)
          canvas.create_line(670, 430, 1120, 430)
          canvas.create_line(670, 455, 1120, 455)
          canvas.create_line(670, 480, 1120, 480)

          canvas.create_text(165, 320, text="PROD-0001", fill="black", font=('Helvetica 10'))
          canvas.create_text(400, 320, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          canvas.create_text(740, 320, text="1", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(884, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(884, 320, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(884, 320, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(884, 320, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1080, 320, text="$200.00", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 320, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 320, text="$200.00", fill="black", font=('Helvetica 10'))

          canvas.create_text(820, 345, text="Subtotal", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 345, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 345, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 345, text="$200.00", fill="black", font=('Helvetica 10'))

          canvas.create_text(820, 370, text="TAX1", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1085, 370, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1085, 370, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1089, 370, text="$18.00", fill="black", font=('Helvetica 10'))

          canvas.create_text(820, 395, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1085, 395, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1085, 395, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1089, 395, text="$20.00", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 420, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 420, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 420, text="$238.00", fill="black", font=('Helvetica 10 bold'))
          canvas.create_text(820, 420, text="Invoice total", fill="black", font=('Helvetica 10 bold'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 445, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 445, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 445, text="$100.00", fill="black", font=('Helvetica 10'))
          canvas.create_text(820, 445, text="Total Paid", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 465, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 465, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 465, text="$138.00", fill="black", font=('Helvetica 10'))
          canvas.create_text(820, 465, text="Balance", fill="black", font=('Helvetica 10'))

          canvas.create_text(200, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 510, text="...", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 520, text="...", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 530, text="...", fill="black", font=('Helvetica 10'))

          canvas.create_text(600, 580, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          canvas.create_line(110, 600, 1120, 600)
          canvas.create_text(620, 620, text="Invoices are payable on receipt unless other terms, negotiated and noted on the invoice. By accepting delivery of goods, Buyer agrees to pay the invoiced cost for those goods,\nand agrees to be bound to thses contract terms. No acceptance may vary these terms unless specifically agreed in writing by Seller ", fill="black", font=('Helvetica 10'))
          canvas.create_text(196, 650, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          canvas.create_text(1090, 650, text="Page 1 of 1", fill="black", font=('Helvetica 10'))

#------------Simplified 1 (logo on left side)------------- 

      elif menuvar == 'Simplified 1 (logo on left side)':
          frame = Frame(seventhtab, width=1200, height=155)
          frame.pack(expand=True, fill=BOTH)
          frame.place(x=2,y=309)
          canvas=Canvas(frame, bg='grey', width=1200, height=155, scrollregion=(0,0,700,700))

          vertibar=Scrollbar(frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1200,height=155)

          canvas.config(yscrollcommand=vertibar.set)
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(10, 10, 1190, 690 , outline='yellow',fill='white')
          canvas.create_text(600, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          try:
            adv_image = Image.open("images/"+advdata1[13])
            adv_resize_image = adv_image.resize((200,75))
            adv_image = ImageTk.PhotoImage(adv_resize_image)

            adv_btlogo = Label(canvas,width=200,height=75,image = adv_image) 
            adv_window_image = canvas.create_window(150, 25, anchor="nw", window=adv_btlogo)
            adv_btlogo.photo = adv_image
          except:
            pass  
          #canvas.create_text(250, 70, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

          canvas.create_text(130, 120, text="Invoice#", fill="black", font=('Helvetica 11'))
          canvas.create_text(141, 140, text="Invoice date", fill="black", font=('Helvetica 11'))
          canvas.create_text(130, 160, text="Due date", fill="black", font=('Helvetica 11'))
          canvas.create_text(120, 180, text="Terms", fill="black", font=('Helvetica 11'))
          canvas.create_text(134, 200, text="Order ref.#", fill="black", font=('Helvetica 11'))
          canvas.create_text(347, 120, text="INV1/2022", fill="black", font=('Helvetica 11'))
          canvas.create_text(350, 140, text="06-05-2022", fill="black", font=('Helvetica 11'))
          canvas.create_text(350, 160, text="21-05-2022", fill="black", font=('Helvetica 11'))
          canvas.create_text(340, 180, text="NET 15", fill="black", font=('Helvetica 11'))

          canvas.create_text(1050, 65, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
          # canvas.create_text(1080, 200, text=""+caddent.get('1.0','end-1c'), fill="black", font=('Helvetica 10'))
          T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
          T_address.tag_configure('tag_name',justify='right')
          T_address.insert('1.0', advdata[2])
          T_address.tag_add('tag_name','1.0', 'end')
          T_address_window = canvas.create_window(850, 80, anchor="nw", window=T_address)
          canvas.create_text(1050, 170, text=""+comsalestax.get(), fill="black", font=('Helvetica 10'))
          # canvas.create_text(1085, 125, text="Address line 3", fill="black", font=('Helvetica 10'))
          # canvas.create_text(1085, 140, text="Address line 4", fill="black", font=('Helvetica 10'))
          # canvas.create_text(1080, 155, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          # canvas.create_text(1080, 170, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
          canvas.create_text(1050, 190, text="Invoice", fill="black", font=('Helvetica 14 bold'))

          canvas.create_text(140, 215, text="Bill to", fill="black", font=('Helvetica 10 underline'))
          canvas.create_text(149, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
          canvas.create_text(191, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          canvas.create_text(200, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          canvas.create_text(160, 275, text="United States", fill="black", font=('Helvetica 10'))
          canvas.create_text(550, 215, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          canvas.create_text(556, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
          canvas.create_text(598, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          canvas.create_text(608, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          canvas.create_text(568, 275, text="United States", fill="black", font=('Helvetica 10'))

          s = ttk.Style()
          s.configure('mystyle_2.Treeview.Heading', background='orange',State='DISABLE')

          tree=ttk.Treeview(canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle_2.Treeview')
      
          tree.column("# 1", anchor=E, stretch=NO, width=700)
          tree.heading("# 1", text="Product/Service - Description")
          tree.column("# 2", anchor=E, stretch=NO, width=150)
          tree.heading("# 2", text="Quantity")
          tree.column("# 3", anchor=E, stretch=NO, width=150)
          tree.heading("# 3", text="Price")
            
          window = canvas.create_window(120, 290, anchor="nw", window=tree)

          canvas.create_line(120, 330, 1120, 330 )
          canvas.create_line(120, 290, 120, 330 )
          canvas.create_line(820, 290, 820, 330 )
          canvas.create_line(970, 290, 970, 330 )
          canvas.create_line(1120, 290, 1120, 330 )
          canvas.create_line(670, 330, 670, 480)
          canvas.create_line(970, 330, 970, 480)
          canvas.create_line(1120, 330, 1120, 480)
          canvas.create_line(670, 355, 1120, 355)
          canvas.create_line(670, 380, 1120, 380)
          canvas.create_line(670, 405, 1120, 405)
          canvas.create_line(670, 430, 1120, 430)
          canvas.create_line(670, 455, 1120, 455)
          canvas.create_line(670, 480, 1120, 480)

          canvas.create_text(250, 320, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          canvas.create_text(900, 320, text="1", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 320, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

          canvas.create_text(820, 345, text="Subtotal", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 345, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 345, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 345, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

          canvas.create_text(820, 370, text="TAX1", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1085, 370, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1085, 370, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1089, 370, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

          canvas.create_text(820, 395, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1085, 395, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1085, 395, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1089, 395, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 420, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 420, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 420, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
          canvas.create_text(820, 420, text="Invoice total", fill="black", font=('Helvetica 10 bold'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 445, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 445, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 445, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          canvas.create_text(820, 445, text="Total Paid", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 465, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 465, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 465, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          canvas.create_text(820, 465, text="Balance", fill="black", font=('Helvetica 10'))

          canvas.create_text(200, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 510, text="...", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 520, text="...", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 530, text="...", fill="black", font=('Helvetica 10'))

          canvas.create_text(600, 580, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          canvas.create_line(110, 600, 1120, 600)
          canvas.create_text(620, 620, text="Invoices are payable on receipt unless other terms, negotiated and noted on the invoice. By accepting delivery of goods, Buyer agrees to pay the invoiced cost for those goods,\nand agrees to be bound to thses contract terms. No acceptance may vary these terms unless specifically agreed in writing by Seller ", fill="black", font=('Helvetica 10'))
          canvas.create_text(196, 650, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          canvas.create_text(1090, 650, text="Page 1 of 1", fill="black", font=('Helvetica 10'))


#------------Simplified 2 (logo on right side)-------------

      elif menuvar == 'Simplified 2 (logo on right side)':
          frame = Frame(seventhtab, width=1200, height=155)
          frame.pack(expand=True, fill=BOTH)
          frame.place(x=2,y=309)
          canvas=Canvas(frame, bg='grey', width=1200, height=155, scrollregion=(0,0,700,700))

          vertibar=Scrollbar(frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1200,height=155)

          canvas.config(yscrollcommand=vertibar.set)
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(10, 10, 1190, 690 , outline='yellow',fill='white')
          canvas.create_text(600, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          try:
            adv_image = Image.open("images/"+advdata1[13])
            adv_resize_image = adv_image.resize((200,75))
            adv_image = ImageTk.PhotoImage(adv_resize_image)

            adv_btlogo = Label(canvas,width=200,height=75,image = adv_image) 
            adv_window_image = canvas.create_window(850, 25, anchor="nw", window=adv_btlogo)
            adv_btlogo.photo = adv_image
          except:
            pass  

          # canvas.create_text(1000, 70, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

          canvas.create_text(829, 120, text="Invoice#", fill="black", font=('Helvetica 11'))
          canvas.create_text(841, 140, text="Invoice date", fill="black", font=('Helvetica 11'))
          canvas.create_text(830, 160, text="Due date", fill="black", font=('Helvetica 11'))
          canvas.create_text(820, 180, text="Terms", fill="black", font=('Helvetica 11'))
          canvas.create_text(834, 200, text="Order ref.#", fill="black", font=('Helvetica 11'))
          canvas.create_text(1047, 120, text="INV1/2022", fill="black", font=('Helvetica 11'))
          canvas.create_text(1050, 140, text="06-05-2022", fill="black", font=('Helvetica 11'))
          canvas.create_text(1050, 160, text="21-05-2022", fill="black", font=('Helvetica 11'))
          canvas.create_text(1040, 180, text="NET 15", fill="black", font=('Helvetica 11'))

          canvas.create_text(170, 65, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
          # canvas.create_text(130, 200, text=""+caddent.get('1.0','end-1c'), fill="black", font=('Helvetica 10'))
          T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
          T_address.tag_configure('tag_name',justify='right')
          T_address.insert('1.0', advdata[2])
          T_address.tag_add('tag_name','1.0', 'end')
          T_address_window = canvas.create_window(10, 80, anchor="nw", window=T_address)
          canvas.create_text(130, 170, text=""+comsalestax.get(), fill="black", font=('Helvetica 10'))
          # canvas.create_text(130, 125, text="Address line 3", fill="black", font=('Helvetica 10'))
          # canvas.create_text(130, 140, text="Address line 4", fill="black", font=('Helvetica 10'))
          # canvas.create_text(136, 155, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          # canvas.create_text(136, 170, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
          canvas.create_text(124, 190, text="Invoice", fill="black", font=('Helvetica 14 bold'))

          canvas.create_text(140, 215, text="Bill to", fill="black", font=('Helvetica 10 underline'))
          canvas.create_text(149, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
          canvas.create_text(191, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          canvas.create_text(200, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          canvas.create_text(160, 275, text="United States", fill="black", font=('Helvetica 10'))
          canvas.create_text(550, 215, text="Ship to", fill="black", font=('Helvetica 10 underline'))
          canvas.create_text(556, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
          canvas.create_text(598, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          canvas.create_text(608, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          canvas.create_text(568, 275, text="United States", fill="black", font=('Helvetica 10'))

          s = ttk.Style()
          s.configure('mystyle_2.Treeview.Heading', background='orange',State='DISABLE')

          tree=ttk.Treeview(canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle_2.Treeview')
              
          tree.column("# 1", anchor=E, stretch=NO, width=700)
          tree.heading("# 1", text="Product/Service - Description")
          tree.column("# 2", anchor=E, stretch=NO, width=150)
          tree.heading("# 2", text="Quantity")
          tree.column("# 3", anchor=E, stretch=NO, width=150)
          tree.heading("# 3", text="Price")
        
          window = canvas.create_window(120, 290, anchor="nw", window=tree)

          canvas.create_line(120, 330, 1120, 330 )
          canvas.create_line(120, 290, 120, 330 )
          canvas.create_line(820, 290, 820, 330 )
          canvas.create_line(970, 290, 970, 330 )
          canvas.create_line(1120, 290, 1120, 330 )
          canvas.create_line(670, 330, 670, 480)
          canvas.create_line(970, 330, 970, 480)
          canvas.create_line(1120, 330, 1120, 480)
          canvas.create_line(670, 355, 1120, 355)
          canvas.create_line(670, 380, 1120, 380)
          canvas.create_line(670, 405, 1120, 405)
          canvas.create_line(670, 430, 1120, 430)
          canvas.create_line(670, 455, 1120, 455)
          canvas.create_line(670, 480, 1120, 480)

          canvas.create_text(250, 320, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          canvas.create_text(900, 320, text="1", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 320, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

          canvas.create_text(820, 345, text="Subtotal", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 345, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 345, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 345, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

          canvas.create_text(820, 370, text="TAX1", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1085, 370, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1085, 370, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1089, 370, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

          canvas.create_text(820, 395, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1085, 395, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1085, 395, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1089, 395, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 420, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 420, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 420, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
          canvas.create_text(820, 420, text="Invoice total", fill="black", font=('Helvetica 10 bold'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 445, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 445, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 445, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          canvas.create_text(820, 445, text="Total Paid", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 465, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 465, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1084, 465, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          canvas.create_text(820, 465, text="Balance", fill="black", font=('Helvetica 10'))

          canvas.create_text(200, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 510, text="...", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 520, text="...", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 530, text="...", fill="black", font=('Helvetica 10'))

          canvas.create_text(600, 580, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          canvas.create_line(110, 600, 1120, 600)
          canvas.create_text(620, 620, text="Invoices are payable on receipt unless other terms, negotiated and noted on the invoice. By accepting delivery of goods, Buyer agrees to pay the invoiced cost for those goods,\nand agrees to be bound to thses contract terms. No acceptance may vary these terms unless specifically agreed in writing by Seller ", fill="black", font=('Helvetica 10'))
          canvas.create_text(196, 650, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          canvas.create_text(1090, 650, text="Page 1 of 1", fill="black", font=('Helvetica 10'))

  #------------Business Classic------------- 

      elif menuvar == 'Business Classic':
          frame = Frame(seventhtab, width=1200, height=155)
          frame.pack(expand=True, fill=BOTH)
          frame.place(x=2,y=309)
          canvas=Canvas(frame, bg='grey', width=1200, height=155, scrollregion=(0,0,700,700))

          vertibar=Scrollbar(frame, orient=VERTICAL)
          vertibar.pack(side=RIGHT,fill=Y)
          vertibar.config(command=canvas.yview)
          canvas.config(width=1200,height=155)

          canvas.config(yscrollcommand=vertibar.set)
          canvas.pack(expand=True,side=LEFT,fill=BOTH)
          canvas.create_rectangle(10, 10, 1190, 690 , outline='yellow',fill='white')
          canvas.create_text(600, 45, text="Title text goes here...", fill="black", font=('Helvetica 10'))
          canvas.create_line(100, 60, 1120, 60, fill="orange")
          #canvas.create_line(1000, 60, 600, 60, fill="grey")

          try:
            adv_image = Image.open("images/"+advdata1[13])
            adv_resize_image = adv_image.resize((200,100))
            adv_image = ImageTk.PhotoImage(adv_resize_image)

            adv_btlogo = Label(canvas,width=200,height=100,image = adv_image) 
            adv_window_image = canvas.create_window(140, 100, anchor="nw", window=adv_btlogo)
            adv_btlogo.photo = adv_image
          except:
            pass  


          # canvas.create_text(250, 155, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

          canvas.create_text(560, 85, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
          # canvas.create_text(535, 200, text=""+caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'))
          T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
          T_address.tag_configure('tag_name',justify='right')
          T_address.insert('1.0', advdata[2])
          T_address.tag_add('tag_name','1.0', 'end')
          T_address_window = canvas.create_window(350, 100, anchor="nw", window=T_address)
          # adv_btlabel = Label(canvas,width=20,height=10,text=""+caddent.get('1.0', 'end-1c')) 
          # adv_window_label = canvas.create_window(530, 110, anchor="nw", window=adv_btlabel)
          canvas.create_text(530, 190, text=""+comsalestax.get(), fill="black", font=('Helvetica 10'))
          # canvas.create_text(530, 140, text="Address line 3", fill="black", font=('Helvetica 10'))
          # canvas.create_text(530, 155, text="Address line 4", fill="black", font=('Helvetica 10'))
          # canvas.create_text(536, 170, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
          # canvas.create_text(536, 190, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
          canvas.create_text(524, 210, text="Invoice", fill="black", font=('Helvetica 14 bold'))

          canvas.create_text(749, 95, text="John Doe", fill="black", font=('Helvetica 10 '))
          canvas.create_text(791, 110, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
          canvas.create_text(800, 125, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
          canvas.create_text(760, 140, text="United States", fill="black", font=('Helvetica 10'))

          canvas.create_text(745, 160, text="Invoice", fill="black", font=('Helvetica 11'))
          canvas.create_text(760, 180, text="Invoice date", fill="black", font=('Helvetica 11'))
          canvas.create_text(750, 200, text="Due date", fill="black", font=('Helvetica 11'))

          canvas.create_text(947, 160, text="INV1/2022", fill="black", font=('Helvetica 11'))
          canvas.create_text(950, 180, text="06-05-2022", fill="black", font=('Helvetica 11'))
          canvas.create_text(950, 200, text="21-05-2022", fill="black", font=('Helvetica 11'))
          s = ttk.Style()
          s.configure('mystyle_2.Treeview.Heading', background='orange',State='DISABLE')

          tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_2.Treeview')
        
          tree.column("# 1", anchor=E, stretch=NO, width=150)
          tree.heading("# 1", text="Product/Service")
          tree.column("# 2", anchor=E, stretch=NO, width=400)
          tree.heading("# 2", text="Description")
          tree.column("# 3", anchor=E, stretch=NO, width=150)
          tree.heading("# 3", text="Unit Price")
          tree.column("# 4", anchor=E, stretch=NO, width=150)
          tree.heading("# 4", text="Quantity")
          tree.column("# 5", anchor=E, stretch=NO, width=150)
          tree.heading("# 5", text="Price")
              
          window = canvas.create_window(120, 230, anchor="nw", window=tree)

          canvas.create_line(120, 270, 1120, 270 )
          canvas.create_line(120, 230, 120, 270 )
          canvas.create_line(270, 230, 270, 270 )
          canvas.create_line(670, 230, 670, 270 )
          canvas.create_line(820, 230, 820, 270 )
          canvas.create_line(970, 230, 970, 270 )
          canvas.create_line(1120, 230, 1120, 270)
          canvas.create_line(1120, 270, 1120, 420)
          canvas.create_line(670, 295, 1120, 295)
          canvas.create_line(670, 320, 1120, 320)
          canvas.create_line(670, 345, 1120, 345)
          canvas.create_line(670, 370, 1120, 370)
          canvas.create_line(670, 395, 1120, 395)
          canvas.create_line(670, 420, 1120, 420)

          canvas.create_text(165, 260, text="PROD-0001", fill="black", font=('Helvetica 10'))
          canvas.create_text(400, 260, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(734, 260, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(734, 260, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(734, 260, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(734, 260, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(734, 260, text="$200.00", fill="black", font=('Helvetica 10'))
          canvas.create_text(890, 260, text="1", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 260, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 260, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 260, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 260, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          # canvas.create_text(1080, 260, text="$200.00", fill="black", font=('Helvetica 10'))

          canvas.create_text(697, 285, text="Subtotal", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 285, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 285, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 285, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 285, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1080, 285, text="$200.00", fill="black", font=('Helvetica 10'))

          canvas.create_text(692, 310, text="TAX1", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1085, 310, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1085, 310, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1085, 310, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1085, 310, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1085, 310, text="$18.00", fill="black", font=('Helvetica 10'))

          canvas.create_text(737, 335, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1085, 335, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1085, 335, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1085, 335, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1085, 335, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1085, 335, text="$20.00", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 360, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 360, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 360, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 360, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1080, 360, text="$238.00", fill="black", font=('Helvetica 10 bold'))
          canvas.create_text(715, 360, text="Invoice total", fill="black", font=('Helvetica 10 bold'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 385, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 385, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 385, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 385, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1080, 385, text="100.00", fill="black", font=('Helvetica 10'))
          canvas.create_text(705, 385, text="Total Paid", fill="black", font=('Helvetica 10'))
          if comcursignpla.get() == "before amount":
            canvas.create_text(1080, 410, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount":
            canvas.create_text(1080, 410, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "before amount with space":
            canvas.create_text(1080, 410, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
          elif comcursignpla.get() == "after amount with space":
            canvas.create_text(1080, 410, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
          else:
            pass
          #canvas.create_text(1080, 410, text="$138.00", fill="black", font=('Helvetica 10'))
          canvas.create_text(700, 410, text="Balance", fill="black", font=('Helvetica 10'))

          canvas.create_line(100, 480, 1120, 480, fill="orange")
          canvas.create_text(200, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 510, text="...", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 520, text="...", fill="black", font=('Helvetica 10'))
          canvas.create_text(106, 530, text="...", fill="black", font=('Helvetica 10'))

          canvas.create_text(600, 580, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
          canvas.create_line(100, 600, 1120, 600, fill="orange")
          canvas.create_text(620, 620, text="Invoices are payable on receipt unless other terms, negotiated and noted on the invoice. By accepting delivery of goods, Buyer agrees to pay the invoiced cost for those goods,\nand agrees to be bound to thses contract terms. No acceptance may vary these terms unless specifically agreed in writing by Seller ", fill="black", font=('Helvetica 10'))
          canvas.create_text(196, 650, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
          canvas.create_text(1090, 650, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
      else:
          pass

  adv_win_menu8 = StringVar()
  adv_winstyle8 = ttk.Combobox(seventhtab,textvariable=adv_win_menu8)
  adv_winstyle8.bind("<<ComboboxSelected>>", adv_maindropmenu)
  adv_winstyle8["values"] = ("Professional 1 (logo on left side)","Professional 2 (logo on right side)","Simplified 1 (logo on left side)","Simplified 2 (logo on right side)","Business Classic")
  if not advdata:
    adv_winstyle8.current(0)
    frame = Frame(seventhtab, width=1200, height=155)
    frame.pack(expand=True, fill=BOTH)
    frame.place(x=2,y=309)
    canvas=Canvas(frame, bg='grey', width=1200, height=155, scrollregion=(0,0,700,700))

    vertibar=Scrollbar(frame, orient=VERTICAL)
    vertibar.pack(side=RIGHT,fill=Y)
    vertibar.config(command=canvas.yview)
    canvas.config(width=1200,height=155)

    canvas.config(yscrollcommand=vertibar.set)
    canvas.pack(expand=True,side=LEFT,fill=BOTH)
    canvas.create_rectangle(10, 10, 1190, 690 , outline='yellow',fill='white')

    canvas.create_text(600, 45, text="Title text goes here...", fill="black", font=('Helvetica 10'))

    canvas.create_text(250, 70, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

    canvas.create_text(130, 120, text="Invoice#", fill="black", font=('Helvetica 11'))
    canvas.create_text(141, 140, text="Invoice date", fill="black", font=('Helvetica 11'))
    canvas.create_text(130, 160, text="Due date", fill="black", font=('Helvetica 11'))
    canvas.create_text(120, 180, text="Terms", fill="black", font=('Helvetica 11'))
    canvas.create_text(134, 200, text="Order ref.#", fill="black", font=('Helvetica 11'))
    canvas.create_text(347, 120, text="INV1/2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 140, text="03-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 160, text="18-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(340, 180, text="NET 15", fill="black", font=('Helvetica 11'))

    canvas.create_text(1050, 65, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
    # canvas.create_text(1080, 200, text=""+caddent.get('1.0','end-1c'), fill="black", font=('Helvetica 10'))
    # T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
    # T_address.tag_configure('tag_name',justify='right')
    # T_address.insert('1.0', advdata[2])
    # T_address.tag_add('tag_name','1.0', 'end')
    # T_address_window = canvas.create_window(850, 80, anchor="nw", window=T_address)
    canvas.create_text(1050, 170, text=""+comsalestax.get(), fill="black", font=('Helvetica 10'))
    # canvas.create_text(1085, 125, text="Address line 3", fill="black", font=('Helvetica 10'))
    # canvas.create_text(1085, 140, text="Address line 4", fill="black", font=('Helvetica 10'))
    # canvas.create_text(1080, 155, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
    # canvas.create_text(1080, 170, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
    canvas.create_text(1050, 190, text="Invoice", fill="black", font=('Helvetica 14 bold'))
    canvas.create_text(1050, 210, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))

    canvas.create_text(140, 215, text="Bill to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(149, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(191, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(200, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(160, 275, text="United States", fill="black", font=('Helvetica 10'))
    canvas.create_text(550, 215, text="Ship to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(556, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(598, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(608, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(568, 275, text="United States", fill="black", font=('Helvetica 10'))

    s = ttk.Style()
    s.configure('mystyle_2.Treeview.Heading', background='orange',State='DISABLE')
        
    tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_2.Treeview')
      
    tree.column("# 1", anchor=E, stretch=NO, width=150)
    tree.heading("# 1", text="ID/SKU")
    tree.column("# 2", anchor=E, stretch=NO, width=400)
    tree.heading("# 2", text="Product/Service - Description")
    tree.column("# 3", anchor=E, stretch=NO, width=150)
    tree.heading("# 3", text="Quantity")
    tree.column("# 4", anchor=E, stretch=NO, width=150)
    tree.heading("# 4", text="Unit Price")
    tree.column("# 5", anchor=E, stretch=NO, width=150)
    tree.heading("# 5", text="Price")
      
    window = canvas.create_window(120, 290, anchor="nw", window=tree)

    canvas.create_line(120, 330, 1120, 330 )
    canvas.create_line(120, 290, 120, 330 )
    canvas.create_line(270, 290, 270, 330 )
    canvas.create_line(670, 290, 670, 330 )
    canvas.create_line(820, 290, 820, 330 )
    canvas.create_line(970, 290, 970, 330 )
    canvas.create_line(1120, 290, 1120, 330 )
    canvas.create_line(670, 330, 670, 480)
    canvas.create_line(970, 330, 970, 480)
    canvas.create_line(1120, 330, 1120, 480)
    canvas.create_line(670, 355, 1120, 355)
    canvas.create_line(670, 380, 1120, 380)
    canvas.create_line(670, 405, 1120, 405)
    canvas.create_line(670, 430, 1120, 430)
    canvas.create_line(670, 455, 1120, 455)
    canvas.create_line(670, 480, 1120, 480)

    canvas.create_text(165, 320, text="PROD-0001", fill="black", font=('Helvetica 10'))
    canvas.create_text(400, 320, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
    canvas.create_text(740, 320, text="1", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(884, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(884, 320, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(884, 320, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(884, 320, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(884, 320, text="$200.00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 320, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 320, text="$200.00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 345, text="Subtotal", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 345, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 345, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 345, text="$200.00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 370, text="TAX1", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1085, 370, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1085, 370, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1085, 370, text="$18.00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 395, text="Shipping and handling", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1085, 395, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1085, 395, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1085, 395, text="$20.00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 420, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 420, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 420, text="$238.00", fill="black", font=('Helvetica 10 bold'))
    canvas.create_text(820, 420, text="Invoice total", fill="black", font=('Helvetica 10 bold'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 445, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 445, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 445, text="$100.00", fill="black", font=('Helvetica 10'))
    canvas.create_text(820, 445, text="Total Paid", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 465, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 465, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 465, text="$138.00", fill="black", font=('Helvetica 10'))
    canvas.create_text(820, 465, text="Balance", fill="black", font=('Helvetica 10'))


    canvas.create_text(200, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 510, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 520, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 530, text="...", fill="black", font=('Helvetica 10'))

    canvas.create_text(600, 580, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
    canvas.create_line(110, 600, 1120, 600)
    canvas.create_text(620, 620, text="Invoices are payable on receipt unless other terms, negotiated and noted on the invoice. By accepting delivery of goods, Buyer agrees to pay the invoiced cost for those goods,\nand agrees to be bound to thses contract terms. No acceptance may vary these terms unless specifically agreed in writing by Seller ", fill="black", font=('Helvetica 10'))
    canvas.create_text(196, 650, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_text(1090, 650, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
  elif advdata[32] == 'Professional 1 (logo on left side)':
    adv_winstyle8.insert(0, advdata[40])
    frame = Frame(seventhtab, width=1200, height=155)
    frame.pack(expand=True, fill=BOTH)
    frame.place(x=2,y=309)
    canvas=Canvas(frame, bg='grey', width=1200, height=155, scrollregion=(0,0,700,700))

    vertibar=Scrollbar(frame, orient=VERTICAL)
    vertibar.pack(side=RIGHT,fill=Y)
    vertibar.config(command=canvas.yview)
    canvas.config(width=1200,height=155)

    canvas.config(yscrollcommand=vertibar.set)
    canvas.pack(expand=True,side=LEFT,fill=BOTH)
    canvas.create_rectangle(10, 10, 1190, 690 , outline='yellow',fill='white')

    canvas.create_text(600, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))

    try:
      adv_image = Image.open("images/"+advdata[13])
      adv_resize_image = adv_image.resize((200,75))
      adv_image = ImageTk.PhotoImage(adv_resize_image)

      adv_btlogo = Label(canvas,width=200,height=75,image = adv_image) 
      adv_window_image = canvas.create_window(150, 30, anchor="nw", window=adv_btlogo)
      adv_btlogo.photo = adv_image
    except:
      pass  

    canvas.create_text(130, 120, text="Invoice#", fill="black", font=('Helvetica 11'))
    canvas.create_text(141, 140, text="Invoice date", fill="black", font=('Helvetica 11'))
    canvas.create_text(130, 160, text="Due date", fill="black", font=('Helvetica 11'))
    canvas.create_text(120, 180, text="Terms", fill="black", font=('Helvetica 11'))
    canvas.create_text(134, 200, text="Order ref.#", fill="black", font=('Helvetica 11'))
    canvas.create_text(347, 120, text="INV1/2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 140, text="03-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 160, text="18-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(340, 180, text="NET 15", fill="black", font=('Helvetica 11'))

    canvas.create_text(1050, 65, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
    # canvas.create_text(1080, 200, text=""+caddent.get('1.0','end-1c'), fill="black", font=('Helvetica 10'))
    T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
    T_address.tag_configure('tag_name',justify='right')
    T_address.insert('1.0', advdata[2])
    T_address.tag_add('tag_name','1.0', 'end')
    T_address_window = canvas.create_window(850, 80, anchor="nw", window=T_address)
        
    canvas.create_text(1050, 170, text=""+comsalestax.get(), fill="black", font=('Helvetica 10'))
    # canvas.create_text(1085, 125, text="Address line 3", fill="black", font=('Helvetica 10'))
    # canvas.create_text(1085, 140, text="Address line 4", fill="black", font=('Helvetica 10'))
    # canvas.create_text(1080, 155, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
    # canvas.create_text(1080, 170, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
    canvas.create_text(1050, 190, text="Invoice", fill="black", font=('Helvetica 14 bold'))
    canvas.create_text(1050, 210, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))

    canvas.create_text(140, 215, text="Bill to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(149, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(191, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(200, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(160, 275, text="United States", fill="black", font=('Helvetica 10'))
    canvas.create_text(550, 215, text="Ship to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(556, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(598, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(608, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(568, 275, text="United States", fill="black", font=('Helvetica 10'))

    s = ttk.Style()
    s.configure('mystyle_2.Treeview.Heading', background='orange',State='DISABLE')
        
    tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_2.Treeview')
      
    tree.column("# 1", anchor=E, stretch=NO, width=150)
    tree.heading("# 1", text="ID/SKU")
    tree.column("# 2", anchor=E, stretch=NO, width=400)
    tree.heading("# 2", text="Product/Service - Description")
    tree.column("# 3", anchor=E, stretch=NO, width=150)
    tree.heading("# 3", text="Quantity")
    tree.column("# 4", anchor=E, stretch=NO, width=150)
    tree.heading("# 4", text="Unit Price")
    tree.column("# 5", anchor=E, stretch=NO, width=150)
    tree.heading("# 5", text="Price")
      
    window = canvas.create_window(120, 290, anchor="nw", window=tree)

    canvas.create_line(120, 330, 1120, 330 )
    canvas.create_line(120, 290, 120, 330 )
    canvas.create_line(270, 290, 270, 330 )
    canvas.create_line(670, 290, 670, 330 )
    canvas.create_line(820, 290, 820, 330 )
    canvas.create_line(970, 290, 970, 330 )
    canvas.create_line(1120, 290, 1120, 330 )
    canvas.create_line(670, 330, 670, 480)
    canvas.create_line(970, 330, 970, 480)
    canvas.create_line(1120, 330, 1120, 480)
    canvas.create_line(670, 355, 1120, 355)
    canvas.create_line(670, 380, 1120, 380)
    canvas.create_line(670, 405, 1120, 405)
    canvas.create_line(670, 430, 1120, 430)
    canvas.create_line(670, 455, 1120, 455)
    canvas.create_line(670, 480, 1120, 480)

    canvas.create_text(165, 320, text="PROD-0001", fill="black", font=('Helvetica 10'))
    canvas.create_text(400, 320, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
    canvas.create_text(740, 320, text="1", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(884, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(884, 320, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(884, 320, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(884, 320, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(884, 320, text="$200.00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 320, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 320, text="$200.00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 345, text="Subtotal", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 345, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 345, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 345, text="$200.00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 370, text="TAX1", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1085, 370, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1085, 370, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1085, 370, text="$18.00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 395, text="Shipping and handling", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1085, 395, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1085, 395, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1085, 395, text="$20.00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 420, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 420, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 420, text="$238.00", fill="black", font=('Helvetica 10 bold'))
    canvas.create_text(820, 420, text="Invoice total", fill="black", font=('Helvetica 10 bold'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 445, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 445, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 445, text="$100.00", fill="black", font=('Helvetica 10'))
    canvas.create_text(820, 445, text="Total Paid", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 465, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 465, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 465, text="$138.00", fill="black", font=('Helvetica 10'))
    canvas.create_text(820, 465, text="Balance", fill="black", font=('Helvetica 10'))


    canvas.create_text(200, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 510, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 520, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 530, text="...", fill="black", font=('Helvetica 10'))

    canvas.create_text(600, 580, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
    canvas.create_line(110, 600, 1120, 600)
    canvas.create_text(620, 620, text="Invoices are payable on receipt unless other terms, negotiated and noted on the invoice. By accepting delivery of goods, Buyer agrees to pay the invoiced cost for those goods,\nand agrees to be bound to thses contract terms. No acceptance may vary these terms unless specifically agreed in writing by Seller ", fill="black", font=('Helvetica 10'))
    canvas.create_text(196, 650, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_text(1090, 650, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
  elif advdata[32] == 'Professional 2 (logo on right side)':
    adv_winstyle8.insert(0, advdata[40])
    frame = Frame(seventhtab, width=1200, height=155)
    frame.pack(expand=True, fill=BOTH)
    frame.place(x=2,y=309)
    canvas=Canvas(frame, bg='grey', width=1200, height=155, scrollregion=(0,0,700,700))

    vertibar=Scrollbar(frame, orient=VERTICAL)
    vertibar.pack(side=RIGHT,fill=Y)
    vertibar.config(command=canvas.yview)
    canvas.config(width=1200,height=155)

    canvas.config(yscrollcommand=vertibar.set)
    canvas.pack(expand=True,side=LEFT,fill=BOTH)
    canvas.create_rectangle(10, 10, 1190, 690 , outline='yellow',fill='white')
    canvas.create_text(600, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
    try:
      adv_image = Image.open("images/"+advdata[13])
      adv_resize_image = adv_image.resize((200,75))
      adv_image = ImageTk.PhotoImage(adv_resize_image)

      adv_btlogo = Label(canvas,width=200,height=75,image = adv_image) 
      adv_window_image = canvas.create_window(850, 25, anchor="nw", window=adv_btlogo)
      adv_btlogo.photo = adv_image
    except:
      pass  
    #canvas.create_text(1000, 70, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

    canvas.create_text(829, 110, text="Invoice#", fill="black", font=('Helvetica 11'))
    canvas.create_text(841, 130, text="Invoice date", fill="black", font=('Helvetica 11'))
    canvas.create_text(830, 150, text="Due date", fill="black", font=('Helvetica 11'))
    canvas.create_text(820, 170, text="Terms", fill="black", font=('Helvetica 11'))
    canvas.create_text(834, 190, text="Order ref.#", fill="black", font=('Helvetica 11'))
    canvas.create_text(1047, 110, text="INV1/2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(1050, 130, text="06-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(1050, 150, text="21-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(1040, 170, text="NET 15", fill="black", font=('Helvetica 11'))

    canvas.create_text(170, 65, text=""+comname.get(), fill="black", font=('Helvetica 12 '))
    # canvas.create_text(130, 200, text=""+caddent.get('1.0','end-1c'), fill="black", font=('Helvetica 10'))
    T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
    T_address.tag_configure('tag_name',justify='right')
    T_address.insert('1.0', advdata[2])
    T_address.tag_add('tag_name','1.0', 'end')
    T_address_window = canvas.create_window(10, 80, anchor="nw", window=T_address)
    canvas.create_text(125, 170, text=""+comsalestax.get(), fill="black", font=('Helvetica 10'))
    # canvas.create_text(130, 125, text="Address line 3", fill="black", font=('Helvetica 10'))
    # canvas.create_text(130, 140, text="Address line 4", fill="black", font=('Helvetica 10'))
    # canvas.create_text(136, 155, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
    # canvas.create_text(136, 170, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
    canvas.create_text(124, 190, text="Invoice", fill="black", font=('Helvetica 14 bold'))

    canvas.create_text(140, 215, text="Bill to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(149, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(191, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(200, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(160, 275, text="United States", fill="black", font=('Helvetica 10'))
    canvas.create_text(550, 215, text="Ship to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(556, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(598, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(608, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(568, 275, text="United States", fill="black", font=('Helvetica 10'))
    
    s = ttk.Style()
    s.configure('mystyle_2.Treeview.Heading', background='orange',State='DISABLE')

    tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_2.Treeview')
      
    tree.column("# 1", anchor=E, stretch=NO, width=150)
    tree.heading("# 1", text="ID/SKU")
    tree.column("# 2", anchor=E, stretch=NO, width=400)
    tree.heading("# 2", text="Product/Service - Description")
    tree.column("# 3", anchor=E, stretch=NO, width=150)
    tree.heading("# 3", text="Quantity")
    tree.column("# 4", anchor=E, stretch=NO, width=150)
    tree.heading("# 4", text="Unit Price")
    tree.column("# 5", anchor=E, stretch=NO, width=150)
    tree.heading("# 5", text="Price")
      
    window = canvas.create_window(120, 290, anchor="nw", window=tree)

    canvas.create_line(120, 330, 1120, 330 )
    canvas.create_line(120, 290, 120, 330 )
    canvas.create_line(270, 290, 270, 330 )
    canvas.create_line(670, 290, 670, 330 )
    canvas.create_line(820, 290, 820, 330 )
    canvas.create_line(970, 290, 970, 330 )
    canvas.create_line(1120, 290, 1120, 330 )
    canvas.create_line(670, 330, 670, 480)
    canvas.create_line(970, 330, 970, 480)
    canvas.create_line(1120, 330, 1120, 480)
    canvas.create_line(670, 355, 1120, 355)
    canvas.create_line(670, 380, 1120, 380)
    canvas.create_line(670, 405, 1120, 405)
    canvas.create_line(670, 430, 1120, 430)
    canvas.create_line(670, 455, 1120, 455)
    canvas.create_line(670, 480, 1120, 480)

    canvas.create_text(165, 320, text="PROD-0001", fill="black", font=('Helvetica 10'))
    canvas.create_text(400, 320, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
    canvas.create_text(740, 320, text="1", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(884, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(884, 320, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(884, 320, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(884, 320, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 320, text="$200.00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 320, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 320, text="$200.00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 345, text="Subtotal", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 345, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 345, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 345, text="$200.00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 370, text="TAX1", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1085, 370, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1085, 370, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1089, 370, text="$18.00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 395, text="Shipping and handling", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1085, 395, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1085, 395, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1089, 395, text="$20.00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 420, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 420, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 420, text="$238.00", fill="black", font=('Helvetica 10 bold'))
    canvas.create_text(820, 420, text="Invoice total", fill="black", font=('Helvetica 10 bold'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 445, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 445, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 445, text="$100.00", fill="black", font=('Helvetica 10'))
    canvas.create_text(820, 445, text="Total Paid", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 465, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 465, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 465, text="$138.00", fill="black", font=('Helvetica 10'))
    canvas.create_text(820, 465, text="Balance", fill="black", font=('Helvetica 10'))

    canvas.create_text(200, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 510, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 520, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 530, text="...", fill="black", font=('Helvetica 10'))

    canvas.create_text(600, 580, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
    canvas.create_line(110, 600, 1120, 600)
    canvas.create_text(620, 620, text="Invoices are payable on receipt unless other terms, negotiated and noted on the invoice. By accepting delivery of goods, Buyer agrees to pay the invoiced cost for those goods,\nand agrees to be bound to thses contract terms. No acceptance may vary these terms unless specifically agreed in writing by Seller ", fill="black", font=('Helvetica 10'))
    canvas.create_text(196, 650, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_text(1090, 650, text="Page 1 of 1", fill="black", font=('Helvetica 10'))


  elif advdata[32] == 'Simplified 1 (logo on left side)':
    adv_winstyle8.insert(0, advdata[40])
    frame = Frame(seventhtab, width=1200, height=155)
    frame.pack(expand=True, fill=BOTH)
    frame.place(x=2,y=309)
    canvas=Canvas(frame, bg='grey', width=1200, height=155, scrollregion=(0,0,700,700))

    vertibar=Scrollbar(frame, orient=VERTICAL)
    vertibar.pack(side=RIGHT,fill=Y)
    vertibar.config(command=canvas.yview)
    canvas.config(width=1200,height=155)

    canvas.config(yscrollcommand=vertibar.set)
    canvas.pack(expand=True,side=LEFT,fill=BOTH)
    canvas.create_rectangle(10, 10, 1190, 690 , outline='yellow',fill='white')
    canvas.create_text(600, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
    try:
      adv_image = Image.open("images/"+advdata[13])
      adv_resize_image = adv_image.resize((200,75))
      adv_image = ImageTk.PhotoImage(adv_resize_image)

      adv_btlogo = Label(canvas,width=200,height=75,image = adv_image) 
      adv_window_image = canvas.create_window(150, 25, anchor="nw", window=adv_btlogo)
      adv_btlogo.photo = adv_image
    except:
      pass  
    #canvas.create_text(250, 70, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

    canvas.create_text(130, 120, text="Invoice#", fill="black", font=('Helvetica 11'))
    canvas.create_text(141, 140, text="Invoice date", fill="black", font=('Helvetica 11'))
    canvas.create_text(130, 160, text="Due date", fill="black", font=('Helvetica 11'))
    canvas.create_text(120, 180, text="Terms", fill="black", font=('Helvetica 11'))
    canvas.create_text(134, 200, text="Order ref.#", fill="black", font=('Helvetica 11'))
    canvas.create_text(347, 120, text="INV1/2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 140, text="06-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 160, text="21-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(340, 180, text="NET 15", fill="black", font=('Helvetica 11'))

    canvas.create_text(1050, 65, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
    # canvas.create_text(1080, 200, text=""+caddent.get('1.0','end-1c'), fill="black", font=('Helvetica 10'))
    T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
    T_address.tag_configure('tag_name',justify='right')
    T_address.insert('1.0', advdata[2])
    T_address.tag_add('tag_name','1.0', 'end')
    T_address_window = canvas.create_window(850, 80, anchor="nw", window=T_address)
    canvas.create_text(1050, 170, text=""+comsalestax.get(), fill="black", font=('Helvetica 10'))
    # canvas.create_text(1085, 125, text="Address line 3", fill="black", font=('Helvetica 10'))
    # canvas.create_text(1085, 140, text="Address line 4", fill="black", font=('Helvetica 10'))
    # canvas.create_text(1080, 155, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
    # canvas.create_text(1080, 170, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
    canvas.create_text(1050, 190, text="Invoice", fill="black", font=('Helvetica 14 bold'))

    canvas.create_text(140, 215, text="Bill to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(149, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(191, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(200, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(160, 275, text="United States", fill="black", font=('Helvetica 10'))
    canvas.create_text(550, 215, text="Ship to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(556, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(598, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(608, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(568, 275, text="United States", fill="black", font=('Helvetica 10'))

    s = ttk.Style()
    s.configure('mystyle_2.Treeview.Heading', background='orange',State='DISABLE')

    tree=ttk.Treeview(canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle_2.Treeview')
      
    tree.column("# 1", anchor=E, stretch=NO, width=700)
    tree.heading("# 1", text="Product/Service - Description")
    tree.column("# 2", anchor=E, stretch=NO, width=150)
    tree.heading("# 2", text="Quantity")
    tree.column("# 3", anchor=E, stretch=NO, width=150)
    tree.heading("# 3", text="Price")
      
    window = canvas.create_window(120, 290, anchor="nw", window=tree)

    canvas.create_line(120, 330, 1120, 330 )
    canvas.create_line(120, 290, 120, 330 )
    canvas.create_line(820, 290, 820, 330 )
    canvas.create_line(970, 290, 970, 330 )
    canvas.create_line(1120, 290, 1120, 330 )
    canvas.create_line(670, 330, 670, 480)
    canvas.create_line(970, 330, 970, 480)
    canvas.create_line(1120, 330, 1120, 480)
    canvas.create_line(670, 355, 1120, 355)
    canvas.create_line(670, 380, 1120, 380)
    canvas.create_line(670, 405, 1120, 405)
    canvas.create_line(670, 430, 1120, 430)
    canvas.create_line(670, 455, 1120, 455)
    canvas.create_line(670, 480, 1120, 480)

    canvas.create_text(250, 320, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
    canvas.create_text(900, 320, text="1", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 320, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 345, text="Subtotal", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 345, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 345, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 345, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 370, text="TAX1", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1085, 370, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1085, 370, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1089, 370, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 395, text="Shipping and handling", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1085, 395, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1085, 395, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1089, 395, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 420, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 420, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 420, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    canvas.create_text(820, 420, text="Invoice total", fill="black", font=('Helvetica 10 bold'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 445, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 445, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 445, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(820, 445, text="Total Paid", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 465, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 465, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 465, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(820, 465, text="Balance", fill="black", font=('Helvetica 10'))

    canvas.create_text(200, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 510, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 520, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 530, text="...", fill="black", font=('Helvetica 10'))

    canvas.create_text(600, 580, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
    canvas.create_line(110, 600, 1120, 600)
    canvas.create_text(620, 620, text="Invoices are payable on receipt unless other terms, negotiated and noted on the invoice. By accepting delivery of goods, Buyer agrees to pay the invoiced cost for those goods,\nand agrees to be bound to thses contract terms. No acceptance may vary these terms unless specifically agreed in writing by Seller ", fill="black", font=('Helvetica 10'))
    canvas.create_text(196, 650, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_text(1090, 650, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
  elif advdata[32] == 'Simplified 2 (logo on right side)':
    adv_winstyle8.insert(0, advdata[40])
    frame = Frame(seventhtab, width=1200, height=155)
    frame.pack(expand=True, fill=BOTH)
    frame.place(x=2,y=309)
    canvas=Canvas(frame, bg='grey', width=1200, height=155, scrollregion=(0,0,700,700))

    vertibar=Scrollbar(frame, orient=VERTICAL)
    vertibar.pack(side=RIGHT,fill=Y)
    vertibar.config(command=canvas.yview)
    canvas.config(width=1200,height=155)

    canvas.config(yscrollcommand=vertibar.set)
    canvas.pack(expand=True,side=LEFT,fill=BOTH)
    canvas.create_rectangle(10, 10, 1190, 690 , outline='yellow',fill='white')
    canvas.create_text(600, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
    try:
      adv_image = Image.open("images/"+advdata[13])
      adv_resize_image = adv_image.resize((200,75))
      adv_image = ImageTk.PhotoImage(adv_resize_image)

      adv_btlogo = Label(canvas,width=200,height=75,image = adv_image) 
      adv_window_image = canvas.create_window(850, 25, anchor="nw", window=adv_btlogo)
      adv_btlogo.photo = adv_image
    except:
      pass  

    # canvas.create_text(1000, 70, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

    canvas.create_text(829, 120, text="Invoice#", fill="black", font=('Helvetica 11'))
    canvas.create_text(841, 140, text="Invoice date", fill="black", font=('Helvetica 11'))
    canvas.create_text(830, 160, text="Due date", fill="black", font=('Helvetica 11'))
    canvas.create_text(820, 180, text="Terms", fill="black", font=('Helvetica 11'))
    canvas.create_text(834, 200, text="Order ref.#", fill="black", font=('Helvetica 11'))
    canvas.create_text(1047, 120, text="INV1/2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(1050, 140, text="06-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(1050, 160, text="21-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(1040, 180, text="NET 15", fill="black", font=('Helvetica 11'))

    canvas.create_text(170, 55, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
    # canvas.create_text(135, 200, text=""+caddent.get('1.0','end-1c'), fill="black", font=('Helvetica 10'))
    T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
    T_address.tag_configure('tag_name',justify='right')
    T_address.insert('1.0', advdata[2])
    T_address.tag_add('tag_name','1.0', 'end')
    T_address_window = canvas.create_window(10, 80, anchor="nw", window=T_address)
    canvas.create_text(130, 170, text=""+comsalestax.get(), fill="black", font=('Helvetica 10'))
    # canvas.create_text(130, 125, text="Address line 3", fill="black", font=('Helvetica 10'))
    # canvas.create_text(130, 140, text="Address line 4", fill="black", font=('Helvetica 10'))
    # canvas.create_text(136, 155, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
    # canvas.create_text(136, 170, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
    canvas.create_text(124, 190, text="Invoice", fill="black", font=('Helvetica 14 bold'))

    canvas.create_text(140, 215, text="Bill to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(149, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(191, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(200, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(160, 275, text="United States", fill="black", font=('Helvetica 10'))
    canvas.create_text(550, 215, text="Ship to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(556, 230, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(598, 245, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(608, 260, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(568, 275, text="United States", fill="black", font=('Helvetica 10'))

    s = ttk.Style()
    s.configure('mystyle_2.Treeview.Heading', background='orange',State='DISABLE')

    tree=ttk.Treeview(canvas, column=("c1", "c2","c3"), show='headings',height= 0, style='mystyle_2.Treeview')
        
    tree.column("# 1", anchor=E, stretch=NO, width=700)
    tree.heading("# 1", text="Product/Service - Description")
    tree.column("# 2", anchor=E, stretch=NO, width=150)
    tree.heading("# 2", text="Quantity")
    tree.column("# 3", anchor=E, stretch=NO, width=150)
    tree.heading("# 3", text="Price")
        
    window = canvas.create_window(120, 290, anchor="nw", window=tree)

    canvas.create_line(120, 330, 1120, 330 )
    canvas.create_line(120, 290, 120, 330 )
    canvas.create_line(820, 290, 820, 330 )
    canvas.create_line(970, 290, 970, 330 )
    canvas.create_line(1120, 290, 1120, 330 )
    canvas.create_line(670, 330, 670, 480)
    canvas.create_line(970, 330, 970, 480)
    canvas.create_line(1120, 330, 1120, 480)
    canvas.create_line(670, 355, 1120, 355)
    canvas.create_line(670, 380, 1120, 380)
    canvas.create_line(670, 405, 1120, 405)
    canvas.create_line(670, 430, 1120, 430)
    canvas.create_line(670, 455, 1120, 455)
    canvas.create_line(670, 480, 1120, 480)

    canvas.create_text(250, 320, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
    canvas.create_text(900, 320, text="1", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 320, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 320, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 320, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 345, text="Subtotal", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 345, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 345, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 345, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 345, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 370, text="TAX1", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1085, 370, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1085, 370, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1085, 370, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1089, 370, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(820, 395, text="Shipping and handling", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1085, 395, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1085, 395, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1085, 395, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1089, 395, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 420, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 420, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 420, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 420, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    canvas.create_text(820, 420, text="Invoice total", fill="black", font=('Helvetica 10 bold'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 445, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 445, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 445, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 445, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(820, 445, text="Total Paid", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 465, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 465, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 465, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1084, 465, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(820, 465, text="Balance", fill="black", font=('Helvetica 10'))

    canvas.create_text(200, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 510, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 520, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 530, text="...", fill="black", font=('Helvetica 10'))

    canvas.create_text(600, 580, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
    canvas.create_line(110, 600, 1120, 600)
    canvas.create_text(620, 620, text="Invoices are payable on receipt unless other terms, negotiated and noted on the invoice. By accepting delivery of goods, Buyer agrees to pay the invoiced cost for those goods,\nand agrees to be bound to thses contract terms. No acceptance may vary these terms unless specifically agreed in writing by Seller ", fill="black", font=('Helvetica 10'))
    canvas.create_text(196, 650, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_text(1090, 650, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
  elif advdata[32] == 'Business Classic':
    adv_winstyle8.insert(0, advdata[40])
    frame = Frame(seventhtab, width=1200, height=155)
    frame.pack(expand=True, fill=BOTH)
    frame.place(x=2,y=309)
    canvas=Canvas(frame, bg='grey', width=1200, height=155, scrollregion=(0,0,700,700))

    vertibar=Scrollbar(frame, orient=VERTICAL)
    vertibar.pack(side=RIGHT,fill=Y)
    vertibar.config(command=canvas.yview)
    canvas.config(width=1200,height=155)

    canvas.config(yscrollcommand=vertibar.set)
    canvas.pack(expand=True,side=LEFT,fill=BOTH)
    canvas.create_rectangle(10, 10, 1190, 690 , outline='yellow',fill='white')
    canvas.create_text(600, 45, text="Title text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_line(100, 60, 1120, 60, fill="orange")
    #canvas.create_line(1000, 60, 600, 60, fill="grey")

    try:
      adv_image = Image.open("images/"+advdata[13])
      adv_resize_image = adv_image.resize((200,100))
      adv_image = ImageTk.PhotoImage(adv_resize_image)

      adv_btlogo = Label(canvas,width=200,height=100,image = adv_image) 
      adv_window_image = canvas.create_window(140, 100, anchor="nw", window=adv_btlogo)
      adv_btlogo.photo = adv_image
    except:
      pass  


    # canvas.create_text(250, 155, text="Your Company Logo", fill="black", font=('Helvetica 18 bold'))

    canvas.create_text(560, 85, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
    # canvas.create_text(535, 200, text=""+caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'))
    T_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
    T_address.tag_configure('tag_name',justify='right')
    T_address.insert('1.0', advdata[2])
    T_address.tag_add('tag_name','1.0', 'end')
    T_address_window = canvas.create_window(350, 100, anchor="nw", window=T_address)
    # adv_btlabel = Label(canvas,width=20,height=10,text=""+caddent.get('1.0', 'end-1c')) 
    # adv_window_label = canvas.create_window(530, 110, anchor="nw", window=adv_btlabel)
    canvas.create_text(530, 190, text=""+comsalestax.get(), fill="black", font=('Helvetica 10'))
    # canvas.create_text(530, 140, text="Address line 3", fill="black", font=('Helvetica 10'))
    # canvas.create_text(530, 155, text="Address line 4", fill="black", font=('Helvetica 10'))
    # canvas.create_text(536, 170, text="Phone: 555-5555", fill="black", font=('Helvetica 10'))
    # canvas.create_text(536, 190, text="Sales tax reg No.", fill="black", font=('Helvetica 10'))
    canvas.create_text(524, 210, text="Invoice", fill="black", font=('Helvetica 14 bold'))

    canvas.create_text(749, 95, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(791, 110, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(800, 125, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(760, 140, text="United States", fill="black", font=('Helvetica 10'))

    canvas.create_text(745, 160, text="Invoice", fill="black", font=('Helvetica 11'))
    canvas.create_text(760, 180, text="Invoice date", fill="black", font=('Helvetica 11'))
    canvas.create_text(750, 200, text="Due date", fill="black", font=('Helvetica 11'))

    canvas.create_text(947, 160, text="INV1/2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(950, 180, text="06-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(950, 200, text="21-05-2022", fill="black", font=('Helvetica 11'))
    s = ttk.Style()
    s.configure('mystyle_2.Treeview.Heading', background='orange',State='DISABLE')

    tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_2.Treeview')
        
    tree.column("# 1", anchor=E, stretch=NO, width=150)
    tree.heading("# 1", text="Product/Service")
    tree.column("# 2", anchor=E, stretch=NO, width=400)
    tree.heading("# 2", text="Description")
    tree.column("# 3", anchor=E, stretch=NO, width=150)
    tree.heading("# 3", text="Unit Price")
    tree.column("# 4", anchor=E, stretch=NO, width=150)
    tree.heading("# 4", text="Quantity")
    tree.column("# 5", anchor=E, stretch=NO, width=150)
    tree.heading("# 5", text="Price")
        
    window = canvas.create_window(120, 230, anchor="nw", window=tree)

    canvas.create_line(120, 270, 1120, 270 )
    canvas.create_line(120, 230, 120, 270 )
    canvas.create_line(270, 230, 270, 270 )
    canvas.create_line(670, 230, 670, 270 )
    canvas.create_line(820, 230, 820, 270 )
    canvas.create_line(970, 230, 970, 270 )
    canvas.create_line(1120, 230, 1120, 270)
    canvas.create_line(1120, 270, 1120, 420)
    canvas.create_line(670, 295, 1120, 295)
    canvas.create_line(670, 320, 1120, 320)
    canvas.create_line(670, 345, 1120, 345)
    canvas.create_line(670, 370, 1120, 370)
    canvas.create_line(670, 395, 1120, 395)
    canvas.create_line(670, 420, 1120, 420)

    canvas.create_text(165, 260, text="PROD-0001", fill="black", font=('Helvetica 10'))
    canvas.create_text(400, 260, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(734, 260, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(734, 260, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(734, 260, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(734, 260, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(734, 260, text="$200.00", fill="black", font=('Helvetica 10'))
    canvas.create_text(890, 260, text="1", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 260, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 260, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 260, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 260, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    # canvas.create_text(1080, 260, text="$200.00", fill="black", font=('Helvetica 10'))

    canvas.create_text(697, 285, text="Subtotal", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 285, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 285, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 285, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 285, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 285, text="$200.00", fill="black", font=('Helvetica 10'))

    canvas.create_text(692, 310, text="TAX1", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1085, 310, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1085, 310, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1085, 310, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1085, 310, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1085, 310, text="$18.00", fill="black", font=('Helvetica 10'))

    canvas.create_text(737, 335, text="Shipping and handling", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1085, 335, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1085, 335, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1085, 335, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1085, 335, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1085, 335, text="$20.00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 360, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 360, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 360, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 360, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 360, text="$238.00", fill="black", font=('Helvetica 10 bold'))
    canvas.create_text(715, 360, text="Invoice total", fill="black", font=('Helvetica 10 bold'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 385, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 385, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 385, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 385, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 385, text="100.00", fill="black", font=('Helvetica 10'))
    canvas.create_text(705, 385, text="Total Paid", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(1080, 410, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(1080, 410, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(1080, 410, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
     canvas.create_text(1080, 410, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
    #canvas.create_text(1080, 410, text="$138.00", fill="black", font=('Helvetica 10'))
    canvas.create_text(700, 410, text="Balance", fill="black", font=('Helvetica 10'))

    canvas.create_line(100, 480, 1120, 480, fill="orange")
    canvas.create_text(200, 500, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 510, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 520, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(106, 530, text="...", fill="black", font=('Helvetica 10'))

    canvas.create_text(600, 580, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
    canvas.create_line(100, 600, 1120, 600, fill="orange")
    canvas.create_text(620, 620, text="Invoices are payable on receipt unless other terms, negotiated and noted on the invoice. By accepting delivery of goods, Buyer agrees to pay the invoiced cost for those goods,\nand agrees to be bound to thses contract terms. No acceptance may vary these terms unless specifically agreed in writing by Seller ", fill="black", font=('Helvetica 10'))
    canvas.create_text(196, 650, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_text(1090, 650, text="Page 1 of 1", fill="black", font=('Helvetica 10'))
  else:
    pass
  adv_winstyle8.place(x=2 ,y=270, width=220)
  #adv_winstyle8.current(0)



   ###################################tab08###########################

  eighttab1=Frame(tab08, relief=GROOVE, bg="#f8f8f2")
  eighttab1.pack(side="top", fill=BOTH)

  eighttab=Frame(eighttab1, bg="#f5f3f2", height=700)
  eighttab.pack(side="top", fill=BOTH)


  sql = "select * from company"
  fbcursor.execute(sql)
  emdata = fbcursor.fetchone()


  lbl01 = Label(eighttab,text="Purchase Order E-Mail Tmplate",font="TimesNewRoman 12 ")
  lbl01.place(x=2,y=20)

  def selected(event):
    paym=em_menu.get()
    print(paym)
    lbl01.place_forget()
    memaiframe.delete("1.0",END) 
    if paym == "Purchase Order E-Mail Template":
      lb1 = Label(eighttab,text='Purchase Order E-Mail Template',font="TimesNewRoman 12 ")
      lb1.place(x=2,y=20)

      def select_list(event):
        memaiframe.insert('1.0',lbx.get(ANCHOR))
      lbx = Listbox(eighttab,  height=29, width=34)
      lbx.insert(END, "{{Company_Name}}")
      lbx.insert(END, "{{Company_Address}}")
      lbx.insert(END, "{{Company_Email1}}")
      lbx.insert(END, "{{Customer_Name}}")
      lbx.insert(END, "{{Customer_Address}}")
      lbx.insert(END, "{{Customer_Email}}")
      lbx.insert(END, "{{Purchase_Order_Number}}")
      lbx.insert(END, "{{Purchase_Order_Date}}")
      lbx.insert(END, "{{Purchase_Order_Total}}")
      lbx.insert(END, "{{Current_date}}")
      lbx.place(x=1090, y=46)
      lbx.bind('<Double-1>', select_list)
    

    elif paym == "Estimate E-Mail Template":
      lb4 = Label(eighttab,text='Estimate E-Mail Template  ',font="TimesNewRoman 12 ")
      lb4.place(x=2,y=20)

      def select_list(event):
        memaiframe.insert('1.0',lbx.get(ANCHOR))
      lbx = Listbox(eighttab,  height=29, width=34)
      lbx.insert(END, "{{Company_Name}}")
      lbx.insert(END, "{{Company_Address}}")
      lbx.insert(END, "{{Company_Email1}}")
      lbx.insert(END, "{{Customer_Name}}")
      lbx.insert(END, "{{Customer_Address}}")
      lbx.insert(END, "{{Customer_Email}}")
      lbx.insert(END, "{{Estimate_Number}}")
      lbx.insert(END, "{{Estimate_Date}}")  
      lbx.insert(END, "{{Estimate_Total}}")
      lbx.insert(END, "{{Estimate_Balance}}")
      lbx.insert(END, "{{Current_date}}")
      lbx.place(x=1090, y=46)
      lbx.bind('<Double-1>', select_list)



    
    elif paym == "Order E-Mail Template":

      lb2 = Label(eighttab,text='Order E-Mail Template      ',font="TimesNewRoman 13 ")
      lb2.place(x=2,y=20)

      def select_list(event):
        memaiframe.insert('1.0',lbx.get(ANCHOR))
      lbx = Listbox(eighttab,  height=29, width=34)
      lbx.insert(END, "{{Company_Name}}")
      lbx.insert(END, "{{Company_Address}}")
      lbx.insert(END, "{{Company_Email1}}")
      lbx.insert(END, "{{Customer_Name}}")
      lbx.insert(END, "{{Customer_Address}}")
      lbx.insert(END, "{{Customer_Email}}")
      lbx.insert(END, "{{Order_Number}}")
      lbx.insert(END, "{{Order_Date}}")
      lbx.insert(END, "{{Order_Total}}")
      lbx.insert(END, "{{Order_Balance}}")
      lbx.insert(END, "{{Current_date}}")
      lbx.place(x=1090, y=46)
      lbx.bind('<Double-1>', select_list)
      

      
    elif paym == "Invoice E-Mail Template":
      lb3 = Label(eighttab,text='Invoice E-Mail Template     ',font="TimesNewRoman 12 ")
      lb3.place(x=2,y=20)

      def select_list(event):
        memaiframe.insert('1.0',lbx.get(ANCHOR))
      lbx = Listbox(eighttab,  height=29, width=34)
      lbx.insert(END, "{{Company_Name}}")
      lbx.insert(END, "{{Company_Address}}")
      lbx.insert(END, "{{Company_Email1}}")
      lbx.insert(END, "{{Customer_Name}}")
      lbx.insert(END, "{{Customer_Address}}")
      lbx.insert(END, "{{Customer_Email}}")
      lbx.insert(END, "{{Invoice_Number}}")
      lbx.insert(END, "{{Invoice_Date}}")
      lbx.insert(END, "{{Invoice_Due_Date}}")
      lbx.insert(END, "{{Invoice_OrderRef}}")
      lbx.insert(END, "{{Invoice_Total}}")
      lbx.insert(END, "{{Invoice_TotalPaid}}")
      lbx.insert(END, "{{Invoice_Balance}}")
      lbx.insert(END, "{{Current_date}}")
      lbx.place(x=1090, y=46)
      lbx.bind('<Double-1>', select_list)
  
     
    elif paym == "Payment Receipt Template":
      lb5 = Label(eighttab,text='Payment Receipt Template',font="TimesNewRoman 12 ")
      lb5.place(x=2,y=20)

      def select_list(event):
        memaiframe.insert('1.0',lbx.get(ANCHOR))
      lbx = Listbox(eighttab,  height=29, width=34)
      lbx.insert(END, "{{Company_Name}}")
      lbx.insert(END, "{{Company_Address}}")
      lbx.insert(END, "{{Company_Email1}}")
      lbx.insert(END, "{{Customer_Name}}")
      lbx.insert(END, "{{Customer_Address}}")
      lbx.insert(END, "{{Customer_Email}}")
      lbx.insert(END, "{{Invoice_Number}}")
      lbx.insert(END, "{{Invoice_Date}}")
      lbx.insert(END, "{{Invoice_Due_Date}}")
      lbx.insert(END, "{{Invoice_OrderRef}}")
      lbx.insert(END, "{{Invoice_Total}}")
      lbx.insert(END, "{{Invoice_TotalPaid}}")
      lbx.insert(END, "{{Invoice_Balance}}")
      lbx.insert(END, "{{Current_date}}")
      lbx.insert(END, "{{Currency_Sign}}")
      lbx.insert(END, "{{Payment_Date}}")
      lbx.insert(END, "{{Payment_Amount}}")
      lbx.insert(END, "{{Payment_Mode}}")
      lbx.insert(END, "{{Payment_Description}}")
      lbx.insert(END, "{{Payment_ID}}")
      lbx.place(x=1090, y=46)
      lbx.bind('<Double-1>', select_list)
      memaiframe.insert('1.0','Dear {{Customer_Name}},\n\nThis message is to inform you that your payment of {{Currency_Sign}}{{Payment_Amount}} {{Currency}} for Invoice# {{Invoice_Number}} has been received."\n\nInvoice ID: {{Invoice_Number}}\nPayment Date: {{Payment_Date}}\nAmount: {{Currency_Sign}}{{Payment_Amount}} {{Currency}}\nPaid by: {{Payment_Mode}}\nDescription: {{Payment_Description}}\n\nThank you for your business.\n{{Company_Name}}')


  fontSize=12
  fontStyle='arial'
  def font_style(event):
    global fontStyle
    fontStyle=font_family__variable.get()
    memaiframe.config(font=(fontStyle,fontSize))

  def font_size(event):
    global fontSize
    fontSize=size_variable.get()
    memaiframe.config(font=(fontStyle,fontSize))

  def bold_text():
    bold_font = font.Font(memaiframe, memaiframe.cget("font"))
    bold_font.configure(weight="bold")
    memaiframe.tag_configure("bold", font=bold_font)
    current_tags = memaiframe.tag_names("sel.first")
    if "bold" in current_tags:
      memaiframe.tag_remove("bold", "sel.first", "sel.last")
    else:
      memaiframe.tag_add("bold", "sel.first", "sel.last")
   
  
  def italic_text():
    italic_font = font.Font(memaiframe, memaiframe.cget("font"))
    italic_font.configure(slant="italic")
    memaiframe.tag_configure("italic", font=italic_font)
    current_tags = memaiframe.tag_names("sel.first")
    if "italic" in current_tags:
      memaiframe.tag_remove("italic", "sel.first", "sel.last")
    else:
      memaiframe.tag_add("italic", "sel.first", "sel.last")


  def underline_text():
    try:
        if memaiframe.tag_nextrange('underline_selection', 'sel.first', 'sel.last') != ():
            memaiframe.tag_remove('underline_selection', 'sel.first', 'sel.last')
        else:
            memaiframe.tag_add('underline_selection', 'sel.first', 'sel.last')
            memaiframe.tag_configure('underline_selection', underline=True)
    except TclError:
        pass

  def color_select():
    color=colorchooser.askcolor()[1]
    if color:
      color_font = font.Font(memaiframe, memaiframe.cget("font"))
      memaiframe.tag_configure("colored", font=color_font, foreground=color)
      current_tags = memaiframe.tag_names("sel.first")
      if "colored" in current_tags:
        memaiframe.tag_remove("colored", "sel.first", "sel.last")
      else:
        memaiframe.tag_add("colored", "sel.first", "sel.last")

  def align_right():
    data=memaiframe.get(0.0,END)
    memaiframe.tag_config('right',justify=RIGHT)
    memaiframe.delete(0.0,END)
    memaiframe.insert(INSERT,data,'right')

  def align_left():
    data=memaiframe.get(0.0,END)
    memaiframe.tag_config('left',justify=LEFT)
    memaiframe.delete(0.0,END)
    memaiframe.insert(INSERT,data,'left')

  def align_center():
    data=memaiframe.get(0.0,END)
    memaiframe.tag_config('center',justify=CENTER)
    memaiframe.delete(0.0,END)
    memaiframe.insert(INSERT,data,'center')

  em_menu = StringVar()
  winstyle = ttk.Combobox(eighttab,textvariable=em_menu,width=28)
  winstyle['values'] = ('Invoice E-Mail Template','Order E-Mail Template','Estimate E-Mail Template','Payment Receipt Template','Purchase Order E-Mail template')
  winstyle.bind("<<ComboboxSelected>>",selected)
  if  not emdata:
    pass
  else:
    print(emdata)
    winstyle.insert(0, emdata[2])
  winstyle.place(x=280 ,y=20)
  winstyle.current(4)



  # savebtn=Button(eighttab,image=saves,text="Save Settings",compound = LEFT, height=15, width=100)
  # savebtn.place(x=500, y=20)


    
  style = ttk.Style()
  style.theme_use('default')
  style.configure('TNotebook.Tab', background="#999999", width=78, padding=10)
  mess_Notebook = ttk.Notebook(eighttab)
  emailmessage_Frame = Frame(mess_Notebook, height=430, width=1060)
  mess_Notebook.add(emailmessage_Frame, text="E-mail message")
  mess_Notebook.place(x=5, y=50)

  meframe = StringVar()
  memaiframe=Text(emailmessage_Frame,font=('arial 17'),undo=True,width=130,height=400)
  if not emdata:
    pass
  else:
    memaiframe.insert('1.0', emdata[53])
  memaiframe.pack(padx=0,pady=28,expand=False)


  scrollbar1 = Scrollbar(emailmessage_Frame,orient=VERTICAL)
  scrollbar2= Scrollbar(memaiframe,orient=HORIZONTAL,command=memaiframe.xview,width=0)
  scrollbar2.pack(fill=X,expand=True,side=BOTTOM,padx=502,pady=200)
  memaiframe.config(xscrollcommand=scrollbar2.set)
  memaiframe.config(yscrollcommand=scrollbar1.set)
  scrollbar1.config(command=memaiframe.yview)
  scrollbar1.place(x =1040  , y=0, height=432)
  scrollbar2.config(command=memaiframe.xview)


 
  

  btn1=Button(emailmessage_Frame,width=20,height=20,compound = LEFT,image=selectall,command=lambda :memaiframe.event_generate('<Control a>'))
  btn1.place(x=5, y=1)

        
  btn2=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=cut,command=lambda :memaiframe.event_generate('<Control x>'))
  btn2.place(x=36, y=1)

  btn3=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=copy,command=lambda :memaiframe.event_generate('<Control c>'))
  btn3.place(x=73, y=1)

  btn4=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=paste,command=lambda :memaiframe.event_generate('<Control v>'))
  btn4.place(x=105, y=1)

  btn5=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=undo, command=lambda:memaiframe.event_generate("<<Undo>>"))
  btn5.place(x=140, y=1)

  btn6=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=redo, command=lambda:memaiframe.event_generate("<<Redo>>"))
  btn6.place(x=175, y=1)

  btn7=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=bold,command=bold_text)
  btn7.place(x=210, y=1)

  btn8=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=italics,command=italic_text)
  btn8.place(x=245, y=1)

  btn9=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=underline,command=underline_text)
  btn9.place(x=280, y=1)

  btn10=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=left,command=align_left)
  btn10.place(x=315, y=1)

  btn11=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=right,command=align_right)
  btn11.place(x=350, y=1)

  btn12=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=center,command=align_center)
  btn12.place(x=385, y=1)

  # btn13=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=hyperlink,command=open)
  # btn13.place(x=420, y=1)
        
  btn14=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=remove,command=lambda :memaiframe.delete(0.0,END))
  btn14.place(x=420, y=1)

  btn15=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=color,command=color_select)
  btn15.place(x=455, y=1)

  # btn16=Button(emailmessage_Frame,width=31,height=23,compound = LEFT,image=save,command=save_file)
  # btn16.place(x=525, y=1)
 

  size_variable=IntVar()
  compo = ttk.Combobox(emailmessage_Frame, width=14,textvariable=size_variable,values=tuple(range(10,80)))
  compo['values'] =('11','12','13','14','15','16','17')
  compo.place(x=600, y=5)
  compo.current(4)

  compo.bind('<<ComboboxSelected>>',font_size)


  font_families=font.families()
  font_family__variable=StringVar()

  def select(event):
    memaiframe.insert('1.0',lbx01.get(ANCHOR))

  attachlbframe=LabelFrame(eighttab,text="placeholders(double click to insert)", height=500, width=233)
  attachlbframe.place(x=1080, y=22)

  lbx01 = Listbox(eighttab, height=28, width=34)
  lbx01.insert(END, "{{Company_Name}}")
  lbx01.insert(END, "{{Company_Address}}")
  lbx01.insert(END, "{{Company_Email1}}")
  lbx01.insert(END, "{{Customer_Name}}")
  lbx01.insert(END, "{{Customer_Address}}")
  lbx01.insert(END, "{{Customer_Email}}")
  lbx01.insert(END, "{{Purchase_Order_Number}}")
  lbx01.insert(END, "{{Purchase_Order_Date}}")
  lbx01.insert(END, "{{Purchase_Order_Total}}")
  lbx01.insert(END, "{{Current_date}}")
  lbx01.place(x=1090, y=46)
  lbx01.bind('<Double-1>', select)

     

################################### tab09 ###########################


  ninetab1=Frame(tab09, relief=GROOVE, bg="#f8f8f2")
  ninetab1.pack(side="top", fill=BOTH)
  ninetab=Frame(ninetab1, bg="#f5f3f2", height=700)
  ninetab.pack(side="top", fill=BOTH)

  global filename_btn,filename_logo

  filename_btn = ""
  filename_logo = ""
  def payments():
    checkbtn1 = showpaidbol.get()
    checkbtn2 = sendpaybol.get()                        
    checkbtn3 = insrtpaybol.get()
    checkbtn4 =attachupdbol.get()
    payrece = enterec.get()
    payin = enterin.get()
    amrece = camou.get()
    des = descr.get()
    paymentrece = payrec.get()
    receipt = paym.get()
    date = payd.get()
    pay_amount = payma.get()
    total = tota.get()
    total_paid = paid.get()
    balance_due = due.get()
    payment_prefix = receipt_prefix.get()

    sql = "select * from payments"
    fbcursor.execute(sql)
    i = fbcursor.fetchall()
    if not i:
      if filename_btn == "":
        print(12)
        sql = 'insert into payments(show_paid,send_payment,insert_paypal,attach_updated,payment_receipt,payment_invoice,amount_received,description,payment_received,payment_rece,payment_date,payment_amount,total_amount,total_paid,balance_due,prefix) values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)'
        val = (checkbtn1,checkbtn2,checkbtn3,checkbtn4,payrece,payin,amrece,des,paymentrece,receipt,date,pay_amount,total,total_paid,balance_due,payment_prefix)
        fbcursor.execute(sql, val)
        fbilldb.commit()
      else:
        shutil.copyfile(filename_btn, os.getcwd()+'/images/'+filename_btn.split('/')[-1])
        sql = 'insert into payments(show_paid,send_payment,insert_paypal,attach_updated,payment_receipt,payment_invoice,amount_received,description,payment_received,payment_rece,payment_date,payment_amount,total_amount,total_paid,balance_due,prefix,load_button) values(%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s,%s)'
        val = (checkbtn1,checkbtn2,checkbtn3,checkbtn4,payrece,payin,amrece,des,paymentrece,receipt,date,pay_amount,total,total_paid,balance_due,payment_prefix,filename_btn.split('/')[-1])
        fbcursor.execute(sql, val)
        fbilldb.commit()
        try:
          shutil.copyfile(filename_logo, os.getcwd()+'/images/'+filename_logo.split('/')[-1])
          sql = "update payments set show_paid=%s, send_payment=%s, insert_paypal=%s,attach_updated=%s,payment_receipt=%s,payment_invoice=%s,amount_received=%s,description=%s,payment_received=%s,payment_rece=%s,payment_date=%s,payment_amount=%s,total_amount=%s,total_paid=%s,balance_due=%s,prefix=%s,load_logo=%s"
          val = (checkbtn1,checkbtn2,checkbtn3,checkbtn4,payrece,payin,amrece,des,paymentrece,receipt,date,pay_amount,total,total_paid,balance_due,payment_prefix,filename_logo.split('/')[-1])
          fbcursor.execute(sql, val)
          fbilldb.commit()
        except:
          pass
    else:
      if filename_btn == "":
        sql = "update payments set show_paid=%s, send_payment=%s, insert_paypal=%s,attach_updated=%s,payment_receipt=%s,payment_invoice=%s,amount_received=%s,description=%s,payment_received=%s,payment_rece=%s,payment_date=%s,payment_amount=%s,total_amount=%s,total_paid=%s,balance_due=%s,prefix=%s"
        val = (checkbtn1,checkbtn2,checkbtn3,checkbtn4,payrece,payin,amrece,des,paymentrece,receipt,date,pay_amount,total,total_paid,balance_due,payment_prefix)
        fbcursor.execute(sql, val)
        fbilldb.commit()
      else:
        shutil.copyfile(filename_btn, os.getcwd()+'/images/'+filename_btn.split('/')[-1])
        sql = "update payments set show_paid=%s, send_payment=%s, insert_paypal=%s,attach_updated=%s,payment_receipt=%s,payment_invoice=%s,amount_received=%s,description=%s,payment_received=%s,payment_rece=%s,payment_date=%s,payment_amount=%s,total_amount=%s,total_paid=%s,balance_due=%s,prefix=%s,load_button=%s"
        val = (checkbtn1,checkbtn2,checkbtn3,checkbtn4,payrece,payin,amrece,des,paymentrece,receipt,date,pay_amount,total,total_paid,balance_due,payment_prefix,filename_btn.split('/')[-1])
        fbcursor.execute(sql, val)
        fbilldb.commit()
        try:
          shutil.copyfile(filename_logo, os.getcwd()+'/images/'+filename_logo.split('/')[-1])
          sql = "update payments set show_paid=%s, send_payment=%s, insert_paypal=%s,attach_updated=%s,payment_receipt=%s,payment_invoice=%s,amount_received=%s,description=%s,payment_received=%s,payment_rece=%s,payment_date=%s,payment_amount=%s,total_amount=%s,total_paid=%s,balance_due=%s,prefix=%s,load_logo=%s"
          val = (checkbtn1,checkbtn2,checkbtn3,checkbtn4,payrece,payin,amrece,des,paymentrece,receipt,date,pay_amount,total,total_paid,balance_due,payment_prefix,filename_logo.split('/')[-1])
          fbcursor.execute(sql, val)
          fbilldb.commit()
        except:
          pass
          

  sql = "select * from payments"
  fbcursor.execute(sql)
  padata = fbcursor.fetchone()

    
  showpaidbol =  IntVar()
  showp = Checkbutton(ninetab,variable=showpaidbol,
                      text="Show 'PAID' image on fully paid invoices",
                      onvalue= 1 ,
                      offvalue= 0,
                    )
  showp.place(x=5,y=20)
  if  not padata:
        pass
  else:
    if padata[2] == 1:
      showp.select()
    else:
      showp.deselect()



      
  sendpaybol =  IntVar()
  sendp = Checkbutton(ninetab,variable=sendpaybol,
                        text="Send payment receipt email after payment recorderd",
                        onvalue= 1 ,
                        offvalue= 0,
                    )
  sendp.place(x=5,y=50)
  if  not padata:
    pass
  else:
    if padata[3] == 1:
      sendp.select()
    else:
      sendp.deselect()


  insrtpaybol =  IntVar()
  insert = Checkbutton(ninetab,variable=insrtpaybol,
                        text="Insert PayPal 'Pay Now' button with the remaining balance on unpaid PDF invoices",
                        onvalue= 1 ,
                        offvalue= 0,
                      )
  insert.place(x=340,y=20)
  if  not padata:
        pass
  else:
    if padata[4] == 1:
      insert.select()
    else:
      insert.deselect()



  attachupdbol =  IntVar()
  attach = Checkbutton(ninetab,variable=attachupdbol,
                        text="Attach updated invoice to payment receipt email",
                        onvalue= 1 ,
                        offvalue= 0,
                      )
  attach.place(x=340,y=50)
  if  not padata:
        pass
  else:
    if padata[5] == 1:
      attach.select()
    else:
      attach.deselect()


    
  messagelbframe=LabelFrame(ninetab,text="Payment Receipt Text Labels", height=400, width=460)
  messagelbframe.place(x=5, y=100)

  enterec = StringVar()
  pnr = Label(ninetab,text="Payment Receipt")
  pnr.place(x=15,y=130)
  enrec = Entry(ninetab,textvariable=enterec,width=30)
  if  not padata:
    enterec.set('Payment Receipt')
  else:
    enrec.insert(0, padata[6])
  enrec.place(x=15,y=160)


  enterin = StringVar()
  enin = Label(ninetab,text="Payment for Invoice#")
  enin.place(x=15,y=190)
  newin = Entry(ninetab,textvariable=enterin,width=30)
  if  not padata:
    enterin.set('Payment for Invoice#')
  else:
    newin.insert(0, padata[7])
  newin.place(x=15,y=215)

    
  camou = StringVar()
  carf = Label(ninetab,text="Amount received from:")
  carf.place(x=15,y=245)
  camrf = Entry(ninetab,textvariable=camou,width=30)
  if  not padata:
    camou.set('Amount received from:')
  else:
    camrf.insert(0, padata[8])
  camrf.place(x=15,y=270)
  

  descr = StringVar()
  des = Label(ninetab,text="Description:")
  des.place(x=15,y=300)
  descrip = Entry(ninetab,textvariable=descr,width=30)
  if  not padata:
    descr.set('Description:')
  else:
    descrip.insert(0, padata[9])
  descrip.place(x=15,y=325)

  payrec = StringVar()
  pay = Label(ninetab,text="Payment Received in:")
  pay.place(x=15,y=355)
  payrecin = Entry(ninetab,textvariable=payrec,width=30)
  if  not padata:
    payrec.set('Payment Received in:')
  else:
    payrecin.insert(0, padata[10])
  payrecin.place(x=15,y=380)

  paym = StringVar()
  payr = Label(ninetab,text="Payment Receipt#:")
  payr.place(x=15,y=410)
  paymr = Entry(ninetab,textvariable=paym,width=30)
  if  not padata:
    paym.set('Payment Receipt#:')
  else:
    paymr.insert(0, padata[11])
  paymr.place(x=15,y=435)

  payd = StringVar()
  payda = Label(ninetab,text="Payment Date:")
  payda.place(x=250,y=130)
  paydate = Entry(ninetab,textvariable=payd,width=30)
  if  not padata:
    payd.set('Payment Date:')
  else:
    paydate.insert(0, padata[12])
  paydate.place(x=250,y=160)
    
  payma = StringVar()
  pya = Label(ninetab,text="Payment Amount:")
  pya.place(x=250,y=190)
  paymam = Entry(ninetab,textvariable=payma,width=30)
  if  not padata:
    payma.set('Payment Amount:')
  else:
    paymam.insert(0, padata[13])
  paymam.place(x=250,y=215)
    
    
  tota = StringVar()
  tad = Label(ninetab,text="Total Amount Due")
  tad.place(x=250,y=245)
  totamo = Entry(ninetab,textvariable=tota,width=30)
  if  not padata:
    tota.set('Total Amount Due')
  else:
    totamo.insert(0, padata[14])
  totamo.place(x=250,y=270)

  paid = StringVar()
  totp = Label(ninetab,text="Total Paid:")
  totp.place(x=250,y=300)
  totpai = Entry(ninetab,textvariable=paid,width=30)
  if  not padata:
    paid.set('Total Paid:')
  else:
    totpai.insert(0, padata[15])
  totpai.place(x=250,y=325)

  due = StringVar()
  bdue = Label(ninetab,text="Balance Due")
  bdue.place(x=250,y=355)
  badue = Entry(ninetab,textvariable=due,width=30)
  if  not padata:
    due.set('Balance Due')
  else:
    badue.insert(0, padata[16])
  badue.place(x=250,y=380)

  receipt_prefix = StringVar()
  pprefix = Label(ninetab,text="Payment Receipt Prefix")
  pprefix.place(x=250,y=410)
  prprefix = Entry(ninetab,textvariable=receipt_prefix,width=30)
  if  not padata:
    receipt_prefix.set('RCPT')
  else:
    prprefix.insert(0, padata[17])
  prprefix.place(x=250,y=435)

  savebtn = Button(ninetab,text="Save Settings",width=12,command=payments)
  savebtn.place(x=40,y=470)

  def restore():
    enterec = StringVar()
    pnr = Label(ninetab,text="Payment Receipt")
    pnr.place(x=15,y=130)
    enrec = Entry(ninetab,textvariable=enterec,width=30)
    enrec.place(x=15,y=160)
    enterec.set('Payment Receipt')


    enterin = StringVar()
    enin = Label(ninetab,text="Payment for Invoice#")
    enin.place(x=15,y=190)
    newin = Entry(ninetab,textvariable=enterin,width=30)
    newin.place(x=15,y=215)
    enterin.set('Payment for Invoice#')
  
  
    camou = StringVar()
    carf = Label(ninetab,text="Amount received from:")
    carf.place(x=15,y=245)
    camrf = Entry(ninetab,textvariable=camou,width=30)
    camrf.place(x=15,y=270)
    camou.set('Amount received from:')


    descr = StringVar()
    des = Label(ninetab,text="Description:")
    des.place(x=15,y=300)
    descrip = Entry(ninetab,textvariable=descr,width=30)
    descrip.place(x=15,y=325)
    descr.set('Description:')


    payrec = StringVar()
    pay = Label(ninetab,text="Payment Received in:")
    pay.place(x=15,y=355)
    payrecin = Entry(ninetab,textvariable=payrec,width=30)
    payrecin.place(x=15,y=380)
    payrec.set('Payment Received in:')


    paym = StringVar()
    payr = Label(ninetab,text="Payment Receipt#:")
    payr.place(x=15,y=410)
    paymr = Entry(ninetab,textvariable=paym,width=30)
    paymr.place(x=15,y=435)
    paym.set('Payment Receipt#:')


    payd = StringVar()
    payda = Label(ninetab,text="Payment Date:")
    payda.place(x=250,y=130)
    paydate = Entry(ninetab,textvariable=payd,width=30)
    paydate.place(x=250,y=160)
    payd.set('Payment Date:')
    
    payma = StringVar()
    pya = Label(ninetab,text="Payment Amount:")
    pya.place(x=250,y=190)
    paymam = Entry(ninetab,textvariable=payma,width=30)
    paymam.place(x=250,y=215)
    payma.set('Payment Amount:')
    
    
    tota = StringVar()
    tad = Label(ninetab,text="Total Amount Due")
    tad.place(x=250,y=245)
    totamo = Entry(ninetab,textvariable=tota,width=30)
    totamo.place(x=250,y=270)
    tota.set('Total Amount Due')

    paid = StringVar()
    totp = Label(ninetab,text="Total Paid:")
    totp.place(x=250,y=300)
    totpai = Entry(ninetab,textvariable=paid,width=30)
    totpai.place(x=250,y=325)
    paid.set('Total Paid:')

    due = StringVar()
    bdue = Label(ninetab,text="Balance Due")
    bdue.place(x=250,y=355)
    badue = Entry(ninetab,textvariable=due,width=30)
    badue.place(x=250,y=380)
    due.set('Balance Due')

    receipt_prefix = StringVar()
    pprefix = Label(ninetab,text="Payment Receipt Prefix")
    pprefix.place(x=250,y=410)
    prprefix = Entry(ninetab,textvariable=receipt_prefix,width=30)
    prprefix.place(x=250,y=435)
    receipt_prefix.set('RCPT')


  restrbtn = Button(ninetab,text="Restore defaults",command=restore)
  restrbtn.place(x=290,y=470)


  paidim=LabelFrame(ninetab,text="PAID Image for Invoices (max: 40mm X 25mm)", height=250, width=300)
  paidim.place(x=500, y=100)
  filename_btn=""  
  def upload_btnimg():
    global btnimg,filename_btn
    f_types =[('Png files','*.png'),('Jpg Files', '*.jpg')]
    filename_btn= filedialog.askopenfilename(filetypes=f_types)
    shutil.copyfile(filename_btn, os.getcwd()+'/images/'+filename_btn.split('/')[-1])
    image = Image.open(filename_btn)
    resize_image = image.resize((280, 160))
    btnimg = ImageTk.PhotoImage(resize_image)
   # b2 = Button(ninetab,image=img)
   # b2.place(x=130, y=80)
    
    btlogo = Button(ninetab,width=280,height=160,image=btnimg)
    btlogo.place(x=505,y=120)
    
  try:
    image = Image.open("images/"+padata[19])
    resize_image = image.resize((280, 160))
    image = ImageTk.PhotoImage(resize_image)
    btlogoi = Button(ninetab,width=280,height=160,image=image)
    btlogoi.place(x=505,y=120)
    btlogoi.photo = image
  except:
    pass
 
  def paid_logo():

    paid_sett = Image.open("images/paid.png")
    resize_image_paid = paid_sett.resize((280, 160))
    paid_sett = ImageTk.PhotoImage(resize_image_paid)
    btclogo = Button(ninetab,width=280,height=160,image=paid_sett)
    btclogo.place(x=505,y=120)
    btclogo.photo = paid_sett
    
  btnimg = BooleanVar()      
  btloadima = Button(ninetab,text="Load logo image",command=upload_btnimg)
  btloadima.place(x=510,y=310)

  restrbttn = Button(ninetab,text="Restore defaults",command=paid_logo)
  restrbttn.place(x=690,y=310)


  butnimg=LabelFrame(ninetab,text="PayPal Image for Invoices (max: 40mm X 10mm)", height=130, width=300)
  butnimg.place(x=500, y=370)
    
  def upload_fileimg_logo():
    global logo_img,filename_logo
    f_types =[('Png files','*.png'),('Jpg Files', '*.jpg')]
    filename_logo = filedialog.askopenfilename(filetypes=f_types)
    shutil.copyfile(filename_logo, os.getcwd()+'/images/'+filename_logo.split('/')[-1])
    image = Image.open(filename_logo)
    resize_image = image.resize((280, 55))
    logo_img = ImageTk.PhotoImage(resize_image)
    # b2 = Button(secondtab,image=img)
    # b2.place(x=130, y=80)
    
    btlogo = Button(ninetab,width=280,height=55,image=logo_img)
    btlogo.place(x=506,y=390)

  try:
    image = Image.open("images/"+padata[18])
    resize_image = image.resize((280, 55))
    image = ImageTk.PhotoImage(resize_image)
    bt_logo = Button(ninetab,width=280,height=55,image=image)
    bt_logo.place(x=506,y=390)
    bt_logo.photo = image
  except:
    pass
    

  
    
  def paynow_logo():
      image_paynow = Image.open("images/paynow.png")
      resize_image_paynow = image_paynow.resize((280, 55))
      image_paynow = ImageTk.PhotoImage(resize_image_paynow)
      btlogoi = Button(ninetab,width=280,height=55,image=image_paynow)
      btlogoi.place(x=506,y=390)
      btlogoi.photo = image_paynow

    
  btloadima = Button(ninetab,text="Load logo image",command=upload_fileimg_logo)
  btloadima.place(x=510,y=460)

  restrbttn = Button(ninetab,text="Restore defaults",command=paynow_logo)
  restrbttn.place(x=690,y=460)


  ################### tab010 ###################################

  tentab1=Frame(tab010, relief=GROOVE, bg="#f8f8f2")
  tentab1.pack(side="top", fill=BOTH)

  tentab=Frame(tentab1, bg="#f5f3f2", height=700)
  tentab.pack(side="top", fill=BOTH)


  sql = "select * from company"
  fbcursor.execute(sql)
  podata = fbcursor.fetchone()
  

  pver = Label(tentab,text="Purchase order# prefix")
  pver.place(x=15,y=25)

  prefix_str = StringVar()
  pre_entry = Entry(tentab,textvariable=prefix_str)
  pre_entry.place(x=16,y=50)
  if not podata:
    prefix_str.set('P.ORD')
  else:
    pre_entry.insert(0, podata[41])


  ver1 = Label(tentab,text="Starting purchase order number")
  ver1.place(x=15,y=75)

  def spincall(input):
        
    if input.isdigit():
      print(input)
      return True

    elif input is  "":
      print(input)
      return True

    else:
      print(input)
      return False
    

  pspin2 = Spinbox(tentab,from_=0,to=1000000,width=16)
  regi = tentab.register(spincall)

  pspin2.config(validate = "key",
               validatecommand = (regi, '%S'))
  if not podata:
    pass
  else:
    pspin2.delete(0,END)
    pspin2.insert(0,podata[43])
    pspin2.place(x=16,y=100)

    
              

  ver2 = Label(tentab,text="Header box background color")
  ver2.place(x=15,y=140)

  pwin_menu = StringVar()
  colbox = ttk.Combobox(tentab,textvariable=pwin_menu,width=27)
 # pord_win = pwin_menu.get()
  colbox['values'] = ('Default','Black','Maroon','Green','Olive','Navy','Purple','Teal','Gray','Silver','Red','Lime','Yellow','Blue','Fuchsia','Aqua','White','ScrollBar','Background','ActiveCaption','InactiveCaption','Menu','Window','WindowFrame','MenuText','WindowText','CaptionText','ActiveBorder','InactiveBorder','AppWorkSpace','Highlight','HighlightText','BtnFace','InactiveCaptionText','BtnHighlight','3DDkShadow','3DLight','InfoText','InfoBk','Custom')
  if not podata:
    colbox.current(2)
  else:
    colbox.insert(0, podata[42])
  colbox.place(x=15 ,y=160)

  ver3 = Label(tentab,text="Customize purchase order text labels")
  ver3.place(x=15,y=190)

  pord_str1 = StringVar() 
  pord_lbx1 = Entry(tentab, width=30,textvariable=pord_str1)
  if not podata:
    pord_str1.set('Purchase Order')
  else:
    pord_lbx1.insert(0, podata[44])
  pord_lbx1.place(x=15,y=220)
  

  pord_str2 = StringVar() 
  pord_lbx2 = Entry(tentab, width=30,textvariable=pord_str2)
  if not podata:
    pord_str2.set('P.Order#')
  else:
    pord_lbx2.insert(0, podata[45])
  pord_lbx2.place(x=15,y=240)

  pord_str3 = StringVar() 
  pord_lbx3 = Entry(tentab,width=30,textvariable=pord_str3)
  if not podata:
    pord_str3.set('P.Order Date')
  else:
    pord_lbx3.insert(0, podata[46])
  pord_lbx3.place(x=15,y=260)

  pord_str4 = StringVar() 
  pord_lbx4 = Entry(tentab,width=30,
  textvariable=pord_str4)
  if not podata:
    pord_str4.set('Due date')
  else:
    pord_lbx4.insert(0, podata[47])
  pord_lbx4.place(x=15,y=280)


  pord_str5 = StringVar() 
  pord_lbx5 = Entry(tentab,width=30,textvariable=pord_str5)
  if not podata:
    pord_str5.set('Vendor')
  else:
    pord_lbx5.insert(0, podata[48])
  pord_lbx5.place(x=15,y=300)

  pord_str6 = StringVar() 
  pord_lbx6 = Entry(tentab, width=30,textvariable=pord_str6)
  if not podata:
    pord_str6.set('Delivery to')
  else:
    pord_lbx6.insert(0, podata[49])
  pord_lbx6.place(x=15,y=320)

  pord_str7 = StringVar() 
  pord_lbx7 = Entry(tentab, width=30,textvariable=pord_str7)
  if not podata:
    pord_str7.set('P.Order total')
  else:
    pord_lbx7.insert(0, podata[50])
  pord_lbx7.place(x=15,y=340)


  pmessagelbframe=LabelFrame(tentab,text="Predefined terms and conditions text for purchase orders",height=70, width=980)
  pmessagelbframe.place(x=248, y=396)

  pord_str8= scrolledtext.ScrolledText(tentab)
  if not podata:
    pass
  else:
    pord_str8.insert('1.0', podata[51])
  pord_str8.place(x=260,y=415,height=38,width=950)



  def restore_default_pord():
        pord_lbx1.delete(0, 'end')
        pord_lbx1.insert(0, 'Purchase Order')
        pord_lbx2.delete(0, 'end')
        pord_lbx2.insert(0, 'P.Order#')
        pord_lbx3.delete(0, 'end')
        pord_lbx3.insert(0, 'P.Order Date')
        pord_lbx4.delete(0, 'end')
        pord_lbx4.insert(0, 'Due date')
        pord_lbx5.delete(0, 'end')
        pord_lbx5.insert(0, 'Vendor')
        pord_lbx6.delete(0, 'end')
        pord_lbx6.insert(0, 'Delivery to')
        pord_lbx7.delete(0, 'end')
        pord_lbx7.insert(0, 'P.Order total')



  bttermadd1 = Button(tentab,text="Restore defaults",command=restore_default_pord)
  bttermadd1.place(x=45,y=430)



  sql = "select * from company"
  fbcursor.execute(sql)
  podata = fbcursor.fetchone()

    
  frame = Frame(tentab, width=953, height=300)
  frame.pack(expand=True, fill=BOTH)
  frame.place(x=247,y=90)
  canvas=Canvas(frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
              
  vertibar=Scrollbar(frame, orient=VERTICAL)
  vertibar.pack(side=RIGHT,fill=Y)
  vertibar.config(command=canvas.yview)
          
  canvas.config(width=953,height=300)
  canvas.config(yscrollcommand=vertibar.set)
  canvas.pack(expand=True,side=LEFT,fill=BOTH)
  canvas.create_rectangle(100, 8, 850, 687 , outline='yellow',fill='white')
  canvas.create_text(500, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
  try:
    pord_image = Image.open("images/"+podata[13])
    pord_resize_image = pord_image.resize((200,100))
    pord_image = ImageTk.PhotoImage(pord_resize_image)

    pord_btlogo = Label(canvas,width=200,height=100,image = pord_image) 
    window_image = canvas.create_window(175, 45, anchor="nw", window=pord_btlogo)
    pord_btlogo.photo = pord_image
  except:
      pass  
  canvas.create_text(202, 160, text=""+pord_str2.get(), fill="black", font=('Helvetica 11'))
  canvas.create_text(215, 180, text=""+pord_str3.get(), fill="black", font=('Helvetica 11'))
  canvas.create_text(200, 200, text=""+pord_str4.get(), fill="black", font=('Helvetica 11'))
  canvas.create_text(191, 220, text="Terms", fill="black", font=('Helvetica 11'))
  canvas.create_text(205, 240, text="Order ref.#", fill="black", font=('Helvetica 11'))
  canvas.create_text(350, 160, text="PORD/2022", fill="black", font=('Helvetica 11'))
  canvas.create_text(350, 180, text="05-05-2022", fill="black", font=('Helvetica 11'))
  canvas.create_text(350, 200, text="20-05-2022", fill="black", font=('Helvetica 11'))
  canvas.create_text(340, 220, text="NET 15", fill="black", font=('Helvetica 11'))
          
  canvas.create_text(720, 60, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
          # canvas.create_text(700, 200, text=""+caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'), width=125)
  PT_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
  PT_address.tag_configure('tag_name',justify='right')
  PT_address.insert('1.0', podata[2])
  PT_address.tag_add('tag_name','1.0', 'end')
  PT_address_window = canvas.create_window(520, 80, anchor="nw", window=PT_address)
  canvas.create_text(695, 180, text=" "+comsalestax.get(), fill="black", font=('Helvetica 10'))
  canvas.create_text(700, 205, text=" "+pord_str1.get(), fill="black", font=('Helvetica 14 bold'))
  canvas.create_text(706, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
            
  canvas.create_text(210, 260, text=""+pord_str5.get(), fill="black", font=('Helvetica 10 underline'))
  canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
  canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
  canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
  canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
  canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
  canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
  canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
  canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
  canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
        
  s = ttk.Style()
  s.configure('mystyle_2.Treeview.Heading', background=''+pwin_menu.get(),State='DISABLE')

  tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_2.Treeview')

  tree.column("# 1", anchor=E, stretch=NO, width=100)
  tree.heading("# 1", text="ID/SKU")
  tree.column("# 2", anchor=E, stretch=NO, width=350)
  tree.heading("# 2", text="Product/Service - Description")
  tree.column("# 3", anchor=E, stretch=NO, width=80)
  tree.heading("# 3", text="Quantity")
  tree.column("# 4", anchor=E, stretch=NO, width=90)
  tree.heading("# 4", text="Unit Price")
  tree.column("# 5", anchor=E, stretch=NO, width=80)
  tree.heading("# 5", text="Price")
            
  window = canvas.create_window(120, 340, anchor="nw", window=tree)

  canvas.create_line(120, 390, 820, 390 )
  canvas.create_line(120, 340, 120, 365 )
  canvas.create_line(120, 365, 120, 390 )
  canvas.create_line(820, 340, 820, 540 )
  canvas.create_line(740, 340, 740, 540 )
  canvas.create_line(570, 340, 570, 540 )
  canvas.create_line(570, 415, 820, 415 )
  canvas.create_line(570, 440, 820, 440 )
  canvas.create_line(570, 465, 820, 465 )
  canvas.create_line(570, 490, 820, 490 )
  canvas.create_line(570, 515, 820, 515 )
  canvas.create_line(650, 340, 650, 390 )
  canvas.create_line(220, 340, 220, 390 )
  canvas.create_line(570, 540, 820, 540 )

  canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
  canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
  canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
      
  if comcursignpla.get() == "before amount":
    canvas.create_text(704, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

  elif comcursignpla.get() == "after amount":
    canvas.create_text(704, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

  elif comcursignpla.get() == "before amount with space":
    canvas.create_text(704, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

  elif comcursignpla.get() == "after amount with space":
    canvas.create_text(704, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))

  else:
    pass
          # canvas.create_text(704, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
  if comcursignpla.get() == "before amount":
    canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

  elif comcursignpla.get() == "after amount":
    canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

  elif comcursignpla.get() == "before amount with space":
    canvas.create_text(784, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

  elif comcursignpla.get() == "after amount with space":
    canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
  else:
    pass
      
          # canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

  canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
  if comcursignpla.get() == "before amount":
    canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
  elif comcursignpla.get() == "after amount":
    canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

  elif comcursignpla.get() == "before amount with space":
    canvas.create_text(784, 404, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
  elif comcursignpla.get() == "after amount with space":
    canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
  else:
    pass
          # canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

  canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))

  if comcursignpla.get() == "before amount":
    canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
  elif comcursignpla.get() == "after amount":
    canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
  elif comcursignpla.get() == "before amount with space":
    canvas.create_text(786, 428, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
  elif comcursignpla.get() == "after amount with space":
    canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
  else:
    pass
          # canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

  canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
          
  if comcursignpla.get() == "before amount":
    canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
  elif comcursignpla.get() == "after amount":
    canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
  elif comcursignpla.get() == "before amount with space":
    canvas.create_text(786, 454, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
  elif comcursignpla.get() == "after amount with space":
    canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
  else:
    pass

          # canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

  if comcursignpla.get() == "before amount":
    canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
  elif comcursignpla.get() == "after amount":
    canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10 bold'))
  elif comcursignpla.get() == "before amount with space":
    canvas.create_text(784, 479, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
  elif comcursignpla.get() == "after amount with space":
    canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10 bold'))
  else:
    pass

          # canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
  canvas.create_text(650, 479, text=""+pord_str6.get(), fill="black", font=('Helvetica 10 bold'))
  if comcursignpla.get() == "before amount":
    canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
  elif comcursignpla.get() == "after amount":
    canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
  elif comcursignpla.get() == "before amount with space":
    canvas.create_text(784, 502, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
  elif comcursignpla.get() == "after amount with space":
    canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
  else:
    pass

          # canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
  canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))
          
  if comcursignpla.get() == "before amount":
    canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
  elif comcursignpla.get() == "after amount":
    canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
  elif comcursignpla.get() == "before amount with space":
    canvas.create_text(784, 526, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
  elif comcursignpla.get() == "after amount with space":
    canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
  else:
    pass
          # canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
  canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

  canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
  canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
  canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
  canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
            
  canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
  canvas.create_line(150, 608, 795, 608)
          # canvas.create_text(280, 640, text= ""+est_str7.get(), fill="black", font=('Helvetica 10')) 
  PT = Text(canvas, height=3, width=90, font=('Helvetica 10'),borderwidth=0)
  PT.insert('1.0', pord_str8.get('1.0', END))
  PT_window = canvas.create_window(155, 612, anchor="nw", window=PT)

  canvas.create_text(280, 670, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
  canvas.create_text(720, 670, text="Page 1 of 1", fill="black", font=('Helvetica 10')) 

  def refresh():
    sql = "select * from company"
    fbcursor.execute(sql)
    podata1 = fbcursor.fetchone()

    frame = Frame(tentab, width=953, height=300)
    frame.pack(expand=True, fill=BOTH)
    frame.place(x=247,y=90)
    canvas=Canvas(frame, bg='grey', width=953, height=300, scrollregion=(0,0,700,700))
                
    vertibar=Scrollbar(frame, orient=VERTICAL)
    vertibar.pack(side=RIGHT,fill=Y)
    vertibar.config(command=canvas.yview)
            
    canvas.config(width=953,height=300)
    canvas.config(yscrollcommand=vertibar.set)
    canvas.pack(expand=True,side=LEFT,fill=BOTH)
    canvas.create_rectangle(100, 8, 850, 687 , outline='yellow',fill='white')
    canvas.create_text(500, 25, text="Title text goes here...", fill="black", font=('Helvetica 10'))
    try:
      pord_image = Image.open("images/"+podata1[13])
      pord_resize_image = pord_image.resize((200,100))
      pord_image = ImageTk.PhotoImage(pord_resize_image)

      pord_btlogo = Label(canvas,width=200,height=100,image = pord_image) 
      window_image = canvas.create_window(175, 45, anchor="nw", window=pord_btlogo)
      pord_btlogo.photo = pord_image
    except:
        pass  
    canvas.create_text(202, 160, text=""+pord_str2.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(215, 180, text=""+pord_str3.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(200, 200, text=""+pord_str4.get(), fill="black", font=('Helvetica 11'))
    canvas.create_text(191, 220, text="Terms", fill="black", font=('Helvetica 11'))
    canvas.create_text(205, 240, text="Order ref.#", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 160, text="PORD/2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 180, text="05-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(350, 200, text="20-05-2022", fill="black", font=('Helvetica 11'))
    canvas.create_text(340, 220, text="NET 15", fill="black", font=('Helvetica 11'))
            
    canvas.create_text(720, 60, text=" "+comname.get(), fill="black", font=('Helvetica 12 '))
            # canvas.create_text(700, 200, text=""+caddent.get('1.0', 'end-1c'), fill="black", font=('Helvetica 10'), width=125)
    PT_address = Text(canvas, height=5, width=40, font=('Helvetica 10'),borderwidth=0)
    PT_address.tag_configure('tag_name',justify='right')
    PT_address.insert('1.0', podata1[2])
    PT_address.tag_add('tag_name','1.0', 'end')
    PT_address_window = canvas.create_window(520, 80, anchor="nw", window=PT_address)
    canvas.create_text(695, 180, text=" "+comsalestax.get(), fill="black", font=('Helvetica 10'))
    canvas.create_text(700, 205, text=" "+pord_str1.get(), fill="black", font=('Helvetica 14 bold'))
    canvas.create_text(706, 225, text="TAX EXEMPTED", fill="black", font=('Helvetica 10'))
              
    canvas.create_text(210, 260, text=""+pord_str5.get(), fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(203, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(246, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(255, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(215, 325, text="United States", fill="black", font=('Helvetica 10'))
    canvas.create_text(550, 260, text="Ship to", fill="black", font=('Helvetica 10 underline'))
    canvas.create_text(556, 280, text="John Doe", fill="black", font=('Helvetica 10 '))
    canvas.create_text(598, 295, text="381 South Bedford Road", fill="black", font=('Helvetica 10'))
    canvas.create_text(608, 310, text="Bedford Corners, NY 10549", fill="black", font=('Helvetica 10'))
    canvas.create_text(568, 325, text="United States", fill="black", font=('Helvetica 10'))
          
    s = ttk.Style()
    s.configure('mystyle_2.Treeview.Heading', background=''+pwin_menu.get(),State='DISABLE')

    tree=ttk.Treeview(canvas, column=("c1", "c2","c3", "c4", "c5"), show='headings',height= 0, style='mystyle_2.Treeview')

    tree.column("# 1", anchor=E, stretch=NO, width=100)
    tree.heading("# 1", text="ID/SKU")
    tree.column("# 2", anchor=E, stretch=NO, width=350)
    tree.heading("# 2", text="Product/Service - Description")
    tree.column("# 3", anchor=E, stretch=NO, width=80)
    tree.heading("# 3", text="Quantity")
    tree.column("# 4", anchor=E, stretch=NO, width=90)
    tree.heading("# 4", text="Unit Price")
    tree.column("# 5", anchor=E, stretch=NO, width=80)
    tree.heading("# 5", text="Price")
              
    window = canvas.create_window(120, 340, anchor="nw", window=tree)

    canvas.create_line(120, 390, 820, 390 )
    canvas.create_line(120, 340, 120, 365 )
    canvas.create_line(120, 365, 120, 390 )
    canvas.create_line(820, 340, 820, 540 )
    canvas.create_line(740, 340, 740, 540 )
    canvas.create_line(570, 340, 570, 540 )
    canvas.create_line(570, 415, 820, 415 )
    canvas.create_line(570, 440, 820, 440 )
    canvas.create_line(570, 465, 820, 465 )
    canvas.create_line(570, 490, 820, 490 )
    canvas.create_line(570, 515, 820, 515 )
    canvas.create_line(650, 340, 650, 390 )
    canvas.create_line(220, 340, 220, 390 )
    canvas.create_line(570, 540, 820, 540 )

    canvas.create_text(165, 372, text="PROD-0001", fill="black", font=('Helvetica 10'))
    canvas.create_text(370, 372, text="Example product - Description text...", fill="black", font=('Helvetica 10'))
    canvas.create_text(610, 372, text="1", fill="black", font=('Helvetica 10'))
        
    if comcursignpla.get() == "before amount":
      canvas.create_text(704, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "after amount":
      canvas.create_text(704, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(704, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(704, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))

    else:
      pass
            # canvas.create_text(704, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 372, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 372, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
        
            # canvas.create_text(784, 372, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 404, text="Subtotal", fill="black", font=('Helvetica 10'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))

    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 404, text=""+comcursign.get()+" 200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 404, text="200"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
            # canvas.create_text(784, 404, text=""+comcursign.get()+"200"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 428, text="TAX1", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(786, 428, text=""+comcursign.get()+" 18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(786, 428, text="18"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
            # canvas.create_text(786, 428, text=""+comcursign.get()+"18"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    canvas.create_text(650, 454, text="Shipping and handling", fill="black", font=('Helvetica 10'))
            
    if comcursignpla.get() == "before amount":
      canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(786, 454, text=""+comcursign.get()+" 20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(786, 454, text="20"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

            # canvas.create_text(786, 454, text=""+comcursign.get()+"20"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))

    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10 bold'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 479, text=""+comcursign.get()+" 238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 479, text="238"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10 bold'))
    else:
      pass

            # canvas.create_text(784, 479, text=""+comcursign.get()+"238"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10 bold'))
    canvas.create_text(650, 479, text=""+pord_str6.get(), fill="black", font=('Helvetica 10 bold'))
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 502, text=""+comcursign.get()+" 100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 502, text="100"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass

            # canvas.create_text(784, 502, text=""+comcursign.get()+"100"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(650, 502, text="Total Paid", fill="black", font=('Helvetica 10'))
            
    if comcursignpla.get() == "before amount":
      canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount":
      canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00"+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "before amount with space":
      canvas.create_text(784, 526, text=""+comcursign.get()+" 138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    elif comcursignpla.get() == "after amount with space":
      canvas.create_text(784, 526, text="138"+""+comdecsep.get()+"00 "+""+comcursign.get(), fill="black", font=('Helvetica 10'))
    else:
      pass
            # canvas.create_text(784, 526, text=""+comcursign.get()+"138"+""+comdecsep.get()+"00", fill="black", font=('Helvetica 10'))
    canvas.create_text(650, 526, text="Balance", fill="black", font=('Helvetica 10'))

    canvas.create_text(275, 550, text="Multiline comment text goes here..", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 560, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 570, text="...", fill="black", font=('Helvetica 10'))
    canvas.create_text(182, 580, text="...", fill="black", font=('Helvetica 10'))
              
    canvas.create_text(500, 600, text="Terms and Conditions", fill="black", font=('Helvetica 10'))
    canvas.create_line(150, 608, 795, 608)
            # canvas.create_text(280, 640, text= ""+est_str7.get(), fill="black", font=('Helvetica 10')) 
    PT = Text(canvas, height=3, width=90, font=('Helvetica 10'),borderwidth=0)
    PT.insert('1.0', pord_str8.get('1.0', END))
    PT_window = canvas.create_window(155, 612, anchor="nw", window=PT)

    canvas.create_text(280, 670, text="Page footer text goes here...", fill="black", font=('Helvetica 10'))
    canvas.create_text(720, 670, text="Page 1 of 1", fill="black", font=('Helvetica 10'))          

  refreshbtn = Button(tentab,text="Refresh",width=15,command=refresh)
  refreshbtn.place(x=1090,y=10)   
    

root.mainloop()

